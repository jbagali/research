Here is a Verilog code for 8 D flip-flops with active high asynchronous reset:

```module top_module (
    input clk,
    input areset,   // active high asynchronous reset
    input [7:0] d,
    output [7:0] q
);

    reg [7:0] d_reg [7:0];
    reg [7:0] q_reg [7:0];

    always @(posedge clk or posedge areset) begin
        if (areset) begin
            d_reg <= 8'h0;
        end else begin
            d_reg <= d;
        end
        q_reg <= d_reg;
    end

    assign q = q_reg;

endmodule
```

The code above uses two registers, `d_reg` and `q_reg`, to store the current and next values of the D flip-flops. The register `d_reg` is updated on the positive edge of the clock signal `clk`, or when the asynchronous reset signal `areset` is asserted. The register `q_reg` is updated on the positive edge of the clock signal `clk`. The output of the D flip-flops is assigned to the signal `q`.