Sure, here is a Verilog code for a 4-bit priority encoder:

```
module top_module (
    input [3:0] in,
    output reg [1:0] pos  );

    // Insert your code here

    always @(in) begin
        case (in)
            4'h0: pos <= 2'b00;
            4'h1: pos <= 2'b01;
            4'h2: pos <= 2'b10;
            4'h3: pos <= 2'b11;
            4'h4: pos <= 2'b00;
            4'h5: pos <= 2'b01;
            4'h6: pos <= 2'b10;
            4'h7: pos <= 2'b11;
            4'h8: pos <= 2'b00;
            4'h9: pos <= 2'b01;
            4'ha: pos <= 2'b10;
            4'hb: pos <= 2'b11;
            4'hc: pos <= 2'b00;
            4'hd: pos <= 2'b01;
            4'he: pos <= 2'b10;
            4'hf: pos <= 2'b11;
        endcase
    end

endmodule
```

This code uses a case statement to select the output value based on the input value. The case statement has 16 cases, one for each possible combination of the input bits. The output value is assigned to the variable `pos`.

When all of the input bits are zero, the output value is zero. This is because the case statement will not match any of the cases, and the default case will be executed. The default case assigns the value zero to `pos`.

When one or more of the input bits are high, the output value will be the value of the case that matches the input value. For example, if the input value is 4'h1, the output value will be 2'b01. This is because the case statement will match the case for the input value of 4'h1, and the output value will be assigned to `pos`.

I hope this helps!