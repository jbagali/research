Sure, here is a Verilog implementation of a 64-bit arithmetic shift register with synchronous load:

```module top_module (
    input clk,
    input load,
    input ena,
    input [1:0] amount,
    input [63:0] data,
    output reg [64:0] q);

    reg [63:0] shift_register;
    reg [63:0] carry;

    always @(posedge clk) begin
        if (load) begin
            shift_register <= data;
        end else if (ena) begin
            case (amount)
                2'b00: shift_register <= shift_register << 1;
                2'b01: shift_register <= shift_register << 8;
                2'b10: shift_register <= shift_register >> 1;
                2'b11: shift_register <= shift_register >> 8;
            endcase
        end
    end

    assign q = shift_register;
endmodule
```

This module has four inputs: clk, load, ena, and amount. clk is the clock signal, load is a control signal that indicates whether to load the shift register with data, ena is a control signal that indicates whether to shift the shift register, and amount is a two-bit field that specifies the amount of the shift.

The module has four outputs: q, which is the contents of the shift register, carry, which is a flag that indicates whether the shift resulted in a carry, and shift_register, which is the internal state of the shift register.

The always block is the heart of the module. It is responsible for shifting the contents of the shift register and updating the carry flag. The always block is clocked by clk. If load is asserted, the shift register is loaded with data. Otherwise, if ena is asserted, the shift register is shifted according to the value of amount. The amount field specifies the amount of the shift. If amount is 2'b00, the shift register is shifted left by one bit. If amount is 2'b01, the shift register is shifted left by eight bits. If amount is 2'b10, the shift register is shifted right by one bit. If amount is 2'b11, the shift register is shifted right by eight bits.

The carry flag is used to indicate whether the shift resulted in a carry. If the shift resulted in a carry, the carry flag is asserted. Otherwise, the carry flag is cleared.

The output q is the contents of the shift register. The output carry is the carry flag. The output shift_register is the internal state of the shift register.