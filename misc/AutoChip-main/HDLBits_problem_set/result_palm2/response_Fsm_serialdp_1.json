Sure, here is the code for the serial receiver with odd parity checking:

```module top_module(
    input clk,
    input in,
    input reset,    // Synchronous reset
    output [7:0] out_byte,
    output done
); //

    // Insert your code below

    // Modify FSM and datapath from Fsm_serialdata

    // New: Add parity checking.

    // The FSM has the following states:
    //   - S0: Start bit detected.
    //   - S1: Data bits being received.
    //   - S2: Parity bit being received.
    //   - S3: Stop bit detected.
    //   - S4: Error.

    // The datapath consists of the following registers:
    //   - bit_8: The current data bit.
    //   - bit_9: The parity bit.
    //   - state: The current state of the FSM.
    //   - done: Asserted when a byte is correctly received and its parity check passes.

    // The following code implements the FSM and datapath.

    reg [7:0] bit_8;
    reg bit_9;
    reg state;
    reg done;

    always @(posedge clk) begin
        if (reset) begin
            state <= S0;
            bit_8 <= 0;
            bit_9 <= 0;
            done <= 0;
        end else begin
            case (state)
                S0: begin
                    if (in) begin
                        state <= S1;
                        bit_8 <= in;
                    end
                end
                S1: begin
                    if (in) begin
                        state <= S2;
                        bit_9 <= in;
                    end else begin
                        state <= S3;
                    end
                end
                S2: begin
                    if (in) begin
                        state <= S3;
                        bit_9 <= in;
                    end else begin
                        state <= S4;
                    end
                end
                S3: begin
                    if (!in) begin
                        if (bit_9 ^ (bit_8 & ~bit_9)) begin
                            state <= S4;
                        end else begin
                            state <= S0;
                            done <= 1;
                        end
                    end
                end
                S4: begin
                    state <= S0;
                end
            endcase
        end
    end

    // The following code connects the FSM and datapath to the output signals.

    out_byte <= bit_8[7:0];
    done <= done;

endmodule
```

I hope this is helpful!