Sure, here is a Verilog code that builds an XOR gate three ways, using an assign statement, a combinational always block, and a clocked always block:

```
module top_module(
    input clk,
    input a,
    input b,
    output wire out_assign,
    output reg out_always_comb,
    output reg out_always_ff   );

    // Assign statement
    out_assign = a ^ b;

    // Combinational always block
    always @(posedge clk) begin
        out_always_comb <= a ^ b;
    end

    // Clocked always block
    always @(posedge clk) begin
        if (rising_edge(clk)) begin
            out_always_ff <= a ^ b;
        end
    end

endmodule
```

I hope this helps! Let me know if you have any other questions.