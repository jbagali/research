Here is a possible implementation of a 3-bit binary ripple-carry adder in Verilog:

```module top_module (
    input [2:0] a,
    input [2:0] b,
    input cin,
    output [2:0] cout,
    output [2:0] sum
);

    full_adder fa1 (
        a[0], b[0], cin, cout[0], sum[0]
    );
    full_adder fa2 (
        a[1], b[1], cout[0], cout[1], sum[1]
    );
    full_adder fa3 (
        a[2], b[2], cout[1], cout[2], sum[2]
    );

endmodule
```

The full adder is a basic building block of digital circuits that can be used to add two binary numbers. It has three inputs: two numbers (a and b) and a carry-in (cin). It also has two outputs: a sum (sum) and a carry-out (cout).

The operation of the full adder is as follows:

1. The two numbers (a and b) are added together using the following rules:

    * If both numbers are 0, the sum is 0.
    * If one number is 1 and the other number is 0, the sum is 1.
    * If both numbers are 1, the sum is 0 and the carry-out is 1.

2. The carry-in (cin) is added to the sum. If the carry-in is 1, the sum is incremented by 1.

3. The result of the addition is stored in the sum output (sum).

4. The carry-out (cout) is the carry that is generated from the addition. It is used as the carry-in for the next full adder in the chain.

In the above example, the 3-bit binary ripple-carry adder is implemented using three full adders. The carry-out from the first full adder is used as the carry-in for the second full adder, and the carry-out from the second full adder is used as the carry-in for the third full adder. The final carry-out from the third full adder is the carry-out of the entire adder.

The sum of the two 3-bit numbers (a and b) is stored in the sum output (sum). The carry-out of the entire adder is stored in the carry-out output (cout).