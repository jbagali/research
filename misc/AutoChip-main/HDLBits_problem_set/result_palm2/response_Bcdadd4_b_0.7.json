Here is a 4-digit BCD ripple-carry adder:

```module top_module ( 
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum );

    bcd_fadd bcd_fadd1 (
        input [3:0] a1,
        input [3:0] b1,
        input     cin1,
        output   cout1,
        output [3:0] sum1 );

    bcd_fadd bcd_fadd2 (
        input [3:0] a2,
        input [3:0] b2,
        input     cin2,
        output   cout2,
        output [3:0] sum2 );

    bcd_fadd bcd_fadd3 (
        input [3:0] a3,
        input [3:0] b3,
        input     cin3,
        output   cout3,
        output [3:0] sum3 );

    bcd_fadd bcd_fadd4 (
        input [3:0] a4,
        input [3:0] b4,
        input     cin4,
        output   cout4,
        output [3:0] sum4 );

    assign sum = (bcd_fadd1.sum1 << 12) + (bcd_fadd2.sum2 << 8) + (bcd_fadd3.sum3 << 4) + bcd_fadd4.sum4;
    assign cout = bcd_fadd1.cout1 | bcd_fadd2.cout2 | bcd_fadd3.cout3 | bcd_fadd4.cout4;

endmodule
```

The 4-digit BCD ripple-carry adder works by adding the two 4-digit BCD numbers, a and b, one digit at a time. The carry-in, cin, is used to propagate the carry from one digit to the next. The sum of each digit is stored in the corresponding output register, and the carry-out is stored in the cout output.

The bcd_fadd module is a 1-digit BCD adder. It takes two BCD digits, a and b, and a carry-in, cin, and produces a sum, sum, and a carry-out, cout. The bcd_fadd module is implemented using a 4-bit adder, a 1-bit OR gate, and a 1-bit AND gate.

The 4-bit adder is used to add the two BCD digits, a and b. The 1-bit OR gate is used to combine the carry-in, cin, and the carry from the 4-bit adder to produce the carry-out, cout. The 1-bit AND gate is used to combine the sum of the 4-bit adder and the carry-out, cout, to produce the sum, sum.

The bcd_fadd module is used to add the two 4-digit BCD numbers, a and b, one digit at a time. The carry-in, cin, is used to propagate the carry from one digit to the next. The sum of each digit is stored in the corresponding output register, and the carry-out is stored in the cout output.