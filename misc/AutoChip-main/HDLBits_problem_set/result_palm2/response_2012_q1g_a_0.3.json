The function $f$ can be implemented using a 4-to-1 multiplexer. The multiplexer has four inputs, $x_1$, $x_2$, $x_3$, and $x_4$, and one output, $f$. The inputs are connected to the four possible combinations of the four variables. The output is connected to the output of the function, which is determined by the value of the four variables.

The multiplexer can be implemented using a combination of AND gates, OR gates, and NOT gates. The AND gates are used to select the appropriate input for the multiplexer. The OR gates are used to combine the selected input with the other inputs. The NOT gates are used to invert the selected input.

The following is a circuit diagram of a 4-to-1 multiplexer implemented using AND gates, OR gates, and NOT gates:

[Image of a 4-to-1 multiplexer implemented using AND gates, OR gates, and NOT gates]

The following is a truth table for the 4-to-1 multiplexer:

| x1 | x2 | x3 | x4 | f |
|---|---|---|---|---|
| 0 | 0 | 0 | 0 | 0 |
| 0 | 0 | 0 | 1 | 1 |
| 0 | 0 | 1 | 0 | 1 |
| 0 | 0 | 1 | 1 | 0 |
| 0 | 1 | 0 | 0 | 1 |
| 0 | 1 | 0 | 1 | 0 |
| 0 | 1 | 1 | 0 | 0 |
| 0 | 1 | 1 | 1 | 1 |
| 1 | 0 | 0 | 0 | 0 |
| 1 | 0 | 0 | 1 | 1 |
| 1 | 0 | 1 | 0 | 1 |
| 1 | 0 | 1 | 1 | 0 |
| 1 | 1 | 0 | 0 | 1 |
| 1 | 1 | 0 | 1 | 0 |
| 1 | 1 | 1 | 0 | 0 |
| 1 | 1 | 1 | 1 | 1 |

The following is a VHDL code for a 4-to-1 multiplexer:

```module multiplexer (
    input wire [3:0] x,
    input wire [1:0] sel,
    output wire f
);

    always @(sel or x) begin
        case (sel)
            2'b00: f <= x[0];
            2'b01: f <= x[1];
            2'b10: f <= x[2];
            2'b11: f <= x[3];
        endcase
    end

endmodule
```

The following is a Verilog code for a 4-to-1 multiplexer:

```module multiplexer (
    input wire [3:0] x,
    input wire [1:0] sel,
    output wire f
);

    always @(sel or x) begin
        case (sel)
            2'b00: f <= x[0];
            2'b01: f <= x[1];
            2'b10: f <= x[2];
            2'b11: f <= x[3];
        endcase
    end

endmodule
```