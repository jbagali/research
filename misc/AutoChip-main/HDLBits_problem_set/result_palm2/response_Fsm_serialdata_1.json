module top_module(
    input clk,
    input in,
    input reset,    // Synchronous reset
    output [7:0] out_byte,
    output done
); //

	// Insert your code below
	
    // Use FSM from Fsm_serial

    // New: Datapath to latch input bits.

    reg [7:0] data_byte;
    reg state;
    reg start_bit;
    reg [7:0] data;
    reg stop_bit;

    always @(posedge clk or negedge reset) begin
        if (reset) begin
            state <= IDLE;
        end else begin
            case (state)
                IDLE: begin
                    if (in == '1') begin
                        state <= START_BIT;
                    end
                end
                START_BIT: begin
                    if (in == '1') begin
                        state <= DATA_BIT;
                        data <= 0;
                    end else begin
                        state <= IDLE;
                    end
                end
                DATA_BIT: begin
                    if (in == '1') begin
                        data <= data + '1';
                    end else begin
                        if (data == 8'h00) begin
                            state <= STOP_BIT;
                        end else begin
                            state <= IDLE;
                        end
                    end
                end
                STOP_BIT: begin
                    if (in == '1') begin
                        state <= IDLE;
                    end else begin
                        state <= DONE;
                        data_byte <= data;
                    end
                end
            endcase
        end
    end

    assign out_byte = data_byte;
    assign done = state == DONE;

endmodule