Area,Delay,Score,Current Run,Episode,Verilog
N/A,N/A,-1,2.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1, c2, c3, c4, c5, c6, c7;
  wire [7:0] sum;
  
  nand #(8) n1(c1, in1[0], in2[0]);
  nand #(8) n2(c2, in1[1], in2[1]);
  nand #(8) n3(c3, in1[2], in2[2]);
  nand #(8) n4(c4, in1[3], in2[3]);
  nand #(8) n5(c5, in1[4], in2[4]);
  nand #(8) n6(c6, in1[5], in2[5]);
  nand #(8) n7(c7, in1[6], in2[6]);
  nand #(8) n8(sum[0], in1[7], in2[7]);
  nand #(8) n9(sum[1], c1,    in2[0]);
  nand #(8) n10(sum[2], c2,    in2[1]);
  nand #(8) n11(sum[3], c3,    in2[2]);
  nand #(8) n12(sum[4], c4,    in2[3]);
  nand #(8) n13(sum[5], c5,    in2[4]);
  nand #(8) n14(sum[6], c6,    in2[5]);
  nand #(8) n15(sum[7], c7,    in2[6]);
  nand #(1) n16(cout, c7, c6, c5, c4, c3, c2, c1);
endmodule"
N/A,N/A,-2,3.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);

    wire [7:0] sum;
    wire cout;
    wire [7:0] in1;
    wire [7:0] in2;
    wire cin;

    eight_bit_adder adder(sum, cout, in1, in2, cin);

endmodule

<<<<<<< HEAD
Module eight_bit_adder(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);

    wire [7:0] sum;
    wire cout;
    wire [7:0] in1;
    wire [7:0] in2;
    wire cin;

    wire [7:0] sum;
    wire cout;
    wire [7:0] in1;
    wire [7:0] in2;
    wire cin;

    wire [7:0] sum;
    wire cout;
    wire [7:0] in1;
    wire [7:0] in2;
    wire cin;

    wire [7:0] sum;
    wire cout;
    wire [7:0] in1;
    wire [7:0] in2;
    wire cin;

    wire [7:0] sum;
    wire cout;
    wire [7:0] in1;
    wire [7:0] in2;
    wire cin;

    wire [7:0] sum;
    wire cout;
    wire [7:0] in1;
    wire [7:0] in2;
    wire cin;

    wire [7:0] sum;
    wire cout;
    wire [7:0] in1;
    wire [7:0] in2;
    wire cin;

    wire [7:0] sum;
    wire cout;
    wire [7:0] in1;
    wire [7:0] in2;
    wire cin;

    wire [7:0] sum;
    wire cout;
    wire [7:0] in1;
    wire [7:0] in2;
    wire cin;

    wire [7:0] sum;
    wire cout;
    wire [7:0] in1;
    wire [7:0] in2;
    wire cin;

    wire [7:0] sum;
    wire cout;
    wire [7:0] in1;
    wire [7:0] in2;
    wire cin;

    wire [7:0] sum;
    wire cout;
    wire [7:0] in1;
    wire [7:0] in2;
    wire cin;

    wire [7:0] sum;
    wire cout;
    wire [7:0] in1;
    wire [7:0] in2;
    wire cin;

    wire [7:0] sum;
    wire cout;
    wire [7:0] in1;
    wire [7:0] in2;
    wire cin;

    wire [7:0] sum;
    wire cout;
    wire [7:0] in1;
    wire [7:0] in2;
    wire cin;

    wire [7:0] sum;
    wire cout;
    wire [7:0] in1;
    wire [7:0] in2;
    wire cin;

    wire [7:0] sum;
    wire cout;
    wire [7:0] in1;
    wire [7:0] in2;
    wire cin;

    wire [7:0] sum;
    wire cout;
    wire [7:0] in1;
    wire [7:0] in2;
    wire cin;

    wire [7:0] sum;
    wire cout;
    wire [7:0] in1;
    wire [7:0] in2;
    wire cin;

    wire [7:0] sum;
    wire cout;
    wire [7:0] in1;
    wire [7:0] in2;
    wire cin;

    wire [7:0] sum;
    wire cout;
    wire [7:0] in1;
    wire [7:0] in2;
    wire cin;

    wire [7:0] sum;
    wire cout;
    wire [7:0] in1;
    wire [7:0] in2;
    wire cin;

    wire [7:0] sum;
    wire cout;
    wire [7:0] in1;
    wire [7:0] in2;
    wire cin;

    wire [7:0] sum;
    wire cout;
    wire [7:0] in1;
    wire [7:0] in2;
    wire cin;

    wire [7:0] sum;
    wire cout;
    wire [7:0] in1;
    wire [7:0] in2;
    wire cin;

    wire [7:0] sum;
    wire cout;
    wire [7:0] in1;
    wire [7:0] in2;
    wire cin;

    wire [7:0] sum;
    wire cout;
    wire [7:0] in1;
    wire [7:0] in2;
    wire cin;

    wire [7:0] sum;
    wire cout;
    wire [7:0] in1;
    wire [7:0] in2;
    wire cin;

    wire [7:0] sum;
    wire cout;
    wire [7:0] in1;
    wire [7:0] in2;
    wire cin;

    wire [7:0] sum;
    wire cout;
    wire [7:0] in1;
    wire [7:0] in2;
    wire cin;

    wire [7:0] sum;
    wire cout;
    wire [7:0] in1;
    wire [7:0] in2;
    wire cin;

    wire [7:0] sum;
    wire cout;
    wire [7:0] in1;
    wire [7:0] in2;
    wire cin;

    wire [7:"
N/A,N/A,-2,4.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);    
    
    wire [7:0] carry;
    
    full_adder_8 fa0(sum[0], carry[0], in1[0], in2[0], cin);
    full_adder_8 fa1(sum[1], carry[1], in1[1], in2[1], carry[0]);
    full_adder_8 fa2(sum[2], carry[2], in1[2], in2[2], carry[1]);
    full_adder_8 fa3(sum[3], carry[3], in1[3], in2[3], carry[2]);
    full_adder_8 fa4(sum[4], carry[4], in1[4], in2[4], carry[3]);
    full_adder_8 fa5(sum[5], carry[5], in1[5], in2[5], carry[4]);
    full_adder_8 fa6(sum[6], carry[6], in1[6], in2[6], carry[5]);
    full_adder_8 fa7(sum[7], cout, in1[7], in2[7], carry[6]);
endmodule

module full_adder_8(output sum,
                     output cout,
                     input in1, in2, cin);
    
    wire [7:0] sum_temp;
    wire [7:0] carry;
    
    adder_7 adder_7_0(sum_temp[0], carry[0], in1, in2, cin);
    adder_7 adder_7_1(sum_temp[1], carry[1], in1, in2, carry[0]);
    adder_7 adder_7_2(sum_temp[2], carry[2], in1, in2, carry[1]);
    adder_7 adder_7_3(sum_temp[3], carry[3], in1, in2, carry[2]);
    adder_7 adder_7_4(sum_temp[4], carry[4], in1, in2, carry[3]);
    adder_7 adder_7_5(sum_temp[5], carry[5], in1, in2, carry[4]);
    adder_7 adder_7_6(sum_temp[6], carry[6], in1, in2, carry[5]);
    adder_7 adder_7_7(sum_temp[7], cout, in1, in2, carry[6]);
    
    assign sum = sum_temp[7];
    assign cout = carry[7];
endmodule

module adder_7(output [6:0] sum,
                output cout,
                input [6:0] in1, in2,
                input cin);
    
    wire [6:0] carry;
    
    full_adder_7 fa0(sum[0], carry[0], in1[0], in2[0], cin);
    full_adder_7 fa1(sum[1], carry[1], in1[1], in2[1], carry[0]);
    full_adder_7 fa2(sum[2], carry[2], in1[2], in2[2], carry[1]);
    full_adder_7 fa3(sum[3], carry[3], in1[3], in2[3], carry[2]);
    full_adder_7 fa4(sum[4], carry[4], in1[4], in2[4], carry[3]);
    full_adder_7 fa5(sum[5], carry[5], in1[5], in2[5], carry[4]);
    full_adder_7 fa6(sum[6], cout, in1[6], in2[6], carry[5]);
endmodule

module full_adder_7(output sum,
                     output cout,
                     input in1, in2, cin);
    
    wire [6:0] sum_temp;
    wire [6:0] carry;
    
    adder_6 adder_6_0(sum_temp[0], carry[0], in1, in2, cin);
    adder_6 adder_6_1(sum_temp[1], carry[1], in1, in2, carry[0]);
    adder_6 adder_6_2(sum_temp[2], carry[2], in1, in2, carry[1]);
    adder_6 adder_6_3(sum_temp[3], carry[3], in1, in2, carry[2]);
    adder_6 adder_6_4(sum_temp[4], carry[4], in1, in2, carry[3]);
    adder_6 adder_6_5(sum_temp[5], carry[5], in1, in2, carry[4]);
    adder_6 adder_6_6(sum_temp[6], cout, in1, in2, carry[5]);
    
    assign sum = sum_temp[6];
    assign cout = carry[6];
endmodule

module adder_6(output [5:0] sum,
                output cout,
                input [5:0] in1, in2,
                input cin);
    
    wire [5:0] carry;
    
    full_adder_6 fa0(sum[0], carry[0], in1[0], in2[0], cin);
    full_adder_6 fa1(sum[1], carry[1], in1[1], in2[1], carry[0]);
    full_adder_6 fa2(sum[2], carry[2], in1[2], in2[2], carry[1]);
    full_adder_6 fa3(sum[3], carry[3], in1[3], in2[3], carry[2]);
    full_adder_6 fa4(sum[4], carry[4], in1[4], in2[4], carry[3]);
    full_adder_6 fa5(sum[5], cout, in1[5], in2[5], carry[4]);
endmodule

module full_adder_6(output sum,
                     output cout,
                     input in1, in2, cin);
    
    wire [5:0] sum_temp;
    wire [5:0] carry;
    
    adder_5 adder_5_"
79.534,355.53,0.5,5.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1, c2, c3, c4, c5, c6, c7;
  wire [7:0] sum;
  
  one_bit_full_adder add1(sum[0], c1, in1[0], in2[0], cin);
  one_bit_full_adder add2(sum[1], c2, in1[1], in2[1], c1);
  one_bit_full_adder add3(sum[2], c3, in1[2], in2[2], c2);
  one_bit_full_adder add4(sum[3], c4, in1[3], in2[3], c3);
  one_bit_full_adder add5(sum[4], c5, in1[4], in2[4], c4);
  one_bit_full_adder add6(sum[5], c6, in1[5], in2[5], c5);
  one_bit_full_adder add7(sum[6], c7, in1[6], in2[6], c6);
  one_bit_full_adder add8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module one_bit_full_adder(output sum,
                          output cout,
                          input in1, in2, cin);
  wire x, y, z;
  
  xor(sum, in1, in2, cin);
  and(x, in1, in2);
  and(y, in1, cin);
  and(z, in2, cin);
  or(cout, x, y, z);
endmodule"
73.416,346.83,0.5995112389087581,6.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1, c2, c3, c4, c5, c6, c7;
  wire [7:0] sum;
  
  bitwise_full_adder adder_1(sum[0], c1, in1[0], in2[0], cin);
  bitwise_full_adder adder_2(sum[1], c2, in1[1], in2[1], c1);
  bitwise_full_adder adder_3(sum[2], c3, in1[2], in2[2], c2);
  bitwise_full_adder adder_4(sum[3], c4, in1[3], in2[3], c3);
  bitwise_full_adder adder_5(sum[4], c5, in1[4], in2[4], c4);
  bitwise_full_adder adder_6(sum[5], c6, in1[5], in2[5], c5);
  bitwise_full_adder adder_7(sum[6], c7, in1[6], in2[6], c6);
  bitwise_full_adder adder_8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module bitwise_full_adder(output sum,
                          output cout,
                          input in1, in2, cin);
  wire w1, w2, w3;
  xor(w1, in1, in2);
  xor(sum, w1, cin);
  and(w2, w1, cin);
  and(w3, in1, in2);
  or(cout, w2, w3);
endmodule"
73.416,346.83,0.5995112389087581,7.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1, c2, c3, c4, c5, c6, c7;
  wire [7:0] sum;
  
  two_bit_full_adder add1(sum[0], c1, in1[0], in2[0], cin);
  two_bit_full_adder add2(sum[1], c2, in1[1], in2[1], c1);
  two_bit_full_adder add3(sum[2], c3, in1[2], in2[2], c2);
  two_bit_full_adder add4(sum[3], c4, in1[3], in2[3], c3);
  two_bit_full_adder add5(sum[4], c5, in1[4], in2[4], c4);
  two_bit_full_adder add6(sum[5], c6, in1[5], in2[5], c5);
  two_bit_full_adder add7(sum[6], c7, in1[6], in2[6], c6);
  two_bit_full_adder add8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module two_bit_full_adder(output wire sum,
                          output wire cout,
                          input wire in1, in2, cin);
  wire a, b, c;
  xor(a, in1, in2);
  xor(sum, a, cin);
  and(b, a, cin);
  and(c, in1, in2);
  or(cout, b, c);
endmodule"
N/A,N/A,-1,8.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);

wire c1, c2, c3, c4, c5, c6, c7;

sum_8bit u1(sum[7:0], in1[7:0], in2[7:0], cin);

and u2(c1, in1[7], in2[7]);
and u3(c2, in1[7], cin);
and u4(c3, in2[7], cin);
or u5(c4, in1[7], in2[7]);
or u6(c5, in1[7], cin);
or u7(c6, in2[7], cin);
or u8(c7, c4, c5, c6);

and u9(cout, c7, cin);

endmodule

module sum_8bit(output [7:0] sum,
                  input [7:0] in1, in2,
                  input cin);

wire c1, c2, c3, c4, c5, c6, c7;

xor u1(sum[0], in1[0], in2[0], cin);
xor u2(sum[1], in1[1], in2[1], c1);
xor u3(sum[2], in1[2], in2[2], c2);
xor u4(sum[3], in1[3], in2[3], c3);
xor u5(sum[4], in1[4], in2[4], c4);
xor u6(sum[5], in1[5], in2[5], c5);
xor u7(sum[6], in1[6], in2[6], c6);
xor u8(sum[7], in1[7], in2[7], c7);

endmodule"
N/A,N/A,-2,9.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
    wire [7:0] sum;
    wire cout;
    wire [7:0] in1;
    wire [7:0] in2;
    wire cin;
    cla_8b cla_8b_1(sum[7:0], cout, in1[7:0], in2[7:0], cin);
endmodule

module cla_8b(output [7:0] sum,
                output cout,
                input [7:0] in1, in2,
                input cin);
    wire [7:0] sum;
    wire cout;
    wire [7:0] in1;
    wire [7:0] in2;
    wire cin;
    wire [7:0] G; ++ G[0];
    wire [7:0] P;
    wire [7:0] C;
    assign C[0] = cin;
    assign G[1] = in1[7] & in2[7];
    assign P[1] = in1[7] ^ in2[7];
    assign G[2] = in1[6] & in2[6];
    assign P[2] = in1[6] ^ in2[6];
    assign G[3] = in1[5] & in2[5];
    assign P[3] = in1[5] ^ in2[5];
    assign G[4] = in1[4] & in2[4];
    assign P[4] = in1[4] ^ in2[4];
    assign G[5] = in1[3] & in2[3];
    assign P[5] = in1[3] ^ in2[3];
    assign G[6] = in1[2] & in2[2];
    assign P[6] = in1[2] ^ in2[2];
    assign G[7] = in1[1] & in2[1];
    assign P[7] = in1[1] ^ in2[1];
    assign G[8] = in1[0] & in2[0];
    assign P[8] = in1[0] ^ in2[0];

    assign C[1] = G[0];
    assign C[2] = G[1] | (P[1] & C[1]);
    assign C[3] = G[2] | (P[2] & C[2]);
    assign C[4] = G[3] | (P[3] & C[3]);
    assign C[5] = G[4] | (P[4] & C[4]);
    assign C[6] = G[5] | (P[5] & C[5]);
    assign C[7] = G[6] | (P[6] & C[6]);
    assign C[8] = G[7] | (P[7] & C[7]);
    assign cout = G[8] | (P[8] & C[8]);
    assign sum = P ^ C;
endmodule"
N/A,N/A,-2,10.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin); 
  wire c1, c2, c3, c4, c5, c6, c7;
  wire [7:0] sum;
  
  or(c1, in1[0], in2[0]);
  or(c2, in1[1], in2[1]);
  or(c3, in1[2], in2[2]);
  or(c4, in1[3], in2[3]);
  or(c5, in1[4], in2[4]);
  or(c6, in1[5], in2[5]);
  or(c7, in1[6], in2[6]);
  or(cout, c1, c2, c3, c4, c5, c6, c7);
  
  adder_4 a1(sum[3:0], c7, in1[3:0], in2[3:0], cin);
  adder_4 a2(sum[7:4], cout, in1[7:4], in2[7:4], c7);
endmodule

module adder_4(output [3:0] sum,
                      output cout,
                      input [3:0] in1, in2,
                      input cin);
  wire c1, c2, c3;
  wire [3:0] sum;
  
  or(c1, in1[0], in2[0]);
  or(c2, in1[1], in2[1]);
  or(c3, in1[2], in2[2]);
  or(cout, c1, c2, c3);
  
  adder_2 a1(sum[1:0], c3, in1[1:0], in2[1:0], cin);
  adder_2 a2(sum[3:2], cout, in1[3:2], in2[3:2], c3);
endmodule

module adder_2(output [1:0] sum,
                      output cout,
                      input [1:0] in1, in2,
                      input cin);
  wire c1, c2;
  wire [1:0] sum;
  
  or(c1, in1[0], in2[0]);
  or(c2, in1[1], in2[1]);
  or(cout, c1, c2);
  
  adder_1 a1(sum[0], c1, in1[0], in2[0], cin);
  adder_1 a2(sum[1], cout, in1[1], in2[1], c1);
endmodule

module adder_1(output sum,
                      output cout,
                      input in1, in2, cin);
  wire c1;
  wire [1:0] sum;
  
  or(c1, in1, in2);
  or(cout, c1, cin);
  
  adder_0 a1(sum[0], c1, in1, in2, cin);
endmodule

module adder_0(output sum,
                      output cout,
                      input in1, in2, cin);
  wire c1;
  wire [1:0] sum;
  
  or(c1, in1, in2);
  or(cout, c1, cin);
  
  adder_0 a1(sum[0], c1, in1, in2, cin);
endmodule"
N/A,N/A,-2,11.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire [7:0] sum;
  wire cout;
  wire [7:0] in1;
  wire [7:0] in2;
  wire cin;
  //////// BEGIN COMBINATIONAL LOGICS
  integer i;
  assign {cout, sum} = in1 + in2 + cin;
  Q_1_8 q1_8_0(sum[0], in1[0], in2[0], cin, sum[7:1]);
  Q_2_7 q2_7_0(sum[7:1], in1[7:1], in2[7:1], cin, sum[14:8]);
  invert_1 i1_1_0(sum[7:1], in1[7:1], in2[7:1], cin, cout);
  REG_1_1 r1_1_0(sum[7:1], in1[7:1], in2[7:1], cin, cout);
  ____ END COMBINATIONAL LOGICS
endmodule"
