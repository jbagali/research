Sure, here is a possible implementation of a gshare branch predictor with 7-bit pc and 7-bit global history, hashed (using xor) into a 7-bit index. This index accesses a 128-entry table of two-bit saturating counters. The branch predictor should contain a 7-bit global branch history register.

```module top_module (
  input clk,
  input areset,

  input  predict_valid,
  input  [6:0] predict_pc,
  output predict_taken,
  output [6:0] predict_history,

  input train_valid,
  input train_taken,
  input train_mispredicted,
  input [6:0] train_history,
  input [6:0] train_pc
);

  reg [6:0] pc;
  reg [6:0] history;
  reg [6:0] global_history;
  reg [1:0] saturating_counter [128];

  always @(posedge clk or negedge areset) begin
    if (areset) begin
      pc <= 0;
      history <= 0;
      global_history <= 0;
      for (int i = 0; i < 128; i++) begin
        saturating_counter[i] <= 2'b01;
      end
    end else begin
      if (predict_valid) begin
        predict_taken <= saturating_counter[xor(pc, global_history)];
      end
      if (train_valid) begin
        if (train_mispredicted) begin
          global_history <= history;
        end
        saturating_counter[xor(train_pc, global_history)] <= saturating_counter[xor(train_pc, global_history)] + (train_taken ? 1 : -1);
      end
      pc <= predict_pc;
      history <= train_history;
    end
  end

  assign predict_history = history;

endmodule
```

This implementation uses a saturating counter to store the history of previous branch outcomes. The counter is hashed (using xor) with the current pc to index into a table of 128 entries. The entry at that index is used to predict the branch outcome for the current instruction. If the branch is mispredicted, the global history register is updated to the value of the history register before the misprediction. The saturating counter is also updated to reflect the new branch outcome.