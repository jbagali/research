Here is a possible implementation of the finite state machine in Verilog:

```module top_module (
    input clk,
    input reset,   // Synchronous reset
    input s,
    input w,
    output z
);

    reg [1:0] state;
    reg [1:0] next_state;
    reg z;

    always @(posedge clk or negedge reset) begin
        if (reset) begin
            state <= 0;
        end else begin
            case (state)
                2'b00:
                    if (s) begin
                        state <= 2'b01;
                    end else begin
                        state <= 2'b00;
                    end
                2'b01:
                    if (w) begin
                        if (state[0] == 1) begin
                            state <= 2'b10;
                        end else begin
                            state <= 2'b01;
                        end
                    end else begin
                        state <= 2'b00;
                    end
                2'b10:
                    if (w) begin
                        state <= 2'b01;
                    end else begin
                        state <= 2'b10;
                    end
                default:
                    state <= 2'b00;
            endcase
        end

        if (state[1] == 1) begin
            z <= 1;
        end else begin
            z <= 0;
        end
    end

endmodule
```

The FSM has three states: A, B, and C. The FSM starts in state A and remains in state A as long as s = 0. When s = 1, the FSM moves to state B. In state B, the FSM examines the value of the input w in the next three clock cycles. If w = 1 in exactly two of these clock cycles, then the FSM moves to state C and sets z to 1 in the following clock cycle. Otherwise, the FSM remains in state B. The FSM continues checking w for the next three clock cycles, and so on.

The following timing diagram illustrates the required values of z for different values of w:

[asy]
unitsize(1 cm);

draw((0,0)--(10,0));
draw((0,1)--(10,1));
draw((0,2)--(10,2));
draw((0,3)--(10,3));
draw((0,4)--(10,4));
draw((0,5)--(10,5));
draw((0,6)--(10,6));
draw((0,7)--(10,7));
draw((0,8)--(10,8));
draw((0,9)--(10,9));
draw((0,10)--(10,10));

draw((0,0.1)--(0,0.9));
draw((1,0.1)--(1,0.9));
draw((2,0.1)--(2,0.9));
draw((3,0.1)--(3,0.9));
draw((4,0.1)--(4,0.9));
draw((5,0.1)--(5,0.9));
draw((6,0.1)--(6,0.9));
draw((7,0.1)--(7,0.9));
draw((8,0.1)--(8,0.9));
draw((9,0.1)--(9,0.9));
draw((10,0.1)--(10,0.9));

label("$t$", (10.5,0), S);
label("$w$", (0,10.5), W);
label("$z$", (5,0), N);

for (int i = 0; i < 10; i++) {
    if (i % 2 == 0) {
        draw((i,0)--