Here is a behavioral code for a 100-bit binary adder:

```
module top_module( 
    input [99:0] a, b,
    input cin,
    output cout,
    output [99:0] sum );

    function [99:0] add(input [99:0] a, input [99:0] b, input cin);
        reg [99:0] sum;
        for (i = 0; i < 100; i++) begin
            sum[i] = a[i] + b[i] + cin;
            if (sum[i] >= 2) begin
                sum[i] -= 2;
                cin = 1;
            else
                cin = 0;
        end
    endfunction

    assign sum = add(a, b, cin);
    assign cout = sum[99];

endmodule
```

This code uses a recursive function to add two 100-bit numbers. The function takes three inputs: the two numbers to be added and a carry-in. The function returns the sum of the two numbers and the carry-out.

The function works by adding the two numbers bit by bit, starting with the least significant bit. For each bit, the function adds the two bits and the carry-in. If the sum of the two bits is greater than 1, the function sets the carry-out bit to 1 and subtracts 2 from the sum. Otherwise, the function sets the carry-out bit to 0.

The function then returns the sum of the two numbers and the carry-out.

The top-level module instantiates the add function and assigns the outputs of the function to the module's ports.