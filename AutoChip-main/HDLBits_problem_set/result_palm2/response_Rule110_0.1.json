Here is a possible implementation of a 512-cell Rule 110 cellular automaton in Verilog:

```module top_module(
    input clk,
    input load,
    input [511:0] data,
    output [511:0] q
); 

    always @(posedge clk) begin
        if (load) begin
            q <= data;
        end else begin
            for (int i = 0; i < 512; i++) begin
                q[i] <= rule_110(q[i], q[i + 1], q[i + 2]);
            end
        end
    end

    function wire rule_110(input wire a, input wire b, input wire c);
        wire res;
        case (a, b, c)
            (1, 1, 1) : res = 0;
            (1, 1, 0) : res = 1;
            (1, 0, 1) : res = 1;
            (1, 0, 0) : res = 0;
            (0, 1, 1) : res = 1;
            (0, 1, 0) : res = 1;
            (0, 0, 1) : res = 1;
            (0, 0, 0) : res = 0;
        endcase
        return res;
    endfunction

endmodule
```

This circuit uses a 512-bit shift register to store the state of the cellular automaton. The shift register is clocked by the clk signal, and the load signal is used to load the initial state of the cellular automaton into the shift register. The rule_110 function implements the Rule 110 rule, which is used to update the state of each cell in the cellular automaton. The output of the rule_110 function is connected to the input of the shift register, which is used to update the state of the cellular automaton.