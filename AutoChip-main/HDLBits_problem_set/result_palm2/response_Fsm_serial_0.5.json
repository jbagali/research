Here is a finite state machine that will identify when bytes have been correctly received when given a stream of bits:

```
module top_module(
    input clk,
    input in,
    input reset,    // Synchronous reset
    output done
); 

    parameter STATE_IDLE = 1'b0;
    parameter STATE_START = 1'b1;
    parameter STATE_DATA = 1'b2;
    parameter STATE_STOP = 1'b3;

    reg [1:0] state = STATE_IDLE;
    reg [7:0] data;
    reg done;

    always @(posedge clk or negedge reset) begin
        if (reset) begin
            state <= STATE_IDLE;
            data <= 8'h0;
            done <= 1'b0;
        end else begin
            case (state)
                STATE_IDLE: begin
                    if (in == 1'b0) begin
                        state <= STATE_START;
                        data <= 8'h0;
                    end
                end
                STATE_START: begin
                    if (in == 1'b1) begin
                        state <= STATE_DATA;
                        data <= data + in;
                    end else begin
                        state <= STATE_IDLE;
                        done <= 1'b0;
                    end
                end
                STATE_DATA: begin
                    if (in == 1'b0) begin
                        state <= STATE_STOP;
                        if (data == 8'h00) begin
                            done <= 1'b1;
                        end
                    end else begin
                        data <= data + in;
                    end
                end
                STATE_STOP: begin
                    if (in == 1'b1) begin
                        state <= STATE_IDLE;
                    end
                end
            endcase
        end
    end

endmodule
```

This FSM has four states: IDLE, START, DATA, and STOP. In the IDLE state, the FSM waits for a start bit. In the START state, the FSM checks to see if the next bit is a 1. If it is, the FSM enters the DATA state and starts to collect data bits. In the DATA state, the FSM collects data bits until it sees a stop bit. If the stop bit is correct, the FSM enters the STOP state and sets the done signal. If the stop bit is not correct, the FSM enters the IDLE state and waits for the next start bit.

The done signal is asserted when a complete byte has been received correctly. This signal can be used to trigger other parts of the system, such as a memory write or a display update.