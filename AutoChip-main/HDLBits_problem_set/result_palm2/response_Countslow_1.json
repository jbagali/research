Here is a Verilog code for a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is synchronous, and should reset the counter to 0. We want to be able to pause the counter rather than always incrementing every clock cycle, so the slowena input indicates when the counter should increment.

```module top_module (
    input clk,
    input slowena,
    input reset,
    output [3:0] q);

    reg [3:0] q;
    reg [1:0] cnt;

    always @(posedge clk) begin
        if (reset) begin
            q <= 0;
            cnt <= 0;
        end else if (slowena) begin
            q <= q + 1;
            cnt <= cnt + 1;
            if (cnt == 10) begin
                cnt <= 0;
            end
        end
    end

endmodule
```

The counter is implemented using a 4-bit register (q) and a 2-bit counter (cnt). The counter is reset to 0 when the reset input is asserted. The counter increments on every positive edge of the clock signal, unless the slowena input is asserted. When the slowena input is asserted, the counter is paused and does not increment. The output of the counter is q.