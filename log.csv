Area,Delay,Score,Current Run,Episode,Verilog
31.654000,216.93,0.03159158400202186,2.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);

wire c1, c2, c3;

full_adder FA1(sum[0], c1, in1[0], in2[0], cin);
full_adder FA2(sum[1], c2, in1[1], in2[1], c1);
full_adder FA3(sum[2], c3, in1[2], in2[2], c2);
full_adder FA4(sum[3], cout, in1[3], in2[3], c3);

endmodule

module full_adder(output sum, output cout, input in1, in2, cin);

wire x, y, z;

xor(sum, in1, in2, cin);
and(x, in1, in2);
and(y, in1, cin);
and(z, in2, cin);
or(cout, x, y, z);

endmodule"
31.654000,216.93,0.03159158400202186,3.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);	
	wire [3:0] c;
	
	adder_1bit a1(sum[0], c[0], in1[0], in2[0], cin);
	adder_1bit a2(sum[1], c[1], in1[1], in2[1], c[0]);
	adder_1bit a3(sum[2], c[2], in1[2], in2[2], c[1]);
	adder_1bit a4(sum[3], cout, in1[3], in2[3], c[2]);
	
endmodule

module adder_1bit(output sum, cout, input in1, in2, input cin);
	wire x, y, z;
	
	xor(sum, in1, in2, cin);
	and(x, in1, in2);
	and(y, in1, cin);
	and(z, in2, cin);
	or(cout, x, y, z);
	
endmodule"
31.654000,216.93,0.03159158400202186,4.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);

wire c1, c2, c3;

full_adder FA1(sum[0], c1, in1[0], in2[0], cin);
full_adder FA2(sum[1], c2, in1[1], in2[1], c1);
full_adder FA3(sum[2], c3, in1[2], in2[2], c2);
full_adder FA4(sum[3], cout, in1[3], in2[3], c3);

endmodule

module full_adder(output sum, output cout, input in1, in2, cin);

wire x, y, z;

xor(sum, in1, in2, cin);
and(x, in1, in2);
and(y, in1, cin);
and(z, in2, cin);
or(cout, x, y, z);

endmodule"
31.654000,216.93,0.03159158400202186,5.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);

wire c1, c2, c3;

full_adder FA1(sum[0], c1, in1[0], in2[0], cin);
full_adder FA2(sum[1], c2, in1[1], in2[1], c1);
full_adder FA3(sum[2], c3, in1[2], in2[2], c2);
full_adder FA4(sum[3], cout, in1[3], in2[3], c3);

endmodule

module full_adder(output sum, output cout, input in1, in2, cin);

wire x, y, z;

xor(sum, in1, in2, cin);
and(x, in1, in2);
and(y, in1, cin);
and(z, in2, cin);
or(cout, x, y, z);

endmodule"
N/A,N/A,-1,6.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);	 cin
	assign cout = cin;
	assign sum = in1 + in2 + cin;
endmodule

module test_adder;
	reg [3:0] in1, in2;
	reg cin;
	wire [3:0] sum;
	wire cout;
	adder a1(sum, cout, in1, in2, cin);
	initial
	begin
		$monitor(""in1 = %b, in2 = %b, cin = %b, sum = %b, cout = %b"", in1, in2, cin, sum, cout);
		in1 = 4'b0000; in2 = 4'b0000; cin = 1'b0;
		#10 in1 = 4'b0001; in2 = 4'b0001; cin = 1'b0;
		#10 in1 = 4'b0010; in2 = 4'b0010; cin = 1'b0;
		#10 in1 = 4'b0011; in2 = 4'b0011; cin = 1'b0;
		#10 in1 = 4'b0100; in2 = 4'b0100; cin = 1'b0;
		#10 in1 = 4'b0101; in2 = 4'b0101; cin = 1'b0;
		#10 in1 = 4'b0110; in2 = 4'b0110; cin = 1'b0;
		#10 in1 = 4'b0111; in2 = 4'b0111; cin = 1'b0;
		#10 in1 = 4'b1000; in2 = 4'b1000; cin = 1'b0;
		#10 in1 = 4'b1001; in2 = 4'b1001; cin = 1'b0;
		#10 in1 = 4'b1010; in2 = 4'b1010; cin = 1'b0;
		#10 in1 = 4'b1011; in2 = 4'b1011; cin = 1'b0;
		#10 in1 = 4'b1100"
,,-1,7.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);


endmodule"
31.654000,216.93,0.03159158400202186,8.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);
wire c1, c2, c3;

full_adder FA1(sum[0], c1, in1[0], in2[0], cin);
full_adder FA2(sum[1], c2, in1[1], in2[1], c1);
full_adder FA3(sum[2], c3, in1[2], in2[2], c2);
full_adder FA4(sum[3], cout, in1[3], in2[3], c3);

endmodule

module full_adder(output sum, output cout, input in1, in2, cin);
wire x, y, z;

xor(sum, in1, in2, cin);
and(x, in1, in2);
and(y, in1, cin);
and(z, in2, cin);
or(cout, x, y, z);

endmodule"
N/A,N/A,-1,9.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);
 w1 = in1 & in2;
 w2 = in1 ^ in2;
 w3 = in1 | in2;
 w4 = in1 & cin;
 w5 = in2 & cin;
 w6 = in1 ^ in2;
 w7 = in1 | cin;
 w8 = in2 | cin;
 
 assign sum = w1 ^ w2 ^ w3 ^ w4 ^ w5 ^ w6 ^ w7 ^ w8;
 assign cout = (w1 ^ w2 ^ w3 ^ w4 ^ w5 ^ w6 ^ w7 ^ w8) & cin;

endmodule

module test_adder;

reg [3:0] in1, in2;
reg cin;
wire [3:0] sum;
wire cout;

adder a1(sum, cout, in1, in2, cin);

initial
begin
    $monitor($time, "" in1=%b, in2=%b, cin=%b, sum=%b, cout=%b"", in1, in2, cin, sum, cout);
    in1 = 4'b0000;
    in2 = 4'b0000;
    cin = 1'b0;
    #10
    in1 = 4'b0000;
    in2 = 4'b0001;
    cin = 1'b0;
    #10
    in1 = 4'b0000;
    in2 = 4'b0010;
    cin = 1'b0;
    #10
    in1 = 4'b0000;
    in2 = 4'b0011;
    cin = 1'b0;
    #10
    in1 = 4'b0000;
    in2 = 4'b0100;
    cin = 1'b0;
    #10
    in1 = 4'b0000;
    in2 = 4'b0101;
    cin = 1'b0;
    #10
    in1 = 4'b0000;
    in2 = 4'b0110;
    cin = 1'b0;
    #10
    in1 = 4'"
N/A,N/A,-1,10.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);	b
	wire [3:0] sum;
	wire cout;
	wire [3:0] in1;
	wire [3:0] in2;
	wire cin;
	
	// Create the wires for each input and output.
	wire [3:0] in1_wire;
	wire [3:0] in2_wire;
	wire cin_wire;
	
	// Create the wires for each input and output.
	wire [3:0] sum_wire;
	wire cout_wire;
	
	// Create the wires for each input and output.
	wire [3:0] in1_wire_temp;
	wire [3:0] in2_wire_temp;
	wire cin_wire_temp;
	
	// Create the wires for each input and output.
	wire [3:0] sum_wire_temp;
	wire cout_wire_temp;
	
	// Create the wires for each input and output.
	wire [3:0] in1_wire_temp2;
	wire [3:0] in2_wire_temp2;
	wire cin_wire_temp2;
	
	// Create the wires for each input and output.
	wire [3:0] sum_wire_temp2;
	wire cout_wire_temp2;
	
	// Create the wires for each input and output.
	wire [3:0] in1_wire_temp3;
	wire [3:0] in2_wire_temp3;
	wire cin_wire_temp3;
	
	// Create the wires for each input and output.
	wire [3:0] sum_wire_temp3;
	wire cout_wire_temp3;
	
	// Create the wires for each input and output.
	wire [3:0] in1_wire_temp4;
	wire [3:0] in2_wire_temp4;
	wire cin_wire_temp4;
	
	// Create the wires for each input and output.
	wire [3:0] sum_wire_temp4;
	wire cout_"
N/A,N/A,-1,11.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);
wire
wire [3:0] sum;
wire cout;
wire [3:0] in1;
wire [3:0] in2;
wire cin;

// Create the first adder
adder a1(sum[0], c1, in1[0], in2[0], cin);
adder a2(sum[1], c2, in1[1], in2[1], c1);
adder a3(sum[2], c3, in1[2], in2[2], c2);
adder a4(sum[3], cout, in1[3], in2[3], c3);

endmodule

module adder_tb;

reg [3:0] in1;
reg [3:0] in2;
reg cin;
wire [3:0] sum;
wire cout;

// Instantiate the adder design
adder a1(sum, cout, in1, in2, cin);

// Define the stimulus
initial
begin
    in1 = 4'b0000;
    in2 = 4'b0000;
    cin = 0;
    #10;
    in1 = 4'b0001;
    in2 = 4'b0001;
    cin = 0;
    #10;
    in1 = 4'b0010;
    in2 = 4'b0010;
    cin = 0;
    #10;
    in1 = 4'b0011;
    in2 = 4'b0011;
    cin = 0;
    #10;
    in1 = 4'b0100;
    in2 = 4'b0100;
    cin = 0;
    #10;
    in1 = 4'b0101;
    in2 = 4'b0101;
    cin = 0;
    #10;
    in1 = 4'b0110;
    in2 = 4'b0110;
    cin = 0;
    #10;
    in1 = 4'b0111;
    in2 = 4'b0111;
    cin = 0;
    #10;
    in1 = 4'"
31.654000,216.93,0.03159158400202186,12.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);	
	wire [3:0] c;
	
	adder_1bit a1(sum[0], c[0], in1[0], in2[0], cin);
	adder_1bit a2(sum[1], c[1], in1[1], in2[1], c[0]);
	adder_1bit a3(sum[2], c[2], in1[2], in2[2], c[1]);
	adder_1bit a4(sum[3], cout, in1[3], in2[3], c[2]);
	
endmodule

module adder_1bit(output sum, cout, input in1, in2, input cin);
	wire x, y, z;
	
	xor(sum, in1, in2, cin);
	and(x, in1, in2);
	and(y, in1, cin);
	and(z, in2, cin);
	or(cout, x, y, z);
	
endmodule"
N/A,N/A,-1,13.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin); 

wire c1, c2, c3;

// Create modules for each adder
adder a1(sum[0], c1, in1[0], in2[0], cin);
adder a2(sum[1], c2, in1[1], in2[1], c1);
adder a3(sum[2], c3, in1[2], in2[2], c2);
adder a4(sum[3], cout, in1[3], in2[3], c3);

endmodule

module adder_tb;

// Inputs and outputs
reg [3:0] in1, in2;
reg cin;
wire [3:0] sum;
wire cout;

// Instantiate the design block
adder dut(sum, cout, in1, in2, cin);

// Initialize inputs
initial begin
    in1 = 4'b0000;
    in2 = 4'b0000;
    cin = 0;
    #10;
    in1 = 4'b0000;
    in2 = 4'b0001;
    cin = 0;
    #10;
    in1 = 4'b0001;
    in2 = 4'b0001;
    cin = 0;
    #10;
    in1 = 4'b0010;
    in2 = 4'b0010;
    cin = 0;
    #10;
    in1 = 4'b0011;
    in2 = 4'b0011;
    cin = 0;
    #10;
    in1 = 4'b0100;
    in2 = 4'b0100;
    cin = 0;
    #10;
    in1 = 4'b0101;
    in2 = 4'b0101;
    cin = 0;
    #10;
    in1 = 4'b0110;
    in2 = 4'b0110;
    cin = 0;
    #10;
    in1 = 4'b0111;
    in2 = 4'b0111;
    cin = 0;
    #10;
    in1 = 4"
31.654000,216.93,0.03159158400202186,14.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);	
	wire [3:0] c;
	
	adder_1bit a1(sum[0], c[0], in1[0], in2[0], cin);
	adder_1bit a2(sum[1], c[1], in1[1], in2[1], c[0]);
	adder_1bit a3(sum[2], c[2], in1[2], in2[2], c[1]);
	adder_1bit a4(sum[3], cout, in1[3], in2[3], c[2]);
	
endmodule

module adder_1bit(output sum, cout, input in1, in2, input cin);
	wire x, y, z;
	
	xor(sum, in1, in2, cin);
	and(x, in1, in2);
	and(y, in1, cin);
	and(z, in2, cin);
	or(cout, x, y, z);
	
endmodule"
31.654000,216.93,0.03159158400202186,15.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);	
	wire [3:0] c;
	
	adder_1bit a1(sum[0], c[0], in1[0], in2[0], cin);
	adder_1bit a2(sum[1], c[1], in1[1], in2[1], c[0]);
	adder_1bit a3(sum[2], c[2], in1[2], in2[2], c[1]);
	adder_1bit a4(sum[3], cout, in1[3], in2[3], c[2]);
	
endmodule

module adder_1bit(output sum, cout, input in1, in2, input cin);
	wire x, y, z;
	
	xor(sum, in1, in2, cin);
	and(x, in1, in2);
	and(y, in1, cin);
	and(z, in2, cin);
	or(cout, x, y, z);
	
endmodule"
37.772000,193.14,-0.5,16.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);

    wire [3:0] sum;
    wire cout;
    wire [3:0] in1;
    wire [3:0] in2;
    wire cin;
    
    assign sum = in1 + in2 + cin;
    assign cout = (in1[0] & in2[0] & cin) | (in1[1] & in2[1] & cin) | (in1[2] & in2[2] & cin) | (in1[3] & in2[3] & cin);

endmodule"
31.654000,216.93,0.03159158400202186,17.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);	
wire c1, c2, c3;

full_adder FA1(sum[0], c1, in1[0], in2[0], cin);
full_adder FA2(sum[1], c2, in1[1], in2[1], c1);
full_adder FA3(sum[2], c3, in1[2], in2[2], c2);
full_adder FA4(sum[3], cout, in1[3], in2[3], c3);

endmodule

module full_adder(output sum, output cout, input in1, in2, cin);
wire x, y, z;

xor(sum, in1, in2, cin);
and(x, in1, in2);
and(y, in1, cin);
and(z, in2, cin);
or(cout, x, y, z);

endmodule"
N/A,N/A,-1,18.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);	 wirte
	wire [3:0] c;
	wire [3:0] s;
	
	assign c[0] = cin;
	assign s[0] = in1[0] ^ in2[0];
	assign s[1] = in1[1] ^ in2[1];
	assign s[2] = in1[2] ^ in2[2];
	assign s[3] = in1[3] ^ in2[3];
	
	assign c[1] = (in1[0] & in2[0]) | (in1[0] & c[0]) | (in2[0] & c[0]);
	assign c[2] = (in1[1] & in2[1]) | (in1[1] & c[1]) | (in2[1] & c[1]);
	assign c[3] = (in1[2] & in2[2]) | (in1[2] & c[2]) | (in2[2] & c[2]);
	
	assign cout = (in1[3] & in2[3]) | (in1[3] & c[3]) | (in2[3] & c[3]);
	
	assign sum[0] = in1[0] ^ in2[0] ^ c[0];
	assign sum[1] = in1[1] ^ in2[1] ^ c[1];
	assign sum[2] = in1[2] ^ in2[2] ^ c[2];
	assign sum[3] = in1[3] ^ in2[3] ^ c[3];
	
endmodule

module test_adder;
	reg [3:0] in1;
	reg [3:0] in2;
	reg cin;
	wire [3:0] sum;
	wire cout;
	
	adder dut(sum, cout, in1, in2, cin);
	
	initial
	begin
		$monitor(""in1 = %b, in2 = %"
,,-1,19.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);	
irig_bit_adder #(4) adder(sum, cout, in1, in2, cin);
endmodule

module irig_bit_adder #(parameter N = 4)
(output [N-1:0] sum, output cout, input [N-1:0] in1, in2, input cin);

wire [N-1:0] carry;

genvar i;
generate
	for (i=0; i<N; i=i+1)
		begin: adder_loop
		end
endgenerate

assign carry[0] = cin;
assign cout = carry[N];

endmodule"
37.772000,184.06,-0.5,20.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);
reg [3:0] sum;
reg cout;
always @(in1 or in2 or cin)
begin
    sum = in1 + in2 + cin;
    cout = (in1[0] & in2[0] & cin) | (in1[0] & in2[0] & ~in1[0] & ~in2[0] & cin) | (~in1[0] & ~in2[0] & cin) | (~in1[0] & ~in2[0] & ~in1[0] & in2[0] & cin);
end
endmodule"
N/A,N/A,-1,21.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin); sum = in1 + in2 + cin; cout = in1[3] ^ in2[3] ^ cin;

endmodule

module test_adder;

reg [3:0] in1, in2;
reg cin;
wire [3:0] sum;
wire cout;

adder a1(sum, cout, in1, in2, cin);

initial
begin
    $monitor($time, "" in1 = %b, in2 = %b, cin = %b, sum = %b, cout = %b"", in1, in2, cin, sum, cout);
    in1 = 4'b0000; in2 = 4'b0000; cin = 1'b0;
    #10 in1 = 4'b0001; in2 = 4'b0001;
    #10 in1 = 4'b0010; in2 = 4'b0010;
    #10 in1 = 4'b0011; in2 = 4'b0011;
    #10 in1 = 4'b0100; in2 = 4'b0100;
    #10 in1 = 4'b0101; in2 = 4'b0101;
    #10 in1 = 4'b0110; in2 = 4'b0110;
    #10 in1 = 4'b0111; in2 = 4'b0111;
    #10 in1 = 4'b1000; in2 = 4'b1000;
    #10 in1 = 4'b1001; in2 = 4'b1001;
    #10 in1 = 4'b1010; in2 = 4'b1010;
    #10 in1 = 4'b1011; in2 = 4'b1011;
    #10 in1 = 4'b1100; in2 = 4'b1100;
    #10 in1 = 4'b1101; in2 = 4'b1101;
    #10 in1 = 4'b1110; in2 = 4'b1110;
    #10 in1 = 4'b1111; in2 = 4'b1111;
    #10 in1 = 4'b0000; in2"
N/A,N/A,-1,22.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);
, input [3:0] in1, in2, cin);

wire [3:0] in1, in2;
wire cin;

assign in1 = in1;
assign in2 = in2;
assign cin = cin;

endmodule

module adder_tb;

reg [3:0] in1, in2;
reg cin;
wire [3:0] sum;
wire cout;

adder a1(sum, cout, in1, in2, cin);

initial
begin
    in1 = 4'b0000;
    in2 = 4'b0000;
    cin = 0;
    #10;
    in1 = 4'b0000;
    in2 = 4'b0001;
    cin = 0;
    #10;
    in1 = 4'b0000;
    in2 = 4'b0010;
    cin = 0;
    #10;
    in1 = 4'b0000;
    in2 = 4'b0011;
    cin = 0;
    #10;
    in1 = 4'b0000;
    in2 = 4'b0100;
    cin = 0;
    #10;
    in1 = 4'b0000;
    in2 = 4'b0101;
    cin = 0;
    #10;
    in1 = 4'b0000;
    in2 = 4'b0110;
    cin = 0;
    #10;
    in1 = 4'b0000;
    in2 = 4'b0111;
    cin = 0;
    #10;
    in1 = 4'b0000;
    in2 = 4'b1000;
    cin = 0;
    #10;
    in1 = 4'b0000;
    in2 = 4'b1001;
    cin = 0;
    #10;
    in1 = 4'b0000;
    in2 = 4'b1010;
    cin = 0;
    #10;
    in1 = 4'b0000;
    in2 = 4'b1011;"
N/A,N/A,-1,23.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);

wire input1, input2, input3;
wire c1, c2, c3;

// Create the wires
assign input1 = in1[0];
assign input2 = in2[0];
assign input3 = cin;

// Create the first adder
full_adder FA1(sum[0], c1, in1[0], in2[0], cin);
full_adder FA2(sum[1], c2, in1[1], in2[1], c1);
full_adder FA3(sum[2], c3, in1[2], in2[2], c2);
full_adder FA4(sum[3], cout, in1[3], in2[3], c3);

endmodule

module full_adder(output sum, output cout, input in1, in2, cin);

wire x, y, z;

// Create the wires
assign x = in1 ^ in2;
assign y = in1 & in2;
assign z = in1 ^ in2;

// Create the first adder
half_adder HA1(sum, x, cin);
half_adder HA2(cout, y, c1);
half_adder HA3(cout, z, c2);

endmodule

module half_adder(output sum, output cout, input in1, cin);

wire x, y;

// Create the wires
assign x = in1 ^ cin;
assign y = in1 & cin;

// Create the first adder
assign sum = x;
assign cout = y;

endmodule"
N/A,N/A,-1,24.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);	 c1
	assign c1 = cin;
	assign cout = c1;
	assign sum = in1 + in2 + c1;
endmodule

module test_adder;
	reg [3:0] in1, in2;
	reg cin;
	wire [3:0] sum;
	wire cout;
	adder a1(sum, cout, in1, in2, cin);
	initial
	begin
		$monitor(""in1 = %b, in2 = %b, cin = %b, sum = %b, cout = %b"", in1, in2, cin, sum, cout);
		in1 = 4'b0000;
		in2 = 4'b0000;
		cin = 1'b0;
		#10
		in1 = 4'b0000;
		in2 = 4'b0001;
		cin = 1'b0;
		#10
		in1 = 4'b0001;
		in2 = 4'b0001;
		cin = 1'b0;
		#10
		in1 = 4'b0010;
		in2 = 4'b0010;
		cin = 1'b0;
		#10
		in1 = 4'b0011;
		in2 = 4'b0011;
		cin = 1'b0;
		#10
		in1 = 4'b0100;
		in2 = 4'b0100;
		cin = 1'b0;
		#10
		in1 = 4'b0101;
		in2 = 4'b0101;
		cin = 1'b0;
		#10
		in1 = 4'b0110;
		in2 = 4'b0110;
		cin = 1'b0;
		#10
		in1 = 4'b0111;
		in2 = 4'b0111;
		cin = 1'b0;
		#10
		in1 = 4'b1000;
		in2 = 4'b1000;
		cin = 1'b0;
		#10
		in1 = 4'b1001"
N/A,N/A,-1,25.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);	
wire
wire [3:0] sum;
wire cout;
wire [3:0] in1;
wire [3:0] in2;
wire cin;

// Create the first adder
adder a1(sum[0], c1, in1[0], in2[0], cin);
adder a2(sum[1], c2, in1[1], in2[1], c1);
adder a3(sum[2], c3, in1[2], in2[2], c2);
adder a4(sum[3], cout, in1[3], in2[3], c3);

endmodule

module adder_tb;

reg [3:0] in1;
reg [3:0] in2;
reg cin;
wire [3:0] sum;
wire cout;

// Instantiate the adder design
adder a1(sum, cout, in1, in2, cin);

// Define the stimulus
initial
begin
    in1 = 4'b0000;
    in2 = 4'b0000;
    cin = 0;
    #10;
    in1 = 4'b0001;
    in2 = 4'b0001;
    cin = 0;
    #10;
    in1 = 4'b0010;
    in2 = 4'b0010;
    cin = 0;
    #10;
    in1 = 4'b0011;
    in2 = 4'b0011;
    cin = 0;
    #10;
    in1 = 4'b0100;
    in2 = 4'b0100;
    cin = 0;
    #10;
    in1 = 4'b0101;
    in2 = 4'b0101;
    cin = 0;
    #10;
    in1 = 4'b0110;
    in2 = 4'b0110;
    cin = 0;
    #10;
    in1 = 4'b0111;
    in2 = 4'b0111;
    cin = 0;
    #10;
    in1 = 4"
N/A,N/A,-1,26.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);

   wire [3:0] sum;
   wire cout;
   wire [3:0] in1;
   wire [3:0] in2;
   wire cin;

// Instantiate the sub-modules
   fa fa1(sum[0], c1, in1[0], in2[0], cin);
   fa fa2(sum[1], c2, in1[1], in2[1], c1);
   fa fa3(sum[2], c3, in1[2], in2[2], c2);
   fa fa4(sum[3], cout, in1[3], in2[3], c3);

endmodule

module fa(output sum, output cout, input a, input b, input cin);

// Instantiate the sub-modules
   wire sum;
   wire cout;
   wire c1;
   wire c2;
   wire c3;

// Instantiate the sub-modules
   fa1 fa1(sum, c1, a, b, cin);
   fa2 fa2(sum, c2, a, b, c1);
   fa3 fa3(sum, c3, a, b, c2);
   fa4 fa4(sum, cout, a, b, c3);

endmodule

module fa1(output sum, output cout, input a, input b, input cin);

// Instantiate the sub-modules
   wire sum;
   wire cout;
   wire c1;
   wire c2;
   wire c3;

// Instantiate the sub-modules
   fa1 fa1(sum, c1, a, b, cin);
   fa2 fa2(sum, c2, a, b, c1);
   fa3 fa3(sum, c3, a, b, c2);
   fa4 fa4(sum, cout, a, b, c3);

endmodule"
N/A,N/A,-1,27.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);
wire//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
//wire
"
N/A,N/A,-1,28.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);	wires
	wire [3:0] sum;
	wire cout;
	wire [3:0] in1;
	wire [3:0] in2;
	wire cin;
	
	assign sum = in1 + in2 + cin;
	assign cout = (in1[3] & in2[3] & cin) | (in1[3] & in2[3] & ~cin) | (~in1[3] & ~in2[3] & cin);
	
endmodule

module test_adder;
	reg [3:0] in1;
	reg [3:0] in2;
	reg cin;
	wire [3:0] sum;
	wire cout;
	
	adder dut(sum, cout, in1, in2, cin);
	
	initial
	begin
		$dumpfile(""test_adder.vcd"");
		$dumpvars(0, test_adder);
		
		in1 = 4'b0000;
		in2 = 4'b0000;
		cin = 1'b0;
		#10
		in1 = 4'b0000;
		in2 = 4'b0001;
		cin = 1'b0;
		#10
		in1 = 4'b0001;
		in2 = 4'b0001;
		cin = 1'b0;
		#10
		in1 = 4'b0010;
		in2 = 4'b0010;
		cin = 1'b0;
		#10
		in1 = 4'b0011;
		in2 = 4'b0011;
		cin = 1'b0;
		#10
		in1 = 4'b0100;
		in2 = 4'b0100;
		cin = 1'b0;
		#10
		in1 = 4'b0101;
		in2 = 4'b0101;
		cin = 1'b0;
		#10
		in1 = 4'b0110;
		in2 = 4'b0110;
		cin = 1'b0;
		"
N/A,N/A,-1,29.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);

iring i1(sum[0], in1[0], in2[0], cin);

iiring i2(sum[1], in1[1], in2[1], cin);

iiring i3(sum[2], in1[2], in2[2], cin);

iiring i4(sum[3], in1[3], in2[3], cin);

endmodule

module iiring(output sum, input in1, in2, cin);

wire c1, c2, c3;

xor x1(sum, in1, in2, cin);

and a1(c1, in1, in2);

and a2(c2, in1, cin);

and a3(c3, in2, cin);

or o1(cout, c1, c2, c3);

endmodule

module iiring(output sum, input in1, in2, cin);

wire c1, c2, c3;

xor x1(sum, in1, in2, cin);

and a1(c1, in1, in2);

and a2(c2, in1, cin);

and a3(c3, in2, cin);

or o1(cout, c1, c2, c3);

endmodule"
32.452000,140.81,-0.5,30.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);	 
	wire [3:0] c;
	
	adder_1bit a1(sum[0], c[0], in1[0], in2[0], cin);
	adder_1bit a2(sum[1], c[1], in1[1], in2[1], c[0]);
	adder_1bit a3(sum[2], c[2], in1[2], in2[2], c[1]);
	adder_1bit a4(sum[3], cout, in1[3], in2[3], c[2]);
	
endmodule

module adder_1bit(output sum, output cout, input in1, in2, input cin);
	wire x;
	
	xor(sum, in1, in2, cin);
	and(x, in1, in2);
	or(cout, x, cin);
	
endmodule"
31.654000,216.93,0.03159158400202186,31.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);	
	wire [3:0] c;
	
	adder_1bit a1(sum[0], c[0], in1[0], in2[0], cin);
	adder_1bit a2(sum[1], c[1], in1[1], in2[1], c[0]);
	adder_1bit a3(sum[2], c[2], in1[2], in2[2], c[1]);
	adder_1bit a4(sum[3], cout, in1[3], in2[3], c[2]);
	
endmodule

module adder_1bit(output sum, cout, input in1, in2, input cin);
	wire x, y, z;
	
	xor(sum, in1, in2, cin);
	and(x, in1, in2);
	and(y, in1, cin);
	and(z, in2, cin);
	or(cout, x, y, z);
	
endmodule"
31.654000,216.93,0.03159158400202186,32.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);	
	wire [3:0] c;
	
	adder_1bit a1(sum[0], c[0], in1[0], in2[0], cin);
	adder_1bit a2(sum[1], c[1], in1[1], in2[1], c[0]);
	adder_1bit a3(sum[2], c[2], in1[2], in2[2], c[1]);
	adder_1bit a4(sum[3], cout, in1[3], in2[3], c[2]);
	
endmodule

module adder_1bit(output sum, cout, input in1, in2, input cin);
	wire x, y, z;
	
	xor(sum, in1, in2, cin);
	and(x, in1, in2);
	and(y, in1, cin);
	and(z, in2, cin);
	or(cout, x, y, z);
	
endmodule"
31.654000,216.93,0.03159158400202186,33.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);	
wire c1, c2, c3;

full_adder FA1(sum[0], c1, in1[0], in2[0], cin);
full_adder FA2(sum[1], c2, in1[1], in2[1], c1);
full_adder FA3(sum[2], c3, in1[2], in2[2], c2);
full_adder FA4(sum[3], cout, in1[3], in2[3], c3);

endmodule

module full_adder(output sum, output cout, input in1, in2, cin);
wire x, y, z;

xor(sum, in1, in2, cin);
and(x, in1, in2);
and(y, in1, cin);
and(z, in2, cin);
or(cout, x, y, z);

endmodule"
N/A,N/A,-1,34.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);	
0.	assign {cout, sum} = in1 + in2 + cin;
endmodule

module test_adder;
reg [3:0] in1, in2;
reg cin;
wire [3:0] sum;
wire cout;

adder a1(sum, cout, in1, in2, cin);

initial
begin
	$monitor($time, "" in1=%b, in2=%b, cin=%b, sum=%b, cout=%b"", in1, in2, cin, sum, cout);
	in1 = 4'b0000;
	in2 = 4'b0000;
	cin = 1'b0;
	#10;
	in1 = 4'b0000;
	in2 = 4'b0001;
	cin = 1'b0;
	#10;
	in1 = 4'b0001;
	in2 = 4'b0001;
	cin = 1'b0;
	#10;
	in1 = 4'b0010;
	in2 = 4'b0010;
	cin = 1'b0;
	#10;
	in1 = 4'b0010;
	in2 = 4'b0011;
	cin = 1'b0;
	#10;
	in1 = 4'b0011;
	in2 = 4'b0011;
	cin = 1'b0;
	#10;
	in1 = 4'b0100;
	in2 = 4'b0100;
	cin = 1'b0;
	#10;
	in1 = 4'b0101;
	in2 = 4'b0101;
	cin = 1'b0;
	#10;
	in1 = 4'b0110;
	in2 = 4'b0110;
	cin = 1'b0;
	#10;
	in1 = 4'b0111;
	in2 = 4'b0111;
	cin = 1'b0;
	#10;
	in1 = 4'b1000;
	in2"
N/A,N/A,-1,35.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);	:
	wire [3:0] c;
	wire [3:0] s;
	
	assign c[0] = cin;
	assign s[0] = in1[0] ^ in2[0];
	assign s[1] = in1[1] ^ in2[1];
	assign s[2] = in1[2] ^ in2[2];
	assign s[3] = in1[3] ^ in2[3];
	
	assign c[1] = (in1[0] & in2[0]) | (in1[0] & c[0]) | (in2[0] & c[0]);
	assign c[2] = (in1[1] & in2[1]) | (in1[1] & c[1]) | (in2[1] & c[1]);
	assign c[3] = (in1[2] & in2[2]) | (in1[2] & c[2]) | (in2[2] & c[2]);
	
	assign cout = (in1[3] & in2[3]) | (in1[3] & c[3]) | (in2[3] & c[3]);
	
	assign sum[0] = s[0];
	assign sum[1] = s[1];
	assign sum[2] = s[2];
	assign sum[3] = s[3];
	
endmodule

module test_adder;
	reg [3:0] in1;
	reg [3:0] in2;
	reg cin;
	wire [3:0] sum;
	wire cout;
	
	adder dut(sum, cout, in1, in2, cin);
	
	initial
	begin
		$monitor(""in1 = %b, in2 = %b, cin = %b, sum = %b, cout = %b"", in1, in2, cin, sum, cout);
		
		in1 = 4'b0000;
		in2 = 4'"
N/A,N/A,-1,36.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);
reg
    [3:0]
    sum;
    
    // The output is a 1-bit bus.
    assign
        cout = sum[3],
        sum = in1 + in2 + cin;
endmodule

module test_adder;
    reg [3:0] in1, in2;
    reg cin;
    wire [3:0] sum;
    wire cout;
    
    // Instantiate the adder design.
    adder dut(sum, cout, in1, in2, cin);
    
    // Initialize inputs.
    initial begin
        in1 = 4'b0000;
        in2 = 4'b0000;
        cin = 1'b0;
        #10;
        in1 = 4'b0001;
        in2 = 4'b0001;
        cin = 1'b0;
        #10;
        in1 = 4'b0010;
        in2 = 4'b0010;
        cin = 1'b0;
        #10;
        in1 = 4'b0011;
        in2 = 4'b0011;
        cin = 1'b0;
        #10;
        in1 = 4'b0100;
        in2 = 4'b0100;
        cin = 1'b0;
        #10;
        in1 = 4'b0101;
        in2 = 4'b0101;
        cin = 1'b0;
        #10;
        in1 = 4'b0110;
        in2 = 4'b0110;
        cin = 1'b0;
        #10;
        in1 = 4'b0111;
        in2 = 4'b0111;
        cin = 1'b0;
        #10;
        in1 = 4'b1000;
        in2 = 4'b1000;
        cin = 1'b0;
        #10;
        in1 = 4'b1001;
        in2 = 4'b1001;
        cin = 1'b0;
        #10;
        in1 = 4'b1010"
N/A,N/A,-1,37.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);	b    
	wire c1, c2, c3;
	
	adder_1bit a1(sum[0], c1, in1[0], in2[0], cin);
	adder_1bit a2(sum[1], c2, in1[1], in2[1], c1);
	adder_1bit a3(sum[2], c3, in1[2], in2[2], c2);
	adder_1bit a4(sum[3], cout, in1[3], in2[3], c3);
endmodule

module adder_1bit(output sum, output cout, input in1, in2, input cin);
	wire xor1, and1, and2;
	
	xor(xor1, in1, in2);
	xor(sum, xor1, cin);
	and(and1, xor1, cin);
	and(and2, in1, in2);
	or(cout, and1, and2);
endmodule

module adder_4bit(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);
	wire c1, c2, c3;
	
	adder_1bit a1(sum[0], c1, in1[0], in2[0], cin);
	adder_1bit a2(sum[1], c2, in1[1], in2[1], c1);
	adder_1bit a3(sum[2], c3, in1[2], in2[2], c2);
	adder_1bit a4(sum[3], cout, in1[3], in2[3], c3);
endmodule"
N/A,N/A,-1,38.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);
 w

endmodule

module test_adder;

reg [3:0] in1, in2;
reg cin;
wire [3:0] sum;
wire cout;

adder a1(sum, cout, in1, in2, cin);

initial
begin
    $monitor($time, "" in1=%b, in2=%b, cin=%b, sum=%b, cout=%b"", in1, in2, cin, sum, cout);
    in1 = 4'b0000;
    in2 = 4'b0000;
    cin = 1'b0;
    #10
    in1 = 4'b0000;
    in2 = 4'b0001;
    cin = 1'b0;
    #10
    in1 = 4'b0000;
    in2 = 4'b0010;
    cin = 1'b0;
    #10
    in1 = 4'b0000;
    in2 = 4'b0011;
    cin = 1'b0;
    #10
    in1 = 4'b0000;
    in2 = 4'b0100;
    cin = 1'b0;
    #10
    in1 = 4'b0000;
    in2 = 4'b0101;
    cin = 1'b0;
    #10
    in1 = 4'b0000;
    in2 = 4'b0110;
    cin = 1'b0;
    #10
    in1 = 4'b0000;
    in2 = 4'b0111;
    cin = 1'b0;
    #10
    in1 = 4'b0000;
    in2 = 4'b1000;
    cin = 1'b0;
    #10
    in1 = 4'b0000;
    in2 = 4'b1001;
    cin = 1'b0;
    #10
    in1 = 4'b0000;
    in2 = 4'b1010;
    cin = 1'b0;
    #10
    in1 = 4'b0000;
    in2"
N/A,N/A,-1,39.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);	
	 w1 w2 w3 w4 w5 w6 w7 w8 w9 w10 w11 w12 w13 w14 w15 w16 w17 w18 w19 w20 w21 w22 w23 w24 w25 w26 w27 w28 w29 w30 w31 w32 w33 w34 w35 w36 w37 w38 w39 w40 w41 w42 w43 w44 w45 w46 w47 w48 w49 w50 w51 w52 w53 w54 w55 w56 w57 w58 w59 w60 w61 w62 w63 w64 w65 w66 w67 w68 w69 w70 w71 w72 w73 w74 w75 w76 w77 w78 w79 w80 w81 w82 w83 w84 w85 w86 w87 w88 w89 w90 w91 w92 w93 w94 w95 w96 w97 w98 w99 w100 w101 w102 w103 w104 w105 w106 w107 w108 w109 w110 w111 w112 w113 w114 w115 w116 w117 w118 w119 w120 w121 w122 w123 w124 w125 w126 w127 w128 w129 w130 w131 w132 w133 w134 w135 w136 w137 w138 w139 w140 w141 w142 w143 w144 w145 w146 w147 w148 w149 w150 w151 w152 w153 w154 w155 w156 w157 w158 w159 w160 w161 w162 w163 w164 w165 w166 w167 w168 w169 w170 w171 w172 w173 w174 w175 w176 w177 w178 w179 w180 w181 w182 w183 w184 w185 w186 w187 w188 w189 w190 w191 w192 w193 w194 w195 w196 w197 w198 w199 w200 w201 w202 w203 w204 w205 w206 w207 w208 w209 w210 w211 w212 w213 w214 w215 w216 w217 w218 w219 w220 w221 w222 w223 w224 w225 w226 w227 w228 w229 w230 w231 w232 w233 w234 w235 w236 w237 w238 w239 w240 w241 w242 w243 w244 w245 w246 w247 w248 w"
N/A,N/A,-1,40.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);

    1: assign sum = in1 + in2 + cin;
    2: assign cout = (in1[3] & in2[3]) | (in1[3] & cin) | (in2[3] & cin);

endmodule

module test_adder;

reg [3:0] in1, in2;
reg cin;
wire [3:0] sum;
wire cout;

adder a1(sum, cout, in1, in2, cin);

initial
begin
    $monitor($time, "" in1=%b, in2=%b, cin=%b, sum=%b, cout=%b"", in1, in2, cin, sum, cout);
    in1 = 4'b0000; in2 = 4'b0000; cin = 1'b0;
    #10 in1 = 4'b0001; in2 = 4'b0001;
    #10 in1 = 4'b0010; in2 = 4'b0010;
    #10 in1 = 4'b0011; in2 = 4'b0011;
    #10 in1 = 4'b0100; in2 = 4'b0100;
    #10 in1 = 4'b0101; in2 = 4'b0101;
    #10 in1 = 4'b0110; in2 = 4'b0110;
    #10 in1 = 4'b0111; in2 = 4'b0111;
    #10 in1 = 4'b1000; in2 = 4'b1000;
    #10 in1 = 4'b1001; in2 = 4'b1001;
    #10 in1 = 4'b1010; in2 = 4'b1010;
    #10 in1 = 4'b1011; in2 = 4'b1011;
    #10 in1 = 4'b1100; in2 = 4'b1100;
    #10 in1 = 4'b1101; in2 = 4'b1101;
    #10 in1 = 4'b1110; in2 = 4'b1110;
    #10"
31.654000,216.93,0.03159158400202186,41.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);	
	wire [3:0] c;
	
	adder_1bit a1(sum[0], c[0], in1[0], in2[0], cin);
	adder_1bit a2(sum[1], c[1], in1[1], in2[1], c[0]);
	adder_1bit a3(sum[2], c[2], in1[2], in2[2], c[1]);
	adder_1bit a4(sum[3], cout, in1[3], in2[3], c[2]);
	
endmodule

module adder_1bit(output sum, cout, input in1, in2, input cin);
	wire x, y, z;
	
	xor(sum, in1, in2, cin);
	and(x, in1, in2);
	and(y, in1, cin);
	and(z, in2, cin);
	or(cout, x, y, z);
	
endmodule"
31.654000,216.93,0.03159158400202186,42.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);	
	wire [3:0] c;
	
	adder_1bit a1(sum[0], c[0], in1[0], in2[0], cin);
	adder_1bit a2(sum[1], c[1], in1[1], in2[1], c[0]);
	adder_1bit a3(sum[2], c[2], in1[2], in2[2], c[1]);
	adder_1bit a4(sum[3], cout, in1[3], in2[3], c[2]);
	
endmodule

module adder_1bit(output sum, cout, input in1, in2, input cin);
	wire x, y, z;
	
	xor(sum, in1, in2, cin);
	and(x, in1, in2);
	and(y, in1, cin);
	and(z, in2, cin);
	or(cout, x, y, z);
	
endmodule"
31.654000,216.93,0.03159158400202186,43.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);	
	wire [3:0] c;
	
	adder_1bit a1(sum[0], c[0], in1[0], in2[0], cin);
	adder_1bit a2(sum[1], c[1], in1[1], in2[1], c[0]);
	adder_1bit a3(sum[2], c[2], in1[2], in2[2], c[1]);
	adder_1bit a4(sum[3], cout, in1[3], in2[3], c[2]);
	
endmodule

module adder_1bit(output sum, cout, input in1, in2, input cin);
	wire x, y, z;
	
	xor(sum, in1, in2, cin);
	and(x, in1, in2);
	and(y, in1, cin);
	and(z, in2, cin);
	or(cout, x, y, z);
	
endmodule"
N/A,N/A,-1,44.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);	
 cin = 1'b0;
endmodule

module test_adder;
	reg [3:0] in1, in2;
	reg cin;
	wire [3:0] sum;
	wire cout;
	
	adder a1(sum, cout, in1, in2, cin);
	
	initial
	begin
		$monitor(""in1 = %b, in2 = %b, cin = %b, sum = %b, cout = %b"", in1, in2, cin, sum, cout);
		
		in1 = 4'b0000;
		in2 = 4'b0000;
		cin = 1'b0;
		#10
		
		in1 = 4'b0000;
		in2 = 4'b0001;
		cin = 1'b0;
		#10
		
		in1 = 4'b0001;
		in2 = 4'b0001;
		cin = 1'b0;
		#10
		
		in1 = 4'b0010;
		in2 = 4'b0010;
		cin = 1'b0;
		#10
		
		in1 = 4'b0011;
		in2 = 4'b0011;
		cin = 1'b0;
		#10
		
		in1 = 4'b0100;
		in2 = 4'b0100;
		cin = 1'b0;
		#10
		
		in1 = 4'b0101;
		in2 = 4'b0101;
		cin = 1'b0;
		#10
		
		in1 = 4'b0110;
		in2 = 4'b0110;
		cin = 1'b0;
		#10
		
		in1 = 4'b0111;
		in2 = 4'b0111;
		cin = 1'b0;
		#10
		
		in1 = 4'b1000;
		in2 = 4'b1000;
		cin = 1'b0;
		#10
		
		in1 = 4'b1001;"
N/A,N/A,-1,45.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);	 cic_4_1_16_nofraction
	wire [3:0] sum;
	wire cout;
	wire [3:0] in1;
	wire [3:0] in2;
	wire cin;
	wire [3:0] c;
	wire [3:0] g;
	wire [3:0] p;
	wire [3:0] a;
	wire [3:0] b;
	wire [3:0] cin_d;
	wire [3:0] g_d;
	wire [3:0] p_d;
	wire [3:0] a_d;
	wire [3:0] b_d;
	wire [3:0] c_d;
	wire [3:0] sum_d;
	wire [3:0] cout_d;
	wire [3:0] in1_d;
	wire [3:0] in2_d;
	wire [3:0] cin_dd;
	wire [3:0] g_dd;
	wire [3:0] p_dd;
	wire [3:0] a_dd;
	wire [3:0] b_dd;
	wire [3:0] c_dd;
	wire [3:0] sum_dd;
	wire [3:0] cout_dd;
	wire [3:0] in1_dd;
	wire [3:0] in2_dd;
	wire [3:0] cin_d_d;
	wire [3:0] g_d_d;
	wire [3:0] p_d_d;
	wire [3:0] a_d_d;
	wire [3:0] b_d_d;
	wire [3:0] c_d_d;
	wire [3:0] sum_d_d;
	wire [3:0] cout_d_d;
	wire [3:0] in1_d_d;
	wire [3:0] in2_d_d;
	wire [3"
N/A,N/A,-1,46.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);	bint
	wire [3:0] sum;
	wire cout;
	wire [3:0] in1;
	wire [3:0] in2;
	wire cin;
	
	// Create the wires for each input and output.
	wire [3:0] in1_w;
	wire [3:0] in2_w;
	wire cin_w;
	
	// Create the wires for each input and output.
	wire [3:0] sum_w;
	wire cout_w;
	
	// Create the wires for each input and output.
	wire [3:0] in1_w_temp;
	wire [3:0] in2_w_temp;
	wire cin_w_temp;
	
	// Create the wires for each input and output.
	wire [3:0] sum_w_temp;
	wire cout_w_temp;
	
	// Create the wires for each input and output.
	wire [3:0] in1_w_temp_temp;
	wire [3:0] in2_w_temp_temp;
	wire cin_w_temp_temp;
	
	// Create the wires for each input and output.
	wire [3:0] sum_w_temp_temp;
	wire cout_w_temp_temp;
	
	// Create the wires for each input and output.
	wire [3:0] in1_w_temp_temp_temp;
	wire [3:0] in2_w_temp_temp_temp;
	wire cin_w_temp_temp_temp;
	
	// Create the wires for each input and output.
	wire [3:0] sum_w_temp_temp_temp;
	wire cout_w_temp_temp_temp;
	
	// Create the wires for each input and output.
	wire [3:0] in1_w_temp_temp_temp_temp;
	wire [3:0] in2_w_temp_temp_temp_temp;
	wire cin_w_temp_temp_temp_"
27.132000,87.37,-0.5,47.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);

wireop op1(sum[0], in1[0], in2[0], cin);
wireop op2(sum[1], in1[1], in2[1], cin);
wireop op3(sum[2], in1[2], in2[2], cin);
wireop op4(sum[3], in1[3], in2[3], cin);

wireop op5(cout, in1[3], in2[3], cin);

endmodule

module wireop(output wire out, input wire in1, in2, cin);

assign out = in1 ^ in2 ^ cin;

endmodule"
31.654000,216.93,0.03159158400202186,48.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);
wire c1, c2, c3;

full_adder FA1(sum[0], c1, in1[0], in2[0], cin);
full_adder FA2(sum[1], c2, in1[1], in2[1], c1);
full_adder FA3(sum[2], c3, in1[2], in2[2], c2);
full_adder FA4(sum[3], cout, in1[3], in2[3], c3);

endmodule

module full_adder(output sum, output cout, input in1, in2, cin);
wire x, y, z;

xor(sum, in1, in2, cin);
and(x, in1, in2);
and(y, in1, cin);
and(z, in2, cin);
or(cout, x, y, z);

endmodule"
N/A,N/A,-1,49.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);
wire
1.0
2.0
3.0
4.0
5.0
6.0
7.0
8.0
9.0
10.0
11.0
12.0
13.0
14.0
15.0
16.0
17.0
18.0
19.0
20.0
21.0
22.0
23.0
24.0
25.0
26.0
27.0
28.0
29.0
30.0
31.0
32.0
33.0
34.0
35.0
36.0
37.0
38.0
39.0
40.0
41.0
42.0
43.0
44.0
45.0
46.0
47.0
48.0
49.0
50.0
51.0
52.0
53.0
54.0
55.0
56.0
57.0
58.0
59.0
60.0
61.0
62.0
63.0
64.0
65.0
66.0
67.0
68.0
69.0
70.0
71.0
72.0
73.0
74.0
75.0
76.0
77.0
78.0
79.0
80.0
81.0
82.0
83.0
84.0
85.0
86.0
87.0
88.0
89.0
90.0
91.0
92.0
93.0
94.0
95.0
96.0
97.0
98.0
99.0
100.0
101.0
102.0
103.0
104.0
105.0
106.0
107.0
108.0
109.0
110.0
111.0
112.0
113.0
114.0
115.0
116.0
117.0
118.0
119.0
120.0
121.0
122.0
123.0
124.0
125"
N/A,N/A,-1,50.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);


.sum(sum),
.cout(cout),
.in1(in1),
.in2(in2),
.cin(cin);

endmodule

module test_adder;

reg [3:0] in1, in2;
reg cin;
wire [3:0] sum;
wire cout;

adder a1(sum, cout, in1, in2, cin);

initial
begin
    $monitor(""in1 = %b, in2 = %b, cin = %b, sum = %b, cout = %b"", in1, in2, cin, sum, cout);
    in1 = 4'b0000;
    in2 = 4'b0000;
    cin = 1'b0;
    #10
    in1 = 4'b0000;
    in2 = 4'b0001;
    cin = 1'b0;
    #10
    in1 = 4'b0000;
    in2 = 4'b0010;
    cin = 1'b0;
    #10
    in1 = 4'b0000;
    in2 = 4'b0011;
    cin = 1'b0;
    #10
    in1 = 4'b0000;
    in2 = 4'b0100;
    cin = 1'b0;
    #10
    in1 = 4'b0000;
    in2 = 4'b0101;
    cin = 1'b0;
    #10
    in1 = 4'b0000;
    in2 = 4'b0110;
    cin = 1'b0;
    #10
    in1 = 4'b0000;
    in2 = 4'b0111;
    cin = 1'b0;
    #10
    in1 = 4'b0000;
    in2 = 4'b1000;
    cin = 1'b0;
    #10
    in1 = 4'b0000;
    in2 = 4'b1001;
    cin = 1'b0;
    #10
    in1 = 4'b0000;
    in2 ="
31.654000,216.93,0.03159158400202186,51.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);	
	wire [3:0] c;
	
	adder_1bit a1(sum[0], c[0], in1[0], in2[0], cin);
	adder_1bit a2(sum[1], c[1], in1[1], in2[1], c[0]);
	adder_1bit a3(sum[2], c[2], in1[2], in2[2], c[1]);
	adder_1bit a4(sum[3], cout, in1[3], in2[3], c[2]);
	
endmodule

module adder_1bit(output sum, cout, input in1, in2, input cin);
	wire x, y, z;
	
	xor(sum, in1, in2, cin);
	and(x, in1, in2);
	and(y, in1, cin);
	and(z, in2, cin);
	or(cout, x, y, z);
	
endmodule"
N/A,N/A,-1,52.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);	
wire c	;
wire [3:0]	;
wire [3:0]	;
wire [3:0]	;
wire [3:0]	;
wire [3:0]	;
wire [3:0]	;
wire [3:0]	;
wire [3:0]	;
wire [3:0]	;
wire [3:0]	;
wire [3:0]	;
wire [3:0]	;
wire [3:0]	;
wire [3:0]	;
wire [3:0]	;
wire [3:0]	;
wire [3:0]	;
wire [3:0]	;
wire [3:0]	;
wire [3:0]	;
wire [3:0]	;
wire [3:0]	;
wire [3:0]	;
wire [3:0]	;
wire [3:0]	;
wire [3:0]	;
wire [3:0]	;
wire [3:0]	;
wire [3:0]	;
wire [3:0]	;
wire [3:0]	;
wire [3:0]	;
wire [3:0]	;
wire [3:0]	;
wire [3:0]	;
wire [3:0]	;
wire [3:0]	;
wire [3:0]	;
wire [3:0]	;
wire [3:0]	;
wire [3:0]	;
wire [3:0]	;
wire [3:0]	;
wire [3:0]	;
wire [3:0]	;
wire [3:0]	;
wire [3:0]	;
wire [3:0]	;
wire [3:0]	;
wire [3:0]	;
wire [3:0]	;
wire [3:0]	;
wire [3:0]	;
wire [3:0]	;
wire [3:0]	"
N/A,N/A,-1,53.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);	 c1;

wire c1;
wire [3:0] sum;
wire cout;
wire [3:0] in1;
wire [3:0] in2;

// The following is a 1-bit adder design
// The module below includes the inputs and outputs in the definition.
// Please finish the module.

module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);

wire c1;
wire [3:0] sum;
wire cout;
wire [3:0] in1;
wire [3:0] in2;

// The following is a 2-bit adder design
// The module below includes the inputs and outputs in the definition.
// Please finish the module.

module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);

wire c1;
wire [3:0] sum;
wire cout;
wire [3:0] in1;
wire [3:0] in2;

// The following is a 3-bit adder design
// The module below includes the inputs and outputs in the definition.
// Please finish the module.

module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);

wire c1;
wire [3:0] sum;
wire cout;
wire [3:0] in1;
wire [3:0] in2;

// The following is a 4-bit adder design
// The module below includes the inputs and outputs in the definition.
// Please finish the module.

module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);

wire c1;
wire [3:0] sum;
wire cout;
wire [3:0] in1;
wire [3:0] in2;

// The following is a 5-bit adder design
// The module below includes the inputs and outputs in the definition.
// Please finish the module"
N/A,N/A,-1,54.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);

wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
wireop
"
31.654000,216.93,0.03159158400202186,55.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);	
wire c1, c2, c3;

full_adder FA1(sum[0], c1, in1[0], in2[0], cin);
full_adder FA2(sum[1], c2, in1[1], in2[1], c1);
full_adder FA3(sum[2], c3, in1[2], in2[2], c2);
full_adder FA4(sum[3], cout, in1[3], in2[3], c3);

endmodule

module full_adder(output sum, output cout, input in1, in2, cin);
wire x, y, z;

xor(sum, in1, in2, cin);
and(x, in1, in2);
and(y, in1, cin);
and(z, in2, cin);
or(cout, x, y, z);

endmodule"
31.654000,216.93,0.03159158400202186,56.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);	
wire c1, c2, c3;

full_adder FA1(sum[0], c1, in1[0], in2[0], cin);
full_adder FA2(sum[1], c2, in1[1], in2[1], c1);
full_adder FA3(sum[2], c3, in1[2], in2[2], c2);
full_adder FA4(sum[3], cout, in1[3], in2[3], c3);

endmodule

module full_adder(output sum, output cout, input in1, in2, cin);
wire x, y, z;

xor(sum, in1, in2, cin);
and(x, in1, in2);
and(y, in1, cin);
and(z, in2, cin);
or(cout, x, y, z);

endmodule"
N/A,N/A,-1,57.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);	
0.	assign {cout, sum} = in1 + in2 + cin;
endmodule

module test_adder;
reg [3:0] in1, in2;
reg cin;
wire [3:0] sum;
wire cout;

adder a1(sum, cout, in1, in2, cin);

initial
begin
	$monitor($time, "" in1=%b, in2=%b, cin=%b, sum=%b, cout=%b"", in1, in2, cin, sum, cout);
	in1 = 4'b0000;
	in2 = 4'b0000;
	cin = 1'b0;
	#10;
	in1 = 4'b0000;
	in2 = 4'b0001;
	cin = 1'b0;
	#10;
	in1 = 4'b0001;
	in2 = 4'b0001;
	cin = 1'b0;
	#10;
	in1 = 4'b0010;
	in2 = 4'b0010;
	cin = 1'b0;
	#10;
	in1 = 4'b0010;
	in2 = 4'b0011;
	cin = 1'b0;
	#10;
	in1 = 4'b0011;
	in2 = 4'b0011;
	cin = 1'b0;
	#10;
	in1 = 4'b0100;
	in2 = 4'b0100;
	cin = 1'b0;
	#10;
	in1 = 4'b0101;
	in2 = 4'b0101;
	cin = 1'b0;
	#10;
	in1 = 4'b0110;
	in2 = 4'b0110;
	cin = 1'b0;
	#10;
	in1 = 4'b0111;
	in2 = 4'b0111;
	cin = 1'b0;
	#10;
	in1 = 4'b1000;
	in2"
N/A,N/A,-1,58.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);	.
	wire [3:0] c;
	wire [3:0] sum;
	wire cout;
	
	assign c[0] = cin;
	assign c[1] = in1[0] ^ in2[0];
	assign c[2] = in1[1] ^ in2[1];
	assign c[3] = in1[2] ^ in2[2];
	
	fa f1(sum[0], c[0], in1[0], in2[0], cin);
	fa f2(sum[1], c[1], in1[1], in2[1], c[0]);
	fa f3(sum[2], c[2], in1[2], in2[2], c[1]);
	fa f4(sum[3], cout, in1[3], in2[3], c[2]);

endmodule

module fa(output sum, output cout, input a, input b, input cin);
	wire w1, w2, w3;
	
	xor(w1, a, b);
	xor(sum, w1, cin);
	and(w2, w1, cin);
	and(w3, a, b);
	or(cout, w2, w3);

endmodule

module testbench;
	reg [3:0] in1, in2;
	reg cin;
	wire [3:0] sum;
	wire cout;
	
	adder a1(sum, cout, in1, in2, cin);
	
	initial
	begin
		$monitor(""in1 = %b, in2 = %b, cin = %b, sum = %b, cout = %b"", in1, in2, cin, sum, cout);
		
		in1 = 4'b0000;
		in2 = 4'b0000;
		cin = 1'b0;
		#10
		
		in1 = 4'b0000;
		in2 = 4'b0001;
		cin = 1'b0;"
31.654000,216.93,0.03159158400202186,59.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);
wire	c1, c2, c3;

fa fa1(sum[0], c1, in1[0], in2[0], cin);
fa fa2(sum[1], c2, in1[1], in2[1], c1);
fa fa3(sum[2], c3, in1[2], in2[2], c2);
fa fa4(sum[3], cout, in1[3], in2[3], c3);

endmodule

module fa(output sum, output cout, input a, b, cin);
wire	c1, c2, c3;

xor(sum, a, b, cin);
and(c1, a, b);
and(c2, b, cin);
and(c3, a, cin);
or(cout, c1, c2, c3);

endmodule"
32.452000,109.17,-0.5,60.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);
wire cc;

fa fa0(sum[0], cc, in1[0], in2[0], cin);
fa fa1(sum[1], cc, in1[1], in2[1], cc);
fa fa2(sum[2], cc, in1[2], in2[2], cc);
fa fa3(sum[3], cout, in1[3], in2[3], cc);

endmodule

module fa(output sum, output cout, input a, b, cin);
wire c1, c2, c3;

xor(sum, a, b, cin);
and(c1, a, b);
and(c2, b, cin);
and(c3, a, cin);
or(cout, c1, c2, c3);

endmodule"
N/A,N/A,-1,61.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);
wire//;
//wire [3:0] in1, in2;
//wire cin;
//wire [3:0] sum;
//wire cout;

//assign in1 = in1;
//assign in2 = in2;
//assign cin = cin;
//assign sum = sum;
//assign cout = cout;

//assign in1 = in1;
//assign in2 = in2;
//assign cin = cin;
//assign sum = sum;
//assign cout = cout;

//assign in1 = in1;
//assign in2 = in2;
//assign cin = cin;
//assign sum = sum;
//assign cout = cout;

//assign in1 = in1;
//assign in2 = in2;
//assign cin = cin;
//assign sum = sum;
//assign cout = cout;

//assign in1 = in1;
//assign in2 = in2;
//assign cin = cin;
//assign sum = sum;
//assign cout = cout;

//assign in1 = in1;
//assign in2 = in2;
//assign cin = cin;
//assign sum = sum;
//assign cout = cout;

//assign in1 = in1;
//assign in2 = in2;
//assign cin = cin;
//assign sum = sum;
//assign cout = cout;

//assign in1 = in1;
//assign in2 = in2;
//assign cin = cin;
//assign sum = sum;
//assign cout = cout;

//assign in1 = in1;
//assign in2 = in2;
//assign cin = cin;
//assign sum = sum;
//assign cout = cout;

//assign in1 = in1;
//assign in2 = in2;
//assign cin = cin;
//assign sum = sum"
38.304000,198.83,0.026106934001670842,62.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);	
	

	wire [3:0] c;
	
	fa fa1(sum[0], c[0], in1[0], in2[0], cin);
	fa fa2(sum[1], c[1], in1[1], in2[1], c[0]);
	fa fa3(sum[2], c[2], in1[2], in2[2], c[1]);
	fa fa4(sum[3], cout, in1[3], in2[3], c[2]);
	
endmodule

module fa(output sum, output cout, input a, b, cin);
	wire w1, w2, w3;
	
	xor(w1, a, b);
	xor(sum, w1, cin);
	and(w2, w1, cin);
	and(w3, a, b);
	or(cout, w2, w3);
	
endmodule"
14.630000,74.12,-0.5,63.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);	
	wire	c1, c2, c3;
	
	half_adder h1(sum[0], c1, in1[0], in2[0]);
	half_adder h2(sum[1], c2, in1[1], in2[1]);
	half_adder h3(sum[2], c3, in1[2], in2[2]);
	half_adder h4(sum[3], cout, in1[3], in2[3]);
	
	or o1(cout, c1, c2, c3);
	
endmodule

module half_adder(output wire sum, output wire cout, input wire in1, in2);
	xor x1(sum, in1, in2);
	and a1(cout, in1, in2);
endmodule"
N/A,N/A,-1,64.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);	
	

cout = in1[3] ^ in2[3] ^ cin;
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	"
N/A,N/A,-1,65.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);
,out1, out2, out3, out4, out5, out6, out7, out8, out9, out10, out11, out12, out13, out14, out15, out16, out17, out18, out19, out20, out21, out22, out23, out24, out25, out26, out27, out28, out29, out30, out31, out32, out33, out34, out35, out36, out37, out38, out39, out40, out41, out42, out43, out44, out45, out46, out47, out48, out49, out50, out51, out52, out53, out54, out55, out56, out57, out58, out59, out60, out61, out62, out63, out64, out65, out66, out67, out68, out69, out70, out71, out72, out73, out74, out75, out76, out77, out78, out79, out80, out81, out82, out83, out84, out85, out86, out87, out88, out89, out90, out91, out92, out93, out94, out95, out96, out97, out98, out99, out100, out101, out102, out103, out104, out105, out106, out107, out108, out109, out110, out111, out112, out113, out114, out115, out116, out117, out118, out119, out120, out121, out122, out123, out124, out125, out126, out127, out128, out129, out130, out131, out132, out133, out134, out135, out136, out137, out138, out139, out140, out141, out142, out143, out144, out145, out146, out147, out148, out149, out150, out151, out152, out153, out154, out155, out156, out157, out158, out159, out160, out161, out162, out163, out164, out165, out166,"
N/A,N/A,-1,66.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);	 w1,w2,w3,w4,w5,w6,w7,w8,w9,w10,w11,w12,w13,w14,w15,w16,w17,w18,w19,w20,w21,w22,w23,w24,w25,w26,w27,w28,w29,w30,w31,w32,w33,w34,w35,w36,w37,w38,w39,w40,w41,w42,w43,w44,w45,w46,w47,w48,w49,w50,w51,w52,w53,w54,w55,w56,w57,w58,w59,w60,w61,w62,w63,w64,w65,w66,w67,w68,w69,w70,w71,w72,w73,w74,w75,w76,w77,w78,w79,w80,w81,w82,w83,w84,w85,w86,w87,w88,w89,w90,w91,w92,w93,w94,w95,w96,w97,w98,w99,w100,w101,w102,w103,w104,w105,w106,w107,w108,w109,w110,w111,w112,w113,w114,w115,w116,w117,w118,w119,w120,w121,w122,w123,w124,w125,w126,w127,w128,w129,w130,w131,w132,w133,w134,w135,w136,w137,w138,w139,w140,w141,w142,w143,w144,w145,w146,w147,w148,w149,w150,w151,w152,w153,w154,w155,w156,w157,w158,w159,w160,w161,w162,w163,w164,w165,w166,w"
N/A,N/A,-1,67.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);	
ir, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;

// Define the inputs and outputs
assign ir = in1[0] ^ in2[0];
assign j = in1[1] ^ in2[1];
assign k = in1[2] ^ in2[2];
assign l = in1[3] ^ in2[3];

assign cin = 0;

// Define the internal wires
wire c1, c2, c3;

// Define the internal connections
assign c1 = in1[0] & in2[0];
assign c2 = in1[1] & in2[1];
assign c3 = in1[2] & in2[2];

// Define the output
assign cout = c3 | (c1 & c2);

// Define the internal connections
assign sum[0] = in1[0] ^ in2[0] ^ c1;
assign sum[1] = in1[1] ^ in2[1] ^ c2;
assign sum[2] = in1[2] ^ in2[2] ^ c3;
assign sum[3] = in1[3] ^ in2[3] ^ c3;

endmodule

module test_adder;

// Define the inputs and outputs
reg [3:0] in1, in2;
reg cin;
wire [3:0] sum;
wire cout;

// Instantiate the design block
adder dut(sum, cout, in1, in2, cin);

// Define the stimulus
initial
begin
	// Initialize the inputs
	in1 = 4'b0000;
	in2 = 4'b0000;
	cin = 0;

	// Wait 100 ns for global reset to finish
	#100;
	
	// Add stimulus here
	in1 = 4'b0001;
	in2 = 4'b0001;
	cin = 0;
	#100;
	
	"
N/A,N/A,-1,68.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);

wire or1, or2, or3, or4, or5, or6, or7, or8, or9, or10, or11, or12, or13, or14, or15, or16, or17, or18, or19, or20, or21, or22, or23, or24, or25, or26, or27, or28, or29, or30, or31, or32, or33, or34, or35, or36, or37, or38, or39, or40, or41, or42, or43, or44, or45, or46, or47, or48, or49, or50, or51, or52, or53, or54, or55, or56, or57, or58, or59, or60, or61, or62, or63, or64, or65, or66, or67, or68, or69, or70, or71, or72, or73, or74, or75, or76, or77, or78, or79, or80, or81, or82, or83, or84, or85, or86, or87, or88, or89, or90, or91, or92, or93, or94, or95, or96, or97, or98, or99, or100, or101, or102, or103, or104, or105, or106, or107, or108, or109, or110, or111, or112, or113, or114, or115, or116, or117, or118, or119, or120, or121, or122, or123, or124, or125, or126, or127, or128, or129, or130, or131, or132, or133, or134, or135, or136, or137, or138, or139, or140, or141, or142, or143, or144, or145, or146, or147, or148, or149, or150, or151, or152, or153, or154, or155, or156, or157, or158, or159, or160, or161, or162, or163, or164, or165, or166"
N/A,N/A,-1,69.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);	b_in1, b_in2, b_cin;

assign b_in1 = ~in1;
assign b_in2 = ~in2;
assign b_cin = cin;

full_adder FA1(sum[0], c1, in1[0], in2[0], b_in1[0], b_in2[0], b_cin);
full_adder FA2(sum[1], c2, in1[1], in2[1], b_in1[1], b_in2[1], b_cin);
full_adder FA3(sum[2], c3, in1[2], in2[2], b_in1[2], b_in2[2], b_cin);
full_adder FA4(sum[3], cout, in1[3], in2[3], b_in1[3], b_in2[3], b_cin);

endmodule

module full_adder(output sum, output cout, input in1, in2, input cin);

wire w1, w2, w3;

xor(w1, in1, in2);
xor(sum, w1, cin);
and(w2, w1, cin);
and(w3, in1, in2);
or(cout, w2, w3);

endmodule

module test_adder;

reg [3:0] in1, in2;
reg cin;
wire [3:0] sum;
wire cout;

adder a1(sum, cout, in1, in2, cin);

initial
begin
    $monitor($time, "" in1=%b, in2=%b, cin=%b, sum=%b, cout=%b"", in1, in2, cin, sum, cout);
    in1 = 4'b0000; in2 = 4'b0000; cin = 1'b0;
    #10 in1 = 4'b0001; in2 = 4'b0001;
    #10 in1 = 4'b0010; in2 = 4'b"
N/A,N/A,-1,70.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);
 winput [3:0] in1, in2;
 woutput [3:0] sum;
 woutput cout;
 
 wire [3:0] sum;
 wire cout;
 
 wire [3:0] sum;
 wire cout;
 
 wire [3:0] sum;
 wire cout;
 
 wire [3:0] sum;
 wire cout;
 
 wire [3:0] sum;
 wire cout;
 
 wire [3:0] sum;
 wire cout;
 
 wire [3:0] sum;
 wire cout;
 
 wire [3:0] sum;
 wire cout;
 
 wire [3:0] sum;
 wire cout;
 
 wire [3:0] sum;
 wire cout;
 
 wire [3:0] sum;
 wire cout;
 
 wire [3:0] sum;
 wire cout;
 
 wire [3:0] sum;
 wire cout;
 
 wire [3:0] sum;
 wire cout;
 
 wire [3:0] sum;
 wire cout;
 
 wire [3:0] sum;
 wire cout;
 
 wire [3:0] sum;
 wire cout;
 
 wire [3:0] sum;
 wire cout;
 
 wire [3:0] sum;
 wire cout;
 
 wire [3:0] sum;
 wire cout;
 
 wire [3:0] sum;
 wire cout;
 
 wire [3:0] sum;
 wire cout;
 
 wire [3:0] sum;
 wire cout;
 
 wire [3:0] sum;
 wire cout;
 
 wire [3:0] sum;
 wire cout;
 
 wire [3:0] sum;
 wire cout;
 
 wire [3:0] sum;
 wire cout;
 
 wire [3:0] sum;
 wire cout;
 
 wire [3:0] sum;
 wire cout;
 
 wire [3:0] sum;
 wire cout;
 
 wire [3:0] sum;
 wire cout;
 
 wire [3"
N/A,N/A,-1,71.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);	
 in1, in2, cin are 4-bit inputs.
 sum, cout are 4-bit outputs.

// Create modules for each adder.
// Create a 4-bit adder module.
// Create a 4-bit adder module.
// Create a 4-bit adder module.
// Create a 4-bit adder module.
// Create a 4-bit adder module.
// Create a 4-bit adder module.
// Create a 4-bit adder module.
// Create a 4-bit adder module.
// Create a 4-bit adder module.
// Create a 4-bit adder module.
// Create a 4-bit adder module.
// Create a 4-bit adder module.
// Create a 4-bit adder module.
// Create a 4-bit adder module.
// Create a 4-bit adder module.
// Create a 4-bit adder module.
// Create a 4-bit adder module.
// Create a 4-bit adder module.
// Create a 4-bit adder module.
// Create a 4-bit adder module.
// Create a 4-bit adder module.
// Create a 4-bit adder module.
// Create a 4-bit adder module.
// Create a 4-bit adder module.
// Create a 4-bit adder module.
// Create a 4-bit adder module.
// Create a 4-bit adder module.
// Create a 4-bit adder module.
// Create a 4-bit adder module.
// Create a 4-bit adder module.
// Create a 4-bit adder module.
// Create a 4-bit adder module.
// Create a 4-bit adder module.
// Create a 4-bit adder module.
// Create a 4-bit adder module.
// Create a 4-bit adder module.
// Create a 4-bit adder module.
// Create a 4-bit adder module.
// Create a 4-bit adder module.
// Create a 4-bit adder module.
// Create a 4-bit adder module.
// Create a 4-bit adder module.
//"
N/A,N/A,-1,72.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin); 1
    wire [3:0] c;
    wire [3:0] sum;
    wire cout;
    
    assign c[0] = cin;
    assign c[1] = in1[0] ^ in2[0];
    assign c[2] = in1[1] ^ in2[1];
    assign c[3] = in1[2] ^ in2[2];
    
    fa f1(sum[0], c[0], in1[0], in2[0], cin);
    fa f2(sum[1], c[1], in1[1], in2[1], c[0]);
    fa f3(sum[2], c[2], in1[2], in2[2], c[1]);
    fa f4(sum[3], cout, in1[3], in2[3], c[2]);
endmodule

module fa(output sum, output cout, input a, input b, input cin);
    wire w1, w2, w3;
    
    xor(w1, a, b);
    xor(sum, w1, cin);
    and(w2, w1, cin);
    and(w3, a, b);
    or(cout, w2, w3);
endmodule

module testbench;
    reg [3:0] in1, in2;
    reg cin;
    wire [3:0] sum;
    wire cout;
    
    adder a1(sum, cout, in1, in2, cin);
    
    initial
    begin
        in1 = 4'b0000;
        in2 = 4'b0000;
        cin = 0;
        #10
        in1 = 4'b0000;
        in2 = 4'b0001;
        cin = 0;
        #10
        in1 = 4'b0000;
        in2 = 4'b0010;
        cin = 0;
        #10
        in1 = 4'b0000;
        in2 = 4'b0011;
        cin ="
N/A,N/A,-1,73.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);
wire'b0;
wire'b1;
wire'b0;
wire'b0;
wire'b0;
wire'b0;
wire'b0;
wire'b0;
wire'b0;
wire'b0;
wire'b0;
wire'b0;
wire'b0;
wire'b0;
wire'b0;
wire'b0;
wire'b0;
wire'b0;
wire'b0;
wire'b0;
wire'b0;
wire'b0;
wire'b0;
wire'b0;
wire'b0;
wire'b0;
wire'b0;
wire'b0;
wire'b0;
wire'b0;
wire'b0;
wire'b0;
wire'b0;
wire'b0;
wire'b0;
wire'b0;
wire'b0;
wire'b0;
wire'b0;
wire'b0;
wire'b0;
wire'b0;
wire'b0;
wire'b0;
wire'b0;
wire'b0;
wire'b0;
wire'b0;
wire'b0;
wire'b0;
wire'b0;
wire'b0;
wire'b0;
wire'b0;
wire'b0;
wire'b0;
wire'b0;
wire'b0;
wire'b0;
wire'b0;
wire'b0;
wire'b0;
wire'b0;
wire'b0;
wire'b0;
wire'b0;
wire'b0;
wire'b0;
wire'b0;
wire'b0;
wire'b0;
wire'b0;
wire'b0;
wire'b0;
wire'b0;
wire'b0;
wire'b0;
wire'b0;
wire'b0;
wire'b0;
wire'b0;
wire'b0;
wire'b0;
wire"
N/A,N/A,-1,74.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);	 c [3:0] c;

always @(in1 or in2 or cin)
begin
	c[0] = cin;
	c[1] = in1[0] ^ in2[0];
	c[2] = in1[1] ^ in2[1];
	c[3] = in1[2] ^ in2[2];
	cout = in1[3] ^ in2[3];
	sum = in1 ^ in2 ^ c;
end

endmodule

module test_adder;

reg [3:0] in1, in2;
reg cin;
wire [3:0] sum;
wire cout;

adder a1(sum, cout, in1, in2, cin);

initial
begin
	$monitor(""in1 = %b, in2 = %b, cin = %b, sum = %b, cout = %b"", in1, in2, cin, sum, cout);
	in1 = 4'b0000; in2 = 4'b0000; cin = 1'b0;
	#10 in1 = 4'b0001; in2 = 4'b0001;
	#10 in1 = 4'b0010; in2 = 4'b0010;
	#10 in1 = 4'b0011; in2 = 4'b0011;
	#10 in1 = 4'b0100; in2 = 4'b0100;
	#10 in1 = 4'b0101; in2 = 4'b0101;
	#10 in1 = 4'b0110; in2 = 4'b0110;
	#10 in1 = 4'b0111; in2 = 4'b0111;
	#10 in1 = 4'b1000; in2 = 4'b1000;
	#10 in1 = 4'b1001; in2 = 4'b1001;
	#10 in1 = 4'b1010; in2 = 4'b1010;
	#10 in1 = 4'b1011; in2 = 4'b1011;
	#10 in1 = 4'b"
N/A,N/A,-1,75.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);	
4-bit adder design with a small chip-area

module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);

//Definition for Variables in the module
wire [3:0] sum;
wire cout;
wire [3:0] in1;
wire [3:0] in2;
wire cin;

//Load other module(s)

//Logical
assign sum = in1 + in2 + cin;
assign cout = (in1[0] & in2[0] & cin) | (in1[1] & in2[1] & cin) | (in1[2] & in2[2] & cin) | (in1[3] & in2[3] & cin);

endmodule
`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date:    16:46:00 11/10/2015 
// Design Name: 
// Module Name:    mux_4_1 
// Project Name: 
// Target Devices: 
// Tool versions: 
// Description: 
//
// Dependencies: 
//
// Revision: 
// Revision 0.01 - File Created
// Additional Comments: 
//
//////////////////////////////////////////////////////////////////////////////////
module mux_4_1(
    output reg y,
    input [3:0] a,
    input [3:0] b,
    input [3:0] c,
    input [3:0] d,
    input [1:0] sel
);

always @(sel)
    case(sel)
        2'b00: y <= a;
        2'b01: y <= b;
        2'b10: y <= c;
        2'b11: y <= d;
    endcase

endmodule
`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date:    16:46:00 11/10/2015 
//"
N/A,N/A,-1,76.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);
reg
- [3:0]
- [3:0]
- [3:0]
- [3:0]
- [3:0]
- [3:0]
- [3:0]
- [3:0]
- [3:0]
- [3:0]
- [3:0]
- [3:0]
- [3:0]
- [3:0]
- [3:0]
- [3:0]
- [3:0]
- [3:0]
- [3:0]
- [3:0]
- [3:0]
- [3:0]
- [3:0]
- [3:0]
- [3:0]
- [3:0]
- [3:0]
- [3:0]
- [3:0]
- [3:0]
- [3:0]
- [3:0]
- [3:0]
- [3:0]
- [3:0]
- [3:0]
- [3:0]
- [3:0]
- [3:0]
- [3:0]
- [3:0]
- [3:0]
- [3:0]
- [3:0]
- [3:0]
- [3:0]
- [3:0]
- [3:0]
- [3:0]
- [3:0]
- [3:0]
- [3:0]
- [3:0]
- [3:0]
- [3:0]
- [3:0]
- [3:0]
- [3:0]
- [3:0]
- [3:0]
- [3:0]
- [3:0]
- [3:0]
- [3:0]
- [3:0]
- [3:0]
- [3:0]
- [3:0]
- [3:0]
- [3:0]
- [3:0]
"
N/A,N/A,-1,77.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);	
 cout = in1[3] ^ in2[3];
	
	wire [3:0] c1, c2;
	
	xor(c1[0], in1[3], in2[3]);
	xor(c1[1], in1[2], in2[2]);
	xor(c1[2], in1[1], in2[1]);
	xor(c1[3], in1[0], in2[0]);
	
	xor(c2[0], c1[0], cin);
	xor(c2[1], c1[1], cin);
	xor(c2[2], c1[2], cin);
	xor(c2[3], c1[3], cin);
	
	wire [3:0] sum1, sum2;
	
	xor(sum1[0], in1[0], in2[0], cin);
	xor(sum1[1], in1[1], in2[1], cin);
	xor(sum1[2], in1[2], in2[2], cin);
	xor(sum1[3], in1[3], in2[3], cin);
	
	xor(sum2[0], sum1[0], c2[0]);
	xor(sum2[1], sum1[1], c2[1]);
	xor(sum2[2], sum1[2], c2[2]);
	xor(sum2[3], sum1[3], c2[3]);
	
	assign sum = sum2;
	
endmodule

module test_adder;
	reg [3:0] in1, in2;
	reg cin;
	wire [3:0] sum;
	wire cout;
	
	adder a1(sum, cout, in1, in2, cin);
	
	initial
	begin
		$monitor(""in1 = %b, in2 = %b, cin = %b, sum = %b, cout = %b"", in"
N/A,N/A,-1,78.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);

    1 = in1 + in2 + cin;
    2 = in1 + in2;
    3 = in1 + in2 - cin;
    4 = in1 - in2;
    5 = in1 - in2 + cin;
    6 = in1 - in2;
    7 = in1 - in2 - cin;
    8 = in1 + in2;
    9 = in1 + in2 - cin;
    10 = in1 - in2;
    11 = in1 - in2 + cin;
    12 = in1 - in2;
    13 = in1 - in2 - cin;
    14 = in1 + in2;
    15 = in1 + in2 - cin;
    16 = in1 - in2;
    17 = in1 - in2 + cin;
    18 = in1 - in2;
    19 = in1 - in2 - cin;
    20 = in1 + in2;
    21 = in1 + in2 - cin;
    22 = in1 - in2;
    23 = in1 - in2 + cin;
    24 = in1 - in2;
    25 = in1 - in2 - cin;
    26 = in1 + in2;
    27 = in1 + in2 - cin;
    28 = in1 - in2;
    29 = in1 - in2 + cin;
    30 = in1 - in2;
    31 = in1 - in2 - cin;
    32 = in1 + in2;
    33 = in1 + in2 - cin;
    34 = in1 - in2;
    35 = in1 - in2 + cin;
    36 = in1 - in2;
    37 = in1 - in2 - cin;
    38 = in1 + in2;
    39 = in1 + in2 - cin;
    40 = in1 - in2;
    41 = in1 - in2 + cin;
    42 = in1 - in2;
    43 = in1 - in2 - cin;
    44"
N/A,N/A,-1,79.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);	
 input [3:0] in1, in2;
 input cin;
 output [3:0] sum;
 output cout;
 
 wire [3:0] sum;
 wire [3:0] c;
 wire [3:0] g;
 wire [3:0] p;
 
 assign c[0] = cin;
 assign g[0] = in1[0] & in2[0];
 assign p[0] = in1[0] ^ in2[0];
 assign g[1] = in1[1] & in2[1];
 assign p[1] = in1[1] ^ in2[1];
 assign g[2] = in1[2] & in2[2];
 assign p[2] = in1[2] ^ in2[2];
 assign g[3] = in1[3] & in2[3];
 assign p[3] = in1[3] ^ in2[3];
 
 assign c[1] = (g[0] | p[0] & c[0]);
 assign c[2] = (g[1] | p[1] & g[0]) | p[1] & p[0] & c[0];
 assign c[3] = (g[2] | p[2] & g[1]) | p[2] & p[1] & g[0] | p[2] & p[1] & p[0] & c[0];
 
 assign sum[0] = in1[0] ^ in2[0] ^ c[0];
 assign sum[1] = in1[1] ^ in2[1] ^ c[1];
 assign sum[2] = in1[2] ^ in2[2] ^ c[2];
 assign sum[3] = in1[3] ^ in2[3] ^ c[3];
 
 assign cout = (g[3] | p[3] & g[2]) | p[3] & p[2] & g[1] | p[3] & p[2] & p[1] & g[0] | p[3] &"
N/A,N/A,-1,80.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin); sum [3:0] = in1 + in2 + cin; cout = in1[3] ^ in2[3] ^ cin;

endmodule

module test_adder;

reg [3:0] in1, in2;
reg cin;
wire [3:0] sum;
wire cout;

adder a1(sum, cout, in1, in2, cin);

initial
begin
    $monitor($time, "" in1=%b in2=%b cin=%b sum=%b cout=%b"", in1, in2, cin, sum, cout);
    in1 = 4'b0000; in2 = 4'b0000; cin = 0;
    #10 in1 = 4'b0000; in2 = 4'b0001; cin = 0;
    #10 in1 = 4'b0000; in2 = 4'b0010; cin = 0;
    #10 in1 = 4'b0000; in2 = 4'b0011; cin = 0;
    #10 in1 = 4'b0000; in2 = 4'b0100; cin = 0;
    #10 in1 = 4'b0000; in2 = 4'b0101; cin = 0;
    #10 in1 = 4'b0000; in2 = 4'b0110; cin = 0;
    #10 in1 = 4'b0000; in2 = 4'b0111; cin = 0;
    #10 in1 = 4'b0000; in2 = 4'b1000; cin = 0;
    #10 in1 = 4'b0000; in2 = 4'b1001; cin = 0;
    #10 in1 = 4'b0000; in2 = 4'b1010; cin = 0;
    #10 in1 = 4'b0000; in2 = 4'b1011; cin = 0;
    #10 in1 = 4'b0000; in2 = 4'b1100; cin = 0;
    #10 in1 = 4'b0000; in2 = 4'b1101; cin = 0;"
N/A,N/A,-1,81.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);


0.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1"
N/A,N/A,-1,82.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);	 c1:cin
	assign c1 = cin;
	assign cout = c1;
	assign sum = in1 + in2 + c1;
endmodule

module test_adder;
	reg [3:0] in1, in2;
	reg cin;
	wire [3:0] sum;
	wire cout;
	adder a1(sum, cout, in1, in2, cin);
	initial
	begin
		$monitor(""in1 = %b, in2 = %b, cin = %b, sum = %b, cout = %b"", in1, in2, cin, sum, cout);
		in1 = 4'b0000; in2 = 4'b0000; cin = 0;
		#10 in1 = 4'b0001; in2 = 4'b0001; cin = 0;
		#10 in1 = 4'b0010; in2 = 4'b0010; cin = 0;
		#10 in1 = 4'b0011; in2 = 4'b0011; cin = 0;
		#10 in1 = 4'b0100; in2 = 4'b0100; cin = 0;
		#10 in1 = 4'b0101; in2 = 4'b0101; cin = 0;
		#10 in1 = 4'b0110; in2 = 4'b0110; cin = 0;
		#10 in1 = 4'b0111; in2 = 4'b0111; cin = 0;
		#10 in1 = 4'b1000; in2 = 4'b1000; cin = 0;
		#10 in1 = 4'b1001; in2 = 4'b1001; cin = 0;
		#10 in1 = 4'b1010; in2 = 4'b1010; cin = 0;
		#10 in1 = 4'b1011; in2 = 4'b1011; cin = 0;
		#10 in1 = 4'b1100; in2 = 4'b1100; cin = 0;
		#10 in1 = 4'b"
30.324000,196.38,-0.5,83.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);
wire	cin1, cin2, cin3;
wire	cout1, cout2, cout3;

// Create the first adder
adder_1bit a1(sum[0], cin1, in1[0], in2[0], cin);
adder_1bit a2(sum[1], cin2, in1[1], in2[1], cin1);
adder_1bit a3(sum[2], cin3, in1[2], in2[2], cin2);
adder_1bit a4(sum[3], cout, in1[3], in2[3], cin3);

// Create the second adder
adder_1bit a5(cout1, cin1, in1[0], in2[0], cin);
adder_1bit a6(cout2, cin2, in1[1], in2[1], cin1);
adder_1bit a7(cout3, cin3, in1[2], in2[2], cin2);

// Create the third adder
adder_1bit a8(cout, cin, in1[3], in2[3], cin3);

endmodule

module adder_1bit(output sum, output cout, input in1, in2, input cin);
wire	a, b, c;

// Create the first adder
xor(a, in1, in2);
xor(sum, a, cin);
and(b, a, cin);
and(c, in1, in2);
or(cout, b, c);

endmodule"
N/A,N/A,-1,84.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);
wire
0
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172
173
174
175
176
177
178
179
180
181
182
183
184
185
186
187
188
189
190
191
192
193
194
195
196
197
198
199
200
201
202
203
204
205
206
207
208
209
210
211
212
213
214
215
216
217
218
219
220
221
222
223
224
225
226
227
228
229
230
231
232
233
234
235
236
237
238
239
240
241
242
243
244
245
246
247
248"
N/A,N/A,-1,85.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);	
;

endmodule

module adder_tb;

reg [3:0] in1, in2;
reg cin;
wire [3:0] sum;
wire cout;

adder dut(sum, cout, in1, in2, cin);

initial begin
	$dumpfile(""adder_tb.vcd"");
	$dumpvars(0, adder_tb);
	
	in1 = 4'b0000;
	in2 = 4'b0000;
	cin = 1'b0;
	#10;
	
	in1 = 4'b0000;
	in2 = 4'b0001;
	cin = 1'b0;
	#10;
	
	in1 = 4'b0001;
	in2 = 4'b0000;
	cin = 1'b0;
	#10;
	
	in1 = 4'b0010;
	in2 = 4'b0001;
	cin = 1'b0;
	#10;
	
	in1 = 4'b0011;
	in2 = 4'b0010;
	cin = 1'b0;
	#10;
	
	in1 = 4'b0100;
	in2 = 4'b0011;
	cin = 1'b0;
	#10;
	
	in1 = 4'b0101;
	in2 = 4'b0100;
	cin = 1'b0;
	#10;
	
	in1 = 4'b0110;
	in2 = 4'b0101;
	cin = 1'b0;
	#10;
	
	in1 = 4'b0111;
	in2 = 4'b0110;
	cin = 1'b0;
	#10;
	
	in1 = 4'b1000;
	in2 = 4'b0111;
	cin = 1'b0;
	#10;
	
	in1 = 4'b1001;
	in2 = 4'b1000;
	cin = 1'b0;
"
N/A,N/A,-1,86.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);	b 
	assign {cout, sum} = in1 + in2 + cin;
endmodule

module test_adder;
	reg [3:0] in1, in2;
	reg cin;
	wire [3:0] sum;
	wire cout;
	
	adder a1(sum, cout, in1, in2, cin);
	
	initial
	begin
		$monitor(""in1 = %b, in2 = %b, cin = %b, sum = %b, cout = %b"", in1, in2, cin, sum, cout);
		
		in1 = 4'b0000;
		in2 = 4'b0000;
		cin = 1'b0;
		#10
		
		in1 = 4'b0000;
		in2 = 4'b0001;
		cin = 1'b0;
		#10
		
		in1 = 4'b0000;
		in2 = 4'b0010;
		cin = 1'b0;
		#10
		
		in1 = 4'b0000;
		in2 = 4'b0011;
		cin = 1'b0;
		#10
		
		in1 = 4'b0000;
		in2 = 4'b0100;
		cin = 1'b0;
		#10
		
		in1 = 4'b0000;
		in2 = 4'b0101;
		cin = 1'b0;
		#10
		
		in1 = 4'b0000;
		in2 = 4'b0110;
		cin = 1'b0;
		#10
		
		in1 = 4'b0000;
		in2 = 4'b0111;
		cin = 1'b0;
		#10
		
		in1 = 4'b0000;
		in2 = 4'b1000;
		cin = 1'b0;
		#10
		
		in1 = 4'b0000;
		in2 = 4'b1001;
		cin = 1'b0;
		#10
		
"
N/A,N/A,-1,87.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);

wire input
wire output
wire cout
wire [3:0] in1
wire [3:0] in2
wire cin

// Create the wires for each of the adders
wire [3:0] sum1
wire [3:0] sum2
wire [3:0] sum3
wire [3:0] sum4
wire [3:0] sum5
wire [3:0] sum6
wire [3:0] sum7
wire [3:0] sum8
wire [3:0] sum9
wire [3:0] sum10
wire [3:0] sum11
wire [3:0] sum12
wire [3:0] sum13
wire [3:0] sum14
wire [3:0] sum15
wire [3:0] sum16
wire [3:0] sum17
wire [3:0] sum18
wire [3:0] sum19
wire [3:0] sum20
wire [3:0] sum21
wire [3:0] sum22
wire [3:0] sum23
wire [3:0] sum24
wire [3:0] sum25
wire [3:0] sum26
wire [3:0] sum27
wire [3:0] sum28
wire [3:0] sum29
wire [3:0] sum30
wire [3:0] sum31
wire [3:0] sum32
wire [3:0] sum33
wire [3:0] sum34
wire [3:0] sum35
wire [3:0] sum36
wire [3:0] sum37
wire [3:0] sum38
wire [3:0] sum39
wire [3:0] sum40
wire [3:0] sum41
wire [3:0] sum42
wire [3:0] sum43
wire [3:0] sum44
wire [3:0] sum45
wire [3:0] sum46
wire [3:0] sum47
wire [3:0] sum48
wire [3:0] sum49
wire [3:0] sum50
wire [3:0"
32.452000,109.17,-0.5,88.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);
wire ccwire;

fa adder1(sum[0], ccwire, in1[0], in2[0], cin);
fa adder2(sum[1], ccwire, in1[1], in2[1], ccwire);
fa adder3(sum[2], ccwire, in1[2], in2[2], ccwire);
fa adder4(sum[3], cout, in1[3], in2[3], ccwire);

endmodule

module fa(output sum, output cout, input a, b, cin);
wire c1, c2, c3;

xor(sum, a, b, cin);
and(c1, a, b);
and(c2, b, cin);
and(c3, a, cin);
or(cout, c1, c2, c3);

endmodule"
N/A,N/A,-1,89.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);
wire	,cout1,cout2;

fa fa1(sum[0],cout1,in1[0],in2[0],cin);
fa fa2(sum[1],cout2,in1[1],in2[1],cout1);
fa fa3(sum[2],cout,in1[2],in2[2],cout2);
fa fa4(sum[3],cout,in1[3],in2[3],cout2);

endmodule

module fa(output sum, output cout, input a, b, cin);
wire	,cout1,cout2;

xor(sum,a,b,cin);
and(cout1,a,b);
and(cout2,b,cin);
or(cout,cout1,cout2);

endmodule

module testbench;
reg [3:0] in1,in2;
reg cin;
wire [3:0] sum;
wire cout;

adder a1(sum,cout,in1,in2,cin);

initial
begin
	$monitor($time,""in1=%b,in2=%b,cin=%b,sum=%b,cout=%b"",in1,in2,cin,sum,cout);
	in1=4'b0000;
	in2=4'b0000;
	cin=1'b0;
	#10
	in1=4'b0000;
	in2=4'b0001;
	cin=1'b0;
	#10
	in1=4'b0000;
	in2=4'b0010;
	cin=1'b0;
	#10
	in1=4'b0000;
	in2=4'b0011;
	cin=1'b0;
	#10
	in1=4'b0000;
	in2=4'b0100;
	cin=1'b0;
	#10
	in1=4'b0000;
	in2=4'b0101"
N/A,N/A,-1,90.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);	wcout;

wire w1, w2, w3;

xor(w1, in1[0], in2[0]);
xor(w2, in1[1], in2[1]);
xor(w3, in1[2], in2[2]);
xor(sum[0], w1, w2, w3, cin);

xor(w1, in1[0], in2[0], cin);
xor(w2, in1[1], in2[1], cin);
xor(w3, in1[2], in2[2], cin);
xor(cout, w1, w2, w3);

endmodule

module test_adder;

reg [3:0] in1, in2;
reg cin;
wire [3:0] sum;
wire cout;

adder a1(sum, cout, in1, in2, cin);

initial
begin
    $monitor(""in1 = %b, in2 = %b, cin = %b, sum = %b, cout = %b"", in1, in2, cin, sum, cout);
    in1 = 4'b0000;
    in2 = 4'b0000;
    cin = 1'b0;
    #10
    in1 = 4'b0000;
    in2 = 4'b0001;
    cin = 1'b0;
    #10
    in1 = 4'b0000;
    in2 = 4'b0010;
    cin = 1'b0;
    #10
    in1 = 4'b0000;
    in2 = 4'b0011;
    cin = 1'b0;
    #10
    in1 = 4'b0000;
    in2 = 4'b0100;
    cin = 1'b0;
    #10
    in1 = 4'b0000;
    in2 = 4'b0101;
    cin = 1'b0;
    #10
    in1 = 4'b0000;
    in2 = 4'b0110;"
N/A,N/A,-1,91.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);	
wire
wire [3:0] sum;
wire cout;
wire [3:0] in1;
wire [3:0] in2;
wire cin;

// Create the first adder
adder a1(sum[0], c1, in1[0], in2[0], cin);
adder a2(sum[1], c2, in1[1], in2[1], c1);
adder a3(sum[2], c3, in1[2], in2[2], c2);
adder a4(sum[3], cout, in1[3], in2[3], c3);

endmodule

module adder_tb;

reg [3:0] in1;
reg [3:0] in2;
reg cin;
wire [3:0] sum;
wire cout;

// Instantiate the adder design
adder a1(sum, cout, in1, in2, cin);

// Define the stimulus
initial
begin
    in1 = 4'b0000;
    in2 = 4'b0000;
    cin = 0;
    #10;
    in1 = 4'b0001;
    in2 = 4'b0001;
    cin = 0;
    #10;
    in1 = 4'b0010;
    in2 = 4'b0010;
    cin = 0;
    #10;
    in1 = 4'b0011;
    in2 = 4'b0011;
    cin = 0;
    #10;
    in1 = 4'b0100;
    in2 = 4'b0100;
    cin = 0;
    #10;
    in1 = 4'b0101;
    in2 = 4'b0101;
    cin = 0;
    #10;
    in1 = 4'b0110;
    in2 = 4'b0110;
    cin = 0;
    #10;
    in1 = 4'b0111;
    in2 = 4'b0111;
    cin = 0;
    #10;
    in1 = 4"
N/A,N/A,-1,92.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);

   wire [3:0] sum;
   wire cout;
   wire [3:0] in1;
   wire [3:0] in2;
   wire cin;

// Instantiate the sub-modules
   fa fa1(sum[0], c1, in1[0], in2[0], cin);
   fa fa2(sum[1], c2, in1[1], in2[1], c1);
   fa fa3(sum[2], c3, in1[2], in2[2], c2);
   fa fa4(sum[3], cout, in1[3], in2[3], c3);

endmodule

module fa(output sum, output cout, input a, input b, input cin);

// Instantiate the sub-modules
   wire sum;
   wire cout;
   wire c1;
   wire c2;
   wire c3;

// Instantiate the sub-modules
   fa1 fa1(sum, c1, a, b, cin);
   fa2 fa2(sum, c2, a, b, c1);
   fa3 fa3(sum, c3, a, b, c2);
   fa4 fa4(sum, cout, a, b, c3);

endmodule

module fa1(output sum, output cout, input a, input b, input cin);

// Instantiate the sub-modules
   wire sum;
   wire cout;
   wire c1;
   wire c2;
   wire c3;

// Instantiate the sub-modules
   fa1 fa1(sum, c1, a, b, cin);
   fa2 fa2(sum, c2, a, b, c1);
   fa3 fa3(sum, c3, a, b, c2);
   fa4 fa4(sum, cout, a, b, c3);

endmodule"
N/A,N/A,-1,93.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);	
 w1 = in1 & in2;
 w2 = in1 ^ in2;
 w3 = in1 | in2;
 w4 = in1 & cin;
 w5 = in2 & cin;
 w6 = in1 ^ in2 ^ cin;
 
 assign sum = w1 ^ w2 ^ w3 ^ w4 ^ w5 ^ w6;
 assign cout = (w1 ^ w2 ^ w3 ^ w4 ^ w5 ^ w6) & w6;

endmodule

module test_adder;
	reg [3:0] in1, in2;
	reg cin;
	wire [3:0] sum;
	wire cout;
	
	adder a1(sum, cout, in1, in2, cin);
	
	initial
	begin
		$monitor(""in1 = %b, in2 = %b, cin = %b, sum = %b, cout = %b"", in1, in2, cin, sum, cout);
		
		in1 = 4'b0000;
		in2 = 4'b0000;
		cin = 1'b0;
		#10
		
		in1 = 4'b0000;
		in2 = 4'b0001;
		cin = 1'b0;
		#10
		
		in1 = 4'b0000;
		in2 = 4'b0010;
		cin = 1'b0;
		#10
		
		in1 = 4'b0000;
		in2 = 4'b0011;
		cin = 1'b0;
		#10
		
		in1 = 4'b0000;
		in2 = 4'b0100;
		cin = 1'b0;
		#10
		
		in1 = 4'b0000;
		in2 = 4'b0101;
		cin = 1'b0;
		#10
		
		in1 = 4'b0000;
		in2 = 4'b0110;
		cin = 1'b0;
		#10
		
		in1 = 4'b0000;
		in2"
N/A,N/A,-1,94.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);
 w_1 = in1[0] ^ in2[0];
 w_2 = in1[1] ^ in2[1];
 w_3 = in1[2] ^ in2[2];
 w_4 = in1[3] ^ in2[3];
 
 assign sum[0] = in1[0] ^ in2[0] ^ cin;
 assign sum[1] = in1[1] ^ in2[1] ^ w_1;
 assign sum[2] = in1[2] ^ in2[2] ^ w_2;
 assign sum[3] = in1[3] ^ in2[3] ^ w_3;
 
 assign cout = in1[3] ^ in2[3] ^ w_4;
 
endmodule

module test_adder;
 reg [3:0] in1, in2;
 reg cin;
 wire [3:0] sum;
 wire cout;
 
 adder dut(sum, cout, in1, in2, cin);
 
 initial
 begin
   in1 = 4'b0000;
   in2 = 4'b0000;
   cin = 0;
   #10;
   in1 = 4'b0001;
   in2 = 4'b0001;
   cin = 0;
   #10;
   in1 = 4'b0010;
   in2 = 4'b0010;
   cin = 0;
   #10;
   in1 = 4'b0011;
   in2 = 4'b0011;
   cin = 0;
   #10;
   in1 = 4'b0100;
   in2 = 4'b0100;
   cin = 0;
   #10;
   in1 = 4'b0101;
   in2 = 4'b0101;
   cin = 0;
   #10;
   in1 = 4'b0110;
   in2 = 4'b0110;
   cin = 0;
   #10;
   in1 = 4'b0111;
   in2 = 4'b0111;
   cin = 0;"
N/A,N/A,-1,95.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);	
wirein [3:0] in1, in2;
wire cin;
wire [3:0] sum;
wire cout;

// Create the wires
wire w1, w2, w3, w4, w5, w6, w7, w8, w9, w10, w11, w12, w13, w14, w15, w16, w17, w18, w19, w20, w21, w22, w23, w24, w25, w26, w27, w28, w29, w30, w31, w32, w33, w34, w35, w36, w37, w38, w39, w40, w41, w42, w43, w44, w45, w46, w47, w48, w49, w50, w51, w52, w53, w54, w55, w56, w57, w58, w59, w60, w61, w62, w63, w64, w65, w66, w67, w68, w69, w70, w71, w72, w73, w74, w75, w76, w77, w78, w79, w80, w81, w82, w83, w84, w85, w86, w87, w88, w89, w90, w91, w92, w93, w94, w95, w96, w97, w98, w99, w100, w101, w102, w103, w104, w105, w106, w107, w108, w109, w110, w111, w112, w113, w114, w115, w116, w117, w118, w119, w120, w121, w122, w123, w124, w125, w126, w127, w128, w129, w130, w131, w132, w133, w134, w135, w136, w137, w138, w139, w140, w141, w142, w143, w144, w145, w146, w147, w148, w149, w150, w151, w152, w153,"
N/A,N/A,-1,96.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);

    1: assign sum = in1 + in2 + cin;
    2: assign cout = (in1[3] & in2[3]) | (in1[3] & cin) | (in2[3] & cin);

endmodule

module test_adder;

reg [3:0] in1, in2;
reg cin;
wire [3:0] sum;
wire cout;

adder a1(sum, cout, in1, in2, cin);

initial
begin
    $monitor($time, "" in1=%b, in2=%b, cin=%b, sum=%b, cout=%b"", in1, in2, cin, sum, cout);
    in1 = 4'b0000; in2 = 4'b0000; cin = 1'b0;
    #10 in1 = 4'b0001; in2 = 4'b0001;
    #10 in1 = 4'b0010; in2 = 4'b0010;
    #10 in1 = 4'b0011; in2 = 4'b0011;
    #10 in1 = 4'b0100; in2 = 4'b0100;
    #10 in1 = 4'b0101; in2 = 4'b0101;
    #10 in1 = 4'b0110; in2 = 4'b0110;
    #10 in1 = 4'b0111; in2 = 4'b0111;
    #10 in1 = 4'b1000; in2 = 4'b1000;
    #10 in1 = 4'b1001; in2 = 4'b1001;
    #10 in1 = 4'b1010; in2 = 4'b1010;
    #10 in1 = 4'b1011; in2 = 4'b1011;
    #10 in1 = 4'b1100; in2 = 4'b1100;
    #10 in1 = 4'b1101; in2 = 4'b1101;
    #10 in1 = 4'b1110; in2 = 4'b1110;
    #10"
N/A,N/A,-1,97.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);	 c-
	wire c1, c2, c3;
	
	adder_gate a1(sum[0], c1, in1[0], in2[0], cin);
	adder_gate a2(sum[1], c2, in1[1], in2[1], c1);
	adder_gate a3(sum[2], c3, in1[2], in2[2], c2);
	adder_gate a4(sum[3], cout, in1[3], in2[3], c3);
	
endmodule

module adder_gate(output sum, output cout, input in1, in2, input cin);
	wire w1, w2, w3;
	
	xor(w1, in1, in2);
	xor(sum, w1, cin);
	and(w2, w1, cin);
	and(w3, in1, in2);
	or(cout, w2, w3);
	
endmodule

module adder_tb;
	reg [3:0] in1, in2;
	reg cin;
	wire [3:0] sum;
	wire cout;
	
	adder a1(sum, cout, in1, in2, cin);
	
	initial
	begin
		$dumpfile(""adder_tb.vcd"");
		$dumpvars(0, adder_tb);
		
		in1 = 4'b0000;
		in2 = 4'b0000;
		cin = 1'b0;
		#10
		in1 = 4'b0000;
		in2 = 4'b0001;
		cin = 1'b0;
		#10
		in1 = 4'b0001;
		in2 = 4'b0001;
		cin = 1'b0;
		#10
		in1 = 4'b0010;
		in2 = 4'b0010;
		cin = 1'b0;
		#10
		in1 = 4'b0011;
		in2 = 4'b0011"
N/A,N/A,-1,98.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);
wire//inputs
	cout,
	cin,
	in1,
	in2;
//outputs
	assign sum = in1 + in2 + cin;
	assign cout = (in1[3] == in2[3] && (in1[3] == cin))? 1'b1 : 1'b0;
endmodule

module test_adder;
	reg [3:0] in1, in2;
	reg cin;
	wire [3:0] sum;
	wire cout;
	adder a1(sum, cout, in1, in2, cin);
	initial
	begin
		$monitor(""in1 = %b, in2 = %b, cin = %b, sum = %b, cout = %b"", in1, in2, cin, sum, cout);
		in1 = 4'b0000;
		in2 = 4'b0000;
		cin = 1'b0;
		#10
		in1 = 4'b0000;
		in2 = 4'b0001;
		cin = 1'b0;
		#10
		in1 = 4'b0001;
		in2 = 4'b0001;
		cin = 1'b0;
		#10
		in1 = 4'b0010;
		in2 = 4'b0010;
		cin = 1'b0;
		#10
		in1 = 4'b0011;
		in2 = 4'b0011;
		cin = 1'b0;
		#10
		in1 = 4'b0100;
		in2 = 4'b0100;
		cin = 1'b0;
		#10
		in1 = 4'b0101;
		in2 = 4'b0101;
		cin = 1'b0;
		#10
		in1 = 4'b0110;
		in2 = 4'b0110;
		cin = 1'b0;
		#10
		in1 = 4'b0111;
		in2 = 4'b0111;
		cin = 1'b0;"
N/A,N/A,-1,99.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);	

wire c1, c2, c3;

// Create the first adder
half_adder h1(sum[0], c1, in1[0], in2[0]);
full_adder f1(sum[1], c2, in1[1], in2[1], c1);
full_adder f2(sum[2], c3, in1[2], in2[2], c2);
full_adder f3(sum[3], cout, in1[3], in2[3], c3);

endmodule

module half_adder(output sum, output cout, input in1, in2);

assign sum = in1 ^ in2;
assign cout = in1 & in2;

endmodule

module full_adder(output sum, output cout, input in1, in2, cin);

wire c1, c2, c3;

// Create the first adder
half_adder h1(sum[0], c1, in1, in2);
full_adder f1(sum[1], c2, in1, in2, c1);
full_adder f2(sum[2], c3, in1, in2, c2);
full_adder f3(sum[3], cout, in1, in2, c3);

endmodule"
,,-1,100.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);


endmodule"
N/A,N/A,-1,101.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);	bdef
	wire c1, c2, c3;
	
	adder_1bit a1(sum[0], c1, in1[0], in2[0], cin);
	adder_1bit a2(sum[1], c2, in1[1], in2[1], c1);
	adder_1bit a3(sum[2], c3, in1[2], in2[2], c2);
	adder_1bit a4(sum[3], cout, in1[3], in2[3], c3);
endmodule

module adder_1bit(output sum, output cout, input in1, in2, input cin);
	wire xor1, and1, and2;
	
	xor(xor1, in1, in2);
	xor(sum, xor1, cin);
	and(and1, xor1, cin);
	and(and2, in1, in2);
	or(cout, and1, and2);
endmodule

module adder_4bit(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);
	wire c1, c2, c3;
	
	adder_1bit a1(sum[0], c1, in1[0], in2[0], cin);
	adder_1bit a2(sum[1], c2, in1[1], in2[1], c1);
	adder_1bit a3(sum[2], c3, in1[2], in2[2], c2);
	adder_1bit a4(sum[3], cout, in1[3], in2[3], c3);
endmodule"
N/A,N/A,-1,102.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);
regparameter width = 4;

// The following wires are used to connect the adder
wire [width-1:0] sum_w;
wire [width-1:0] c_w;

// The following wires are used to connect the adder
wire [width-1:0] sum_w_d;
wire [width-1:0] c_w_d;

// The following wires are used to connect the adder
wire [width-1:0] sum_w_q;
wire [width-1:0] c_w_q;

// The following wires are used to connect the adder
wire [width-1:0] sum_w_n;
wire [width-1:0] c_w_n;

// The following wires are used to connect the adder
wire [width-1:0] sum_w_p;
wire [width-1:0] c_w_p;

// The following wires are used to connect the adder
wire [width-1:0] sum_w_m;
wire [width-1:0] c_w_m;

// The following wires are used to connect the adder
wire [width-1:0] sum_w_b;
wire [width-1:0] c_w_b;

// The following wires are used to connect the adder
wire [width-1:0] sum_w_g;
wire [width-1:0] c_w_g;

// The following wires are used to connect the adder
wire [width-1:0] sum_w_e;
wire [width-1:0] c_w_e;

// The following wires are used to connect the adder
wire [width-1:0] sum_w_h;
wire [width-1:0] c_w_h;

// The following wires are used to connect the adder
wire [width-1:0] sum_w_i;
wire [width-1:0] c_w_i;

// The following wires are used to connect the adder
wire [width-1:0] sum"
N/A,N/A,-1,103.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);	.eter
endmodule

module adder_tb;
reg [3:0] in1, in2;
reg cin;
wire [3:0] sum;
wire cout;

adder a1(sum, cout, in1, in2, cin);

initial
begin
    in1 = 4'b0000;
    in2 = 4'b0000;
    cin = 0;
    #10;
    in1 = 4'b0000;
    in2 = 4'b0001;
    cin = 0;
    #10;
    in1 = 4'b0000;
    in2 = 4'b0010;
    cin = 0;
    #10;
    in1 = 4'b0000;
    in2 = 4'b0011;
    cin = 0;
    #10;
    in1 = 4'b0000;
    in2 = 4'b0100;
    cin = 0;
    #10;
    in1 = 4'b0000;
    in2 = 4'b0101;
    cin = 0;
    #10;
    in1 = 4'b0000;
    in2 = 4'b0110;
    cin = 0;
    #10;
    in1 = 4'b0000;
    in2 = 4'b0111;
    cin = 0;
    #10;
    in1 = 4'b0000;
    in2 = 4'b1000;
    cin = 0;
    #10;
    in1 = 4'b0000;
    in2 = 4'b1001;
    cin = 0;
    #10;
    in1 = 4'b0000;
    in2 = 4'b1010;
    cin = 0;
    #10;
    in1 = 4'b0000;
    in2 = 4'b1011;
    cin = 0;
    #10;
    in1 = 4'b0000;
    in2 = 4'b1100;
    cin = 0;
    #10;
    in1 = 4'b0000;
    in2 = 4'b1101"
N/A,N/A,-1,104.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);	 wm5_buf
	buf b1 (w1, in1[0], in2[0]);
	buf b2 (w2, in1[1], in2[1]);
	buf b3 (w3, in1[2], in2[2]);
	buf b4 (w4, in1[3], in2[3]);
	buf b5 (w5, cin, w1);
	buf b6 (w6, cin, w2);
	buf b7 (w7, cin, w3);
	buf b8 (w8, cin, w4);
	buf b9 (w9, cin, w5);
	buf b10 (w10, cin, w6);
	buf b11 (w11, cin, w7);
	buf b12 (w12, cin, w8);
	buf b13 (w13, cin, w9);
	buf b14 (w14, cin, w10);
	buf b15 (w15, cin, w11);
	buf b16 (w16, cin, w12);
	buf b17 (w17, cin, w13);
	buf b18 (w18, cin, w14);
	buf b19 (w19, cin, w15);
	buf b20 (w20, cin, w16);
	buf b21 (w21, cin, w17);
	buf b22 (w22, cin, w18);
	buf b23 (w23, cin, w19);
	buf b24 (w24, cin, w20);
	buf b25 (w25, cin, w21);
	buf b26 (w26, cin, w22);
	buf b27 (w27, cin, w23);
	buf b28 (w28, cin, w24);
	buf b29 (w29, cin, w25);
	buf b30 (w30, cin, w26);
	buf b31 (w31, cin, w27);
	buf b32 (w32, cin, w"
N/A,N/A,-1,105.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);
wire cc4, cc3, cc2, cc1, cc0;
wire [3:0] cin4, cin3, cin2, cin1;
wire [3:0] in1_b, in2_b;

// Create the carry wires
assign cin4 = cin3 | cin2 | cin1 | cin0;
assign cc4 = cin4;
assign cin3 = in1[3] & in2[3] & in2[0] & in0[0];
assign cc3 = in1[3] & in2[3] & in0[0];
assign cin2 = in1[2] & in2[2] & in2[0] & in0[0];
assign cc2 = in1[2] & in2[2] & in0[0];
assign cin1 = in1[1] & in2[1] & in2[0] & in0[0];
assign cc1 = in1[1] & in2[1] & in0[0];
assign cin0 = in1[0] & in2[0] & in0[0];
assign cc0 = in1[0] & in2[0] & in0[0];

// Create the carry bits
assign in1_b[3] = in1[3] & in2[3] & in2[0] & in0[0];
assign in2_b[3] = in1[3] & in2[3] & in0[0];
assign in1_b[2] = in1[2] & in2[2] & in2[0] & in0[0];
assign in2_b[2] = in1[2] & in2[2] & in0[0];
assign in1_b[1] = in1[1] & in2[1] & in2[0] & in0[0];
assign in2_b[1] = in1[1] & in2[1] & in0[0];
assign"
N/A,N/A,-1,106.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);	
	wire, w1, w2, w3, w4, w5, w6, w7, w8, w9, w10, w11, w12, w13, w14, w15, w16, w17, w18, w19, w20, w21, w22, w23, w24, w25, w26, w27, w28, w29, w30, w31, w32, w33, w34, w35, w36, w37, w38, w39, w40, w41, w42, w43, w44, w45, w46, w47, w48, w49, w50, w51, w52, w53, w54, w55, w56, w57, w58, w59, w60, w61, w62, w63, w64, w65, w66, w67, w68, w69, w70, w71, w72, w73, w74, w75, w76, w77, w78, w79, w80, w81, w82, w83, w84, w85, w86, w87, w88, w89, w90, w91, w92, w93, w94, w95, w96, w97, w98, w99, w100, w101, w102, w103, w104, w105, w106, w107, w108, w109, w110, w111, w112, w113, w114, w115, w116, w117, w118, w119, w120, w121, w122, w123, w124, w125, w126, w127, w128, w129, w130, w131, w132, w133, w134, w135, w136, w137, w138, w139, w140, w141, w142, w143, w144, w145, w146, w147, w148, w149, w150, w151, w152, w153, w154, w155, w156, w157, w158, w159, w160, w161, w162, w163, w164, w165,"
31.654000,216.93,0.03159158400202186,107.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);

wire c1, c2, c3;

full_adder FA1(sum[0], c1, in1[0], in2[0], cin);
full_adder FA2(sum[1], c2, in1[1], in2[1], c1);
full_adder FA3(sum[2], c3, in1[2], in2[2], c2);
full_adder FA4(sum[3], cout, in1[3], in2[3], c3);

endmodule

module full_adder(output sum, output cout, input in1, in2, cin);

wire x, y, z;

xor(sum, in1, in2, cin);
and(x, in1, in2);
and(y, in1, cin);
and(z, in2, cin);
or(cout, x, y, z);

endmodule"
31.654000,216.93,0.03159158400202186,108.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);

wire c1, c2, c3;

full_adder FA1(sum[0], c1, in1[0], in2[0], cin);
full_adder FA2(sum[1], c2, in1[1], in2[1], c1);
full_adder FA3(sum[2], c3, in1[2], in2[2], c2);
full_adder FA4(sum[3], cout, in1[3], in2[3], c3);

endmodule

module full_adder(output sum, output cout, input in1, in2, cin);

wire x, y, z;

xor(sum, in1, in2, cin);
and(x, in1, in2);
and(y, in1, cin);
and(z, in2, cin);
or(cout, x, y, z);

endmodule"
N/A,N/A,-1,109.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);

wire_adder_4bit w1(sum[3:0], w1_cout, in1[3:0], in2[3:0], cin);
wire_adder_4bit w2(sum[7:4], w2_cout, in1[7:4], in2[7:4], w1_cout);
wire_adder_4bit w3(sum[11:8], cout, in1[11:8], in2[11:8], w2_cout);

endmodule

module wire_adder_4bit(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);

wire w1, w2, w3;

adder_4bit a1(sum[3:0], w1, in1[3:0], in2[3:0], cin);
adder_4bit a2(sum[7:4], w2, in1[7:4], in2[7:4], w1);
adder_4bit a3(sum[11:8], cout, in1[11:8], in2[11:8], w2);

endmodule

module adder_4bit(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);

wire w1, w2, w3;

adder_bit a1(sum[0], w1, in1[0], in2[0], cin);
adder_bit a2(sum[1], w2, in1[1], in2[1], w1);
adder_bit a3(sum[2], w3, in1[2], in2[2], w2);
adder_bit a4(sum[3], cout, in1[3], in2[3], w3);

endmodule"
N/A,N/A,-1,110.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);

wire c1adder, c2adder, c3adder;

adder a1(c1adder, c2adder, in1[0], in2[0], cin);
adder a2(c3adder, cout, in1[1], in2[1], c1adder);
adder a3(cout, cout, in1[2], in2[2], c2adder);
adder a4(sum[0], sum[1], in1[3], in2[3], c3adder);
adder a5(sum[2], sum[3], in1[3], in2[3], cout);

endmodule

module test_adder;

reg [3:0] in1, in2;
reg cin;
wire [3:0] sum;
wire cout;

adder a1(sum, cout, in1, in2, cin);

initial
begin
    $monitor(""in1 = %b, in2 = %b, cin = %b, sum = %b, cout = %b"", in1, in2, cin, sum, cout);
    in1 = 4'b0000; in2 = 4'b0000; cin = 1'b0;
    #10 in1 = 4'b0000; in2 = 4'b0001; cin = 1'b0;
    #10 in1 = 4'b0000; in2 = 4'b0010; cin = 1'b0;
    #10 in1 = 4'b0000; in2 = 4'b0011; cin = 1'b0;
    #10 in1 = 4'b0000; in2 = 4'b0100; cin = 1'b0;
    #10 in1 = 4'b0000; in2 = 4'b0101; cin = 1'b0;
    #10 in1 = 4'b0000; in2 = 4'b0110; cin = 1'b0;
    #10 in1 = 4'b0000; in2 = 4'b0111; cin = 1'b0;
    #10 in1 = 4'b0000; in2 = 4'b"
N/A,N/A,-1,111.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);

wireop;

// Define the wires
wire [3:0] sum;
wire cout;

// Define the internal wires
wire [3:0] in1;
wire [3:0] in2;
wire cin;

// Define the internal wires
wire [3:0] sum;
wire cout;

// Define the internal wires
wire [3:0] in1;
wire [3:0] in2;
wire cin;

// Define the internal wires
wire [3:0] sum;
wire cout;

// Define the internal wires
wire [3:0] in1;
wire [3:0] in2;
wire cin;

// Define the internal wires
wire [3:0] sum;
wire cout;

// Define the internal wires
wire [3:0] in1;
wire [3:0] in2;
wire cin;

// Define the internal wires
wire [3:0] sum;
wire cout;

// Define the internal wires
wire [3:0] in1;
wire [3:0] in2;
wire cin;

// Define the internal wires
wire [3:0] sum;
wire cout;

// Define the internal wires
wire [3:0] in1;
wire [3:0] in2;
wire cin;

// Define the internal wires
wire [3:0] sum;
wire cout;

// Define the internal wires
wire [3:0] in1;
wire [3:0] in2;
wire cin;

// Define the internal wires
wire [3:0] sum;
wire cout;

// Define the internal wires
wire [3:0] in1;
wire [3:0] in2;
wire cin;

// Define the internal wires
wire [3:0] sum;
wire cout;

// Define the internal wires
wire [3:0] in1;
wire [3:0] in2;
wire cin;

// Define the internal wires
wire"
N/A,N/A,-1,112.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);
,

    // Module body starts after module declaration
    // Use the input port names to define the port connections
    // Use the output port names to define the port connections
    // Use the port type definitions
    // Use the port direction definitions
    // Use the port attribute definitions
    // Use the port attribute values
    // Port direction definitions
    input in1_port, in2_port, cin_port;
    // Port type definitions
    // Port direction definitions
    output sum_port, cout_port;
    // Port attribute definitions
    // Port attribute values
    // Port direction definitions
    input [3:0] in1_port, in2_port;
    // Port type definitions
    // Port direction definitions
    output [3:0] sum_port;
    // Port attribute definitions
    // Port attribute values
    // Port direction definitions
    output cout_port;
    // Port type definitions
    // Port direction definitions
    // Port attribute definitions
    // Port attribute values
    // Port direction definitions
    input cin_port;
    // Port type definitions
    // Port direction definitions
    // Port attribute definitions
    // Port attribute values
    // Port direction definitions
    // Port attribute definitions
    // Port attribute values
    // Port direction definitions
    // Port attribute definitions
    // Port attribute values
    // Port direction definitions
    // Port attribute definitions
    // Port attribute values
    // Port direction definitions
    // Port attribute definitions
    // Port attribute values
    // Port direction definitions
    // Port attribute definitions
    // Port attribute values
    // Port direction definitions
    // Port attribute definitions
    // Port attribute values
    // Port direction definitions
    // Port attribute definitions
    // Port attribute values
    // Port direction definitions
    // Port attribute definitions
    // Port attribute values
    // Port direction definitions
    // Port attribute definitions
    // Port attribute values
    // Port direction definitions
    // Port attribute definitions
    // Port attribute values
    // Port direction definitions
    // Port attribute definitions
    // Port attribute values
    // Port direction definitions
    // Port attribute definitions
    // Port attribute values
    // Port direction definitions
    // Port attribute definitions
    // Port attribute values
    //"
31.654000,216.93,0.03159158400202186,113.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);	
	
	wire [3:0] c;
	
	assign c[0] = cin;
	
	full_adder FA0(sum[0], c[1], in1[0], in2[0], c[0]);
	full_adder FA1(sum[1], c[2], in1[1], in2[1], c[1]);
	full_adder FA2(sum[2], c[3], in1[2], in2[2], c[2]);
	full_adder FA3(sum[3], cout, in1[3], in2[3], c[3]);
	
endmodule

module full_adder(output sum, output cout, input in1, in2, cin);
	wire x, y, z;
	
	xor(sum, in1, in2, cin);
	and(x, in1, in2);
	and(y, in1, cin);
	and(z, in2, cin);
	or(cout, x, y, z);
	
endmodule"
N/A,N/A,-1,114.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);	
	wirewire [3:0] sum;
	wirewire [3:0] in1;
	wirewire [3:0] in2;
	wirewire cin;
	
	assign sum = in1 + in2 + cin;
	assign cout = (in1[3] & in2[3] & cin) | (in1[3] & in2[3] & ~cin) | (~in1[3] & ~in2[3] & cin);
	
endmodule

module test_adder;
	reg [3:0] in1;
	reg [3:0] in2;
	reg cin;
	wire [3:0] sum;
	wire cout;
	
	adder dut(sum, cout, in1, in2, cin);
	
	initial
	begin
		$dumpfile(""test_adder.vcd"");
		$dumpvars(0, test_adder);
		
		in1 = 4'b0000;
		in2 = 4'b0000;
		cin = 1'b0;
		#10
		in1 = 4'b0000;
		in2 = 4'b0001;
		cin = 1'b0;
		#10
		in1 = 4'b0001;
		in2 = 4'b0001;
		cin = 1'b0;
		#10
		in1 = 4'b0010;
		in2 = 4'b0010;
		cin = 1'b0;
		#10
		in1 = 4'b0011;
		in2 = 4'b0011;
		cin = 1'b0;
		#10
		in1 = 4'b0100;
		in2 = 4'b0100;
		cin = 1'b0;
		#10
		in1 = 4'b0101;
		in2 = 4'b0101;
		cin = 1'b0;
		#10
		in1 = 4'b0110;
		in2 = 4'b0110;
		cin = 1'b0;
		#10
"
N/A,N/A,-1,115.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);	 cwire c1, c2, c3;

// Create the wires
wire [3:0] sum;
wire cout;

// Create the adders
fa_adder fa0(sum[0], c1, in1[0], in2[0], cin);
fa_adder fa1(sum[1], c2, in1[1], in2[1], c1);
fa_adder fa2(sum[2], c3, in1[2], in2[2], c2);
fa_adder fa3(sum[3], cout, in1[3], in2[3], c3);

endmodule

module fa_adder(output sum, output cout, input a, b, cin);

// Create the wires
wire w1, w2, w3;

// Create the adder
xor(w1, a, b);
xor(sum, w1, cin);
and(w2, w1, cin);
and(w3, a, b);
or(cout, w2, w3);

endmodule

module test_adder;

// Declare variables
reg [3:0] in1, in2;
reg cin;
wire [3:0] sum;
wire cout;

// Instantiate the design block
adder dut(sum, cout, in1, in2, cin);

// Initialize the input variables
initial begin
	in1 = 4'b0000;
	in2 = 4'b0000;
	cin = 0;
	#10;
	in1 = 4'b0001;
	in2 = 4'b0001;
	cin = 0;
	#10;
	in1 = 4'b0010;
	in2 = 4'b0010;
	cin = 0;
	#10;
	in1 = 4'b0011;
	in2 = 4'b0011;
	cin = 0;
	#10;
	in1 = 4'b0100;
	in2 = 4'b0100;
	cin = 0;
	#10;
	in1 = 4'"
N/A,N/A,-1,116.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);	
;

endmodule

module adder_tb;

reg [3:0] in1, in2;
reg cin;
wire [3:0] sum;
wire cout;

adder dut(sum, cout, in1, in2, cin);

initial begin
	$dumpfile(""adder_tb.vcd"");
	$dumpvars(0, adder_tb);
	
	in1 = 4'b0000;
	in2 = 4'b0000;
	cin = 1'b0;
	#10;
	
	in1 = 4'b0000;
	in2 = 4'b0001;
	cin = 1'b0;
	#10;
	
	in1 = 4'b0001;
	in2 = 4'b0000;
	cin = 1'b0;
	#10;
	
	in1 = 4'b0010;
	in2 = 4'b0001;
	cin = 1'b0;
	#10;
	
	in1 = 4'b0011;
	in2 = 4'b0010;
	cin = 1'b0;
	#10;
	
	in1 = 4'b0100;
	in2 = 4'b0011;
	cin = 1'b0;
	#10;
	
	in1 = 4'b0101;
	in2 = 4'b0100;
	cin = 1'b0;
	#10;
	
	in1 = 4'b0110;
	in2 = 4'b0101;
	cin = 1'b0;
	#10;
	
	in1 = 4'b0111;
	in2 = 4'b0110;
	cin = 1'b0;
	#10;
	
	in1 = 4'b1000;
	in2 = 4'b0111;
	cin = 1'b0;
	#10;
	
	in1 = 4'b1001;
	in2 = 4'b1000;
	cin = 1'b0;
"
N/A,N/A,-1,117.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);

iring

endmodule
`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date:    14:46:56 03/10/2015 
// Design Name: 
// Module Name:    top 
// Project Name: 
// Target Devices: 
// Tool versions: 
// Description: 
//
// Dependencies: 
//
// Revision: 
// Revision 0.01 - File Created
// Additional Comments: 
//
//////////////////////////////////////////////////////////////////////////////////
module top(
    input clk,
    input reset,
    input [3:0] in,
    output [3:0] out,
    output [3:0] out_in,
    output [3:0] out_in_in,
    output [3:0] out_in_in_in
    );

wire [3:0] out_in_in_in;
wire [3:0] out_in_in;
wire [3:0] out_in;
wire [3:0] out;

adder a1(out_in_in_in, out_in_in, in, in, 1'b0);
adder a2(out_in_in, out_in, in, in, 1'b1);
adder a3(out, out_in_in_in, in, in, 1'b0);

endmodule
`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date:    14:46:56 03/10/2015 
// Design Name: 
// Module Name:    top 
// Project Name: 
// Target Devices: 
// Tool versions: 
// Description: 
//
// Dependencies: 
//
// Revision: 
// Revision 0.01 - File Created
// Additional Comments: 
//
//////////////////////////////////////////////////////////////////////////////////
module top(
    input clk,
    input reset,
    input [3:0] in,
    output [3:0] out,
    output [3:0] out_in,
"
N/A,N/A,-1,118.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);
 w    w1, w2, w3, w4, w5, w6, w7, w8, w9, w10, w11, w12, w13, w14, w15, w16, w17, w18, w19, w20, w21, w22, w23, w24, w25, w26, w27, w28, w29, w30, w31, w32, w33, w34, w35, w36, w37, w38, w39, w40, w41, w42, w43, w44, w45, w46, w47, w48, w49, w50, w51, w52, w53, w54, w55, w56, w57, w58, w59, w60, w61, w62, w63, w64, w65, w66, w67, w68, w69, w70, w71, w72, w73, w74, w75, w76, w77, w78, w79, w80, w81, w82, w83, w84, w85, w86, w87, w88, w89, w90, w91, w92, w93, w94, w95, w96, w97, w98, w99, w100, w101, w102, w103, w104, w105, w106, w107, w108, w109, w110, w111, w112, w113, w114, w115, w116, w117, w118, w119, w120, w121, w122, w123, w124, w125, w126, w127, w128, w129, w130, w131, w132, w133, w134, w135, w136, w137, w138, w139, w140, w141, w142, w143, w144, w145, w146, w147, w148, w149, w150, w151, w152, w153, w154, w155, w156, w157, w158, w159, w160, w161, w162, w163, w164, w165, w166"
N/A,N/A,-1,119.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);	b    w
	wire [3:0] c;
	wire [3:0] s;
	
	assign c[0] = cin;
	assign s[0] = in1[0] ^ in2[0];
	assign s[1] = in1[1] ^ in2[1];
	assign s[2] = in1[2] ^ in2[2];
	assign s[3] = in1[3] ^ in2[3];
	
	assign c[1] = (in1[0] & in2[0]) | (in1[0] & c[0]) | (in2[0] & c[0]);
	assign c[2] = (in1[1] & in2[1]) | (in1[1] & c[1]) | (in2[1] & c[1]);
	assign c[3] = (in1[2] & in2[2]) | (in1[2] & c[2]) | (in2[2] & c[2]);
	
	assign cout = (in1[3] & in2[3]) | (in1[3] & c[3]) | (in2[3] & c[3]);
	
	assign sum[0] = s[0];
	assign sum[1] = s[1];
	assign sum[2] = s[2];
	assign sum[3] = s[3];
	
endmodule

module test_adder;
	reg [3:0] in1;
	reg [3:0] in2;
	reg cin;
	wire [3:0] sum;
	wire cout;
	
	adder dut(sum, cout, in1, in2, cin);
	
	initial
	begin
		$monitor(""in1 = %b, in2 = %b, cin = %b, sum = %b, cout = %b"", in1, in2, cin, sum, cout);
		
		in1 = 4'b0000;
		in2 ="
N/A,N/A,-1,120.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);	
wire c
wire [3:0] sum;
wire [3:0] in1;
wire [3:0] in2;
wire cin;

// Create the first adder
adder a1(sum[0], c1, in1[0], in2[0], cin);
adder a2(sum[1], c2, in1[1], in2[1], c1);
adder a3(sum[2], c3, in1[2], in2[2], c2);
adder a4(sum[3], cout, in1[3], in2[3], c3);

endmodule

module adder_tb;

reg [3:0] in1;
reg [3:0] in2;
reg cin;
wire [3:0] sum;
wire cout;

// Instantiate the adder design
adder a1(sum, cout, in1, in2, cin);

// Define the stimulus
initial
begin
    in1 = 4'b0000;
    in2 = 4'b0000;
    cin = 0;
    #10;
    in1 = 4'b0001;
    in2 = 4'b0001;
    cin = 0;
    #10;
    in1 = 4'b0010;
    in2 = 4'b0010;
    cin = 0;
    #10;
    in1 = 4'b0011;
    in2 = 4'b0011;
    cin = 0;
    #10;
    in1 = 4'b0100;
    in2 = 4'b0100;
    cin = 0;
    #10;
    in1 = 4'b0101;
    in2 = 4'b0101;
    cin = 0;
    #10;
    in1 = 4'b0110;
    in2 = 4'b0110;
    cin = 0;
    #10;
    in1 = 4'b0111;
    in2 = 4'b0111;
    cin = 0;
    #10;
    in1 = 4'b1000"
N/A,N/A,-1,121.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);


.wire [3:0] c1, c2, c3;

// Create the first carry chain.
carry_chain_4bit c1(c1, in1, in2, cin);

// Create the second carry chain.
carry_chain_4bit c2(c2, in1, in2, c1);

// Create the third carry chain.
carry_chain_4bit c3(c3, in1, in2, c2);

// Create the final carry chain.
carry_chain_4bit c4(sum, c3, in1, in2);

// Create the final carry chain.
carry_chain_4bit c5(cout, c4, in1, in2);

endmodule

module carry_chain_4bit(output [3:0] sum, input [3:0] in1, in2, input cin);

// Create the first carry chain.
carry_chain_4bit c1(c1, in1, in2, cin);

// Create the second carry chain.
carry_chain_4bit c2(c2, in1, in2, c1);

// Create the third carry chain.
carry_chain_4bit c3(c3, in1, in2, c2);

// Create the final carry chain.
carry_chain_4bit c4(sum, c3, in1, in2);

endmodule

module carry_chain_4bit(output [3:0] sum, input [3:0] in1, in2, input cin);

// Create the first carry chain.
carry_chain_4bit c1(c1, in1, in2, cin);

// Create the second carry chain.
carry_chain_4bit c2(c2, in1, in2, c1);

// Create the third carry chain.
carry_chain_4bit c3(c3, in1, in2, c2);

// Create the final carry chain.
carry_chain_4bit c4(sum, c3, in1, in2);

endmodule"
31.654000,216.93,0.03159158400202186,122.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);
wire
 cout1, cout2, cout3;

full_adder FA1(sum[0], cout1, in1[0], in2[0], cin);
full_adder FA2(sum[1], cout2, in1[1], in2[1], cout1);
full_adder FA3(sum[2], cout3, in1[2], in2[2], cout2);
full_adder FA4(sum[3], cout, in1[3], in2[3], cout3);

endmodule

module full_adder(output sum, output cout, input in1, in2, cin);
wire x, y, z;

xor(sum, in1, in2, cin);
and(x, in1, in2);
and(y, in1, cin);
and(z, in2, cin);
or(cout, x, y, z);

endmodule"
N/A,N/A,-1,123.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);
wire
0
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172
173
174
175
176
177
178
179
180
181
182
183
184
185
186
187
188
189
190
191
192
193
194
195
196
197
198
199
200
201
202
203
204
205
206
207
208
209
210
211
212
213
214
215
216
217
218
219
220
221
222
223
224
225
226
227
228
229
230
231
232
233
234
235
236
237
238
239
240
241
242
243
244
245
246
247
248"
N/A,N/A,-1,124.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);
wire
;

// Create the wires for each input and output.
wire [3:0] in1;
wire [3:0] in2;
wire cin;

// Create the wires for each output.
wire [3:0] sum;
wire cout;

// Create the wires for each input.
wire [3:0] in1;
wire [3:0] in2;
wire cin;

// Create the wires for each output.
wire [3:0] sum;
wire cout;

// Create the wires for each input.
wire [3:0] in1;
wire [3:0] in2;
wire cin;

// Create the wires for each output.
wire [3:0] sum;
wire cout;

// Create the wires for each input.
wire [3:0] in1;
wire [3:0] in2;
wire cin;

// Create the wires for each output.
wire [3:0] sum;
wire cout;

// Create the wires for each input.
wire [3:0] in1;
wire [3:0] in2;
wire cin;

// Create the wires for each output.
wire [3:0] sum;
wire cout;

// Create the wires for each input.
wire [3:0] in1;
wire [3:0] in2;
wire cin;

// Create the wires for each output.
wire [3:0] sum;
wire cout;

// Create the wires for each input.
wire [3:0] in1;
wire [3:0] in2;
wire cin;

// Create the wires for each output.
wire [3:0] sum;
wire cout;

// Create the wires for each input.
wire [3:0] in1;
wire [3:0] in2;
wire cin;

// Create the wires for each output.
wire [3:0] sum;
wire cout;

// Create the wires for each input.
wire [3:0] in1;
wire [3:0] in2;"
N/A,N/A,-1,125.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);	 c1 
	assign c1 = in1[3] ^ in2[3];
	assign c2 = in1[2] ^ in2[2];
	assign c3 = in1[1] ^ in2[1];
	assign c4 = in1[0] ^ in2[0];
	assign sum[0] = in1[0] ^ in2[0] ^ cin;
	assign sum[1] = in1[1] ^ in2[1] ^ c1;
	assign sum[2] = in1[2] ^ in2[2] ^ c2;
	assign sum[3] = in1[3] ^ in2[3] ^ c3;
	assign cout = in1[3] ^ in2[3] ^ cin;
endmodule

module test_adder;
	reg [3:0] in1, in2;
	reg cin;
	wire [3:0] sum;
	wire cout;
	adder a1(sum, cout, in1, in2, cin);
	initial
	begin
		$monitor(""in1 = %b, in2 = %b, cin = %b, sum = %b, cout = %b"", in1, in2, cin, sum, cout);
		in1 = 4'b0000;
		in2 = 4'b0000;
		cin = 0;
		#10
		in1 = 4'b0000;
		in2 = 4'b0001;
		cin = 0;
		#10
		in1 = 4'b0001;
		in2 = 4'b0001;
		cin = 0;
		#10
		in1 = 4'b0010;
		in2 = 4'b0010;
		cin = 0;
		#10
		in1 = 4'b0011;
		in2 = 4'b0011;
		cin = 0;
		#10
		in1 = 4'b0100;
		in2 = 4'b0100;
		cin = 0;
		#10
		in1 = 4'b01"
N/A,N/A,-1,126.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);

wire input	[3:0]	in1;
wire input	[3:0]	in2;
wire input		cin;

wire	[3:0]	sum;
wire	cout;

// Create the first adder
adder	#(.INPUT_WIDTH(4),.OUTPUT_WIDTH(4))
	adder1	(
		.sum	(sum[3:0]),
		.cout	(cout),
		.in1	(in1[3:0]),
		.in2	(in2[3:0]),
		.cin	(cin)
	);

// Create the second adder
adder	#(.INPUT_WIDTH(4),.OUTPUT_WIDTH(4))
	adder2	(
		.sum	(sum[7:4]),
		.cout	(cout),
		.in1	(in1[7:4]),
		.in2	(in2[7:4]),
		.cin	(cin)
	);

endmodule
`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date:    14:46:56 03/10/2015 
// Design Name: 
// Module Name:    mux_4_1 
// Project Name: 
// Target Devices: 
// Tool versions: 
// Description: 
//
// Dependencies: 
//
// Revision: 
// Revision 0.01 - File Created
// Additional Comments: 
//
//////////////////////////////////////////////////////////////////////////////////
module mux_4_1(
    input [3:0] in,
    input [1:0] sel,
    output out
    );

assign out = in[sel];

endmodule
`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date:    14:46:56 03/10/2015 
// Design Name: 
// Module Name:    mux_4_1 
// Project Name: "
N/A,N/A,-1,127.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin); 1[3:0] in1, in2; 
input cin;

wire [3:0] c;

assign c[0] = cin;

full_adder FA0(sum[0], c[1], in1[0], in2[0], c[0]);
full_adder FA1(sum[1], c[2], in1[1], in2[1], c[1]);
full_adder FA2(sum[2], c[3], in1[2], in2[2], c[2]);
full_adder FA3(sum[3], cout, in1[3], in2[3], c[3]);

endmodule

module full_adder(output sum, output cout, input in1, in2, cin);

wire x, y, z;

xor(sum, in1, in2, cin);
and(x, in1, in2);
and(y, in1, cin);
and(z, in2, cin);
or(cout, x, y, z);

endmodule

module test_adder;

reg [3:0] in1, in2;
reg cin;
wire [3:0] sum;
wire cout;

adder a1(sum, cout, in1, in2, cin);

initial
begin
    $monitor($time, "" in1=%b, in2=%b, cin=%b, sum=%b, cout=%b"", in1, in2, cin, sum, cout);
    in1 = 4'b0000; in2 = 4'b0000; cin = 0;
    #10 in1 = 4'b0001; in2 = 4'b0001;
    #10 in1 = 4'b0010; in2 = 4'b0010;
    #10 in1 = 4'b0011; in2 = 4'b0011;
    #10 in1 = 4'b0100; in2 = 4'b0100;
    #10 in1 = 4'b0101; in2 = 4'b0101;
    #10"
N/A,N/A,-1,128.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);
wire//4-bit adder
wire [3:0] sum;
wire cout;
wire [3:0] in1;
wire [3:0] in2;
wire cin;

//4-bit adder
//wire [3:0] sum;
//wire cout;
//wire [3:0] in1;
//wire [3:0] in2;
//wire cin;

//4-bit adder
//wire [3:0] sum;
//wire cout;
//wire [3:0] in1;
//wire [3:0] in2;
//wire cin;

//4-bit adder
//wire [3:0] sum;
//wire cout;
//wire [3:0] in1;
//wire [3:0] in2;
//wire cin;

//4-bit adder
//wire [3:0] sum;
//wire cout;
//wire [3:0] in1;
//wire [3:0] in2;
//wire cin;

//4-bit adder
//wire [3:0] sum;
//wire cout;
//wire [3:0] in1;
//wire [3:0] in2;
//wire cin;

//4-bit adder
//wire [3:0] sum;
//wire cout;
//wire [3:0] in1;
//wire [3:0] in2;
//wire cin;

//4-bit adder
//wire [3:0] sum;
//wire cout;
//wire [3:0] in1;
//wire [3:0] in2;
//wire cin;

//4-bit adder
//wire [3:0] sum;
//wire cout;
//wire [3:0] in1;
//wire [3:0] in2;
//wire cin;

//4-bit adder
//wire [3:0] sum;
//wire cout;
//wire [3:0] in1;
//wire [3:0] in2;
"
N/A,N/A,-1,129.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);	
wire
- cin1;
wire
- cin2;
wire
- cin3;
wire
- cin4;
wire
- cin5;
wire
- cin6;
wire
- cin7;
wire
- cin8;
wire
- cin9;
wire
- cin10;
wire
- cin11;
wire
- cin12;
wire
- cin13;
wire
- cin14;
wire
- cin15;
wire
- cin16;
wire
- cin17;
wire
- cin18;
wire
- cin19;
wire
- cin20;
wire
- cin21;
wire
- cin22;
wire
- cin23;
wire
- cin24;
wire
- cin25;
wire
- cin26;
wire
- cin27;
wire
- cin28;
wire
- cin29;
wire
- cin30;
wire
- cin31;
wire
- cin32;
wire
- cin33;
wire
- cin34;
wire
- cin35;
wire
- cin36;
wire
- cin37;
wire
- cin38;
wire
- cin39;
wire
- cin40;
wire
- cin41;
wire
- cin42;
wire
- cin43;
wire
- cin44;
wire
- cin45;
wire
- cin46;
wire
- cin47;
wire
- cin48;
wire
- cin49;
wire
- cin50;
wire
- cin51;
wire
- cin52;
wire
- cin53;
wire
- cin54;
wire
- cin55;
wire
- cin56;
wire
- cin57;
wire
- cin58;
wire
- cin59;
wire
- cin60;
wire
- cin61;
wire
- cin62;
wire
"
N/A,N/A,-1,130.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);	
 c c1(cout, c2, in1, in2, cin);
 c c2(sum, c3, in1, in2, c2);
 c c3(c3, cout, in1, in2, c1);
endmodule

module test_adder;
	reg [3:0] in1, in2;
	reg cin;
	wire [3:0] sum;
	wire cout;
	
	adder a1(sum, cout, in1, in2, cin);
	
	initial
	begin
		$monitor(""in1 = %b, in2 = %b, cin = %b, sum = %b, cout = %b"", in1, in2, cin, sum, cout);
		
		in1 = 4'b0000;
		in2 = 4'b0000;
		cin = 1'b0;
		#10
		
		in1 = 4'b0000;
		in2 = 4'b0001;
		cin = 1'b0;
		#10
		
		in1 = 4'b0000;
		in2 = 4'b0010;
		cin = 1'b0;
		#10
		
		in1 = 4'b0000;
		in2 = 4'b0011;
		cin = 1'b0;
		#10
		
		in1 = 4'b0000;
		in2 = 4'b0100;
		cin = 1'b0;
		#10
		
		in1 = 4'b0000;
		in2 = 4'b0101;
		cin = 1'b0;
		#10
		
		in1 = 4'b0000;
		in2 = 4'b0110;
		cin = 1'b0;
		#10
		
		in1 = 4'b0000;
		in2 = 4'b0111;
		cin = 1'b0;
		#10
		
		in1 = 4'b0000;
		in2 = 4'b1000;
		cin = 1'b0;
		#10
		"
27.132000,87.37,-0.5,131.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);

    ic4_adder #(.INIT(4'b0000)) adder0(sum[0], c1, in1[0], in2[0], cin);
    ic4_adder #(.INIT(4'b0000)) adder1(sum[1], c2, in1[1], in2[1], c1);
    ic4_adder #(.INIT(4'b0000)) adder2(sum[2], c3, in1[2], in2[2], c2);
    ic4_adder #(.INIT(4'b0000)) adder3(sum[3], cout, in1[3], in2[3], c3);

endmodule

module ic4_adder #(parameter INIT = 4'b0000)
    (output [3:0] sum, output cout, input in1, in2, input cin);
    wire [3:0] sum;
    wire cout;
    wire c1, c2, c3;
    
    assign c1 = cin;
    assign c2 = c1;
    assign c3 = c2;
    
    assign sum[0] = in1 ^ in2 ^ c1;
    assign sum[1] = in1 & in2;
    assign sum[2] = in1 ^ in2 ^ c1;
    assign sum[3] = in1 & in2;
    
    assign cout = c3;

endmodule"
N/A,N/A,-1,132.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);

    1_bit_adder add1(sum[0], c1, in1[0], in2[0], cin);
    2_bit_adder add2(sum[1], c2, in1[1], in2[1], c1);
    3_bit_adder add3(sum[2], c3, in1[2], in2[2], c2);
    4_bit_adder add4(sum[3], cout, in1[3], in2[3], c3);

endmodule

module test_adder;

reg [3:0] in1, in2;
reg cin;
wire [3:0] sum;
wire cout;

adder add1(sum, cout, in1, in2, cin);

initial
begin
    $monitor(""in1 = %b, in2 = %b, cin = %b, sum = %b, cout = %b"", in1, in2, cin, sum, cout);
    in1 = 4'b0000; in2 = 4'b0000; cin = 0;
    #10 in1 = 4'b0001; in2 = 4'b0001;
    #10 in1 = 4'b0010; in2 = 4'b0010;
    #10 in1 = 4'b0011; in2 = 4'b0011;
    #10 in1 = 4'b0100; in2 = 4'b0100;
    #10 in1 = 4'b0101; in2 = 4'b0101;
    #10 in1 = 4'b0110; in2 = 4'b0110;
    #10 in1 = 4'b0111; in2 = 4'b0111;
    #10 in1 = 4'b1000; in2 = 4'b1000;
    #10 in1 = 4'b1001; in2 = 4'b1001;
    #10 in1 = 4'b1010; in2 = 4'b1010;
    #10 in1 = 4'b1011; in2 = 4'b1011;
    #10 in1 = 4'b1100;"
36.974000,198.83,0.027046032347054688,133.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);

wire c1adderbit;
wire c2adderbit;
wire c3adderbit;

adder_bit a1(sum[0], c1adderbit, in1[0], in2[0], cin);
adder_bit a2(sum[1], c2adderbit, in1[1], in2[1], c1adderbit);
adder_bit a3(sum[2], c3adderbit, in1[2], in2[2], c2adderbit);
adder_bit a4(sum[3], cout, in1[3], in2[3], c3adderbit);

endmodule

module adder_bit(output sumbit, output carrybit, input in1bit, in2bit, input cinbit);

wire c1bit;
wire c2bit;
wire c3bit;

assign c1bit = cinbit;
assign c2bit = c1bit;
assign c3bit = c2bit;

assign sumbit = in1bit ^ in2bit ^ c1bit ^ c2bit ^ c3bit;
assign carrybit = (in1bit & in2bit) | (in1bit & c1bit) | (in2bit & c1bit) | (in1bit & c2bit) | (in2bit & c2bit) | (in1bit & c3bit) | (in2bit & c3bit);

endmodule"
N/A,N/A,-1,134.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);

wire c1adder, c2adder, c3adder;

adder a1(c1adder, c2adder, in1[0], in2[0], cin);
adder a2(c3adder, cout, in1[1], in2[1], c1adder);
adder a3(cout, cout, in1[2], in2[2], c2adder);
adder a4(sum[0], sum[1], in1[3], in2[3], c3adder);
adder a5(sum[2], sum[3], in1[3], in2[3], cout);

endmodule

module test_adder;

reg [3:0] in1, in2;
reg cin;
wire [3:0] sum;
wire cout;

adder a1(sum, cout, in1, in2, cin);

initial
begin
    $monitor(""in1 = %b, in2 = %b, cin = %b, sum = %b, cout = %b"", in1, in2, cin, sum, cout);
    in1 = 4'b0000; in2 = 4'b0000; cin = 1'b0;
    #10 in1 = 4'b0000; in2 = 4'b0001; cin = 1'b0;
    #10 in1 = 4'b0000; in2 = 4'b0010; cin = 1'b0;
    #10 in1 = 4'b0000; in2 = 4'b0011; cin = 1'b0;
    #10 in1 = 4'b0000; in2 = 4'b0100; cin = 1'b0;
    #10 in1 = 4'b0000; in2 = 4'b0101; cin = 1'b0;
    #10 in1 = 4'b0000; in2 = 4'b0110; cin = 1'b0;
    #10 in1 = 4'b0000; in2 = 4'b0111; cin = 1'b0;
    #10 in1 = 4'b0000; in2 = 4'b"
N/A,N/A,-1,135.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);

wireop cout_and_in2;
wireop [3:0] sum_and_in1;

wireop [3:0] in1_and_in2;

wireop [3:0] in1_and_in2_or_in1;

wireop [3:0] in1_and_in2_or_in1_or_in2;

wireop [3:0] in1_and_in2_or_in1_or_in2_or_cin;

wireop [3:0] in1_and_in2_or_in1_or_in2_or_cin_or_cin;

wireop [3:0] in1_and_in2_or_in1_or_in2_or_cin_or_cin_or_cin;

wireop [3:0] in1_and_in2_or_in1_or_in2_or_cin_or_cin_or_cin_or_cin;

wireop [3:0] in1_and_in2_or_in1_or_in2_or_cin_or_cin_or_cin_or_cin_or_cin;

wireop [3:0] in1_and_in2_or_in1_or_in2_or_cin_or_cin_or_cin_or_cin_or_cin;

wireop [3:0] in1_and_in2_or_in1_or_in2_or_cin_or_cin_or_cin_or_cin_or_cin;

wireop [3:0] in1_and_in2_or_in1_or_in2_or_cin_or_cin_or_cin_or_cin_or_cin;

wireop [3:0] in1_and_in2_or_in1_or_in2_or_cin_or_cin_or_cin_or_cin_or_cin;

wireop [3:0] in1_and_in2_or_in1_or_in"
N/A,N/A,-1,136.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);


;

endmodule

module adder_tb;

reg [3:0] in1, in2;
reg cin;
wire [3:0] sum;
wire cout;

adder dut(sum, cout, in1, in2, cin);

initial begin
    $dumpfile(""adder_tb.vcd"");
    $dumpvars(0, adder_tb);
    
    in1 = 4'b0000;
    in2 = 4'b0000;
    cin = 1'b0;
    #10;
    in1 = 4'b0000;
    in2 = 4'b0001;
    cin = 1'b0;
    #10;
    in1 = 4'b0001;
    in2 = 4'b0001;
    cin = 1'b0;
    #10;
    in1 = 4'b0010;
    in2 = 4'b0010;
    cin = 1'b0;
    #10;
    in1 = 4'b0010;
    in2 = 4'b0011;
    cin = 1'b0;
    #10;
    in1 = 4'b0011;
    in2 = 4'b0011;
    cin = 1'b0;
    #10;
    in1 = 4'b0100;
    in2 = 4'b0100;
    cin = 1'b0;
    #10;
    in1 = 4'b0101;
    in2 = 4'b0101;
    cin = 1'b0;
    #10;
    in1 = 4'b0110;
    in2 = 4'b0110;
    cin = 1'b0;
    #10;
    in1 = 4'b0111;
    in2 = 4'b0111;
    cin = 1'b0;
    #10;
    in1 = 4'b1000;
    in2 = 4'b1000;
    cin = 1'b0;
    #10;
    in1 = 4'b1001;
    in2"
,,-1,137.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);	
	

endmodule"
38.304000,198.83,0.026106934001670842,138.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);	
assign {cout, sum} = in1 + in2 + cin;
endmodule"
38.304000,198.83,0.026106934001670842,139.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);	
assign {cout, sum} = in1 + in2 + cin;
endmodule"
N/A,N/A,-1,140.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);	
ir sum1(sum[0], in1[0], in2[0], cin);
ir sum2(sum[1], in1[1], in2[1], cin);
ir sum3(sum[2], in1[2], in2[2], cin);
ir sum4(sum[3], in1[3], in2[3], cin);

endmodule

module ir(output out, input in, input cin);
assign out = in ^ cin;
endmodule

module testbench;
reg [3:0] in1, in2;
reg cin;
wire [3:0] sum;
wire cout;

adder a1(sum, cout, in1, in2, cin);

initial
begin
    in1 = 4'b0000;
    in2 = 4'b0000;
    cin = 0;
    #10;
    in1 = 4'b0000;
    in2 = 4'b0001;
    cin = 0;
    #10;
    in1 = 4'b0000;
    in2 = 4'b0010;
    cin = 0;
    #10;
    in1 = 4'b0000;
    in2 = 4'b0011;
    cin = 0;
    #10;
    in1 = 4'b0000;
    in2 = 4'b0100;
    cin = 0;
    #10;
    in1 = 4'b0000;
    in2 = 4'b0101;
    cin = 0;
    #10;
    in1 = 4'b0000;
    in2 = 4'b0110;
    cin = 0;
    #10;
    in1 = 4'b0000;
    in2 = 4'b0111;
    cin = 0;
    #10;
    in1 = 4'b0000;
    in2 = 4'b1000;
    cin = 0;
    #10;
    in1 = 4'b0000;
    in2 = 4'b1001;
    cin = 0;
    #10;
    in1"
N/A,N/A,-1,141.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);	
assign1	#(4)	assign1(sum[0], in1[0], in2[0], cin);
assign2	#(4)	assign2(sum[1], in1[1], in2[1], cin);
assign3	#(4)	assign3(sum[2], in1[2], in2[2], cin);
assign4	#(4)	assign4(sum[3], cout, in1[3], in2[3], cin);
endmodule

module test_adder;
reg [3:0] in1, in2;
reg cin;
wire [3:0] sum;
wire cout;

adder a1(sum, cout, in1, in2, cin);

initial
begin
	$monitor(""in1 = %b, in2 = %b, cin = %b, sum = %b, cout = %b"", in1, in2, cin, sum, cout);
	in1 = 4'b0000;
	in2 = 4'b0000;
	cin = 1'b0;
	#10
	in1 = 4'b0000;
	in2 = 4'b0001;
	cin = 1'b0;
	#10
	in1 = 4'b0000;
	in2 = 4'b0010;
	cin = 1'b0;
	#10
	in1 = 4'b0000;
	in2 = 4'b0011;
	cin = 1'b0;
	#10
	in1 = 4'b0000;
	in2 = 4'b0100;
	cin = 1'b0;
	#10
	in1 = 4'b0000;
	in2 = 4'b0101;
	cin = 1'b0;
	#10
	in1 = 4'b0000;
	in2 = 4'b0110;
	cin = 1'b0;
	#10
	in1 = 4'b0000;
	in2 = 4'b0111;
	cin = 1'b"
N/A,N/A,-1,142.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);	:	
	wire [3:0] c;
	
	adder_1bit a1(c[0], c1, in1[0], in2[0], cin);
	adder_1bit a2(sum[0], c2, in1[1], in2[1], c1);
	adder_1bit a3(sum[1], c3, in1[2], in2[2], c2);
	adder_1bit a4(sum[2], c4, in1[3], in2[3], c3);
	adder_1bit a5(cout, c5, in1[3], in2[3], c4);
	
	assign c[3] = c5;
	
endmodule

module adder_1bit(output sum, cout, input in1, in2, input cin);
	wire [1:0] c;
	
	adder_1bit a1(c[0], c1, in1, in2, cin);
	adder_1bit a2(sum, c2, in1, in2, c1);
	adder_1bit a3(cout, c3, in1, in2, c2);
	
	assign c[1] = c3;
	
endmodule

module adder_4bit(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);
	wire [3:0] c;
	
	adder_4bit a1(c[0], c1, in1[0], in2[0], cin);
	adder_4bit a2(sum[0], c2, in1[1], in2[1], c1);
	adder_4bit a3(sum[1], c3, in1[2], in2[2], c2);
	adder_4bit a4(sum[2], c4, in1[3], in2[3], c3);
	adder_4bit a5(cout, c5, in1[3], in2[3], c4);
	"
38.304000,198.83,0.026106934001670842,143.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);	
	

	wire [3:0] c;
	
	fa fa1(sum[0], c[0], in1[0], in2[0], cin);
	fa fa2(sum[1], c[1], in1[1], in2[1], c[0]);
	fa fa3(sum[2], c[2], in1[2], in2[2], c[1]);
	fa fa4(sum[3], cout, in1[3], in2[3], c[2]);
	
endmodule

module fa(output sum, output cout, input a, b, cin);
	wire w1, w2, w3;
	
	xor(w1, a, b);
	xor(sum, w1, cin);
	and(w2, w1, cin);
	and(w3, a, b);
	or(cout, w2, w3);
	
endmodule"
38.304000,198.83,0.026106934001670842,144.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);	
	

	wire [3:0] c;
	
	fa fa1(sum[0], c[0], in1[0], in2[0], cin);
	fa fa2(sum[1], c[1], in1[1], in2[1], c[0]);
	fa fa3(sum[2], c[2], in1[2], in2[2], c[1]);
	fa fa4(sum[3], cout, in1[3], in2[3], c[2]);
	
endmodule

module fa(output sum, output cout, input a, b, cin);
	wire w1, w2, w3;
	
	xor(w1, a, b);
	xor(sum, w1, cin);
	and(w2, w1, cin);
	and(w3, a, b);
	or(cout, w2, w3);
	
endmodule"
N/A,N/A,-1,145.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);	
	wire//wire
		c1, c2, c3;
	//wire
	//wire
	//wire
	//wire
	//wire
	//wire
	//wire
	//wire
	//wire
	//wire
	//wire
	//wire
	//wire
	//wire
	//wire
	//wire
	//wire
	//wire
	//wire
	//wire
	//wire
	//wire
	//wire
	//wire
	//wire
	//wire
	//wire
	//wire
	//wire
	//wire
	//wire
	//wire
	//wire
	//wire
	//wire
	//wire
	//wire
	//wire
	//wire
	//wire
	//wire
	//wire
	//wire
	//wire
	//wire
	//wire
	//wire
	//wire
	//wire
	//wire
	//wire
	//wire
	//wire
	//wire
	//wire
	//wire
	//wire
	//wire
	//wire
	//wire
	//wire
	//wire
	//wire
	//wire
	//wire
	//wire
	//wire
	//wire
	//wire
	//wire
	//wire
	//wire
	//wire
	//wire
	//wire
	//wire
	//wire
	//wire
	//wire
	//wire
	//wire
	//wire
	//wire
	//wire
	//wire
	//wire
	//wire
	//wire
	//wire
	//wire
	//wire
	//wire
	//wire
	//wire
	//wire
	//wire
	//wire
	//wire
	//wire
	//wire
	//wire
	//wire
	//wire
	//wire
	//wire
	//wire
	//wire
	//wire
	//wire
	//wire
	//wire
	//wire
	//wire
	//wire
	//wire
	//wire
	//wire
	//wire
	//wire
	//wire
	//"
N/A,N/A,-1,146.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);	
wire
wire [3:0] sum;
wire cout;
wire [3:0] in1;
wire [3:0] in2;
wire cin;

// Create the first adder
adder a1(sum[0], c1, in1[0], in2[0], cin);
adder a2(sum[1], c2, in1[1], in2[1], c1);
adder a3(sum[2], c3, in1[2], in2[2], c2);
adder a4(sum[3], cout, in1[3], in2[3], c3);

endmodule

module adder_tb;

reg [3:0] in1;
reg [3:0] in2;
reg cin;
wire [3:0] sum;
wire cout;

// Instantiate the adder design
adder a1(sum, cout, in1, in2, cin);

// Define the stimulus
initial
begin
    in1 = 4'b0000;
    in2 = 4'b0000;
    cin = 0;
    #10;
    in1 = 4'b0001;
    in2 = 4'b0001;
    cin = 0;
    #10;
    in1 = 4'b0010;
    in2 = 4'b0010;
    cin = 0;
    #10;
    in1 = 4'b0011;
    in2 = 4'b0011;
    cin = 0;
    #10;
    in1 = 4'b0100;
    in2 = 4'b0100;
    cin = 0;
    #10;
    in1 = 4'b0101;
    in2 = 4'b0101;
    cin = 0;
    #10;
    in1 = 4'b0110;
    in2 = 4'b0110;
    cin = 0;
    #10;
    in1 = 4'b0111;
    in2 = 4'b0111;
    cin = 0;
    #10;
    in1 = 4"
N/A,N/A,-1,147.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);	
0wire [3:0] in1;
1wire [3:0] in2;
2wire cin;

// Create the wires that connect the adder modules to each other.
// For the adder modules, the output of each is connected to the input of the next.
// For the adder modules, the output of each is connected to the output of the next.

// Create the wires that connect the adder modules to each other.
// For the adder modules, the output of each is connected to the input of the next.
// For the adder modules, the output of each is connected to the output of the next.

// Create the wires that connect the adder modules to each other.
// For the adder modules, the output of each is connected to the input of the next.
// For the adder modules, the output of each is connected to the output of the next.

// Create the wires that connect the adder modules to each other.
// For the adder modules, the output of each is connected to the input of the next.
// For the adder modules, the output of each is connected to the output of the next.

// Create the wires that connect the adder modules to each other.
// For the adder modules, the output of each is connected to the input of the next.
// For the adder modules, the output of each is connected to the output of the next.

// Create the wires that connect the adder modules to each other.
// For the adder modules, the output of each is connected to the input of the next.
// For the adder modules, the output of each is connected to the output of the next.

// Create the wires that connect the adder modules to each other.
// For the adder modules, the output of each is connected to the input of the next.
// For the adder modules, the output of each is connected to the output of the next.

// Create the wires that connect the adder modules to each other.
// For the adder modules, the output of each is connected to the input of the next.
// For the adder modules, the output of each is connected to the output of the next.

// Create the wires that"
N/A,N/A,-1,148.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);	
	[3:0] a;
	[3:0] b;
	[3:0] c;
	
	assign a = in1;
	assign b = in2;
	assign c = cin;
	
	assign sum = a + b + c;
	assign cout = (a & b) | (b & c) | (c & a);
	
endmodule

module test_adder;
	reg [3:0] in1;
	reg [3:0] in2;
	reg cin;
	wire [3:0] sum;
	wire cout;
	
	adder dut(sum, cout, in1, in2, cin);
	
	initial
	begin
		$monitor(""in1 = %b, in2 = %b, cin = %b, sum = %b, cout = %b"", in1, in2, cin, sum, cout);
		
		in1 = 4'b0000;
		in2 = 4'b0000;
		cin = 1'b0;
		#10
		
		in1 = 4'b0000;
		in2 = 4'b0001;
		cin = 1'b0;
		#10
		
		in1 = 4'b0001;
		in2 = 4'b0001;
		cin = 1'b0;
		#10
		
		in1 = 4'b0010;
		in2 = 4'b0010;
		cin = 1'b0;
		#10
		
		in1 = 4'b0011;
		in2 = 4'b0011;
		cin = 1'b0;
		#10
		
		in1 = 4'b0100;
		in2 = 4'b0100;
		cin = 1'b0;
		#10
		
		in1 = 4'b0101;
		in2 = 4'b0101;
		cin = 1'b0;
		#10
		
		in1 = 4'b0110;
		in2 = 4'b0110;
		cin"
N/A,N/A,-1,149.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);
wire	cin3, cin2, cin1;
wire	cout3, cout2, cout1;

// Create modules for each adder
adder4bit u1(sum[3:0], cin3, in1[3:0], in2[3:0], cin);
adder4bit u2(sum[7:4], cin2, in1[7:4], in2[7:4], cin);
adder4bit u3(sum[11:8], cin1, in1[11:8], in2[11:8], cin);
adder4bit u4(sum[15:12], cout3, in1[15:12], in2[15:12], cin);
adder4bit u5(cout3, cout2, in1[15:12], in2[15:12], cin);
adder4bit u6(cout2, cout1, in1[15:12], in2[15:12], cin);
adder4bit u7(cout1, cout, in1[15:12], in2[15:12], cin);

endmodule

module adder4bit(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);
wire	cin3, cin2, cin1;
wire	cout3, cout2, cout1;

// Create modules for each adder
adder8bit u1(sum[3:0], cin3, in1[3:0], in2[3:0], cin);
adder8bit u2(sum[7:4], cin2, in1[7:4], in2[7:4], cin);
adder8bit u3(sum[11:8], cin1, in1[11:8], in2[11:8], cin);
adder8bit u4(sum[15:12], cout3, in1[15:12], in2[15:12], cin);
adder8bit u5(cout3, cout2, in1[15:12], in2[15:12"
N/A,N/A,-1,150.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);	bint,
	wire [3:0] sum;
	wire cout;
	wire [3:0] in1;
	wire [3:0] in2;
	wire cin;
	
	// Create the 4-bit adder
	adder_4bit adder_4bit_inst(
		.sum(sum),
		.cout(cout),
		.in1(in1),
		.in2(in2),
		.cin(cin)
	);
	
	// Create the 4-bit adder
	adder_4bit_tb();
	
endmodule

module adder_4bit(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);
	wire [3:0] sum;
	wire cout;
	wire [3:0] in1;
	wire [3:0] in2;
	wire cin;
	
	// Create the 4-bit adder
	adder_4bit_tb();
	
	// Create the 4-bit adder
	adder_4bit_tb();
	
endmodule

module adder_4bit_tb();
	reg [3:0] in1;
	reg [3:0] in2;
	reg cin;
	
	wire [3:0] sum;
	wire cout;
	
	// Create the 4-bit adder
	adder_4bit adder_4bit_inst(
		.sum(sum),
		.cout(cout),
		.in1(in1),
		.in2(in2),
		.cin(cin)
	);
	
	// Create the 4-bit adder
	adder_4bit_tb();
	
	// Create the 4-bit adder
	adder_4bit_tb();
	
endmodule"
N/A,N/A,-1,151.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);

wire input input1;
wire input input2;
wire input input3;
wire input input4;
wire input input5;
wire input input6;
wire input input7;
wire input input8;
wire input input9;
wire input input10;
wire input input11;
wire input input12;
wire input input13;
wire input input14;
wire input input15;
wire input input16;
wire input input17;
wire input input18;
wire input input19;
wire input input20;
wire input input21;
wire input input22;
wire input input23;
wire input input24;
wire input input25;
wire input input26;
wire input input27;
wire input input28;
wire input input29;
wire input input30;
wire input input31;
wire input input32;
wire input input33;
wire input input34;
wire input input35;
wire input input36;
wire input input37;
wire input input38;
wire input input39;
wire input input40;
wire input input41;
wire input input42;
wire input input43;
wire input input44;
wire input input45;
wire input input46;
wire input input47;
wire input input48;
wire input input49;
wire input input50;
wire input input51;
wire input input52;
wire input input53;
wire input input54;
wire input input55;
wire input input56;
wire input input57;
wire input input58;
wire input input59;
wire input input60;
wire input input61;
wire input input62;
wire input input63;
wire input input64;
wire input input65;
wire input input66;
wire input input67;
wire input input68;
wire input input69;
wire input input70;
wire input input71;
wire input input72;
wire input input73;
wire input input74;
wire input input75;
wire input input76;
wire input input77;
wire input input78;
wire input input79;
wire input input80;
wire input input81;
wire input input82;
wire input input83;
"
34.580000,231.37,-0.5,152.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);	
wire [3:0] c;

// Create the carry wires
assign c[0] = cin;
assign c[1] = in1[0] ^ in2[0] ^ c[0];
assign c[2] = in1[1] ^ in2[1] ^ c[1];
assign c[3] = in1[2] ^ in2[2] ^ c[2];

// Create the sum wires
assign sum[0] = in1[0] ^ in2[0] ^ c[0];
assign sum[1] = in1[1] ^ in2[1] ^ c[1];
assign sum[2] = in1[2] ^ in2[2] ^ c[2];
assign sum[3] = in1[3] ^ in2[3] ^ c[3];

// Create the carry out wires
assign cout = c[3];

endmodule"
N/A,N/A,-1,153.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);	
wire c	3'b000;
wire c1	3'b001;
wire c2	3'b010;
wire c3	3'b011;
wire c4	3'b100;
wire c5	3'b101;
wire c6	3'b110;
wire c7	3'b111;

assign c	= cin;
assign c1	= c&in1;
assign c2	= c1&in2;
assign c3	= c2&in1;
assign c4	= c3&in2;
assign c5	= c4&in1;
assign c6	= c5&in2;
assign c7	= c6&in1;

assign cout	= c7;

assign sum	= in1 ^ in2 ^ c;

endmodule

module test_adder;

reg [3:0] in1, in2;
reg cin;
wire [3:0] sum;
wire cout;

adder a1(sum, cout, in1, in2, cin);

initial
begin
	$monitor($time, "" in1=%b, in2=%b, cin=%b, sum=%b, cout=%b"", in1, in2, cin, sum, cout);
	
	in1 = 4'b0000;
	in2 = 4'b0000;
	cin = 1'b0;
	#10;
	
	in1 = 4'b0000;
	in2 = 4'b0001;
	cin = 1'b0;
	#10;
	
	in1 = 4'b0001;
	in2 = 4'b0001;
	cin = 1'b0;
	#10;
	
	in1 = 4'b0010;
	in2 = 4'b0010;
	cin = 1'b0;
	#10;
	
	in1 = 4'b0010;
	in2 = 4'b0011;
	cin = 1'b0;
	#"
N/A,N/A,-1,154.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);
 w;
endmodule

module adder_tb;
 reg [3:0] in1, in2;
 reg cin;
 wire [3:0] sum;
 wire cout;
 
 adder dut(sum, cout, in1, in2, cin);
 
 initial
 begin
   in1 = 4'b0000;
   in2 = 4'b0000;
   cin = 1'b0;
   #10;
   in1 = 4'b0001;
   in2 = 4'b0001;
   cin = 1'b0;
   #10;
   in1 = 4'b0010;
   in2 = 4'b0010;
   cin = 1'b0;
   #10;
   in1 = 4'b0011;
   in2 = 4'b0011;
   cin = 1'b0;
   #10;
   in1 = 4'b0100;
   in2 = 4'b0100;
   cin = 1'b0;
   #10;
   in1 = 4'b0101;
   in2 = 4'b0101;
   cin = 1'b0;
   #10;
   in1 = 4'b0110;
   in2 = 4'b0110;
   cin = 1'b0;
   #10;
   in1 = 4'b0111;
   in2 = 4'b0111;
   cin = 1'b0;
   #10;
   in1 = 4'b1000;
   in2 = 4'b1000;
   cin = 1'b0;
   #10;
   in1 = 4'b1001;
   in2 = 4'b1001;
   cin = 1'b0;
   #10;
   in1 = 4'b1010;
   in2 = 4'b1010;
   cin = 1'b0;
   #10;
   in1 = 4'b1011;
   in2 = 4'b1011;
   cin = 1'b0;
   #10;
   in1 = 4'"
N/A,N/A,-1,155.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);	 cic
	wire [3:0] c;
	wire [3:0] g;
	wire [3:0] p;
	wire [3:0] d;
	wire [3:0] e;
	wire [3:0] f;
	wire [3:0] c1;
	wire [3:0] g1;
	wire [3:0] p1;
	wire [3:0] d1;
	wire [3:0] e1;
	wire [3:0] f1;
	wire [3:0] c2;
	wire [3:0] g2;
	wire [3:0] p2;
	wire [3:0] d2;
	wire [3:0] e2;
	wire [3:0] f2;
	wire [3:0] c3;
	wire [3:0] g3;
	wire [3:0] p3;
	wire [3:0] d3;
	wire [3:0] e3;
	wire [3:0] f3;
	wire [3:0] c4;
	wire [3:0] g4;
	wire [3:0] p4;
	wire [3:0] d4;
	wire [3:0] e4;
	wire [3:0] f4;
	wire [3:0] c5;
	wire [3:0] g5;
	wire [3:0] p5;
	wire [3:0] d5;
	wire [3:0] e5;
	wire [3:0] f5;
	wire [3:0] c6;
	wire [3:0] g6;
	wire [3:0] p6;
	wire [3:0] d6;
	wire [3:0] e6;
	wire [3:0] f6;
	wire [3:0] c7;
	wire [3:0] g7;
	wire [3:0] p7;
	wire [3:0]"
N/A,N/A,-1,156.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);	

wire c1, c2, c3;

// Create the first adder
half_adder h1(sum[0], c1, in1[0], in2[0]);
full_adder f1(sum[1], c2, in1[1], in2[1], c1);
full_adder f2(sum[2], c3, in1[2], in2[2], c2);
full_adder f3(sum[3], cout, in1[3], in2[3], c3);

endmodule

module half_adder(output sum, output cout, input in1, in2);

assign sum = in1 ^ in2;
assign cout = in1 & in2;

endmodule

module full_adder(output sum, output cout, input in1, in2, cin);

wire c1, c2, c3;

// Create the first adder
half_adder h1(sum[0], c1, in1, in2);
full_adder f1(sum[1], c2, in1, in2, c1);
full_adder f2(sum[2], c3, in1, in2, c2);
full_adder f3(sum[3], cout, in1, in2, c3);

endmodule"
N/A,N/A,-1,157.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);
reg
//Define the input and output ports.
//Make sure the port names are unique.
//Make sure the port data types are correct.
//Make sure the port directions are correct.
//Make sure the port data types are correct.
//Make sure the port directions are correct.
//Make sure the port data types are correct.
//Make sure the port directions are correct.
//Make sure the port data types are correct.
//Make sure the port directions are correct.
//Make sure the port data types are correct.
//Make sure the port directions are correct.
//Make sure the port data types are correct.
//Make sure the port directions are correct.
//Make sure the port data types are correct.
//Make sure the port directions are correct.
//Make sure the port data types are correct.
//Make sure the port directions are correct.
//Make sure the port data types are correct.
//Make sure the port directions are correct.
//Make sure the port data types are correct.
//Make sure the port directions are correct.
//Make sure the port data types are correct.
//Make sure the port directions are correct.
//Make sure the port data types are correct.
//Make sure the port directions are correct.
//Make sure the port data types are correct.
//Make sure the port directions are correct.
//Make sure the port data types are correct.
//Make sure the port directions are correct.
//Make sure the port data types are correct.
//Make sure the port directions are correct.
//Make sure the port data types are correct.
//Make sure the port directions are correct.
//Make sure the port data types are correct.
//Make sure the port directions are correct.
//Make sure the port data types are correct.
//Make sure the port directions are correct.
//Make sure the port data types are correct.
//Make sure the port directions are correct.
//Make sure the port data types are correct.
//Make sure the port directions are correct.
//Make sure the port data types are correct.
//Make sure the port directions are correct.
//Make sure the port data types are correct.
//Make sure the port directions are correct.
//Make sure the port data types are correct.
//Make sure the"
N/A,N/A,-1,158.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);

    Design your design here

endmodule

module test_adder;

reg [3:0] in1, in2;
reg cin;
wire [3:0] sum;
wire cout;

adder a1(sum, cout, in1, in2, cin);

initial
begin
   $monitor($time, "" in1=%b in2=%b cin=%b sum=%b cout=%b"", in1, in2, cin, sum, cout);
   in1 = 4'b0000; in2 = 4'b0000; cin = 0;
   #10 in1 = 4'b0001; in2 = 4'b0001;
   #10 in1 = 4'b0010; in2 = 4'b0010;
   #10 in1 = 4'b0011; in2 = 4'b0011;
   #10 in1 = 4'b0100; in2 = 4'b0100;
   #10 in1 = 4'b0101; in2 = 4'b0101;
   #10 in1 = 4'b0110; in2 = 4'b0110;
   #10 in1 = 4'b0111; in2 = 4'b0111;
   #10 in1 = 4'b1000; in2 = 4'b1000;
   #10 in1 = 4'b1001; in2 = 4'b1001;
   #10 in1 = 4'b1010; in2 = 4'b1010;
   #10 in1 = 4'b1011; in2 = 4'b1011;
   #10 in1 = 4'b1100; in2 = 4'b1100;
   #10 in1 = 4'b1101; in2 = 4'b1101;
   #10 in1 = 4'b1110; in2 = 4'b1110;
   #10 in1 = 4'b1111; in2 = 4'b1111;
   #10 in1 = 4'b0000; in2 = 4'b0000; cin = 1;
   #10 in1 = 4'b0001; in2 = 4'"
N/A,N/A,-1,159.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);	 w a d e t h e r e r
	wire [3:0] c;
	wire [3:0] s;
	
	assign c[0] = cin;
	assign s[0] = in1[0] ^ in2[0];
	assign s[1] = in1[1] ^ in2[1];
	assign s[2] = in1[2] ^ in2[2];
	assign s[3] = in1[3] ^ in2[3];
	
	assign c[1] = (in1[0] & in2[0]) | (in1[0] & c[0]) | (in2[0] & c[0]);
	assign c[2] = (in1[1] & in2[1]) | (in1[1] & c[1]) | (in2[1] & c[1]);
	assign c[3] = (in1[2] & in2[2]) | (in1[2] & c[2]) | (in2[2] & c[2]);
	
	assign cout = (in1[3] & in2[3]) | (in1[3] & c[3]) | (in2[3] & c[3]);
	
	assign sum[0] = s[0];
	assign sum[1] = s[1];
	assign sum[2] = s[2];
	assign sum[3] = s[3];
	
endmodule

module test_adder;
	reg [3:0] in1;
	reg [3:0] in2;
	reg cin;
	wire [3:0] sum;
	wire cout;
	
	adder dut(sum, cout, in1, in2, cin);
	
	initial
	begin
		$monitor(""in1 = %b, in2 = %b, cin = %b, sum = %b, cout = %b"", in1, in2, cin, sum, cout);
		
		in1 = 4'b"
18.886000,111.82,-0.5,160.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);	
ir w1(in1, in2, cin, sum[0], cout);
ir w2(in1, in2, cout, sum[1], cout);
ir w3(in1, in2, cout, sum[2], cout);
ir w4(in1, in2, cout, sum[3], cout);
endmodule

module ir(input [3:0] in1, in2, input cin, output sum, output cout);
assign sum = in1 ^ in2 ^ cin;
assign cout = (in1 & in2) | (in1 & cin) | (in2 & cin);
endmodule"
N/A,N/A,-1,161.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);	 0
	assign {cout, sum} = in1 + in2 + cin;
endmodule

module test_adder;
	reg [3:0] in1, in2;
	reg cin;
	wire [3:0] sum;
	wire cout;
	adder a1(sum, cout, in1, in2, cin);
	initial
	begin
		$monitor(""in1 = %b, in2 = %b, cin = %b, sum = %b, cout = %b"", in1, in2, cin, sum, cout);
		in1 = 4'b0000; in2 = 4'b0000; cin = 0;
		#10 in1 = 4'b0001; in2 = 4'b0001; cin = 0;
		#10 in1 = 4'b0010; in2 = 4'b0010; cin = 0;
		#10 in1 = 4'b0011; in2 = 4'b0011; cin = 0;
		#10 in1 = 4'b0100; in2 = 4'b0100; cin = 0;
		#10 in1 = 4'b0101; in2 = 4'b0101; cin = 0;
		#10 in1 = 4'b0110; in2 = 4'b0110; cin = 0;
		#10 in1 = 4'b0111; in2 = 4'b0111; cin = 0;
		#10 in1 = 4'b1000; in2 = 4'b1000; cin = 0;
		#10 in1 = 4'b1001; in2 = 4'b1001; cin = 0;
		#10 in1 = 4'b1010; in2 = 4'b1010; cin = 0;
		#10 in1 = 4'b1011; in2 = 4'b1011; cin = 0;
		#10 in1 = 4'b1100; in2 = 4'b1100; cin = 0;
		#10 in1 = 4'b1101; in2 = 4'b1101; cin = 0"
N/A,N/A,-1,162.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);
wire c	;
wire [3:0]	;
wire [3:0]	;
wire [3:0]	;
wire [3:0]	;
wire [3:0]	;
wire [3:0]	;
wire [3:0]	;
wire [3:0]	;
wire [3:0]	;
wire [3:0]	;
wire [3:0]	;
wire [3:0]	;
wire [3:0]	;
wire [3:0]	;
wire [3:0]	;
wire [3:0]	;
wire [3:0]	;
wire [3:0]	;
wire [3:0]	;
wire [3:0]	;
wire [3:0]	;
wire [3:0]	;
wire [3:0]	;
wire [3:0]	;
wire [3:0]	;
wire [3:0]	;
wire [3:0]	;
wire [3:0]	;
wire [3:0]	;
wire [3:0]	;
wire [3:0]	;
wire [3:0]	;
wire [3:0]	;
wire [3:0]	;
wire [3:0]	;
wire [3:0]	;
wire [3:0]	;
wire [3:0]	;
wire [3:0]	;
wire [3:0]	;
wire [3:0]	;
wire [3:0]	;
wire [3:0]	;
wire [3:0]	;
wire [3:0]	;
wire [3:0]	;
wire [3:0]	;
wire [3:0]	;
wire [3:0]	;
wire [3:0]	;
wire [3:0]	;
wire [3:0]	;
wire [3:0]	;
wire [3:0]	;
wire [3:0]	;"
N/A,N/A,-1,163.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);	
ir[3:0] in1_ir, in2_ir;

assign in1_ir = in1;
assign in2_ir = in2;

assign {cout, sum} = in1_ir + in2_ir + cin;

endmodule

module test_adder;

reg [3:0] in1, in2;
reg cin;
wire [3:0] sum;
wire cout;

adder a1(sum, cout, in1, in2, cin);

initial
begin
    $monitor($time, "" in1=%b, in2=%b, cin=%b, sum=%b, cout=%b"", in1, in2, cin, sum, cout);
    in1 = 4'b0000;
    in2 = 4'b0000;
    cin = 1'b0;
    #10
    in1 = 4'b0000;
    in2 = 4'b0001;
    cin = 1'b0;
    #10
    in1 = 4'b0000;
    in2 = 4'b0010;
    cin = 1'b0;
    #10
    in1 = 4'b0000;
    in2 = 4'b0011;
    cin = 1'b0;
    #10
    in1 = 4'b0000;
    in2 = 4'b0100;
    cin = 1'b0;
    #10
    in1 = 4'b0000;
    in2 = 4'b0101;
    cin = 1'b0;
    #10
    in1 = 4'b0000;
    in2 = 4'b0110;
    cin = 1'b0;
    #10
    in1 = 4'b0000;
    in2 = 4'b0111;
    cin = 1'b0;
    #10
    in1 = 4'b0000;
    in2 = 4'b1000;
    cin = 1'b0;
    #10
    in1 = 4'b0000;
    in2 = 4'b"
N/A,N/A,-1,164.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);	 c12, c2, c3;

// The module below is a 4-bit adder design with a small chip-area.
// Please finish the module.

// The module below is a 4-bit adder design with a small chip-area.
// Please finish the module.

// The module below is a 4-bit adder design with a small chip-area.
// Please finish the module.

// The module below is a 4-bit adder design with a small chip-area.
// Please finish the module.

// The module below is a 4-bit adder design with a small chip-area.
// Please finish the module.

// The module below is a 4-bit adder design with a small chip-area.
// Please finish the module.

// The module below is a 4-bit adder design with a small chip-area.
// Please finish the module.

// The module below is a 4-bit adder design with a small chip-area.
// Please finish the module.

// The module below is a 4-bit adder design with a small chip-area.
// Please finish the module.

// The module below is a 4-bit adder design with a small chip-area.
// Please finish the module.

// The module below is a 4-bit adder design with a small chip-area.
// Please finish the module.

// The module below is a 4-bit adder design with a small chip-area.
// Please finish the module.

// The module below is a 4-bit adder design with a small chip-area.
// Please finish the module.

// The module below is a 4-bit adder design with a small chip-area.
// Please finish the module.

// The module below is a 4-bit adder design with a small chip-area.
// Please finish the module.

// The module below is a 4-bit adder design with a small chip-area.
// Please finish the module.

// The module below is a 4-bit adder design with a small chip-area.
// Please finish the module.

// The module below is a 4-bit adder"
N/A,N/A,-1,165.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);

     ==========
    | in1 | in2 | cin |
    |       |       |
    |  0  |  0  |  0  |
    |       |       |
    |  1  |  1  |  0  |
    |       |       |
    |  2  |  2  |  0  |
    |       |       |
    |  3  |  3  |  0  |
    |       |       |
    |  4  |  4  |  0  |
    |       |       |
    |  5  |  5  |  0  |
    |       |       |
    |  6  |  6  |  0  |
    |       |       |
    |  7  |  7  |  0  |
    |       |       |
    |  8  |  8  |  0  |
    |       |       |
    |  9  |  9  |  0  |
    |       |       |
    |  10 |  10 |  0  |
    |       |       |
    |  11 |  11 |  0  |
    |       |       |
    |  12 |  12 |  0  |
    |       |       |
    |  13 |  13 |  0  |
    |       |       |
    |  14 |  14 |  0  |
    |       |       |
    |  15 |  15 |  0  |
    |       |       |
    |  16 |  16 |  0  |
    |       |       |
    |  17 |  17 |  0  |
    |       |       |
    |  18 |  18 |  0  |
    |       |       |
    |  19 |  19 |  0  |
    |       |       |
    |  20 |  20 |  0  |
    |       |       |
    |  21 |  21 |  0  |
    |       |       |
    |  22 |  22 |  0  |
    "
N/A,N/A,-1,166.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);

wire c===0;
wire [3:0] sum;
wire [3:0] in1;
wire [3:0] in2;
wire cin;

// Create the wires

// Create the modules

// Instantiate the modules

endmodule
`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date:    16:46:00 03/10/2015 
// Design Name: 
// Module Name:    mux_4_1 
// Project Name: 
// Target Devices: 
// Tool versions: 
// Description: 
//
// Dependencies: 
//
// Revision: 
// Revision 0.01 - File Created
// Additional Comments: 
//
//////////////////////////////////////////////////////////////////////////////////
module mux_4_1(
    output reg [3:0] out,
    input [3:0] in0, in1, in2, in3,
    input [1:0] sel
    );

always @(sel)
    case(sel)
        2'b00: out = in0;
        2'b01: out = in1;
        2'b10: out = in2;
        2'b11: out = in3;
    endcase

endmodule
`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date:    16:46:00 03/10/2015 
// Design Name: 
// Module Name:    mux_4_1 
// Project Name: 
// Target Devices: 
// Tool versions: 
// Description: 
//
// Dependencies: 
//
// Revision: 
// Revision 0.01 - File Created
// Additional Comments: 
//
//////////////////////////////////////////////////////////////////////////////////
module mux_4_1(
    output reg [3:0] out,
    input [3:0] in0, in1, in2, in3,
    input [1:0] sel
    );

always @(sel)
    case(sel)
        "
N/A,N/A,-1,167.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin); sum1, sum2, sum3, sum4, sum5, sum6, sum7, sum8, sum9, sum10, sum11, sum12, sum13, sum14, sum15, sum16, sum17, sum18, sum19, sum20, sum21, sum22, sum23, sum24, sum25, sum26, sum27, sum28, sum29, sum30, sum31, sum32, sum33, sum34, sum35, sum36, sum37, sum38, sum39, sum40, sum41, sum42, sum43, sum44, sum45, sum46, sum47, sum48, sum49, sum50, sum51, sum52, sum53, sum54, sum55, sum56, sum57, sum58, sum59, sum60, sum61, sum62, sum63, sum64, sum65, sum66, sum67, sum68, sum69, sum70, sum71, sum72, sum73, sum74, sum75, sum76, sum77, sum78, sum79, sum80, sum81, sum82, sum83, sum84, sum85, sum86, sum87, sum88, sum89, sum90, sum91, sum92, sum93, sum94, sum95, sum96, sum97, sum98, sum99, sum100, sum101, sum102, sum103, sum104, sum105, sum106, sum107, sum108, sum109, sum110, sum111, sum112, sum113, sum114, sum115, sum116, sum117, sum118, sum119, sum120, sum121, sum122, sum123, sum124, sum125, sum126, sum127, sum128, sum129, sum130, sum131, sum132, sum133, sum134, sum135, sum136, sum137, sum138, sum139, sum140, sum141, sum142, sum143, sum144, sum145, sum146, sum147, sum148, sum149, sum150, sum151, sum152, sum153, sum154, sum155, sum156, sum157, sum158, sum159, sum160, sum161, sum162, sum163, sum164, sum165, sum166, sum167"
N/A,N/A,-1,168.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);	
	

	,
	.a0(in1[0]),
	.a1(in1[1]),
	.a2(in1[2]),
	.a3(in1[3]),
	.b0(in2[0]),
	.b1(in2[1]),
	.b2(in2[2]),
	.b3(in2[3]),
	.cin(cin),
	.sum(sum),
	.cout(cout)
	
);

endmodule
`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date:    14:46:56 03/10/2015 
// Design Name: 
// Module Name:    mux_4_1 
// Project Name: 
// Target Devices: 
// Tool versions: 
// Description: 
//
// Dependencies: 
//
// Revision: 
// Revision 0.01 - File Created
// Additional Comments: 
//
//////////////////////////////////////////////////////////////////////////////////
module mux_4_1(
    input [3:0] in,
    input [1:0] sel,
    output out
    );
	 
	 assign out = in[sel];

endmodule
`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date:    14:46:56 03/10/2015 
// Design Name: 
// Module Name:    mux_4_1 
// Project Name: 
// Target Devices: 
// Tool versions: 
// Description: 
//
// Dependencies: 
//
// Revision: 
// Revision 0.01 - File Created
// Additional Comments: 
//
//////////////////////////////////////////////////////////////////////////////////
module mux_4_1(
    input [3:0] in,
    input [1:0] sel,
    output out
    );
	 
	 assign out = in[sel];

endmodule"
N/A,N/A,-1,169.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);	wc
	wire [3:0] c;
	
	adder_1bit a1(c[0], c1, in1[0], in2[0], cin);
	adder_1bit a2(sum[0], c2, in1[1], in2[1], c1);
	adder_1bit a3(sum[1], c3, in1[2], in2[2], c2);
	adder_1bit a4(sum[2], c4, in1[3], in2[3], c3);
	adder_1bit a5(cout, c5, in1[3], in2[3], c4);
	
	assign c[3] = c5;
	
endmodule

module adder_1bit(output sum, cout, input in1, in2, input cin);
	wire w1, w2, w3;
	
	xor(w1, in1, in2);
	xor(sum, w1, cin);
	and(w2, w1, cin);
	and(w3, in1, in2);
	or(cout, w2, w3);
	
endmodule

module adder_4bit(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);
	wire [3:0] c;
	
	adder_1bit a1(c[0], c1, in1[0], in2[0], cin);
	adder_1bit a2(sum[0], c2, in1[1], in2[1], c1);
	adder_1bit a3(sum[1], c3, in1[2], in2[2], c2);
	adder_1bit a4(sum[2], c4, in1[3], in2[3], c3);
	adder_1bit a5(cout, c5, in1[3], in2[3], c4);
	
	assign c[3] = c5;
	
endmodule"
N/A,N/A,-1,170.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);
wire
1	2	3	4	5	6	7	8

// Create the wires
wire c1, c2, c3;

// Create the adders
fa_adder fa1(sum[0], c1, in1[0], in2[0], cin);
fa_adder fa2(sum[1], c2, in1[1], in2[1], c1);
fa_adder fa3(sum[2], c3, in1[2], in2[2], c2);
fa_adder fa4(sum[3], cout, in1[3], in2[3], c3);

endmodule

module fa_adder(output sum, output cout, input a, b, cin);
wire c1, c2, c3;

// Create the wires
wire w1, w2, w3;

// Create the adders
fa_adder fa1(w1, c1, a, b, cin);
fa_adder fa2(w2, c2, w1, b, cin);
fa_adder fa3(w3, cout, w2, cin, b);
fa_adder fa4(sum, cout, w1, w3, cin);

endmodule

module fa_adder(output sum, output cout, input a, b, cin);
wire c1, c2, c3;

// Create the wires
wire w1, w2, w3;

// Create the adders
fa_adder fa1(w1, c1, a, b, cin);
fa_adder fa2(w2, c2, w1, b, cin);
fa_adder fa3(w3, cout, w2, cin, b);
fa_adder fa4(sum, cout, w1, w3, cin);

endmodule"
31.654000,216.93,0.03159158400202186,171.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);


wire c1, c2, c3;

full_adder FA1(sum[0], c1, in1[0], in2[0], cin);
full_adder FA2(sum[1], c2, in1[1], in2[1], c1);
full_adder FA3(sum[2], c3, in1[2], in2[2], c2);
full_adder FA4(sum[3], cout, in1[3], in2[3], c3);

endmodule

module full_adder(output sum, output cout, input in1, in2, cin);

wire x, y, z;

xor(sum, in1, in2, cin);
and(x, in1, in2);
and(y, in1, cin);
and(z, in2, cin);
or(cout, x, y, z);

endmodule"
31.654000,216.93,0.03159158400202186,172.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);


wire c1, c2, c3;

full_adder FA1(sum[0], c1, in1[0], in2[0], cin);
full_adder FA2(sum[1], c2, in1[1], in2[1], c1);
full_adder FA3(sum[2], c3, in1[2], in2[2], c2);
full_adder FA4(sum[3], cout, in1[3], in2[3], c3);

endmodule

module full_adder(output sum, output cout, input in1, in2, cin);

wire x, y, z;

xor(sum, in1, in2, cin);
and(x, in1, in2);
and(y, in1, cin);
and(z, in2, cin);
or(cout, x, y, z);

endmodule"
N/A,N/A,-1,173.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);


wire0 c1, c2, c3;

full_adder FA0(sum[0], c1, in1[0], in2[0], cin);
full_adder FA1(sum[1], c2, in1[1], in2[1], c1);
full_adder FA2(sum[2], c3, in1[2], in2[2], c2);
full_adder FA3(sum[3], cout, in1[3], in2[3], c3);

endmodule

module full_adder(output sum, output cout, input in1, in2, input cin);

wire w1, w2, w3;

xor(w1, in1, in2);
xor(sum, w1, cin);
and(w2, w1, cin);
and(w3, in1, in2);
or(cout, w2, w3);

endmodule

module test_adder;

wire [3:0] sum;
wire cout;
reg [3:0] in1, in2;
reg cin;

adder a1(sum, cout, in1, in2, cin);

initial
begin
    $monitor(""in1 = %b, in2 = %b, cin = %b, sum = %b, cout = %b"", in1, in2, cin, sum, cout);
    in1 = 4'b0000; in2 = 4'b0000; cin = 1'b0;
    #10 in1 = 4'b0001; in2 = 4'b0001;
    #10 in1 = 4'b0010; in2 = 4'b0010;
    #10 in1 = 4'b0011; in2 = 4'b0011;
    #10 in1 = 4'b0100; in2 = 4'b0100;
    #10 in1 = 4'b0101; in2 = 4'b0101;
    #10 in1 = 4'b0110; in2 = 4'b0110;
    #10 in1 = 4'b01"
N/A,N/A,-1,174.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);


0 cin
1 in1[0]
2 in1[1]
3 in1[2]
4 in1[3]
5 in2[0]
6 in2[1]
7 in2[2]
8 in2[3]
9 in1[0]
10 in1[1]
11 in1[2]
12 in1[3]
13 in2[0]
14 in2[1]
15 in2[2]
16 in2[3]
17 in1[0]
18 in1[1]
19 in1[2]
20 in1[3]
21 in2[0]
22 in2[1]
23 in2[2]
24 in2[3]
25 in1[0]
26 in1[1]
27 in1[2]
28 in1[3]
29 in2[0]
30 in2[1]
31 in2[2]
32 in2[3]
33 in1[0]
34 in1[1]
35 in1[2]
36 in1[3]
37 in2[0]
38 in2[1]
39 in2[2]
40 in2[3]
41 in1[0]
42 in1[1]
43 in1[2]
44 in1[3]
45 in2[0]
46 in2[1]
47 in2[2]
48 in2[3]
49 in1[0]
50 in1[1]
51 in1[2]
52 in1[3]
53 in2[0]
54 in2[1]
55 in2[2]
56 in2[3]
57 in1[0]
58 in1[1]
59 in1[2]
60 in1[3]
61 in2[0]
62 in2[1]
63 in2[2]
64 in2[3]
65 in1[0]
66 in1[1]
67 in1[2]
68 in1[3]
69 in2[0]
70 in2[1]
71 in2"
N/A,N/A,-1,175.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);


.1. The output is the sum of the two inputs.
.2. The carry output is the carry of the two inputs.
.3. The carry input is the carry of the carry input.

endmodule

module test_adder;

reg [3:0] in1, in2;
reg cin;
wire [3:0] sum;
wire cout;

adder a1(sum, cout, in1, in2, cin);

initial
begin
    $monitor($time, "" in1=%b, in2=%b, cin=%b, sum=%b, cout=%b"", in1, in2, cin, sum, cout);
    in1 = 4'b0000; in2 = 4'b0000; cin = 1'b0;
    #10 in1 = 4'b0001; in2 = 4'b0001;
    #10 in1 = 4'b0010; in2 = 4'b0010;
    #10 in1 = 4'b0011; in2 = 4'b0011;
    #10 in1 = 4'b0100; in2 = 4'b0100;
    #10 in1 = 4'b0101; in2 = 4'b0101;
    #10 in1 = 4'b0110; in2 = 4'b0110;
    #10 in1 = 4'b0111; in2 = 4'b0111;
    #10 in1 = 4'b1000; in2 = 4'b1000;
    #10 in1 = 4'b1001; in2 = 4'b1001;
    #10 in1 = 4'b1010; in2 = 4'b1010;
    #10 in1 = 4'b1011; in2 = 4'b1011;
    #10 in1 = 4'b1100; in2 = 4'b1100;
    #10 in1 = 4'b1101; in2 = 4'b1101;
    #10 in1 = 4'b1110; in2 = 4'b1110;
    #10 in1 = 4'b1111; in2 = 4"
N/A,N/A,-1,176.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);

wireop adder_1(sum[0], cout, in1[0], in2[0], cin);
wireop adder_2(sum[1], cout, in1[1], in2[1], cout);
wireop adder_3(sum[2], cout, in1[2], in2[2], cout);
wireop adder_4(sum[3], cout, in1[3], in2[3], cout);

endmodule

module test_adder;

reg [3:0] in1, in2;
reg cin;
wire [3:0] sum;
wire cout;

adder a1(sum, cout, in1, in2, cin);

initial
begin
    $monitor(""in1 = %b, in2 = %b, cin = %b, sum = %b, cout = %b"", in1, in2, cin, sum, cout);
    in1 = 4'b0000; in2 = 4'b0000; cin = 1'b0;
    #10 in1 = 4'b0001; in2 = 4'b0001;
    #10 in1 = 4'b0010; in2 = 4'b0010;
    #10 in1 = 4'b0011; in2 = 4'b0011;
    #10 in1 = 4'b0100; in2 = 4'b0100;
    #10 in1 = 4'b0101; in2 = 4'b0101;
    #10 in1 = 4'b0110; in2 = 4'b0110;
    #10 in1 = 4'b0111; in2 = 4'b0111;
    #10 in1 = 4'b1000; in2 = 4'b1000;
    #10 in1 = 4'b1001; in2 = 4'b1001;
    #10 in1 = 4'b1010; in2 = 4'b1010;
    #10 in1 = 4'b1011; in2 = 4'b1011;
    #10 in1 = 4'b1100; in2 = 4'b1100;
    #"
N/A,N/A,-1,177.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);


ender

module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);

endmodule

module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);

endmodule

module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);

endmodule"
N/A,N/A,-1,178.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);	b     design
	wire c1, c2, c3;
	
	adder_1bit a1(sum[0], c1, in1[0], in2[0], cin);
	adder_1bit a2(sum[1], c2, in1[1], in2[1], c1);
	adder_1bit a3(sum[2], c3, in1[2], in2[2], c2);
	adder_1bit a4(sum[3], cout, in1[3], in2[3], c3);
endmodule

module adder_1bit(output sum, output cout, input in1, in2, input cin);
	wire x, y, z;
	
	xor(sum, in1, in2, cin);
	and(x, in1, in2);
	and(y, in1, cin);
	and(z, in2, cin);
	or(cout, x, y, z);
endmodule

module adder_4bit(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);
	wire c1, c2, c3;
	
	adder_1bit a1(sum[0], c1, in1[0], in2[0], cin);
	adder_1bit a2(sum[1], c2, in1[1], in2[1], c1);
	adder_1bit a3(sum[2], c3, in1[2], in2[2], c2);
	adder_1bit a4(sum[3], cout, in1[3], in2[3], c3);
endmodule"
N/A,N/A,-1,179.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);	
wire
_sum, _cout;

adder_gate _adder_gate(
	.sum(sum[0]),
	.cout(cout),
	.in1(in1[0]),
	.in2(in2[0]),
	.cin(cin));

adder_1bit _adder_1bit(
	.sum(sum[1]),
	.cout(cout),
	.in1(in1[1]),
	.in2(in2[1]),
	.cin(cin));

adder_1bit _adder_1bit(
	.sum(sum[2]),
	.cout(cout),
	.in1(in1[2]),
	.in2(in2[2]),
	.cin(cin));

adder_1bit _adder_1bit(
	.sum(sum[3]),
	.cout(cout),
	.in1(in1[3]),
	.in2(in2[3]),
	.cin(cin));

endmodule

module adder_gate(output sum, cout, input in1, in2, cin);
wire w1, w2, w3;

xor(w1, in1, in2);
xor(sum, w1, cin);
and(w2, w1, cin);
and(w3, in1, in2);
or(cout, w2, w3);

endmodule

module adder_1bit(output sum, cout, input in1, in2, cin);
wire w1, w2, w3;

xor(w1, in1, in2);
xor(sum, w1, cin);
and(w2, w1, cin);
and(w3, in1, in2);
or(cout, w2, w3);

endmodule"
N/A,N/A,-1,180.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);
,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,"
N/A,N/A,-1,181.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);
wire//'wire' is a data type provided by the system.
//'wire' is a data type provided by the system.
//'wire' is a data type provided by the system.
//'wire' is a data type provided by the system.
//'wire' is a data type provided by the system.
//'wire' is a data type provided by the system.
//'wire' is a data type provided by the system.
//'wire' is a data type provided by the system.
//'wire' is a data type provided by the system.
//'wire' is a data type provided by the system.
//'wire' is a data type provided by the system.
//'wire' is a data type provided by the system.
//'wire' is a data type provided by the system.
//'wire' is a data type provided by the system.
//'wire' is a data type provided by the system.
//'wire' is a data type provided by the system.
//'wire' is a data type provided by the system.
//'wire' is a data type provided by the system.
//'wire' is a data type provided by the system.
//'wire' is a data type provided by the system.
//'wire' is a data type provided by the system.
//'wire' is a data type provided by the system.
//'wire' is a data type provided by the system.
//'wire' is a data type provided by the system.
//'wire' is a data type provided by the system.
//'wire' is a data type provided by the system.
//'wire' is a data type provided by the system.
//'wire' is a data type provided by the system.
//'wire' is a data type provided by the system.
//'wire' is a data type provided by the system.
//'wire' is a data type provided by the system.
//'wire' is a data type provided by the system.
//'wire' is a data type provided by the system.
//'wire' is a data type provided by the system.
//'wire' is a data type provided by the system.
//'wire' is a data type"
38.304000,198.83,0.026106934001670842,182.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);	
	a_full_adder FA0(sum[0], c1, in1[0], in2[0], cin);
	a_full_adder FA1(sum[1], c2, in1[1], in2[1], c1);
	a_full_adder FA2(sum[2], c3, in1[2], in2[2], c2);
	a_full_adder FA3(sum[3], cout, in1[3], in2[3], c3);
endmodule

module a_full_adder(output sum, output cout, input in1, in2, input cin);
	wire w1, w2, w3;
	xor(w1, in1, in2);
	xor(sum, w1, cin);
	and(w2, w1, cin);
	and(w3, in1, in2);
	or(cout, w2, w3);
endmodule"
30.324000,92.60,-0.5,183.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);	
	 a4 a1(sum[0], c1, in1[0], in2[0], cin);
	 a4 a2(sum[1], c2, in1[1], in2[1], c1);
	 a4 a3(sum[2], c3, in1[2], in2[2], c2);
	 a4 a4(sum[3], cout, in1[3], in2[3], c3);
endmodule

module a4(output wire sum, output wire cout, input wire in1, in2, input wire cin);
	xor(sum, in1, in2, cin);
	and(cout, in1, in2);
endmodule"
N/A,N/A,-1,184.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);	
	a4_bit_adder adder(sum[0], c1, in1[0], in2[0], cin);
	a4_bit_adder adder1(sum[1], c2, in1[1], in2[1], c1);
	a4_bit_adder adder2(sum[2], c3, in1[2], in2[2], c2);
	a4_bit_adder adder3(sum[3], cout, in1[3], in2[3], c3);
endmodule

module a4_bit_adder(output sum, output cout, input in1, in2, input cin);
	wire [3:0] sum;
	wire cout;
	wire c1, c2, c3;
	
	adder a1(sum[0], c1, in1, in2, cin);
	adder a2(sum[1], c2, in1, in2, c1);
	adder a3(sum[2], c3, in1, in2, c2);
	adder a4(sum[3], cout, in1, in2, c3);
endmodule

module adder_tb;
	reg [3:0] in1, in2;
	reg cin;
	wire [3:0] sum;
	wire cout;
	
	adder a1(sum, cout, in1, in2, cin);
	
	initial
	begin
		$monitor(""in1 = %b, in2 = %b, cin = %b, sum = %b, cout = %b"", in1, in2, cin, sum, cout);
		
		in1 = 4'b0000;
		in2 = 4'b0000;
		cin = 1'b0;
		#10
		
		in1 = 4'b0000;
		in2 = 4'b0001;
		cin = 1'b0;
		#10
		
		in1 = 4'b0001;
		in2 = 4'b0001;
		cin = 1'b0;
		#10"
36.708000,186.65,-0.5,185.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);	
	wire	_cin;
	wire	[3:0]	_in1;
	wire	[3:0]	_in2;
	wire	[3:0]	_sum;
	
	assign	_cin = cin;
	assign	_in1 = in1;
	assign	_in2 = in2;
	assign	_sum = _in1 + _in2 + _cin;
	
	assign	sum = _sum;
	assign	cout = _cin;
	
endmodule"
N/A,N/A,-1,186.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);	
	

ccin	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
"
N/A,N/A,-1,187.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);	 c1 <= in1[0] ^ in2[0];
	c2 <= in1[1] ^ in2[1];
	c3 <= in1[2] ^ in2[2];
	c4 <= in1[3] ^ in2[3];
	
	fa f1(sum[0], c1, in1[0], in2[0], cin);
	fa f2(sum[1], c2, in1[1], in2[1], c1);
	fa f3(sum[2], c3, in1[2], in2[2], c2);
	fa f4(sum[3], cout, in1[3], in2[3], c3);
	
endmodule

module fa(output sum, output cout, input a, b, cin);
	assign sum = a ^ b ^ cin;
	assign cout = (a & b) | (b & cin) | (cin & a);
endmodule

module testbench;
	reg [3:0] in1, in2;
	reg cin;
	wire [3:0] sum;
	wire cout;
	
	adder a1(sum, cout, in1, in2, cin);
	
	initial
	begin
		$monitor(""in1 = %b, in2 = %b, cin = %b, sum = %b, cout = %b"", in1, in2, cin, sum, cout);
		
		in1 = 4'b0000;
		in2 = 4'b0000;
		cin = 1'b0;
		#10
		
		in1 = 4'b0000;
		in2 = 4'b0001;
		cin = 1'b0;
		#10
		
		in1 = 4'b0000;
		in2 = 4'b0010;
		cin = 1'b0;
		#10
		
		in1 = 4'b0000;
		in2 = 4'b0011;
		cin = 1'b0;
		#10
		
		in1 = 4'b0000"
31.654000,216.93,0.03159158400202186,188.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);	
	wire c1, c2, c3;
	
	full_adder FA1(sum[0], c1, in1[0], in2[0], cin);
	full_adder FA2(sum[1], c2, in1[1], in2[1], c1);
	full_adder FA3(sum[2], c3, in1[2], in2[2], c2);
	full_adder FA4(sum[3], cout, in1[3], in2[3], c3);
	
endmodule

module full_adder(output sum, output cout, input in1, in2, cin);
	wire x, y, z;
	
	xor(sum, in1, in2, cin);
	and(x, in1, in2);
	and(y, in1, cin);
	and(z, in2, cin);
	or(cout, x, y, z);
	
endmodule"
31.654000,216.93,0.03159158400202186,189.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);	
	wire c1, c2, c3;
	
	full_adder FA1(sum[0], c1, in1[0], in2[0], cin);
	full_adder FA2(sum[1], c2, in1[1], in2[1], c1);
	full_adder FA3(sum[2], c3, in1[2], in2[2], c2);
	full_adder FA4(sum[3], cout, in1[3], in2[3], c3);
	
endmodule

module full_adder(output sum, output cout, input in1, in2, cin);
	wire x, y, z;
	
	xor(sum, in1, in2, cin);
	and(x, in1, in2);
	and(y, in1, cin);
	and(z, in2, cin);
	or(cout, x, y, z);
	
endmodule"
N/A,N/A,-1,190.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);	
	wire	;
	wire	[3:0]	;
	wire	[3:0]	;
	wire	[3:0]	;
	wire	[3:0]	;
	wire	[3:0]	;
	wire	[3:0]	;
	wire	[3:0]	;
	wire	[3:0]	;
	wire	[3:0]	;
	wire	[3:0]	;
	wire	[3:0]	;
	wire	[3:0]	;
	wire	[3:0]	;
	wire	[3:0]	;
	wire	[3:0]	;
	wire	[3:0]	;
	wire	[3:0]	;
	wire	[3:0]	;
	wire	[3:0]	;
	wire	[3:0]	;
	wire	[3:0]	;
	wire	[3:0]	;
	wire	[3:0]	;
	wire	[3:0]	;
	wire	[3:0]	;
	wire	[3:0]	;
	wire	[3:0]	;
	wire	[3:0]	;
	wire	[3:0]	;
	wire	[3:0]	;
	wire	[3:0]	;
	wire	[3:0]	;
	wire	[3:0]	;
	wire	[3:0]	;
	wire	[3:0]	;
	wire	[3:0]	;
	wire	[3:0]	;
	wire	[3:0]	;
	wire	[3:0]	;
	wire	[3:0]	;
	wire	[3:0]	;
	wire	[3:0]	;
	wire	[3:0]	;
	wire	[3:0]	;
	wire	[3:0]	"
N/A,N/A,-1,191.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);	
 c	
endmodule

module test_adder;
	reg [3:0] in1, in2;
	reg cin;
	wire [3:0] sum;
	wire cout;
	
	adder a1(sum, cout, in1, in2, cin);
	
	initial
	begin
		$monitor(""in1 = %b, in2 = %b, cin = %b, sum = %b, cout = %b"", in1, in2, cin, sum, cout);
		
		in1 = 4'b0000;
		in2 = 4'b0000;
		cin = 1'b0;
		#10
		
		in1 = 4'b0000;
		in2 = 4'b0001;
		cin = 1'b0;
		#10
		
		in1 = 4'b0000;
		in2 = 4'b0010;
		cin = 1'b0;
		#10
		
		in1 = 4'b0000;
		in2 = 4'b0011;
		cin = 1'b0;
		#10
		
		in1 = 4'b0000;
		in2 = 4'b0100;
		cin = 1'b0;
		#10
		
		in1 = 4'b0000;
		in2 = 4'b0101;
		cin = 1'b0;
		#10
		
		in1 = 4'b0000;
		in2 = 4'b0110;
		cin = 1'b0;
		#10
		
		in1 = 4'b0000;
		in2 = 4'b0111;
		cin = 1'b0;
		#10
		
		in1 = 4'b0000;
		in2 = 4'b1000;
		cin = 1'b0;
		#10
		
		in1 = 4'b0000;
		in2 = 4'b1001;
		cin = 1'b0;
		#10
		
		in1 = 4'b0000;
		in2 = 4'b1010"
N/A,N/A,-1,192.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);	
	wirecout w1(cout, cin, in1, in2);
	wirecout w2(sum[0], cin, in1[0], in2);
	wirecout w3(sum[1], cin, in1[1], in2);
	wirecout w4(sum[2], cin, in1[2], in2);
	wirecout w5(sum[3], cin, in1[3], in2);
endmodule

module test_adder;
	reg [3:0] in1, in2;
	reg cin;
	wire [3:0] sum;
	wire cout;
	
	adder a1(sum, cout, in1, in2, cin);
	
	initial
	begin
		$monitor(""in1 = %b, in2 = %b, cin = %b, sum = %b, cout = %b"", in1, in2, cin, sum, cout);
		
		in1 = 4'b0000;
		in2 = 4'b0000;
		cin = 1'b0;
		#10
		
		in1 = 4'b0000;
		in2 = 4'b0001;
		cin = 1'b0;
		#10
		
		in1 = 4'b0000;
		in2 = 4'b0010;
		cin = 1'b0;
		#10
		
		in1 = 4'b0000;
		in2 = 4'b0011;
		cin = 1'b0;
		#10
		
		in1 = 4'b0000;
		in2 = 4'b0100;
		cin = 1'b0;
		#10
		
		in1 = 4'b0000;
		in2 = 4'b0101;
		cin = 1'b0;
		#10
		
		in1 = 4'b0000;
		in2 = 4'b0110;
		cin = 1'b0;
		#10
		
		in1 = 4'b0000;
		in2 = 4'"
N/A,N/A,-1,193.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);	bint out;

// Define the input and output ports.
// Do not change the module name.
input [3:0] in1, in2;
input cin;

// Define the output port.
output [3:0] sum;

// Define the output port.
output cout;

// Define the internal wires.
wire c1, c2, c3;

// Define the internal wires.
wire [3:0] sum;

// Define the internal wires.
wire cout;

// Define the internal wires.
wire [3:0] in1, in2;

// Define the internal wires.
wire cin;

// Define the internal wires.
wire [3:0] sum;

// Define the internal wires.
wire cout;

// Define the internal wires.
wire [3:0] in1, in2;

// Define the internal wires.
wire cin;

// Define the internal wires.
wire [3:0] sum;

// Define the internal wires.
wire cout;

// Define the internal wires.
wire [3:0] in1, in2;

// Define the internal wires.
wire cin;

// Define the internal wires.
wire [3:0] sum;

// Define the internal wires.
wire cout;

// Define the internal wires.
wire [3:0] in1, in2;

// Define the internal wires.
wire cin;

// Define the internal wires.
wire [3:0] sum;

// Define the internal wires.
wire cout;

// Define the internal wires.
wire [3:0] in1, in2;

// Define the internal wires.
wire cin;

// Define the internal wires.
wire [3:0] sum;

// Define the internal wires.
wire cout;

// Define the internal wires.
wire [3:0] in1, in2;

// Define the internal wires.
wire cin;

// Def"
N/A,N/A,-1,194.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);	 c1;;
	wire c1;
	wire [3:0] sum;
	wire cout;
	wire [3:0] in1;
	wire [3:0] in2;
	wire cin;
	
	// Create the first adder
	full_adder FA1(sum[0], c1, in1[0], in2[0], cin);
	
	// Create the second adder
	full_adder FA2(sum[1], cout, in1[1], in2[1], c1);
	
	// Create the third adder
	full_adder FA3(sum[2], cout, in1[2], in2[2], cout);
	
	// Create the fourth adder
	full_adder FA4(sum[3], cout, in1[3], in2[3], cout);
	
endmodule

module full_adder(output sum, output cout, input in1, in2, input cin);
	wire w1, w2, w3;
	
	xor(w1, in1, in2);
	xor(sum, w1, cin);
	and(w2, w1, cin);
	and(w3, in1, in2);
	or(cout, w2, w3);
endmodule

module test_adder;
	reg [3:0] in1;
	reg [3:0] in2;
	reg cin;
	wire [3:0] sum;
	wire cout;
	
	adder a1(sum, cout, in1, in2, cin);
	
	initial
	begin
		$monitor(""in1 = %b, in2 = %b, cin = %b, sum = %b, cout = %b"", in1, in2, cin, sum, cout);
		
		// Test 1
		in1 = 4'b0000;
		in2 = 4'b0000;
		cin = 1'b0;
		#10
		
		// Test 2
		in1 = 4'b0001;
		in2 ="
N/A,N/A,-1,195.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);
 w

endmodule

module test_adder;

reg [3:0] in1, in2;
reg cin;
wire [3:0] sum;
wire cout;

adder a1(sum, cout, in1, in2, cin);

initial
begin
    $monitor($time, "" in1=%b, in2=%b, cin=%b, sum=%b, cout=%b"", in1, in2, cin, sum, cout);
    in1 = 4'b0000;
    in2 = 4'b0000;
    cin = 1'b0;
    #10
    in1 = 4'b0000;
    in2 = 4'b0001;
    cin = 1'b0;
    #10
    in1 = 4'b0000;
    in2 = 4'b0010;
    cin = 1'b0;
    #10
    in1 = 4'b0000;
    in2 = 4'b0011;
    cin = 1'b0;
    #10
    in1 = 4'b0000;
    in2 = 4'b0100;
    cin = 1'b0;
    #10
    in1 = 4'b0000;
    in2 = 4'b0101;
    cin = 1'b0;
    #10
    in1 = 4'b0000;
    in2 = 4'b0110;
    cin = 1'b0;
    #10
    in1 = 4'b0000;
    in2 = 4'b0111;
    cin = 1'b0;
    #10
    in1 = 4'b0000;
    in2 = 4'b1000;
    cin = 1'b0;
    #10
    in1 = 4'b0000;
    in2 = 4'b1001;
    cin = 1'b0;
    #10
    in1 = 4'b0000;
    in2 = 4'b1010;
    cin = 1'b0;
    #10
    in1 = 4'b0000;
    in2"
,,-1,196.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);	
	

endmodule"
31.654000,216.93,0.03159158400202186,197.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);

     
    wire [3:0] c;
    
    assign c[0] = cin;
    
    full_adder FA0(sum[0], c[1], in1[0], in2[0], c[0]);
    full_adder FA1(sum[1], c[2], in1[1], in2[1], c[1]);
    full_adder FA2(sum[2], c[3], in1[2], in2[2], c[2]);
    full_adder FA3(sum[3], cout, in1[3], in2[3], c[3]);
    
endmodule

module full_adder(output sum, output cout, input in1, in2, cin);
    
    wire x, y, z;
    
    xor(sum, in1, in2, cin);
    and(x, in1, in2);
    and(y, in1, cin);
    and(z, in2, cin);
    or(cout, x, y, z);
    
endmodule"
31.654000,216.93,0.03159158400202186,198.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);

     
    wire [3:0] c;
    
    assign c[0] = cin;
    
    full_adder FA0(sum[0], c[1], in1[0], in2[0], c[0]);
    full_adder FA1(sum[1], c[2], in1[1], in2[1], c[1]);
    full_adder FA2(sum[2], c[3], in1[2], in2[2], c[2]);
    full_adder FA3(sum[3], cout, in1[3], in2[3], c[3]);
    
endmodule

module full_adder(output sum, output cout, input in1, in2, cin);
    
    wire x, y, z;
    
    xor(sum, in1, in2, cin);
    and(x, in1, in2);
    and(y, in1, cin);
    and(z, in2, cin);
    or(cout, x, y, z);
    
endmodule"
N/A,N/A,-1,199.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);

    1	wire	[3:0]	cout;
    2	wire	[3:0]	sum;
    3	wire	[3:0]	in1;
    4	wire	[3:0]	in2;
    5	wire	[3:0]	in1_b;
    6	wire	[3:0]	in2_b;
    7	wire	[3:0]	in1_c;
    8	wire	[3:0]	in2_c;
    
    // 1. Input data
    assign in1 = in1_b;
    assign in2 = in2_b;
    
    // 2. Carry in
    assign in1_b = in1;
    assign in2_b = in2;
    assign in1_c = in1_b;
    assign in2_c = in2_b;
    assign cout = cin;
    
    // 3. Carry out
    assign sum = in1_c;
    assign sum_b = in2_c;
    
endmodule
`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date:    14:46:56 03/10/2015 
// Design Name: 
// Module Name:    mux_4_1 
// Project Name: 
// Target Devices: 
// Tool versions: 
// Description: 
//
// Dependencies: 
//
// Revision: 
// Revision 0.01 - File Created
// Additional Comments: 
//
//////////////////////////////////////////////////////////////////////////////////
module mux_4_1(
    output reg [3:0] out,
    input [3:0] in,
    input [1:0] sel
    );

always @(sel or in)
    case(sel)
        2'b00: out = in;
        2'b01: out = 4'b0001;
        2'b10: out = 4'b0010;
        2'b11: out = 4'"
34.846000,160.35,-0.5,200.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);

     
wire c1, c2, c3;

// Create the first adder
half_adder h1(sum[0], c1, in1[0], in2[0]);
full_adder f1(sum[1], c2, in1[1], in2[1], c1);
full_adder f2(sum[2], c3, in1[2], in2[2], c2);
full_adder f3(sum[3], cout, in1[3], in2[3], c3);

endmodule

module half_adder(output sum, output cout, input in1, in2);

// Create the first adder
xor(sum, in1, in2);
and(cout, in1, in2);

endmodule

module full_adder(output sum, output cout, input in1, in2, cin);

// Create the first adder
xor(sum, in1, in2, cin);
and(c1,in1,in2);
and(c2,in1,cin);
and(c3,in2,cin);
or(cout,c1,c2,c3);

endmodule"
N/A,N/A,-1,201.0,1,"module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);

     
 [3:0] in1, in2;
 input cin;
 
 assign {cout, sum} = in1 + in2 + cin;
 
 endmodule
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 "
