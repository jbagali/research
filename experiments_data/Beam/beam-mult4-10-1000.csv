Area,Delay,Score,Current Run,Episode,Verilog
N/A,N/A,-1,0,0,"//Please finish designing the 4 bit multiplier module (multiplier_4) below.
//There are two 4 bit inputs (A and B) and an 8 bit output (product).
//The module should utilize the inputs (A and B) to determine the output product correctly in its implementation.
module multiplier_4(output [7:0] product, input [3:0] A, B);
	wire [7:0] product;
	wire [3:0] A;
	wire [3:0] B;
	
	assign product[0] = A[0] & B[0];
	assign product[1] = A[0] & B[1];
	assign product[2] = A[0] & B[2];
	assign product[3] = A[0] & B[3];
	
	assign product[4] = A[1] & B[0];
	assign product[5] = A[1] & B[1];
	assign product[6] = A[1] & B[2];
	assign product[7] = A[1] & B[3];
	
	assign product[8] = A[2] & B[0];
	assign product[9] = A[2] & B[1];
	assign product[10] = A[2] & B[2];
	assign product[11] = A[2] & B[3];
	
	assign product[12] = A[3] & B[0];
	assign product[13] = A[3] & B[1];
	assign product[14] = A[3] & B[2];
	assign product[15] = A[3] & B[3];
	
	assign product[16] = A[4] & B[0];
	assign product[17] = A[4] & B[1];
	assign product[18] = A[4] & B[2];
	assign product[19] = A[4] & B[3];
	
	assign product[20] = A[5] & B[0];
	assign product[21] = A[5] & B[1];
	assign product[22] = A[5] & B[2];
	assign product[23] = A[5] & B[3];
	
	assign product[24] = A[6] & B[0];
	assign product[25] = A[6] & B[1];
	assign product[26] = A[6] & B[2];
	assign product[27] = A[6] & B[3];
	
	assign product[28] = A[7] & B[0];
	assign product[29] = A[7] & B[1];
	assign product[30] = A[7] & B[2];
	assign product[31] = A[7] & B[3];

endmodule
"
N/A,N/A,-1,1,0,"//Please finish designing the 4 bit multiplier module (multiplier_4) below.
//There are two 4 bit inputs (A and B) and an 8 bit output (product).
//The module should utilize the inputs (A and B) to determine the output product correctly in its implementation.
module multiplier_4(output [7:0] product, input [3:0] A, B);
	wire [7:0] product;
	wire [3:0] A;
	wire [3:0] B;
	
	assign product[0] = A[0] & B[0];
	assign product[1] = A[0] & B[1];
	assign product[2] = A[0] & B[2];
	assign product[3] = A[0] & B[3];
	
	assign product[4] = A[1] & B[0];
	assign product[5] = A[1] & B[1];
	assign product[6] = A[1] & B[2];
	assign product[7] = A[1] & B[3];
	
	assign product[8] = A[2] & B[0];
	assign product[9] = A[2] & B[1];
	assign product[10] = A[2] & B[2];
	assign product[11] = A[2] & B[3];
	
	assign product[12] = A[3] & B[0];
	assign product[13] = A[3] & B[1];
	assign product[14] = A[3] & B[2];
	assign product[15] = A[3] & B[3];
	
	assign product[16] = A[4] & B[0];
	assign product[17] = A[4] & B[1];
	assign product[18] = A[4] & B[2];
	assign product[19] = A[4] & B[3];
	
	assign product[20] = A[5] & B[0];
	assign product[21] = A[5] & B[1];
	assign product[22] = A[5] & B[2];
	assign product[23] = A[5] & B[3];
	
	assign product[24] = A[6] & B[0];
	assign product[25] = A[6] & B[1];
	assign product[26] = A[6] & B[2];
	assign product[27] = A[6] & B[3];
	
	assign product[28] = A[7] & B[0];
	assign product[29] = A[7] & B[1];
	assign product[30] = A[7] & B[2];
	assign product[31] = A[7] & B[3];

endmodule
"
