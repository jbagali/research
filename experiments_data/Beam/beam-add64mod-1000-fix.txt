adders/ripple_carry/prompt1_adder_64.v
Prompt str:  //Design a 64-bit adder module (defined as adder_64 below).
//There are two 64 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 64 bit value, [63:0] sum, and a single carry-out output bit, cout.
//The adder_64 module should utilize the 8 bit adder defined below (adder_8) in its implementation.

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_64(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);

Loading LLM model...
Initializing MCTS tree/LLM env...
Episode not stated yet!
Simulations per episode:  100
********-- EPISODE-1--************
Env seed:  720693
BEAM SEARCH: ID TYPE:  <class 'torch.Tensor'>
//Design a 64-bit adder module (defined as adder_64 below).
//There are two 64 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 64 bit value, [63:0] sum, and a single carry-out output bit, cout.
//The adder_64 module should utilize the 8 bit adder defined below (adder_8) in its implementation.

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_64(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7,c8;
  adder_8 A1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
  adder_8 A2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
  adder_8 A3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
  adder_8 A4(sum[31:24], c4, in1[31:24], in2[31:24], c3);
  adder_8 A5(sum[39:32], c5, in1[39:32], in2[39:32], c4);
  adder_8 A6(sum[47:40], c6, in1[47:40], in2[47:40], c5);
  adder_8 A7(sum[55:48], c7, in1[55:48], in2[55:48], c6);
  adder_8 A8(sum[63:56], cout, in1[63:56], in2[63:56], c7);
endmodule
Path:  output_files/3089149_adder_64/3089149_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
[ 1003 23067   257  5598    12  2545   751   263  8265   357 23211   355
   751   263    62  2414  2174   737   198  1003  1858   389   734  5598
  1643 17311   357   259    16   290   287    17     8   290   257  2060
  3283    12   259  5128  1643    11   269   259    13   198  1003   464
 23862   389   257  5598  1643  1988    11   685  5066    25    15    60
  2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
    13   198  1003   464   751   263    62  2414  8265   815 17624   262
   807  1643   751   263  5447  2174   357 26676    62    23     8   287
   663  7822    13   198   198 21412  1336    62 26676    62    16     7
 22915  6503  2160    11   198 50267 22915  6503 42304    11   198 50267
 15414  6503   287    16    11   287    17    11   269   259  1776   198
 50286 21809   256    16    11   256    17    11   256    18    26   198
 50286    87   273     7    83    16    11   287    16    11   287    17
  1776   198 50286    87   273     7 16345    11   256    16    11   269
   259  1776   198 50286   392     7    83    17    11   256    16    11
   269   259  1776   198 50286   392     7    83    18    11   287    16
    11   287    17  1776   198 50286   273     7    66   448    11   256
    17    11   256    18  1776   198   437 21412   198   198 21412   751
   263    62    23     7 22915   685    22    25    15    60  2160    11
   198 50266 22915 42304    11   198 50266 15414   685    22    25    15
    60   287    16    11   287    17    11   198 50266 15414   269   259
  1776   198 50286 21809   269    16    11    66    17    11    66    18
    11    66    19    11    66    20    11    66    21    11    66    22
    26   198 50286 12853    62 26676    62    16  9677    16     7 16345
    58    15  4357   269    16    11   287    16    58    15  4357   287
    17    58    15  4357   269   259  1776   198 50286 12853    62 26676
    62    16  9677    17     7 16345    58    16  4357   269    17    11
   287    16    58    16  4357   287    17    58    16  4357   269    16
  1776   198 50286 12853    62 26676    62    16  9677    18     7 16345
    58    17  4357   269    18    11   287    16    58    17  4357   287
    17    58    17  4357   269    17  1776   198 50286 12853    62 26676
    62    16  9677    19     7 16345    58    18  4357   269    19    11
   287    16    58    18  4357   287    17    58    18  4357   269    18
  1776   198 50286 12853    62 26676    62    16  9677    20     7 16345
    58    19  4357   269    20    11   287    16    58    19  4357   287
    17    58    19  4357   269    19  1776   198 50286 12853    62 26676
    62    16  9677    21     7 16345    58    20  4357   269    21    11
   287    16    58    20  4357   287    17    58    20  4357   269    20
  1776   198 50286 12853    62 26676    62    16  9677    22     7 16345
    58    21  4357   269    22    11   287    16    58    21  4357   287
    17    58    21  4357   269    21  1776   198 50286 12853    62 26676
    62    16  9677    23     7 16345    58    22  4357 42304    11   287
    16    58    22  4357   287    17    58    22  4357   269    22  1776
   198   437 21412   198   198 21412   751   263    62  2414     7 22915
   685  5066    25    15    60  2160    11   198 50266 22915 42304    11
   198 50266 15414   685  5066    25    15    60   287    16    11   287
    17    11   198 50266 15414   269   259  1776   198 50286 21809   269
    16    11    66    17    11    66    18    11    66    19    11    66
    20    11    66    21    11    66    22    11    66    23    26   198
 50286 26676    62    23   317    16     7 16345    58    22    25    15
  4357   269    16    11   287    16    58    22    25    15  4357   287
    17    58    22    25    15  4357   269   259  1776   198 50286 26676
    62    23   317    17     7 16345    58  1314    25    23  4357   269
    17    11   287    16    58  1314    25    23  4357   287    17    58
  1314    25    23  4357   269    16  1776   198 50286 26676    62    23
   317    18     7 16345    58  1954    25  1433  4357   269    18    11
   287    16    58  1954    25  1433  4357   287    17    58  1954    25
  1433  4357   269    17  1776   198 50286 26676    62    23   317    19
     7 16345    58  3132    25  1731  4357   269    19    11   287    16
    58  3132    25  1731  4357   287    17    58  3132    25  1731  4357
   269    18  1776   198 50286 26676    62    23   317    20     7 16345
    58  2670    25  2624  4357   269    20    11   287    16    58  2670
    25  2624  4357   287    17    58  2670    25  2624  4357   269    19
  1776   198 50286 26676    62    23   317    21     7 16345    58  2857
    25  1821  4357   269    21    11   287    16    58  2857    25  1821
  4357   287    17    58  2857    25  1821  4357   269    20  1776   198
 50286 26676    62    23   317    22     7 16345    58  2816    25  2780
  4357   269    22    11   287    16    58  2816    25  2780  4357   287
    17    58  2816    25  2780  4357   269    21  1776   198 50286 26676
    62    23   317    23     7 16345    58  5066    25  3980  4357 42304
    11   287    16    58  5066    25  3980  4357   287    17    58  5066
    25  3980  4357   269    22  1776   198   437 21412     2]
Running getPromptScore: 
adder_64
output_files/3089149_adder_64/synth_script.sh
Running bash in x seconds:  1.16485

Currently displaying area/delay scores for  adder_64  module.
Area of the chip design is:  595.84
Delay value for the chip design is:  2418.77
Product:  1441199.9168
Score (1/chip area):  0.5
Beam token ids:  [1003, 23067, 257, 5598, 12, 2545, 751, 263, 8265, 357, 23211, 355, 751, 263, 62, 2414, 2174, 737, 198, 1003, 1858, 389, 734, 5598, 1643, 17311, 357, 259, 16, 290, 287, 17, 8, 290, 257, 2060, 3283, 12, 259, 5128, 1643, 11, 269, 259, 13, 198, 1003, 464, 23862, 389, 257, 5598, 1643, 1988, 11, 685, 5066, 25, 15, 60, 2160, 11, 290, 257, 2060, 3283, 12, 448, 5072, 1643, 11, 42304, 13, 198, 1003, 464, 751, 263, 62, 2414, 8265, 815, 17624, 262, 807, 1643, 751, 263, 5447, 2174, 357, 26676, 62, 23, 8, 287, 663, 7822, 13, 198, 198, 21412, 1336, 62, 26676, 62, 16, 7, 22915, 6503, 2160, 11, 198, 50267, 22915, 6503, 42304, 11, 198, 50267, 15414, 6503, 287, 16, 11, 287, 17, 11, 269, 259, 1776, 198, 50286, 21809, 256, 16, 11, 256, 17, 11, 256, 18, 26, 198, 50286, 87, 273, 7, 83, 16, 11, 287, 16, 11, 287, 17, 1776, 198, 50286, 87, 273, 7, 16345, 11, 256, 16, 11, 269, 259, 1776, 198, 50286, 392, 7, 83, 17, 11, 256, 16, 11, 269, 259, 1776, 198, 50286, 392, 7, 83, 18, 11, 287, 16, 11, 287, 17, 1776, 198, 50286, 273, 7, 66, 448, 11, 256, 17, 11, 256, 18, 1776, 198, 437, 21412, 198, 198, 21412, 751, 263, 62, 23, 7, 22915, 685, 22, 25, 15, 60, 2160, 11, 198, 50266, 22915, 42304, 11, 198, 50266, 15414, 685, 22, 25, 15, 60, 287, 16, 11, 287, 17, 11, 198, 50266, 15414, 269, 259, 1776, 198, 50286, 21809, 269, 16, 11, 66, 17, 11, 66, 18, 11, 66, 19, 11, 66, 20, 11, 66, 21, 11, 66, 22, 26, 198, 50286, 12853, 62, 26676, 62, 16, 9677, 16, 7, 16345, 58, 15, 4357, 269, 16, 11, 287, 16, 58, 15, 4357, 287, 17, 58, 15, 4357, 269, 259, 1776, 198, 50286, 12853, 62, 26676, 62, 16, 9677, 17, 7, 16345, 58, 16, 4357, 269, 17, 11, 287, 16, 58, 16, 4357, 287, 17, 58, 16, 4357, 269, 16, 1776, 198, 50286, 12853, 62, 26676, 62, 16, 9677, 18, 7, 16345, 58, 17, 4357, 269, 18, 11, 287, 16, 58, 17, 4357, 287, 17, 58, 17, 4357, 269, 17, 1776, 198, 50286, 12853, 62, 26676, 62, 16, 9677, 19, 7, 16345, 58, 18, 4357, 269, 19, 11, 287, 16, 58, 18, 4357, 287, 17, 58, 18, 4357, 269, 18, 1776, 198, 50286, 12853, 62, 26676, 62, 16, 9677, 20, 7, 16345, 58, 19, 4357, 269, 20, 11, 287, 16, 58, 19, 4357, 287, 17, 58, 19, 4357, 269, 19, 1776, 198, 50286, 12853, 62, 26676, 62, 16, 9677, 21, 7, 16345, 58, 20, 4357, 269, 21, 11, 287, 16, 58, 20, 4357, 287, 17, 58, 20, 4357, 269, 20, 1776, 198, 50286, 12853, 62, 26676, 62, 16, 9677, 22, 7, 16345, 58, 21, 4357, 269, 22, 11, 287, 16, 58, 21, 4357, 287, 17, 58, 21, 4357, 269, 21, 1776, 198, 50286, 12853, 62, 26676, 62, 16, 9677, 23, 7, 16345, 58, 22, 4357, 42304, 11, 287, 16, 58, 22, 4357, 287, 17, 58, 22, 4357, 269, 22, 1776, 198, 437, 21412, 198, 198, 21412, 751, 263, 62, 2414, 7, 22915, 685, 5066, 25, 15, 60, 2160, 11, 198, 50266, 22915, 42304, 11, 198, 50266, 15414, 685, 5066, 25, 15, 60, 287, 16, 11, 287, 17, 11, 198, 50266, 15414, 269, 259, 1776, 198, 50286, 21809, 269, 16, 11, 66, 17, 11, 66, 18, 11, 66, 19, 11, 66, 20, 11, 66, 21, 11, 66, 22, 11, 66, 23, 26, 198, 50286, 26676, 62, 23, 317, 16, 7, 16345, 58, 22, 25, 15, 4357, 269, 16, 11, 287, 16, 58, 22, 25, 15, 4357, 287, 17, 58, 22, 25, 15, 4357, 269, 259, 1776, 198, 50286, 26676, 62, 23, 317, 17, 7, 16345, 58, 1314, 25, 23, 4357, 269, 17, 11, 287, 16, 58, 1314, 25, 23, 4357, 287, 17, 58, 1314, 25, 23, 4357, 269, 16, 1776, 198, 50286, 26676, 62, 23, 317, 18, 7, 16345, 58, 1954, 25, 1433, 4357, 269, 18, 11, 287, 16, 58, 1954, 25, 1433, 4357, 287, 17, 58, 1954, 25, 1433, 4357, 269, 17, 1776, 198, 50286, 26676, 62, 23, 317, 19, 7, 16345, 58, 3132, 25, 1731, 4357, 269, 19, 11, 287, 16, 58, 3132, 25, 1731, 4357, 287, 17, 58, 3132, 25, 1731, 4357, 269, 18, 1776, 198, 50286, 26676, 62, 23, 317, 20, 7, 16345, 58, 2670, 25, 2624, 4357, 269, 20, 11, 287, 16, 58, 2670, 25, 2624, 4357, 287, 17, 58, 2670, 25, 2624, 4357, 269, 19, 1776, 198, 50286, 26676, 62, 23, 317, 21, 7, 16345, 58, 2857, 25, 1821, 4357, 269, 21, 11, 287, 16, 58, 2857, 25, 1821, 4357, 287, 17, 58, 2857, 25, 1821, 4357, 269, 20, 1776, 198, 50286, 26676, 62, 23, 317, 22, 7, 16345, 58, 2816, 25, 2780, 4357, 269, 22, 11, 287, 16, 58, 2816, 25, 2780, 4357, 287, 17, 58, 2816, 25, 2780, 4357, 269, 21, 1776, 198, 50286, 26676, 62, 23, 317, 23, 7, 16345, 58, 5066, 25, 3980, 4357, 42304, 11, 287, 16, 58, 5066, 25, 3980, 4357, 287, 17, 58, 5066, 25, 3980, 4357, 269, 22, 1776, 198, 437, 21412, 2]
Beam results:  //Design a 64-bit adder module (defined as adder_64 below).
//There are two 64 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 64 bit value, [63:0] sum, and a single carry-out output bit, cout.
//The adder_64 module should utilize the 8 bit adder defined below (adder_8) in its implementation.

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_64(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7,c8;
  adder_8 A1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
  adder_8 A2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
  adder_8 A3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
  adder_8 A4(sum[31:24], c4, in1[31:24], in2[31:24], c3);
  adder_8 A5(sum[39:32], c5, in1[39:32], in2[39:32], c4);
  adder_8 A6(sum[47:40], c6, in1[47:40], in2[47:40], c5);
  adder_8 A7(sum[55:48], c7, in1[55:48], in2[55:48], c6);
  adder_8 A8(sum[63:56], cout, in1[63:56], in2[63:56], c7);
endmodule
Env seed:  238192
BEAM SEARCH: ID TYPE:  <class 'torch.Tensor'>
//Design a 64-bit adder module (defined as adder_64 below).
//There are two 64 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 64 bit value, [63:0] sum, and a single carry-out output bit, cout.
//The adder_64 module should utilize the 8 bit adder defined below (adder_8) in its implementation.

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_64(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7,c8;
  adder_8 A1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
  adder_8 A2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
  adder_8 A3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
  adder_8 A4(sum[31:24], c4, in1[31:24], in2[31:24], c3);
  adder_8 A5(sum[39:32], c5, in1[39:32], in2[39:32], c4);
  adder_8 A6(sum[47:40], c6, in1[47:40], in2[47:40], c5);
  adder_8 A7(sum[55:48], c7, in1[55:48], in2[55:48], c6);
  adder_8 A8(sum[63:56], cout, in1[63:56], in2[63:56], c7);
endmodule
Path:  output_files/3089149_adder_64/3089149_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
[ 1003 23067   257  5598    12  2545   751   263  8265   357 23211   355
   751   263    62  2414  2174   737   198  1003  1858   389   734  5598
  1643 17311   357   259    16   290   287    17     8   290   257  2060
  3283    12   259  5128  1643    11   269   259    13   198  1003   464
 23862   389   257  5598  1643  1988    11   685  5066    25    15    60
  2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
    13   198  1003   464   751   263    62  2414  8265   815 17624   262
   807  1643   751   263  5447  2174   357 26676    62    23     8   287
   663  7822    13   198   198 21412  1336    62 26676    62    16     7
 22915  6503  2160    11   198 50267 22915  6503 42304    11   198 50267
 15414  6503   287    16    11   287    17    11   269   259  1776   198
 50286 21809   256    16    11   256    17    11   256    18    26   198
 50286    87   273     7    83    16    11   287    16    11   287    17
  1776   198 50286    87   273     7 16345    11   256    16    11   269
   259  1776   198 50286   392     7    83    17    11   256    16    11
   269   259  1776   198 50286   392     7    83    18    11   287    16
    11   287    17  1776   198 50286   273     7    66   448    11   256
    17    11   256    18  1776   198   437 21412   198   198 21412   751
   263    62    23     7 22915   685    22    25    15    60  2160    11
   198 50266 22915 42304    11   198 50266 15414   685    22    25    15
    60   287    16    11   287    17    11   198 50266 15414   269   259
  1776   198 50286 21809   269    16    11    66    17    11    66    18
    11    66    19    11    66    20    11    66    21    11    66    22
    26   198 50286 12853    62 26676    62    16  9677    16     7 16345
    58    15  4357   269    16    11   287    16    58    15  4357   287
    17    58    15  4357   269   259  1776   198 50286 12853    62 26676
    62    16  9677    17     7 16345    58    16  4357   269    17    11
   287    16    58    16  4357   287    17    58    16  4357   269    16
  1776   198 50286 12853    62 26676    62    16  9677    18     7 16345
    58    17  4357   269    18    11   287    16    58    17  4357   287
    17    58    17  4357   269    17  1776   198 50286 12853    62 26676
    62    16  9677    19     7 16345    58    18  4357   269    19    11
   287    16    58    18  4357   287    17    58    18  4357   269    18
  1776   198 50286 12853    62 26676    62    16  9677    20     7 16345
    58    19  4357   269    20    11   287    16    58    19  4357   287
    17    58    19  4357   269    19  1776   198 50286 12853    62 26676
    62    16  9677    21     7 16345    58    20  4357   269    21    11
   287    16    58    20  4357   287    17    58    20  4357   269    20
  1776   198 50286 12853    62 26676    62    16  9677    22     7 16345
    58    21  4357   269    22    11   287    16    58    21  4357   287
    17    58    21  4357   269    21  1776   198 50286 12853    62 26676
    62    16  9677    23     7 16345    58    22  4357 42304    11   287
    16    58    22  4357   287    17    58    22  4357   269    22  1776
   198   437 21412   198   198 21412   751   263    62  2414     7 22915
   685  5066    25    15    60  2160    11   198 50266 22915 42304    11
   198 50266 15414   685  5066    25    15    60   287    16    11   287
    17    11   198 50266 15414   269   259  1776   198 50286 21809   269
    16    11    66    17    11    66    18    11    66    19    11    66
    20    11    66    21    11    66    22    11    66    23    26   198
 50286 26676    62    23   317    16     7 16345    58    22    25    15
  4357   269    16    11   287    16    58    22    25    15  4357   287
    17    58    22    25    15  4357   269   259  1776   198 50286 26676
    62    23   317    17     7 16345    58  1314    25    23  4357   269
    17    11   287    16    58  1314    25    23  4357   287    17    58
  1314    25    23  4357   269    16  1776   198 50286 26676    62    23
   317    18     7 16345    58  1954    25  1433  4357   269    18    11
   287    16    58  1954    25  1433  4357   287    17    58  1954    25
  1433  4357   269    17  1776   198 50286 26676    62    23   317    19
     7 16345    58  3132    25  1731  4357   269    19    11   287    16
    58  3132    25  1731  4357   287    17    58  3132    25  1731  4357
   269    18  1776   198 50286 26676    62    23   317    20     7 16345
    58  2670    25  2624  4357   269    20    11   287    16    58  2670
    25  2624  4357   287    17    58  2670    25  2624  4357   269    19
  1776   198 50286 26676    62    23   317    21     7 16345    58  2857
    25  1821  4357   269    21    11   287    16    58  2857    25  1821
  4357   287    17    58  2857    25  1821  4357   269    20  1776   198
 50286 26676    62    23   317    22     7 16345    58  2816    25  2780
  4357   269    22    11   287    16    58  2816    25  2780  4357   287
    17    58  2816    25  2780  4357   269    21  1776   198 50286 26676
    62    23   317    23     7 16345    58  5066    25  3980  4357 42304
    11   287    16    58  5066    25  3980  4357   287    17    58  5066
    25  3980  4357   269    22  1776   198   437 21412     2]
Running getPromptScore: 
adder_64
output_files/3089149_adder_64/synth_script.sh
Running bash in x seconds:  1.173887

Currently displaying area/delay scores for  adder_64  module.
Area of the chip design is:  595.84
Delay value for the chip design is:  2418.77
Product:  1441199.9168
Score (1/chip area):  0.5
Beam token ids:  [1003, 23067, 257, 5598, 12, 2545, 751, 263, 8265, 357, 23211, 355, 751, 263, 62, 2414, 2174, 737, 198, 1003, 1858, 389, 734, 5598, 1643, 17311, 357, 259, 16, 290, 287, 17, 8, 290, 257, 2060, 3283, 12, 259, 5128, 1643, 11, 269, 259, 13, 198, 1003, 464, 23862, 389, 257, 5598, 1643, 1988, 11, 685, 5066, 25, 15, 60, 2160, 11, 290, 257, 2060, 3283, 12, 448, 5072, 1643, 11, 42304, 13, 198, 1003, 464, 751, 263, 62, 2414, 8265, 815, 17624, 262, 807, 1643, 751, 263, 5447, 2174, 357, 26676, 62, 23, 8, 287, 663, 7822, 13, 198, 198, 21412, 1336, 62, 26676, 62, 16, 7, 22915, 6503, 2160, 11, 198, 50267, 22915, 6503, 42304, 11, 198, 50267, 15414, 6503, 287, 16, 11, 287, 17, 11, 269, 259, 1776, 198, 50286, 21809, 256, 16, 11, 256, 17, 11, 256, 18, 26, 198, 50286, 87, 273, 7, 83, 16, 11, 287, 16, 11, 287, 17, 1776, 198, 50286, 87, 273, 7, 16345, 11, 256, 16, 11, 269, 259, 1776, 198, 50286, 392, 7, 83, 17, 11, 256, 16, 11, 269, 259, 1776, 198, 50286, 392, 7, 83, 18, 11, 287, 16, 11, 287, 17, 1776, 198, 50286, 273, 7, 66, 448, 11, 256, 17, 11, 256, 18, 1776, 198, 437, 21412, 198, 198, 21412, 751, 263, 62, 23, 7, 22915, 685, 22, 25, 15, 60, 2160, 11, 198, 50266, 22915, 42304, 11, 198, 50266, 15414, 685, 22, 25, 15, 60, 287, 16, 11, 287, 17, 11, 198, 50266, 15414, 269, 259, 1776, 198, 50286, 21809, 269, 16, 11, 66, 17, 11, 66, 18, 11, 66, 19, 11, 66, 20, 11, 66, 21, 11, 66, 22, 26, 198, 50286, 12853, 62, 26676, 62, 16, 9677, 16, 7, 16345, 58, 15, 4357, 269, 16, 11, 287, 16, 58, 15, 4357, 287, 17, 58, 15, 4357, 269, 259, 1776, 198, 50286, 12853, 62, 26676, 62, 16, 9677, 17, 7, 16345, 58, 16, 4357, 269, 17, 11, 287, 16, 58, 16, 4357, 287, 17, 58, 16, 4357, 269, 16, 1776, 198, 50286, 12853, 62, 26676, 62, 16, 9677, 18, 7, 16345, 58, 17, 4357, 269, 18, 11, 287, 16, 58, 17, 4357, 287, 17, 58, 17, 4357, 269, 17, 1776, 198, 50286, 12853, 62, 26676, 62, 16, 9677, 19, 7, 16345, 58, 18, 4357, 269, 19, 11, 287, 16, 58, 18, 4357, 287, 17, 58, 18, 4357, 269, 18, 1776, 198, 50286, 12853, 62, 26676, 62, 16, 9677, 20, 7, 16345, 58, 19, 4357, 269, 20, 11, 287, 16, 58, 19, 4357, 287, 17, 58, 19, 4357, 269, 19, 1776, 198, 50286, 12853, 62, 26676, 62, 16, 9677, 21, 7, 16345, 58, 20, 4357, 269, 21, 11, 287, 16, 58, 20, 4357, 287, 17, 58, 20, 4357, 269, 20, 1776, 198, 50286, 12853, 62, 26676, 62, 16, 9677, 22, 7, 16345, 58, 21, 4357, 269, 22, 11, 287, 16, 58, 21, 4357, 287, 17, 58, 21, 4357, 269, 21, 1776, 198, 50286, 12853, 62, 26676, 62, 16, 9677, 23, 7, 16345, 58, 22, 4357, 42304, 11, 287, 16, 58, 22, 4357, 287, 17, 58, 22, 4357, 269, 22, 1776, 198, 437, 21412, 198, 198, 21412, 751, 263, 62, 2414, 7, 22915, 685, 5066, 25, 15, 60, 2160, 11, 198, 50266, 22915, 42304, 11, 198, 50266, 15414, 685, 5066, 25, 15, 60, 287, 16, 11, 287, 17, 11, 198, 50266, 15414, 269, 259, 1776, 198, 50286, 21809, 269, 16, 11, 66, 17, 11, 66, 18, 11, 66, 19, 11, 66, 20, 11, 66, 21, 11, 66, 22, 11, 66, 23, 26, 198, 50286, 26676, 62, 23, 317, 16, 7, 16345, 58, 22, 25, 15, 4357, 269, 16, 11, 287, 16, 58, 22, 25, 15, 4357, 287, 17, 58, 22, 25, 15, 4357, 269, 259, 1776, 198, 50286, 26676, 62, 23, 317, 17, 7, 16345, 58, 1314, 25, 23, 4357, 269, 17, 11, 287, 16, 58, 1314, 25, 23, 4357, 287, 17, 58, 1314, 25, 23, 4357, 269, 16, 1776, 198, 50286, 26676, 62, 23, 317, 18, 7, 16345, 58, 1954, 25, 1433, 4357, 269, 18, 11, 287, 16, 58, 1954, 25, 1433, 4357, 287, 17, 58, 1954, 25, 1433, 4357, 269, 17, 1776, 198, 50286, 26676, 62, 23, 317, 19, 7, 16345, 58, 3132, 25, 1731, 4357, 269, 19, 11, 287, 16, 58, 3132, 25, 1731, 4357, 287, 17, 58, 3132, 25, 1731, 4357, 269, 18, 1776, 198, 50286, 26676, 62, 23, 317, 20, 7, 16345, 58, 2670, 25, 2624, 4357, 269, 20, 11, 287, 16, 58, 2670, 25, 2624, 4357, 287, 17, 58, 2670, 25, 2624, 4357, 269, 19, 1776, 198, 50286, 26676, 62, 23, 317, 21, 7, 16345, 58, 2857, 25, 1821, 4357, 269, 21, 11, 287, 16, 58, 2857, 25, 1821, 4357, 287, 17, 58, 2857, 25, 1821, 4357, 269, 20, 1776, 198, 50286, 26676, 62, 23, 317, 22, 7, 16345, 58, 2816, 25, 2780, 4357, 269, 22, 11, 287, 16, 58, 2816, 25, 2780, 4357, 287, 17, 58, 2816, 25, 2780, 4357, 269, 21, 1776, 198, 50286, 26676, 62, 23, 317, 23, 7, 16345, 58, 5066, 25, 3980, 4357, 42304, 11, 287, 16, 58, 5066, 25, 3980, 4357, 287, 17, 58, 5066, 25, 3980, 4357, 269, 22, 1776, 198, 437, 21412, 2]
Beam results:  //Design a 64-bit adder module (defined as adder_64 below).
//There are two 64 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 64 bit value, [63:0] sum, and a single carry-out output bit, cout.
//The adder_64 module should utilize the 8 bit adder defined below (adder_8) in its implementation.

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_64(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7,c8;
  adder_8 A1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
  adder_8 A2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
  adder_8 A3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
  adder_8 A4(sum[31:24], c4, in1[31:24], in2[31:24], c3);
  adder_8 A5(sum[39:32], c5, in1[39:32], in2[39:32], c4);
  adder_8 A6(sum[47:40], c6, in1[47:40], in2[47:40], c5);
  adder_8 A7(sum[55:48], c7, in1[55:48], in2[55:48], c6);
  adder_8 A8(sum[63:56], cout, in1[63:56], in2[63:56], c7);
endmodule
Env seed:  607019
BEAM SEARCH: ID TYPE:  <class 'torch.Tensor'>
//Design a 64-bit adder module (defined as adder_64 below).
//There are two 64 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 64 bit value, [63:0] sum, and a single carry-out output bit, cout.
//The adder_64 module should utilize the 8 bit adder defined below (adder_8) in its implementation.

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_64(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7,c8;
  adder_8 A1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
  adder_8 A2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
  adder_8 A3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
  adder_8 A4(sum[31:24], c4, in1[31:24], in2[31:24], c3);
  adder_8 A5(sum[39:32], c5, in1[39:32], in2[39:32], c4);
  adder_8 A6(sum[47:40], c6, in1[47:40], in2[47:40], c5);
  adder_8 A7(sum[55:48], c7, in1[55:48], in2[55:48], c6);
  adder_8 A8(sum[63:56], cout, in1[63:56], in2[63:56], c7);
endmodule
Path:  output_files/3089149_adder_64/3089149_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
[ 1003 23067   257  5598    12  2545   751   263  8265   357 23211   355
   751   263    62  2414  2174   737   198  1003  1858   389   734  5598
  1643 17311   357   259    16   290   287    17     8   290   257  2060
  3283    12   259  5128  1643    11   269   259    13   198  1003   464
 23862   389   257  5598  1643  1988    11   685  5066    25    15    60
  2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
    13   198  1003   464   751   263    62  2414  8265   815 17624   262
   807  1643   751   263  5447  2174   357 26676    62    23     8   287
   663  7822    13   198   198 21412  1336    62 26676    62    16     7
 22915  6503  2160    11   198 50267 22915  6503 42304    11   198 50267
 15414  6503   287    16    11   287    17    11   269   259  1776   198
 50286 21809   256    16    11   256    17    11   256    18    26   198
 50286    87   273     7    83    16    11   287    16    11   287    17
  1776   198 50286    87   273     7 16345    11   256    16    11   269
   259  1776   198 50286   392     7    83    17    11   256    16    11
   269   259  1776   198 50286   392     7    83    18    11   287    16
    11   287    17  1776   198 50286   273     7    66   448    11   256
    17    11   256    18  1776   198   437 21412   198   198 21412   751
   263    62    23     7 22915   685    22    25    15    60  2160    11
   198 50266 22915 42304    11   198 50266 15414   685    22    25    15
    60   287    16    11   287    17    11   198 50266 15414   269   259
  1776   198 50286 21809   269    16    11    66    17    11    66    18
    11    66    19    11    66    20    11    66    21    11    66    22
    26   198 50286 12853    62 26676    62    16  9677    16     7 16345
    58    15  4357   269    16    11   287    16    58    15  4357   287
    17    58    15  4357   269   259  1776   198 50286 12853    62 26676
    62    16  9677    17     7 16345    58    16  4357   269    17    11
   287    16    58    16  4357   287    17    58    16  4357   269    16
  1776   198 50286 12853    62 26676    62    16  9677    18     7 16345
    58    17  4357   269    18    11   287    16    58    17  4357   287
    17    58    17  4357   269    17  1776   198 50286 12853    62 26676
    62    16  9677    19     7 16345    58    18  4357   269    19    11
   287    16    58    18  4357   287    17    58    18  4357   269    18
  1776   198 50286 12853    62 26676    62    16  9677    20     7 16345
    58    19  4357   269    20    11   287    16    58    19  4357   287
    17    58    19  4357   269    19  1776   198 50286 12853    62 26676
    62    16  9677    21     7 16345    58    20  4357   269    21    11
   287    16    58    20  4357   287    17    58    20  4357   269    20
  1776   198 50286 12853    62 26676    62    16  9677    22     7 16345
    58    21  4357   269    22    11   287    16    58    21  4357   287
    17    58    21  4357   269    21  1776   198 50286 12853    62 26676
    62    16  9677    23     7 16345    58    22  4357 42304    11   287
    16    58    22  4357   287    17    58    22  4357   269    22  1776
   198   437 21412   198   198 21412   751   263    62  2414     7 22915
   685  5066    25    15    60  2160    11   198 50266 22915 42304    11
   198 50266 15414   685  5066    25    15    60   287    16    11   287
    17    11   198 50266 15414   269   259  1776   198 50286 21809   269
    16    11    66    17    11    66    18    11    66    19    11    66
    20    11    66    21    11    66    22    11    66    23    26   198
 50286 26676    62    23   317    16     7 16345    58    22    25    15
  4357   269    16    11   287    16    58    22    25    15  4357   287
    17    58    22    25    15  4357   269   259  1776   198 50286 26676
    62    23   317    17     7 16345    58  1314    25    23  4357   269
    17    11   287    16    58  1314    25    23  4357   287    17    58
  1314    25    23  4357   269    16  1776   198 50286 26676    62    23
   317    18     7 16345    58  1954    25  1433  4357   269    18    11
   287    16    58  1954    25  1433  4357   287    17    58  1954    25
  1433  4357   269    17  1776   198 50286 26676    62    23   317    19
     7 16345    58  3132    25  1731  4357   269    19    11   287    16
    58  3132    25  1731  4357   287    17    58  3132    25  1731  4357
   269    18  1776   198 50286 26676    62    23   317    20     7 16345
    58  2670    25  2624  4357   269    20    11   287    16    58  2670
    25  2624  4357   287    17    58  2670    25  2624  4357   269    19
  1776   198 50286 26676    62    23   317    21     7 16345    58  2857
    25  1821  4357   269    21    11   287    16    58  2857    25  1821
  4357   287    17    58  2857    25  1821  4357   269    20  1776   198
 50286 26676    62    23   317    22     7 16345    58  2816    25  2780
  4357   269    22    11   287    16    58  2816    25  2780  4357   287
    17    58  2816    25  2780  4357   269    21  1776   198 50286 26676
    62    23   317    23     7 16345    58  5066    25  3980  4357 42304
    11   287    16    58  5066    25  3980  4357   287    17    58  5066
    25  3980  4357   269    22  1776   198   437 21412     2]
Running getPromptScore: 
adder_64
output_files/3089149_adder_64/synth_script.sh
Running bash in x seconds:  1.168712

Currently displaying area/delay scores for  adder_64  module.
Area of the chip design is:  595.84
Delay value for the chip design is:  2418.77
Product:  1441199.9168
Score (1/chip area):  0.5
Beam token ids:  [1003, 23067, 257, 5598, 12, 2545, 751, 263, 8265, 357, 23211, 355, 751, 263, 62, 2414, 2174, 737, 198, 1003, 1858, 389, 734, 5598, 1643, 17311, 357, 259, 16, 290, 287, 17, 8, 290, 257, 2060, 3283, 12, 259, 5128, 1643, 11, 269, 259, 13, 198, 1003, 464, 23862, 389, 257, 5598, 1643, 1988, 11, 685, 5066, 25, 15, 60, 2160, 11, 290, 257, 2060, 3283, 12, 448, 5072, 1643, 11, 42304, 13, 198, 1003, 464, 751, 263, 62, 2414, 8265, 815, 17624, 262, 807, 1643, 751, 263, 5447, 2174, 357, 26676, 62, 23, 8, 287, 663, 7822, 13, 198, 198, 21412, 1336, 62, 26676, 62, 16, 7, 22915, 6503, 2160, 11, 198, 50267, 22915, 6503, 42304, 11, 198, 50267, 15414, 6503, 287, 16, 11, 287, 17, 11, 269, 259, 1776, 198, 50286, 21809, 256, 16, 11, 256, 17, 11, 256, 18, 26, 198, 50286, 87, 273, 7, 83, 16, 11, 287, 16, 11, 287, 17, 1776, 198, 50286, 87, 273, 7, 16345, 11, 256, 16, 11, 269, 259, 1776, 198, 50286, 392, 7, 83, 17, 11, 256, 16, 11, 269, 259, 1776, 198, 50286, 392, 7, 83, 18, 11, 287, 16, 11, 287, 17, 1776, 198, 50286, 273, 7, 66, 448, 11, 256, 17, 11, 256, 18, 1776, 198, 437, 21412, 198, 198, 21412, 751, 263, 62, 23, 7, 22915, 685, 22, 25, 15, 60, 2160, 11, 198, 50266, 22915, 42304, 11, 198, 50266, 15414, 685, 22, 25, 15, 60, 287, 16, 11, 287, 17, 11, 198, 50266, 15414, 269, 259, 1776, 198, 50286, 21809, 269, 16, 11, 66, 17, 11, 66, 18, 11, 66, 19, 11, 66, 20, 11, 66, 21, 11, 66, 22, 26, 198, 50286, 12853, 62, 26676, 62, 16, 9677, 16, 7, 16345, 58, 15, 4357, 269, 16, 11, 287, 16, 58, 15, 4357, 287, 17, 58, 15, 4357, 269, 259, 1776, 198, 50286, 12853, 62, 26676, 62, 16, 9677, 17, 7, 16345, 58, 16, 4357, 269, 17, 11, 287, 16, 58, 16, 4357, 287, 17, 58, 16, 4357, 269, 16, 1776, 198, 50286, 12853, 62, 26676, 62, 16, 9677, 18, 7, 16345, 58, 17, 4357, 269, 18, 11, 287, 16, 58, 17, 4357, 287, 17, 58, 17, 4357, 269, 17, 1776, 198, 50286, 12853, 62, 26676, 62, 16, 9677, 19, 7, 16345, 58, 18, 4357, 269, 19, 11, 287, 16, 58, 18, 4357, 287, 17, 58, 18, 4357, 269, 18, 1776, 198, 50286, 12853, 62, 26676, 62, 16, 9677, 20, 7, 16345, 58, 19, 4357, 269, 20, 11, 287, 16, 58, 19, 4357, 287, 17, 58, 19, 4357, 269, 19, 1776, 198, 50286, 12853, 62, 26676, 62, 16, 9677, 21, 7, 16345, 58, 20, 4357, 269, 21, 11, 287, 16, 58, 20, 4357, 287, 17, 58, 20, 4357, 269, 20, 1776, 198, 50286, 12853, 62, 26676, 62, 16, 9677, 22, 7, 16345, 58, 21, 4357, 269, 22, 11, 287, 16, 58, 21, 4357, 287, 17, 58, 21, 4357, 269, 21, 1776, 198, 50286, 12853, 62, 26676, 62, 16, 9677, 23, 7, 16345, 58, 22, 4357, 42304, 11, 287, 16, 58, 22, 4357, 287, 17, 58, 22, 4357, 269, 22, 1776, 198, 437, 21412, 198, 198, 21412, 751, 263, 62, 2414, 7, 22915, 685, 5066, 25, 15, 60, 2160, 11, 198, 50266, 22915, 42304, 11, 198, 50266, 15414, 685, 5066, 25, 15, 60, 287, 16, 11, 287, 17, 11, 198, 50266, 15414, 269, 259, 1776, 198, 50286, 21809, 269, 16, 11, 66, 17, 11, 66, 18, 11, 66, 19, 11, 66, 20, 11, 66, 21, 11, 66, 22, 11, 66, 23, 26, 198, 50286, 26676, 62, 23, 317, 16, 7, 16345, 58, 22, 25, 15, 4357, 269, 16, 11, 287, 16, 58, 22, 25, 15, 4357, 287, 17, 58, 22, 25, 15, 4357, 269, 259, 1776, 198, 50286, 26676, 62, 23, 317, 17, 7, 16345, 58, 1314, 25, 23, 4357, 269, 17, 11, 287, 16, 58, 1314, 25, 23, 4357, 287, 17, 58, 1314, 25, 23, 4357, 269, 16, 1776, 198, 50286, 26676, 62, 23, 317, 18, 7, 16345, 58, 1954, 25, 1433, 4357, 269, 18, 11, 287, 16, 58, 1954, 25, 1433, 4357, 287, 17, 58, 1954, 25, 1433, 4357, 269, 17, 1776, 198, 50286, 26676, 62, 23, 317, 19, 7, 16345, 58, 3132, 25, 1731, 4357, 269, 19, 11, 287, 16, 58, 3132, 25, 1731, 4357, 287, 17, 58, 3132, 25, 1731, 4357, 269, 18, 1776, 198, 50286, 26676, 62, 23, 317, 20, 7, 16345, 58, 2670, 25, 2624, 4357, 269, 20, 11, 287, 16, 58, 2670, 25, 2624, 4357, 287, 17, 58, 2670, 25, 2624, 4357, 269, 19, 1776, 198, 50286, 26676, 62, 23, 317, 21, 7, 16345, 58, 2857, 25, 1821, 4357, 269, 21, 11, 287, 16, 58, 2857, 25, 1821, 4357, 287, 17, 58, 2857, 25, 1821, 4357, 269, 20, 1776, 198, 50286, 26676, 62, 23, 317, 22, 7, 16345, 58, 2816, 25, 2780, 4357, 269, 22, 11, 287, 16, 58, 2816, 25, 2780, 4357, 287, 17, 58, 2816, 25, 2780, 4357, 269, 21, 1776, 198, 50286, 26676, 62, 23, 317, 23, 7, 16345, 58, 5066, 25, 3980, 4357, 42304, 11, 287, 16, 58, 5066, 25, 3980, 4357, 287, 17, 58, 5066, 25, 3980, 4357, 269, 22, 1776, 198, 437, 21412, 2]
Beam results:  //Design a 64-bit adder module (defined as adder_64 below).
//There are two 64 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 64 bit value, [63:0] sum, and a single carry-out output bit, cout.
//The adder_64 module should utilize the 8 bit adder defined below (adder_8) in its implementation.

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_64(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7,c8;
  adder_8 A1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
  adder_8 A2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
  adder_8 A3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
  adder_8 A4(sum[31:24], c4, in1[31:24], in2[31:24], c3);
  adder_8 A5(sum[39:32], c5, in1[39:32], in2[39:32], c4);
  adder_8 A6(sum[47:40], c6, in1[47:40], in2[47:40], c5);
  adder_8 A7(sum[55:48], c7, in1[55:48], in2[55:48], c6);
  adder_8 A8(sum[63:56], cout, in1[63:56], in2[63:56], c7);
endmodule
Env seed:  567972
