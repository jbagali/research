adders/ripple_carry/prompt1_adder_32.v
Prompt str:  //Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
Loading LLM model...
Initializing MCTS tree/LLM env...
Episode not stated yet!
Simulations per episode:  300
********-- EPISODE-1--************
ORIG MODILE:  adder_32
Env seed:  42
Initializing MCTS tree.
Initialize search (creating root node)
Selection: finding leaf node.
Leaf selection - depth:  0
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  198
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42,c43,c44,c45,c46,c47,c48,c49,c50,c51,c52,c53,c54,c55,c56,c57,c58,c59,c60,c61,c62,c63;
  adder_8 a1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
  adder_8 a3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
  adder_8 a4(sum[31:24], c4, in1[31:24], in2[31:24], c3);
  adder_8 a5(sum[39:32], c5, in1[39:32], in2[39:32], c4);
  adder_8 a6(sum[47:40], c6, in1[47:40], in2[47:40], c5);
  adder_8 a7(sum[55:48], c7, in1[55:48], in2[55:48], c6);
  adder_8 a8(sum[63:56], cout, in1[63:56], in2[63:56], c7);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 failed\n'
Tokens:  465
LLM generates return in:  202.472291  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Updated num:  1
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [1.58876783e+00 6.87949386e-02 1.24606153e-03 7.24363335e-04
 2.86691971e-04 2.49951550e-04 2.88915876e-01 1.37947935e-04
 1.22781456e-04 1.06184027e-04]  taking action:  0
Adding child.
Leaf selection - depth:  1
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  50286
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42,c43,c44,c45,c46,c47,c48,c49,c50,c51,c52,c53,c54,c55,c56,c57,c58,c59,c60,c61,c62,c63;
  adder_8 a1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
  adder_8 a3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
  adder_8 a4(sum[31:24], c4, in1[31:24], in2[31:24], c3);
  adder_8 a5(sum[39:32], c5, in1[39:32], in2[39:32], c4);
  adder_8 a6(sum[47:40], c6, in1[47:40], in2[47:40], c5);
  adder_8 a7(sum[55:48], c7, in1[55:48], in2[55:48], c6);
  adder_8 a8(sum[63:56], cout, in1[63:56], in2[63:56], c7);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 failed\n'
Tokens:  464
LLM generates return in:  203.745572  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  2.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [9.22917627e-01 8.42562483e-02 1.52610746e-03 8.87160279e-04
 3.51124522e-04 3.06126879e-04 3.53848238e-01 1.68951026e-04
 1.50375958e-04 1.30048342e-04]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [1.8846201e+00 2.0433625e-02 7.8237792e-03 7.3052030e-03 3.8040844e-03
 3.4399568e-03 3.3845070e-03 1.5380096e-03 1.0742610e-03 7.9068542e-04]  taking action:  0
Adding child.
Leaf selection - depth:  2
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  21809
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42,c43,c44,c45,c46,c47,c48,c49,c50,c51,c52,c53,c54,c55,c56,c57,c58,c59,c60,c61,c62,c63;
  adder_8 a1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
  adder_8 a3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
  adder_8 a4(sum[31:24], c4, in1[31:24], in2[31:24], c3);
  adder_8 a5(sum[39:32], c5, in1[39:32], in2[39:32], c4);
  adder_8 a6(sum[47:40], c6, in1[47:40], in2[47:40], c5);
  adder_8 a7(sum[55:48], c7, in1[55:48], in2[55:48], c6);
  adder_8 a8(sum[63:56], cout, in1[63:56], in2[63:56], c7);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 failed\n'
Tokens:  463
LLM generates return in:  203.284858  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  3.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [6.82285669e-01 9.72907352e-02 1.76219711e-03 1.02440445e-03
 4.05443674e-04 3.53484872e-04 4.08588751e-01 1.95087840e-04
 1.73639200e-04 1.50166891e-04]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [1.1040895e+00 2.5025977e-02 9.5821330e-03 8.9470102e-03 4.6590329e-03
 4.2130696e-03 4.1451575e-03 1.8836694e-03 1.3156957e-03 9.6838793e-04]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [1.8258892e+00 6.2606364e-02 1.2661889e-02 1.1357146e-02 3.3147521e-03
 2.5206434e-03 2.4367718e-03 1.7084897e-03 1.6987934e-03 1.0046375e-03]  taking action:  0
Adding child.
Leaf selection - depth:  3
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  269
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42,c43,c44,c45,c46,c47,c48,c49,c50,c51,c52,c53,c54,c55,c56,c57,c58,c59,c60,c61,c62,c63;
  adder_8 a1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
  adder_8 a3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
  adder_8 a4(sum[31:24], c4, in1[31:24], in2[31:24], c3);
  adder_8 a5(sum[39:32], c5, in1[39:32], in2[39:32], c4);
  adder_8 a6(sum[47:40], c6, in1[47:40], in2[47:40], c5);
  adder_8 a7(sum[55:48], c7, in1[55:48], in2[55:48], c6);
  adder_8 a8(sum[63:56], cout, in1[63:56], in2[63:56], c7);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 failed\n'
Tokens:  462
LLM generates return in:  202.463618  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  4.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [5.53015625e-01 1.08774349e-01 1.97019626e-03 1.14531900e-03
 4.53299808e-04 3.95208101e-04 4.56816111e-01 2.18114836e-04
 1.94134527e-04 1.67891688e-04]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [0.8217518  0.02889751 0.01106449 0.01033112 0.00537979 0.00486483
 0.00478642 0.00217507 0.00151923 0.0011182 ]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [1.0681243  0.07667682 0.01550758 0.01390961 0.00405973 0.00308715
 0.00298442 0.00209246 0.00208059 0.00123042]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [1.0364729e+00 8.1591123e-01 5.2932374e-02 2.5214782e-02 2.3588615e-03
 1.5924730e-03 1.1251261e-03 1.1051334e-03 9.1034890e-04 7.8628008e-04]  taking action:  0
Adding child.
Leaf selection - depth:  4
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  16
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42,c43,c44,c45,c46,c47,c48,c49,c50,c51,c52,c53,c54,c55,c56,c57,c58,c59,c60,c61,c62,c63;
  adder_8 a1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
  adder_8 a3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
  adder_8 a4(sum[31:24], c4, in1[31:24], in2[31:24], c3);
  adder_8 a5(sum[39:32], c5, in1[39:32], in2[39:32], c4);
  adder_8 a6(sum[47:40], c6, in1[47:40], in2[47:40], c5);
  adder_8 a7(sum[55:48], c7, in1[55:48], in2[55:48], c6);
  adder_8 a8(sum[63:56], cout, in1[63:56], in2[63:56], c7);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 failed\n'
Tokens:  461
LLM generates return in:  201.920677  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  5.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [4.70365323e-01 1.19156329e-01 2.15824187e-03 1.25463410e-03
 4.96565061e-04 4.32928784e-04 5.00416977e-01 2.38932832e-04
 2.12663719e-04 1.83916130e-04]  taking action:  6
Adding child.
Leaf selection - depth:  1
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  198
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);   
  wire [31:0] c;
  adder_8 a1(sum[7:0], c[0], in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c[1], in1[15:8], in2[15:8], c[0]);
  adder_8 a3(sum[23:16], c[2], in1[23:16], in2[23:16], c[1]);
  adder_8 a4(sum[31:24], cout, in1[31:24], in2[31:24], c[2]);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  153
LLM generates return in:  54.244983  seconds
Running getPromptScore: 
adder_32
output_files/2329780_adder_32/synth_script.sh
Running bash in x seconds:  0.902763

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.1
Backpropogation: incorporating estimates.
Current runs:  6.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [5.14462491e-01 1.28703545e-01 2.33116766e-03 1.35515971e-03
 5.36351566e-04 4.67616532e-04 3.20256056e-01 2.58076955e-04
 2.29703070e-04 1.98652124e-04]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [0.66996145 0.0323084  0.01237048 0.01155054 0.00601479 0.00543905
 0.00535138 0.00243181 0.00169856 0.00125018]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.7940657  0.08853877 0.01790662 0.01606143 0.00468777 0.00356473
 0.00344612 0.00241617 0.00240246 0.00142077]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [5.8470744e-01 9.9928313e-01 6.4828657e-02 3.0881675e-02 2.8890036e-03
 1.9503731e-03 1.3779926e-03 1.3535066e-03 1.1149452e-03 9.6299255e-04]  taking action:  1
Adding child.
Leaf selection - depth:  4
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  3132
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
  wire [31:0] c;
  adder_8 a1(sum[7:0], c[0], in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c[1], in1[15:8], in2[15:8], c[0]);
  adder_8 a3(sum[23:16], c[2], in1[23:16], in2[23:16], c[1]);
  adder_8 a4(sum[31:24], cout, in1[31:24], in2[31:24], c[2]);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  149
LLM generates return in:  52.9721  seconds
Running getPromptScore: 
adder_32
output_files/2329780_adder_32/synth_script.sh
Running bash in x seconds:  0.894857

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.1
Backpropogation: incorporating estimates.
Current runs:  7.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [4.79589277e-01 1.37589877e-01 2.49212305e-03 1.44872667e-03
 5.73383943e-04 4.99903100e-04 3.38915877e-01 2.75895870e-04
 2.45562911e-04 2.12368054e-04]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [0.6128515  0.03539208 0.01355118 0.01265298 0.00658887 0.00595818
 0.00586214 0.00266391 0.00186067 0.00136951]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.69674605 0.09898935 0.0200202  0.01795723 0.00524108 0.00398549
 0.00385287 0.00270136 0.00268603 0.00158847]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.682897   0.6269364  0.07485768 0.03565909 0.00333593 0.0022521
 0.00159117 0.00156289 0.00128743 0.00111197]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [1.8458365  0.02635718 0.02415812 0.01856908 0.00682264 0.00295169
 0.00289805 0.00261111 0.00193931 0.00192977]  taking action:  0
Adding child.
Leaf selection - depth:  5
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  11
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42,c43,c44,c45,c46,c47,c48,c49,c50,c51,c52,c53,c54,c55,c56,c57,c58,c59,c60,c61,c62,c63;
  adder_8 a1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
  adder_8 a3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
  adder_8 a4(sum[31:24], c4, in1[31:24], in2[31:24], c3);
  adder_8 a5(sum[39:32], c5, in1[39:32], in2[39:32], c4);
  adder_8 a6(sum[47:40], c6, in1[47:40], in2[47:40], c5);
  adder_8 a7(sum[55:48], c7, in1[55:48], in2[55:48], c6);
  adder_8 a8(sum[63:56], cout, in1[63:56], in2[63:56], c7);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 failed\n'
Tokens:  460
LLM generates return in:  202.274292  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  8.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [4.24326503e-01 1.45936103e-01 2.64329566e-03 1.53660668e-03
 6.08165511e-04 5.30227308e-04 3.56441564e-01 2.92631760e-04
 2.60458799e-04 2.25250337e-04]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [0.53763354 0.03822781 0.01463695 0.01366678 0.00711679 0.00643557
 0.00633183 0.00287735 0.00200976 0.00147924]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.5925065  0.1084374  0.02193104 0.01967115 0.00574132 0.00436588
 0.00422061 0.00295919 0.0029424  0.00174008]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.47960246 0.69503444 0.08369343 0.03986807 0.00372969 0.00251792
 0.00177898 0.00174737 0.00143939 0.00124322]  taking action:  1
Leaf selection - depth:  4
Leaf selection - action scores:  [1.3763753  0.25652048 0.12396478 0.11325075 0.02407847 0.00748407
 0.00608511 0.00478625 0.00472047 0.00378107]  taking action:  0
Adding child.
Leaf selection - depth:  5
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  25
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
  wire [31:0] c;
  adder_8 a1(sum[7:0], c[0], in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c[1], in1[15:8], in2[15:8], c[0]);
  adder_8 a3(sum[23:16], c[2], in1[23:16], in2[23:16], c[1]);
  adder_8 a4(sum[31:24], cout, in1[31:24], in2[31:24], c[2]);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  148
LLM generates return in:  52.604758  seconds
Running getPromptScore: 
adder_32
output_files/2329780_adder_32/synth_script.sh
Running bash in x seconds:  0.894362

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.1
Backpropogation: incorporating estimates.
Current runs:  9.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [4.06574108e-01 1.53830159e-01 2.78627827e-03 1.61972566e-03
 6.41062737e-04 5.58908657e-04 3.73017770e-01 3.08460960e-04
 2.74547681e-04 2.37434702e-04]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [0.50989145 0.04086725 0.01564756 0.01461041 0.00760817 0.00687991
 0.00676901 0.00307602 0.00214852 0.00158137]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.5526543  0.11712579 0.02368823 0.02124728 0.00620133 0.00471569
 0.00455878 0.00319629 0.00317815 0.0018795 ]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.5317412  0.53773326 0.09168156 0.04367328 0.00408567 0.00275824
 0.00194878 0.00191415 0.00157677 0.00136188]  taking action:  1
Leaf selection - depth:  4
Leaf selection - action scores:  [0.89285433 0.31417215 0.15182523 0.13870329 0.02948998 0.00916608
 0.00745271 0.00586194 0.00578137 0.00463085]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [1.9510844e+00 4.8590163e-04 1.8013036e-05 4.4827561e-06 3.6373158e-06
 3.2367748e-06 2.9154276e-06 1.9895981e-06 1.6429791e-06 1.5196928e-06]  taking action:  0
Adding child.
Leaf selection - depth:  6
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  15
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
  wire [31:0] c;
  adder_8 a1(sum[7:0], c[0], in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c[1], in1[15:8], in2[15:8], c[0]);
  adder_8 a3(sum[23:16], c[2], in1[23:16], in2[23:16], c[1]);
  adder_8 a4(sum[31:24], cout, in1[31:24], in2[31:24], c[2]);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  147
LLM generates return in:  52.296375  seconds
Running getPromptScore: 
adder_32
output_files/2329780_adder_32/synth_script.sh
Running bash in x seconds:  0.897416

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.1
Backpropogation: incorporating estimates.
Current runs:  10.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [3.91776758e-01 1.61338432e-01 2.92227331e-03 1.69878260e-03
 6.72352271e-04 5.86188345e-04 3.88783896e-01 3.23516584e-04
 2.87948037e-04 2.49023617e-04]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [0.48723537 0.04334626 0.01659674 0.01549667 0.00806968 0.00729725
 0.00717962 0.00326261 0.00227885 0.0016773 ]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.5216826  0.12521273 0.02532378 0.02271429 0.0066295  0.00504129
 0.00487354 0.00341698 0.00339759 0.00200927]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.5796877  0.45660758 0.09902741 0.04717254 0.00441303 0.00297924
 0.00210492 0.00206752 0.00170311 0.001471  ]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [1.0803394  0.03228082 0.02958754 0.02274239 0.008356   0.00361507
 0.00354937 0.00319794 0.00237516 0.00236347]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [1.9229326e+00 2.4033541e-02 2.0084979e-03 6.0193421e-04 4.7797812e-04
 3.8963550e-04 2.2898149e-04 1.2574557e-04 6.0359627e-05 5.2317475e-05]  taking action:  0
Adding child.
Leaf selection - depth:  6
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  66
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42,c43,c44,c45,c46,c47,c48,c49,c50,c51,c52,c53,c54,c55,c56,c57,c58,c59,c60,c61,c62,c63;
  adder_8 a1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
  adder_8 a3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
  adder_8 a4(sum[31:24], c4, in1[31:24], in2[31:24], c3);
  adder_8 a5(sum[39:32], c5, in1[39:32], in2[39:32], c4);
  adder_8 a6(sum[47:40], c6, in1[47:40], in2[47:40], c5);
  adder_8 a7(sum[55:48], c7, in1[55:48], in2[55:48], c6);
  adder_8 a8(sum[63:56], cout, in1[63:56], in2[63:56], c7);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 failed\n'
Tokens:  459
LLM generates return in:  201.861101  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  11.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [3.59167050e-01 1.68512497e-01 3.05221492e-03 1.77432056e-03
 7.02249043e-04 6.12253758e-04 4.03848238e-01 3.37902051e-04
 3.00751916e-04 2.60096685e-04]  taking action:  6
Leaf selection - depth:  1
Leaf selection - action scores:  [1.8115238e+00 6.1918404e-02 2.0282271e-03 1.1541196e-04 1.0504370e-04
 9.1198825e-05 7.5725395e-05 5.3528423e-05 4.9633902e-05 4.5966233e-05]  taking action:  0
Adding child.
Leaf selection - depth:  2
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  50286
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);   
  wire [31:0] c;
  adder_8 a1(sum[7:0], c[0], in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c[1], in1[15:8], in2[15:8], c[0]);
  adder_8 a3(sum[23:16], c[2], in1[23:16], in2[23:16], c[1]);
  adder_8 a4(sum[31:24], cout, in1[31:24], in2[31:24], c[2]);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  152
LLM generates return in:  53.950739  seconds
Running getPromptScore: 
adder_32
output_files/2329780_adder_32/synth_script.sh
Running bash in x seconds:  0.894503

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.1
Backpropogation: incorporating estimates.
Current runs:  12.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [3.75057908e-01 1.75393367e-01 3.17684602e-03 1.84677139e-03
 7.30923978e-04 6.37253916e-04 3.12197952e-01 3.51699606e-04
 3.13032519e-04 2.70717213e-04]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [0.4460154  0.04569097 0.0174945  0.01633493 0.00850619 0.00769198
 0.00756799 0.00343909 0.00240212 0.00176803]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.47166198 0.13280815 0.02685992 0.02409215 0.00703165 0.00534709
 0.00516917 0.00362425 0.00360368 0.00213116]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.44323647 0.48295563 0.10586475 0.05042956 0.00471772 0.00318495
 0.00225025 0.00221027 0.0018207  0.00157256]  taking action:  1
Leaf selection - depth:  4
Leaf selection - action scores:  [0.7154962  0.36277473 0.17531267 0.16016075 0.03405209 0.01058408
 0.00860565 0.00676878 0.00667575 0.00534724]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [1.2447903e+00 5.9510558e-04 2.2061375e-05 5.4902325e-06 4.4547842e-06
 3.9642232e-06 3.5706551e-06 2.4367500e-06 2.0122302e-06 1.8612359e-06]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [1.9500899e+00 7.9411326e-04 4.4649831e-04 8.6921624e-05 4.8242426e-05
 3.1537904e-05 2.6533477e-05 1.2996365e-05 1.0873542e-05 9.4863881e-06]  taking action:  0
Adding child.
Leaf selection - depth:  7
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  60
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
  wire [31:0] c;
  adder_8 a1(sum[7:0], c[0], in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c[1], in1[15:8], in2[15:8], c[0]);
  adder_8 a3(sum[23:16], c[2], in1[23:16], in2[23:16], c[1]);
  adder_8 a4(sum[31:24], cout, in1[31:24], in2[31:24], c[2]);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  146
LLM generates return in:  51.97302  seconds
Running getPromptScore: 
adder_32
output_files/2329780_adder_32/synth_script.sh
Running bash in x seconds:  0.887737

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.1
Backpropogation: incorporating estimates.
Current runs:  13.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [3.63953142e-01 1.82014299e-01 3.29676891e-03 1.91648524e-03
 7.58515659e-04 6.61309641e-04 3.21466523e-01 3.64975929e-04
 3.24849197e-04 2.80936529e-04]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [0.4319826  0.0479211  0.01834839 0.01713222 0.00892137 0.00806741
 0.00793737 0.00360695 0.00251937 0.00185432]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.45364583 0.13999209 0.02831285 0.02539535 0.00741201 0.00563633
 0.00544879 0.0038203  0.00379862 0.00224644]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.47467273 0.42616183 0.11228652 0.05348863 0.0050039  0.00337815
 0.00238675 0.00234434 0.00193114 0.00166795]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.80346906 0.03727468 0.03416475 0.02626065 0.00964867 0.00417433
 0.00409846 0.00369266 0.0027426  0.0027291 ]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [1.1275510e+00 2.9434955e-02 2.4598977e-03 7.3721586e-04 5.8540126e-04
 4.7720407e-04 2.8044390e-04 1.5400625e-04 7.3925141e-05 6.4075561e-05]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [1.5723758e+00 3.5184163e-01 2.4277532e-02 1.2876539e-03 2.0167802e-04
 1.2225113e-04 7.7215256e-05 6.3510204e-05 6.2961670e-05 6.2323161e-05]  taking action:  0
Adding child.
Leaf selection - depth:  7
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  17
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42,c43,c44,c45,c46,c47,c48,c49,c50,c51,c52,c53,c54,c55,c56,c57,c58,c59,c60,c61,c62,c63;
  adder_8 a1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
  adder_8 a3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
  adder_8 a4(sum[31:24], c4, in1[31:24], in2[31:24], c3);
  adder_8 a5(sum[39:32], c5, in1[39:32], in2[39:32], c4);
  adder_8 a6(sum[47:40], c6, in1[47:40], in2[47:40], c5);
  adder_8 a7(sum[55:48], c7, in1[55:48], in2[55:48], c6);
  adder_8 a8(sum[63:56], cout, in1[63:56], in2[63:56], c7);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 failed\n'
Tokens:  458
LLM generates return in:  201.504333  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  14.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [3.37584991e-01 1.88402699e-01 3.41248003e-03 1.98375069e-03
 7.85138299e-04 6.84520511e-04 3.30409575e-01 3.77785978e-04
 3.36250864e-04 2.90796934e-04]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [0.40148705 0.05005195 0.01916427 0.01789402 0.00931807 0.00842614
 0.00829032 0.00376734 0.00263139 0.00193678]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.418209   0.14682494 0.02969476 0.02663487 0.00777378 0.00591143
 0.00571474 0.00400676 0.00398402 0.00235608]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.38352478 0.44488657 0.11836039 0.05638196 0.00527457 0.00356088
 0.00251586 0.00247115 0.0020356  0.00175818]  taking action:  1
Leaf selection - depth:  4
Leaf selection - action scores:  [0.6190601  0.40559447 0.19600552 0.17906515 0.0380714  0.01183336
 0.0096214  0.00756773 0.00746372 0.0059784 ]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [9.8641664e-01 6.8716868e-04 2.5474279e-05 6.3395746e-06 5.1439415e-06
 4.5774905e-06 4.1230369e-06 2.8137165e-06 2.3235232e-06 2.1491701e-06]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [1.2441813e+00 9.7258616e-04 5.4684654e-04 1.0645682e-04 5.9084665e-05
 3.8625883e-05 3.2496740e-05 1.5917230e-05 1.3317315e-05 1.1618406e-05]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [1.9363351e+00 1.4325524e-02 5.0852122e-04 2.6267755e-04 6.3534397e-05
 2.2732924e-05 1.7628536e-05 1.4542883e-05 1.1264266e-05 8.0871423e-06]  taking action:  0
Adding child.
Leaf selection - depth:  8
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  269
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
  wire [31:0] c;
  adder_8 a1(sum[7:0], c[0], in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c[1], in1[15:8], in2[15:8], c[0]);
  adder_8 a3(sum[23:16], c[2], in1[23:16], in2[23:16], c[1]);
  adder_8 a4(sum[31:24], cout, in1[31:24], in2[31:24], c[2]);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  145
LLM generates return in:  51.66211  seconds
Running getPromptScore: 
adder_32
output_files/2329780_adder_32/synth_script.sh
Running bash in x seconds:  0.893415

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.1
Backpropogation: incorporating estimates.
Current runs:  15.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [3.30285694e-01 1.94581470e-01 3.52439422e-03 2.04880890e-03
 8.10887348e-04 7.06969744e-04 3.39059170e-01 3.90175681e-04
 3.47278399e-04 3.00333782e-04]  taking action:  6
Leaf selection - depth:  1
Leaf selection - action scores:  [1.1593273e+00 7.5834244e-02 2.4840608e-03 1.4135020e-04 1.2865174e-04
 1.1169529e-04 9.2744289e-05 6.5558663e-05 6.0788869e-05 5.6296911e-05]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [1.8351712e+00 2.4574805e-02 1.6368726e-02 1.0848244e-02 1.0606892e-02
 6.7194542e-03 4.1249492e-03 2.8851104e-03 2.0696968e-03 1.6146634e-03]  taking action:  0
Adding child.
Leaf selection - depth:  3
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  21809
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);   
  wire [31:0] c;
  adder_8 a1(sum[7:0], c[0], in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c[1], in1[15:8], in2[15:8], c[0]);
  adder_8 a3(sum[23:16], c[2], in1[23:16], in2[23:16], c[1]);
  adder_8 a4(sum[31:24], cout, in1[31:24], in2[31:24], c[2]);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  151
LLM generates return in:  53.629211  seconds
Running getPromptScore: 
adder_32
output_files/2329780_adder_32/synth_script.sh
Running bash in x seconds:  0.892866

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.1
Backpropogation: incorporating estimates.
Current runs:  16.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [3.40924184e-01 2.00569989e-01 3.63286241e-03 2.11186388e-03
 8.35843547e-04 7.28727732e-04 2.85581825e-01 4.02183886e-04
 3.57966380e-04 3.09576977e-04]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [0.39207146 0.05209573 0.0199468  0.01862469 0.00969855 0.0087702
 0.00862883 0.00392117 0.00273884 0.00201586]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.40659064 0.15335365 0.03101517 0.02781921 0.00811945 0.00617429
 0.00596885 0.00418493 0.00416118 0.00246085]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.4061489  0.40224695 0.12413743 0.05913391 0.00553202 0.00373468
 0.00263865 0.00259177 0.00213496 0.00184399]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.65463096 0.04167436 0.03819735 0.0293603  0.01078754 0.00466704
 0.00458222 0.00412852 0.00306632 0.00305123]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [8.3981246e-01 3.3988558e-02 2.8404449e-03 8.5126347e-04 6.7596312e-04
 5.5102777e-04 3.2382872e-04 1.7783110e-04 8.5361404e-05 7.3988085e-05]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [9.1287959e-01 4.3091625e-01 2.9733784e-02 1.5770476e-03 2.4700412e-04
 1.4972645e-04 9.4568990e-05 7.7783799e-05 7.7111981e-05 7.6329976e-05]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [1.9479207e+00 2.1332488e-03 1.1126583e-03 1.1396304e-04 7.6645549e-05
 5.5910605e-05 5.1946106e-05 2.8087463e-05 1.4976437e-05 8.0788113e-06]  taking action:  0
Adding child.
Leaf selection - depth:  8
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  11
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42,c43,c44,c45,c46,c47,c48,c49,c50,c51,c52,c53,c54,c55,c56,c57,c58,c59,c60,c61,c62,c63;
  adder_8 a1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
  adder_8 a3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
  adder_8 a4(sum[31:24], c4, in1[31:24], in2[31:24], c3);
  adder_8 a5(sum[39:32], c5, in1[39:32], in2[39:32], c4);
  adder_8 a6(sum[47:40], c6, in1[47:40], in2[47:40], c5);
  adder_8 a7(sum[55:48], c7, in1[55:48], in2[55:48], c6);
  adder_8 a8(sum[63:56], cout, in1[63:56], in2[63:56], c7);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 failed\n'
Tokens:  457
LLM generates return in:  201.226879  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  17.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [3.19021678e-01 2.06384816e-01 3.73818458e-03 2.17309000e-03
 8.60075914e-04 7.49854650e-04 2.91686910e-01 4.13843804e-04
 3.68344367e-04 3.18552081e-04]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [0.36817196 0.05406228 0.02069977 0.01932775 0.01006466 0.00910127
 0.00895456 0.00406919 0.00284223 0.00209196]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.37959352 0.15961553 0.03228161 0.02895516 0.00845099 0.00642641
 0.00621257 0.00435581 0.00433109 0.00256133]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.33980495 0.41642773 0.12965731 0.06176335 0.00577801 0.00390075
 0.00275599 0.00270701 0.00222989 0.00192599]  taking action:  1
Leaf selection - depth:  4
Leaf selection - action scores:  [0.55679035 0.44430646 0.21471329 0.19615605 0.04170513 0.01296279
 0.01053972 0.00829003 0.00817609 0.00654901]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [8.4623379e-01 7.6827791e-04 2.8481110e-05 7.0878596e-06 5.7511011e-06
 5.1177899e-06 4.6096957e-06 3.1458305e-06 2.5977779e-06 2.4028452e-06]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [9.8594785e-01 1.1230457e-03 6.3144398e-04 1.2292575e-04 6.8225090e-05
 4.4601329e-05 3.7524002e-05 1.8379635e-05 1.5377511e-05 1.3415779e-05]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [1.2357582e+00 1.7545111e-02 6.2280876e-04 3.2171299e-04 7.7813427e-05
 2.7842032e-05 2.1590458e-05 1.7811322e-05 1.3795851e-05 9.9046865e-06]  taking action:  0
Leaf selection - depth:  8
Leaf selection - action scores:  [0.3982227  0.33873585 0.29454982 0.1822932  0.10329145 0.08853949
 0.05841786 0.05121995 0.03252529 0.02947194]  taking action:  0
Adding child.
Leaf selection - depth:  9
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  26
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
  wire [31:0] c;
  adder_8 a1(sum[7:0], c[0], in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c[1], in1[15:8], in2[15:8], c[0]);
  adder_8 a3(sum[23:16], c[2], in1[23:16], in2[23:16], c[1]);
  adder_8 a4(sum[31:24], cout, in1[31:24], in2[31:24], c[2]);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  144
LLM generates return in:  51.363246  seconds
Running getPromptScore: 
adder_32
output_files/2329780_adder_32/synth_script.sh
Running bash in x seconds:  0.893933

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.1
Backpropogation: incorporating estimates.
Current runs:  18.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [0.31312742 0.21204024 0.00384062 0.00223264 0.00088364 0.0007704
 0.29762464 0.00042518 0.00037844 0.00032728]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [0.36151743 0.05595978 0.0214263  0.02000612 0.01041791 0.00942071
 0.00926885 0.00421201 0.00294198 0.00216538]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.3716037  0.16564086 0.03350021 0.03004818 0.00877001 0.006669
 0.00644709 0.00452024 0.00449458 0.00265802]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.35708296 0.38288197 0.1349516  0.06428533 0.00601394 0.00406003
 0.00286852 0.00281755 0.00232094 0.00200463]  taking action:  1
Leaf selection - depth:  4
Leaf selection - action scores:  [0.5124937  0.47990587 0.23191686 0.21187276 0.04504669 0.01400142
 0.0113842  0.00895426 0.00883119 0.00707374]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [7.5587541e-01 8.4160629e-04 3.1199492e-05 7.7643608e-06 6.3000157e-06
 5.6062581e-06 5.0496683e-06 3.4460847e-06 2.8457232e-06 2.6321850e-06]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [8.4584069e-01 1.2556033e-03 7.0597581e-04 1.3743516e-04 7.6277967e-05
 4.9865801e-05 4.1953106e-05 2.0549056e-05 1.7192579e-05 1.4999297e-05]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [9.7946370e-01 2.0259351e-02 7.1915763e-04 3.7148217e-04 8.9851208e-05
 3.2149208e-05 2.4930514e-05 2.0566742e-05 1.5930076e-05 1.1436946e-05]  taking action:  0
Leaf selection - depth:  8
Leaf selection - action scores:  [0.2938606  0.41486502 0.3607484  0.22326268 0.12650567 0.10843828
 0.07154697 0.06273137 0.03983518 0.03609561]  taking action:  1
Adding child.
Leaf selection - depth:  9
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  26
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
  wire [31:0] carry;
  adder_8 A1(sum[7:0], carry[0], in1[7:0], in2[7:0], cin);
  adder_8 A2(sum[15:8], carry[1], in1[15:8], in2[15:8], carry[0]);
  adder_8 A3(sum[23:16], carry[2], in1[23:16], in2[23:16], carry[1]);
  adder_8 A4(sum[31:24], carry[3], in1[31:24], in2[31:24], carry[2]);
  adder_8 A5(sum[39:32], carry[4], in1[39:32], in2[39:32], carry[3]);
  adder_8 A6(sum[47:40], carry[5], in1[47:40], in2[47:40], carry[4]);
  adder_8 A7(sum[55:48], carry[6], in1[55:48], in2[55:48], carry[5]);
  adder_8 A8(sum[63:56], cout, in1[63:56], in2[63:56], carry[6]);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 failed\n'
Tokens:  288
LLM generates return in:  114.032378  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  19.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [0.29525781 0.2175487  0.00394039 0.00229064 0.0009066  0.00079042
 0.30340806 0.00043623 0.00038827 0.00033578]  taking action:  6
Leaf selection - depth:  1
Leaf selection - action scores:  [9.2062718e-01 8.7565847e-02 2.8683462e-03 1.6321716e-04 1.4855423e-04
 1.2897461e-04 1.0709188e-04 7.5700620e-05 7.0192938e-05 6.5006068e-05]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [1.1738082  0.03009787 0.02004751 0.01328633 0.01299074 0.00822962
 0.00505201 0.00353352 0.00253485 0.00197755]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [1.6619539  0.17575029 0.02941062 0.02175688 0.0054166  0.00511894
 0.00229502 0.00193049 0.00184492 0.00168004]  taking action:  0
Adding child.
Leaf selection - depth:  4
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  685
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);   
  wire [31:0] c;
  adder_8 a1(sum[7:0], c[0], in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c[1], in1[15:8], in2[15:8], c[0]);
  adder_8 a3(sum[23:16], c[2], in1[23:16], in2[23:16], c[1]);
  adder_8 a4(sum[31:24], cout, in1[31:24], in2[31:24], c[2]);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  150
LLM generates return in:  53.336509  seconds
Running getPromptScore: 
adder_32
output_files/2329780_adder_32/synth_script.sh
Running bash in x seconds:  0.90287

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.1
Backpropogation: incorporating estimates.
Current runs:  20.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [0.30301226 0.22292108 0.0040377  0.00234721 0.00092899 0.00080994
 0.26723889 0.000447   0.00039786 0.00034408]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [0.34203404 0.05779502 0.02212899 0.02066224 0.01075958 0.00972967
 0.00957283 0.00435015 0.00303847 0.0022364 ]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.3500288  0.1714546  0.03467601 0.03110283 0.00907782 0.00690307
 0.00667337 0.00467889 0.00465234 0.00275131]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.3737082  0.33233726 0.1400459  0.06671204 0.00624096 0.00421329
 0.0029768  0.00292391 0.00240856 0.0020803 ]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.55941653 0.04565197 0.04184309 0.0321626  0.01181716 0.00511248
 0.00501957 0.00452257 0.00335898 0.00334245]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [6.8510586e-01 3.8000360e-02 3.1757138e-03 9.5174147e-04 7.5574970e-04
 6.1606779e-04 3.6205151e-04 1.9882120e-04 9.5436946e-05 8.2721192e-05]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [6.7455834e-01 4.9757922e-01 3.4333616e-02 1.8210177e-03 2.8521579e-04
 1.7288921e-04 1.0919887e-04 8.9816996e-05 8.9041241e-05 8.8138258e-05]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [1.1428530e+00 2.6126856e-03 1.3627226e-03 1.3957566e-04 9.3871240e-05
 6.8476227e-05 6.3620726e-05 3.4399978e-05 1.8342314e-05 9.8944829e-06]  taking action:  0
Leaf selection - depth:  8
Leaf selection - action scores:  [1.9293722e+00 2.0895395e-02 4.3450136e-04 4.2099180e-04 1.7736379e-04
 3.2479013e-05 2.9833078e-05 2.7292746e-05 1.8720697e-05 1.8045048e-05]  taking action:  0
Adding child.
Leaf selection - depth:  9
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  66
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42,c43,c44,c45,c46,c47,c48,c49,c50,c51,c52,c53,c54,c55,c56,c57,c58,c59,c60,c61,c62,c63;
  adder_8 a1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
  adder_8 a3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
  adder_8 a4(sum[31:24], c4, in1[31:24], in2[31:24], c3);
  adder_8 a5(sum[39:32], c5, in1[39:32], in2[39:32], c4);
  adder_8 a6(sum[47:40], c6, in1[47:40], in2[47:40], c5);
  adder_8 a7(sum[55:48], c7, in1[55:48], in2[55:48], c6);
  adder_8 a8(sum[63:56], cout, in1[63:56], in2[63:56], c7);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 failed\n'
Tokens:  456
LLM generates return in:  200.853835  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  21.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [0.28643216 0.228167   0.00413272 0.00240244 0.00095085 0.000829
 0.27164511 0.00045752 0.00040722 0.00035217]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [0.32466027 0.05957374 0.02281004 0.02129814 0.01109072 0.01002911
 0.00986745 0.00448403 0.00313198 0.00230522]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.33095965 0.17707755 0.03581323 0.03212286 0.00937553 0.00712946
 0.00689223 0.00483234 0.00480491 0.00284154]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.31978542 0.3418081  0.14496128 0.06905352 0.00646001 0.00436117
 0.00308128 0.00302653 0.00249309 0.00215332]  taking action:  1
Leaf selection - depth:  4
Leaf selection - action scores:  [0.45039293 0.51304096 0.24792956 0.22650151 0.04815694 0.01496814
 0.01217022 0.00957251 0.00944094 0.00756214]  taking action:  1
Adding child.
Leaf selection - depth:  5
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  25
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
  wire [63:0] carry;
  adder_8 A1(sum[7:0], carry[7:0], in1[7:0], in2[7:0], cin);
  adder_8 A2(sum[15:8], carry[15:8], in1[15:8], in2[15:8], carry[7:0]);
  adder_8 A3(sum[23:16], carry[23:16], in1[23:16], in2[23:16], carry[15:8]);
  adder_8 A4(sum[31:24], carry[31:24], in1[31:24], in2[31:24], carry[23:16]);
  adder_8 A5(sum[39:32], carry[39:32], in1[39:32], in2[39:32], carry[31:24]);
  adder_8 A6(sum[47:40], carry[47:40], in1[47:40], in2[47:40], carry[39:32]);
  adder_8 A7(sum[55:48], carry[55:48], in1[55:48], in2[55:48], carry[47:40]);
  adder_8 A8(sum[63:56], carry[63:56], in1[63:56], in2[63:56], carry[55:48]);
  adder_8 A9(sum[71:64], carry[71:64], in1[71:64], in2[71:64], carry[63:56]);
  adder_8 A10(sum[79:72], carry[79:72], in1[79:72], in2[79:72], carry[71:64]);
  adder_8 A11(sum[87:80], carry[87:80], in1[87:80], in2[87:80], carry[79:72]);
  adder_8 A12(sum[95:88], carry[95:88], in1[95:88], in2[95:88], carry[87:80]);
  adder_8 A13(sum[103:96], carry[103:96], in1[103:96], in2[103:96], carry[95:88]);
  adder_8 A14(sum[111:104], carry[111:104], in1[111:104], in2[111:104], carry[103:96]);
  adder_8 A15(sum[119:112], carry[119:112], in1[119:112], in2[119:112], carry[111:104]);
  adder_8 A16(sum[127:120], carry[127:120], in1[127:120], in2[127:120], carry[119:112]);
  adder_8 A17(sum[135:128], carry[135:128], in1[135:128], in2[135:128], carry[127:120]);
  adder_8 A18(sum[143:136], carry[143:136], in1[143:136], in2[143:136], carry[135:128]);
  adder_8 A19(sum[151:144], carry[151:144], in1[151:144], in2[151:144], carry[143:136]);
  adder_8 A20(sum[159:152], carry[159:152], in1[159:152], in2[159:152], carry[151:144]);
  adder_8 A21(sum[167:160], carry[167:160], in1[167:160], in2[167:160], carry[159:152]);
  adder_8 A22(sum[175:168], carry[175:168], in1[175:168], in2[175:168], carry[167:160]);
  adder_8 A23(sum[183:176], carry[183:176], in1[183:176], in2[183:176], carry[175:168]);
  adder_8 A24(sum[191:184], carry[191:184], in1[191:184], in2[191:184], carry[183:176]);
  adder_8 A25(sum[199:192], carry[199:192], in1[199:192], in2[199:192
Path:  output_files/2329780_adder_32/2329780_simulation
Verilog compilation failed, error:  2
Compilation output:  b'output_files/2329780_adder_32/2329780_adder_32.v:61: syntax error\nI give up.\n'
Tokens:  994
LLM generates return in:  605.125318  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  22.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [0.221543   0.23329499 0.0042256  0.00245644 0.00097222 0.00084763
 0.27595228 0.0004678  0.00041637 0.00036009]  taking action:  6
Leaf selection - depth:  1
Leaf selection - action scores:  [7.9106760e-01 9.7901590e-02 3.2069085e-03 1.8248233e-04 1.6608866e-04
 1.4419800e-04 1.1973236e-04 8.4635860e-05 7.8478086e-05 7.2678995e-05]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.9317747  0.03475402 0.02314887 0.01534173 0.01500041 0.00950274
 0.00583356 0.00408016 0.00292699 0.00228348]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [1.0677347  0.21524927 0.03602051 0.02664663 0.00663396 0.00626939
 0.00281082 0.00236436 0.00225955 0.00205761]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [1.0101433  0.83779603 0.04387623 0.02784532 0.00309187 0.00286515
 0.00202154 0.00174229 0.00142471 0.00137564]  taking action:  0
Adding child.
Leaf selection - depth:  5
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  3132
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);   
  wire [31:0] c;
  adder_8 a1(sum[7:0], c[0], in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c[1], in1[15:8], in2[15:8], c[0]);
  adder_8 a3(sum[23:16], c[2], in1[23:16], in2[23:16], c[1]);
  adder_8 a4(sum[31:24], cout, in1[31:24], in2[31:24], c[2]);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  149
LLM generates return in:  52.993547  seconds
Running getPromptScore: 
adder_32
output_files/2329780_adder_32/synth_script.sh
Running bash in x seconds:  0.898437

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.1
Backpropogation: incorporating estimates.
Current runs:  23.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [0.22798074 0.23831266 0.00431648 0.00250927 0.00099313 0.00086586
 0.25013899 0.00047787 0.00042533 0.00036783]  taking action:  6
Leaf selection - depth:  1
Leaf selection - action scores:  [7.0753020e-01 1.0724582e-01 3.5129923e-03 1.9989937e-04 1.8194102e-04
 1.5796100e-04 1.3116022e-04 9.2713941e-05 8.5968437e-05 7.9615849e-05]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.8004151  0.03885618 0.02588123 0.01715258 0.01677097 0.01062439
 0.00652212 0.00456176 0.00327248 0.00255301]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.85011923 0.24854843 0.0415929  0.03076888 0.00766023 0.00723927
 0.00324565 0.00273012 0.00260911 0.00237593]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.66858387 1.0260863  0.0537372  0.03410341 0.00378676 0.00350908
 0.00247587 0.00213386 0.00174491 0.00168481]  taking action:  1
Adding child.
Leaf selection - depth:  5
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  16
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);   
  wire c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42,c43,c44,c45,c46,c47,c48,c49,c50,c51,c52,c53,c54,c55,c56,c57,c58,c59,c60,c61,c62,c63;
  adder_8 a1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
  adder_8 a3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
  adder_8 a4(sum[31:24], c4, in1[31:24], in2[31:24], c3);
  adder_8 a5(sum[39:32], c5, in1[39:32], in2[39:32], c4);
  adder_8 a6(sum[47:40], c6, in1[47:40], in2[47:40], c5);
  adder_8 a7(sum[55:48], c7, in1[55:48], in2[55:48], c6);
  adder_8 a8(sum[63:56], cout, in1[63:56], in2[63:56], c7);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 failed\n'
Tokens:  461
LLM generates return in:  202.580146  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  24.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [0.2342857  0.24322684 0.00440549 0.00256101 0.00101361 0.00088371
 0.20306741 0.00048772 0.0004341  0.00037542]  taking action:  1
Adding child.
Leaf selection - depth:  1
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  50286
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);

  wire [31:0] c;
  adder_8 a1(sum[7:0], c[0], in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c[1], in1[15:8], in2[15:8], c[0]);
  adder_8 a3(sum[23:16], c[2], in1[23:16], in2[23:16], c[1]);
  adder_8 a4(sum[31:24], cout, in1[31:24], in2[31:24], c[2]);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  152
LLM generates return in:  53.857156  seconds
Running getPromptScore: 
adder_32
output_files/2329780_adder_32/synth_script.sh
Running bash in x seconds:  0.903564

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.1
Backpropogation: incorporating estimates.
Current runs:  25.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [0.24046578 0.17402184 0.00449274 0.00261173 0.00103368 0.00090121
 0.20595729 0.00049738 0.00044269 0.00038285]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [0.25610942 0.06130087 0.02347134 0.02191561 0.01141225 0.01031987
 0.01015352 0.00461403 0.00322278 0.00237206]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.2577085  0.18252735 0.03691543 0.03311149 0.00966408 0.00734888
 0.00710435 0.00498106 0.00495279 0.002929  ]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.333084   0.20086062 0.14971536 0.07131817 0.00667187 0.00450419
 0.00318234 0.00312579 0.00257486 0.00222394]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.49220732 0.04930977 0.04519571 0.03473958 0.01276399 0.00552211
 0.00542175 0.00488494 0.00362811 0.00361026]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [5.86123407e-01 4.16273102e-02 3.47882020e-03 1.04258058e-03
 8.27882322e-04 6.74868468e-04 3.96607560e-04 2.17797729e-04
 1.04545936e-04 9.06165224e-05]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [5.4653609e-01 5.5631047e-01 3.8386147e-02 2.0359596e-03 3.1888092e-04
 1.9329600e-04 1.2208804e-04 1.0041845e-04 9.9551129e-05 9.8541568e-05]  taking action:  1
Adding child.
Leaf selection - depth:  7
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  17
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
  wire c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15, c16, c17, c18, c19, c20, c21, c22, c23, c24, c25, c26, c27, c28, c29, c30, c31, c32, c33, c34, c35, c36, c37, c38, c39, c40, c41, c42, c43, c44, c45, c46, c47, c48, c49, c50, c51, c52, c53, c54, c55, c56, c57, c58, c59, c60, c61, c62, c63;
  adder_8 a1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
  adder_8 a3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
  adder_8 a4(sum[31:24], c4, in1[31:24], in2[31:24], c3);
  adder_8 a5(sum[39:32], c5, in1[39:32], in2[39:32], c4);
  adder_8 a6(sum[47:40], c6, in1[47:40], in2[47:40], c5);
  adder_8 a7(sum[55:48], c7, in1[55:48], in2[55:48], c6);
  adder_8 a8(sum[63:56], cout, in1[63:56], in2[63:56], c7);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 failed\n'
Tokens:  458
LLM generates return in:  201.469431  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  26.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [0.22828978 0.17638437 0.00457832 0.00266148 0.00105337 0.00091838
 0.2087921  0.00050685 0.00045113 0.00039015]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [0.24493274 0.06298066 0.02411451 0.02251615 0.01172498 0.01060266
 0.01043175 0.00474046 0.00331109 0.00243706]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.24574515 0.1878191  0.03798567 0.03407144 0.00994426 0.00756193
 0.00731032 0.00512547 0.00509638 0.00301391]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.29022646 0.20875219 0.15432306 0.07351309 0.0068772  0.00464282
 0.00328028 0.00322199 0.0026541  0.00229238]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.44166756 0.05271436 0.04831624 0.03713817 0.01364528 0.00590339
 0.0057961  0.00522222 0.00387862 0.00385953]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [5.1624632e-01 4.4962637e-02 3.7575555e-03 1.1261158e-03 8.9421519e-04
 7.2894129e-04 4.2838513e-04 2.3524844e-04 1.1292252e-04 9.7877033e-05]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [6.05858684e-01 2.54703790e-01 4.20499183e-02 2.23028194e-03
 3.49316542e-04 2.11745166e-04 1.33740745e-04 1.10002904e-04
 1.09052802e-04 1.07946878e-04]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [8.5159194e-01 3.0168693e-03 1.5735365e-03 1.6116808e-04 1.0839317e-04
 7.9069534e-05 7.3462885e-05 3.9721672e-05 2.1179880e-05 1.1425164e-05]  taking action:  0
Leaf selection - depth:  8
Leaf selection - action scores:  [1.1314944e+00 2.5591530e-02 5.3215330e-04 5.1560759e-04 2.1722540e-04
 3.9778504e-05 3.6537909e-05 3.3426651e-05 2.2928078e-05 2.2100579e-05]  taking action:  0
Leaf selection - depth:  9
Leaf selection - action scores:  [1.9293247e+00 1.8902749e-02 1.2728758e-03 1.1155033e-03 1.4260475e-04
 1.0295286e-04 9.7820230e-05 3.7778136e-05 3.4577621e-05 3.4417339e-05]  taking action:  0
Adding child.
Leaf selection - depth:  10
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  18
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42,c43,c44,c45,c46,c47,c48,c49,c50,c51,c52,c53,c54,c55,c56,c57,c58,c59,c60,c61,c62,c63;
  adder_8 a1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
  adder_8 a3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
  adder_8 a4(sum[31:24], c4, in1[31:24], in2[31:24], c3);
  adder_8 a5(sum[39:32], c5, in1[39:32], in2[39:32], c4);
  adder_8 a6(sum[47:40], c6, in1[47:40], in2[47:40], c5);
  adder_8 a7(sum[55:48], c7, in1[55:48], in2[55:48], c6);
  adder_8 a8(sum[63:56], cout, in1[63:56], in2[63:56], c7);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 failed\n'
Tokens:  455
LLM generates return in:  200.490335  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  27.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [0.21723125 0.17870355 0.00466234 0.00271032 0.0010727  0.00093523
 0.21157489 0.00051615 0.00045941 0.0003973 ]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [0.23472062 0.06461679 0.02474096 0.02310108 0.01202957 0.0108781
 0.01070275 0.00486361 0.00339711 0.00250037]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.23487604 0.19296578 0.03902657 0.03500508 0.01021675 0.00776915
 0.00751064 0.00526592 0.00523603 0.0030965 ]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.25660205 0.21641484 0.15879712 0.07564434 0.00707658 0.00477742
 0.00337538 0.0033154  0.00273105 0.00235884]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.40195128 0.05591202 0.05124712 0.03939097 0.01447301 0.00626149
 0.00614769 0.005539   0.00411389 0.00409365]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [4.63695049e-01 4.80670817e-02 4.01699590e-03 1.20386842e-03
 9.55956231e-04 7.79271009e-04 4.57962975e-04 2.51491147e-04
 1.20719254e-04 1.04634950e-04]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [5.0832915e-01 2.7911770e-01 4.5419104e-02 2.4089799e-03 3.7730503e-04
 2.2871094e-04 1.4445653e-04 1.1881672e-04 1.1779049e-04 1.1659596e-04]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [6.94983244e-01 3.37296235e-03 1.75926718e-03 1.80191390e-04
 1.21187244e-04 8.84024266e-05 8.21340000e-05 4.44101752e-05
 2.36798260e-05 1.27737221e-05]  taking action:  0
Leaf selection - depth:  8
Leaf selection - action scores:  [8.4284806e-01 2.9550552e-02 6.1447773e-04 5.9537234e-04 2.5083029e-04
 4.5932258e-05 4.2190342e-05 3.8597773e-05 2.6475063e-05 2.5519552e-05]  taking action:  0
Leaf selection - depth:  9
Leaf selection - action scores:  [1.1314653e+00 2.3151046e-02 1.5589481e-03 1.3662068e-03 1.7465444e-04
 1.2609098e-04 1.1980483e-04 4.6268578e-05 4.2348765e-05 4.2152456e-05]  taking action:  0
Leaf selection - depth:  10
Leaf selection - action scores:  [1.94632804e+00 2.22020550e-03 1.76356430e-03 3.83758888e-04
 1.92777719e-04 1.16749994e-04 9.17423604e-05 7.95649612e-05
 6.85547566e-05 6.36849363e-05]  taking action:  0
Adding child.
Leaf selection - depth:  11
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  11
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42,c43,c44,c45,c46,c47,c48,c49,c50,c51,c52,c53,c54,c55,c56,c57,c58,c59,c60,c61,c62,c63;
  adder_8 a1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
  adder_8 a3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
  adder_8 a4(sum[31:24], c4, in1[31:24], in2[31:24], c3);
  adder_8 a5(sum[39:32], c5, in1[39:32], in2[39:32], c4);
  adder_8 a6(sum[47:40], c6, in1[47:40], in2[47:40], c5);
  adder_8 a7(sum[55:48], c7, in1[55:48], in2[55:48], c6);
  adder_8 a8(sum[63:56], cout, in1[63:56], in2[63:56], c7);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 failed\n'
Tokens:  454
LLM generates return in:  200.183745  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  28.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [0.2071356  0.18098166 0.00474486 0.00275829 0.00109169 0.00095179
 0.21430841 0.00052529 0.00046754 0.00040434]  taking action:  6
Leaf selection - depth:  1
Leaf selection - action scores:  [6.1484182e-01 1.1583873e-01 3.7944654e-03 2.1591601e-04 1.9651877e-04
 1.7061738e-04 1.4166924e-04 1.0014251e-04 9.2856528e-05 8.5994950e-05]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.67572194 0.04256481 0.02835146 0.01878971 0.01837168 0.01163844
 0.00714462 0.00499716 0.00358482 0.00279668]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.6819449  0.2778856  0.04650227 0.03440065 0.0085644  0.00809375
 0.00362875 0.00305237 0.00291707 0.00265637]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.7642791  0.5424112  0.06205037 0.03937922 0.00437257 0.00405193
 0.00285889 0.00246397 0.00201485 0.00194545]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [1.3893054  0.20949143 0.13287061 0.12023017 0.03133952 0.00837598
 0.00628132 0.00627275 0.00600507 0.0039648 ]  taking action:  0
Adding child.
Leaf selection - depth:  6
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  25
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);   
  wire [31:0] c;
  adder_8 a1(sum[7:0], c[0], in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c[1], in1[15:8], in2[15:8], c[0]);
  adder_8 a3(sum[23:16], c[2], in1[23:16], in2[23:16], c[1]);
  adder_8 a4(sum[31:24], cout, in1[31:24], in2[31:24], c[2]);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  148
LLM generates return in:  52.713207  seconds
Running getPromptScore: 
adder_32
output_files/2329780_adder_32/synth_script.sh
Running bash in x seconds:  0.890204

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.1
Backpropogation: incorporating estimates.
Current runs:  29.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [0.21206054 0.18322083 0.00482598 0.00280545 0.00111035 0.00096806
 0.2023708  0.00053427 0.00047553 0.00041125]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [0.22534336 0.06621251 0.02535194 0.02367156 0.01232664 0.01114673
 0.01096706 0.00498372 0.003481   0.00256211]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.2249457  0.1979787  0.04004041 0.03591445 0.01048217 0.00797097
 0.00770575 0.00540272 0.00537206 0.00317694]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.22946239 0.2238675  0.16314854 0.07771718 0.0072705  0.00490833
 0.00346787 0.00340625 0.00280588 0.00242348]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.36971283 0.05893644 0.0540192  0.04152174 0.01525589 0.00660019
 0.00648024 0.00583862 0.00433643 0.00431509]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [4.2239448e-01 5.0982837e-02 4.2606671e-03 1.2768952e-03 1.0139446e-03
 8.2654168e-04 4.8574308e-04 2.6674665e-04 1.2804210e-04 1.1098212e-04]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [4.4079193e-01 3.0184162e-01 4.8555065e-02 2.5753079e-03 4.0335604e-04
 2.4450227e-04 1.5443051e-04 1.2702041e-04 1.2592334e-04 1.2464632e-04]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [5.9477955e-01 3.6948952e-03 1.9271807e-03 1.9738977e-04 1.3275398e-04
 9.6840005e-05 8.9973291e-05 4.8648912e-05 2.5939949e-05 1.3992912e-05]  taking action:  0
Leaf selection - depth:  8
Leaf selection - action scores:  [6.8765128e-01 3.3038519e-02 6.8700692e-04 6.6564645e-04 2.8043677e-04
 5.1353825e-05 4.7170233e-05 4.3153617e-05 2.9600020e-05 2.8531724e-05]  taking action:  0
Leaf selection - depth:  9
Leaf selection - action scores:  [8.4282577e-01 2.6732523e-02 1.8001181e-03 1.5775597e-03 2.0167357e-04
 1.4559733e-04 1.3833870e-04 5.3426353e-05 4.8900140e-05 4.8673464e-05]  taking action:  0
Leaf selection - depth:  10
Leaf selection - action scores:  [1.1418778e+00 2.7191853e-03 2.1599163e-03 4.7000672e-04 2.3610353e-04
 1.4298895e-04 1.1236098e-04 9.7446777e-05 8.3962092e-05 7.7997800e-05]  taking action:  0
Leaf selection - depth:  11
Leaf selection - action scores:  [1.8612567e+00 8.9525394e-02 2.6729447e-04 1.6452340e-04 1.2482045e-04
 4.7856029e-05 1.9437046e-05 1.6848720e-05 1.5388057e-05 1.0006632e-05]  taking action:  0
Adding child.
Leaf selection - depth:  12
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  66
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42,c43,c44,c45,c46,c47,c48,c49,c50,c51,c52,c53,c54,c55,c56,c57,c58,c59,c60,c61,c62,c63;
  adder_8 a1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
  adder_8 a3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
  adder_8 a4(sum[31:24], c4, in1[31:24], in2[31:24], c3);
  adder_8 a5(sum[39:32], c5, in1[39:32], in2[39:32], c4);
  adder_8 a6(sum[47:40], c6, in1[47:40], in2[47:40], c5);
  adder_8 a7(sum[55:48], c7, in1[55:48], in2[55:48], c6);
  adder_8 a8(sum[63:56], cout, in1[63:56], in2[63:56], c7);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 failed\n'
Tokens:  453
LLM generates return in:  199.908859  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  30.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [0.20249932 0.18542297 0.00490575 0.00285182 0.00112871 0.00098406
 0.20468287 0.0005431  0.00048339 0.00041805]  taking action:  6
Leaf selection - depth:  1
Leaf selection - action scores:  [5.7472110e-01 1.2383681e-01 4.0564542e-03 2.3082392e-04 2.1008740e-04
 1.8239765e-04 1.5145079e-04 1.0705685e-04 9.9267803e-05 9.1932467e-05]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.62221515 0.04597525 0.03062308 0.0202952  0.01984368 0.01257095
 0.00771707 0.00539755 0.00387205 0.00302076]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.6157177  0.30440843 0.05094069 0.03768402 0.00938183 0.00886626
 0.00397509 0.0033437  0.00319549 0.00290991]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.59905887 0.61233586 0.06937442 0.04402731 0.00488868 0.0045302
 0.00319633 0.0027548  0.00225267 0.00217508]  taking action:  1
Leaf selection - depth:  5
Leaf selection - action scores:  [1.7984015  0.0382016  0.03455601 0.02386613 0.01303637 0.00475825
 0.00468511 0.00390634 0.0028922  0.00258945]  taking action:  0
Adding child.
Leaf selection - depth:  6
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  11
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);   
  wire c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42,c43,c44,c45,c46,c47,c48,c49,c50,c51,c52,c53,c54,c55,c56,c57,c58,c59,c60,c61,c62,c63;
  adder_8 a1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
  adder_8 a3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
  adder_8 a4(sum[31:24], c4, in1[31:24], in2[31:24], c3);
  adder_8 a5(sum[39:32], c5, in1[39:32], in2[39:32], c4);
  adder_8 a6(sum[47:40], c6, in1[47:40], in2[47:40], c5);
  adder_8 a7(sum[55:48], c7, in1[55:48], in2[55:48], c6);
  adder_8 a8(sum[63:56], cout, in1[63:56], in2[63:56], c7);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 failed\n'
Tokens:  460
LLM generates return in:  202.269703  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  31.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [0.20704869 0.18758988 0.00498425 0.00289745 0.00114677 0.00099981
 0.1728515  0.00055179 0.00049113 0.00042474]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [0.21669418 0.06777066 0.02594854 0.02422862 0.01261672 0.01140905
 0.01122514 0.005101   0.00356292 0.00262241]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.21582785 0.2028678  0.04102921 0.03680136 0.01074103 0.00816782
 0.00789604 0.00553614 0.00550472 0.0032554 ]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.2070559  0.23112643 0.16738686 0.07973614 0.00745937 0.00503584
 0.00355796 0.00349474 0.00287878 0.00248644]  taking action:  1
Leaf selection - depth:  4
Leaf selection - action scores:  [ 0.47424755 -0.22791895  0.262969    0.24024111  0.05107814  0.01587611
  0.01290847  0.01015318  0.01001363  0.00802086]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [6.5835750e-01 9.0903876e-04 3.3699303e-05 8.3864688e-06 6.8047948e-06
 6.0554512e-06 5.4542656e-06 3.7221971e-06 3.0737324e-06 2.8430848e-06]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [7.1553099e-01 1.3754445e-03 7.7335775e-04 1.5055267e-04 8.3558327e-05
 5.4625249e-05 4.5957328e-05 2.2510363e-05 1.8833527e-05 1.6430906e-05]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [7.90403605e-01 2.26506405e-02 8.04042618e-04 4.15329676e-04
 1.00456695e-04 3.59439073e-05 2.78731604e-05 2.29943162e-05
 1.78103674e-05 1.27868943e-05]  taking action:  0
Leaf selection - depth:  8
Leaf selection - action scores:  [0.331586   0.18952242 0.41655636 0.25780153 0.14607617 0.12521374
 0.08261532 0.07243595 0.04599771 0.04167961]  taking action:  2
Adding child.
Leaf selection - depth:  9
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  62
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
  wire [31:0] cout_temp;
  adder_8 A1(sum[7:0], cout_temp[0], in1[7:0], in2[7:0], cin);
  adder_8 A2(sum[15:8], cout_temp[1], in1[15:8], in2[15:8], cout_temp[0]);
  adder_8 A3(sum[23:16], cout_temp[2], in1[23:16], in2[23:16], cout_temp[1]);
  adder_8 A4(sum[31:24], cout_temp[3], in1[31:24], in2[31:24], cout_temp[2]);
  adder_8 A5(sum[39:32], cout_temp[4], in1[39:32], in2[39:32], cout_temp[3]);
  adder_8 A6(sum[47:40], cout_temp[5], in1[47:40], in2[47:40], cout_temp[4]);
  adder_8 A7(sum[55:48], cout_temp[6], in1[55:48], in2[55:48], cout_temp[5]);
  adder_8 A8(sum[63:56], cout_temp[7], in1[63:56], in2[63:56], cout_temp[6]);
  assign cout = cout_temp[7];
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 failed\n'
Tokens:  334
LLM generates return in:  136.236156  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  32.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [0.19798284 0.18972318 0.00506153 0.00294238 0.00116455 0.00101531
 0.17484243 0.00056035 0.00049874 0.00043132]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [0.20868441 0.06929379 0.02653173 0.02477315 0.01290028 0.01166546
 0.01147742 0.00521564 0.003643   0.00268134]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.20741852 0.20764181 0.04199474 0.03766739 0.01099379 0.00836003
 0.00808186 0.00566642 0.00563426 0.00333201]  taking action:  1
Adding child.
Leaf selection - depth:  3
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  62
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
  adder_8 A1(sum[7:0], cout, in1[7:0], in2[7:0], cin);
  adder_8 A2(sum[15:8], cout, in1[15:8], in2[15:8], cout);
  adder_8 A3(sum[23:16], cout, in1[23:16], in2[23:16], cout);
  adder_8 A4(sum[31:24], cout, in1[31:24], in2[31:24], cout);
  adder_8 A5(sum[39:32], cout, in1[39:32], in2[39:32], cout);
  adder_8 A6(sum[47:40], cout, in1[47:40], in2[47:40], cout);
  adder_8 A7(sum[55:48], cout, in1[55:48], in2[55:48], cout);
  adder_8 A8(sum[63:56], cout, in1[63:56], in2[63:56], cout);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 failed\n'
Tokens:  256
LLM generates return in:  98.269139  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  33.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [0.18961073 0.1918244  0.00513764 0.00298663 0.00118206 0.00103058
 0.17680341 0.00056877 0.00050624 0.00043781]  taking action:  1
Leaf selection - depth:  1
Leaf selection - action scores:  [1.6981100e+00 1.3112612e-01 6.1496511e-02 1.9578688e-02 7.2546578e-03
 5.0143930e-03 4.9733212e-03 4.2760666e-03 2.3735156e-03 1.4218506e-03]  taking action:  0
Adding child.
Leaf selection - depth:  2
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  21809
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);

  wire [31:0] c;
  adder_8 a1(sum[7:0], c[0], in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c[1], in1[15:8], in2[15:8], c[0]);
  adder_8 a3(sum[23:16], c[2], in1[23:16], in2[23:16], c[1]);
  adder_8 a4(sum[31:24], cout, in1[31:24], in2[31:24], c[2]);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  151
LLM generates return in:  53.638797  seconds
Running getPromptScore: 
adder_32
output_files/2329780_adder_32/synth_script.sh
Running bash in x seconds:  0.902875

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.1
Backpropogation: incorporating estimates.
Current runs:  34.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [0.19359553 0.16259663 0.00521265 0.00303023 0.00119932 0.00104562
 0.17873576 0.00057708 0.00051363 0.0004442 ]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [0.2012398  0.07078415 0.02710236 0.02530597 0.01317773 0.01191636
 0.01172428 0.00532782 0.00372135 0.00273901]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.21389957 0.05615425 0.04293856 0.03851396 0.01124087 0.00854792
 0.00826349 0.00579377 0.00576089 0.00340689]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.21441418 0.20438546 0.1715205  0.08170523 0.00764359 0.0051602
 0.00364583 0.00358104 0.00294987 0.00254784]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.34288707 0.06181307 0.05665582 0.04354836 0.01600051 0.00692234
 0.00679653 0.00612359 0.00454808 0.0045257 ]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [3.8886756e-01 5.3740628e-02 4.4911378e-03 1.3459658e-03 1.0687915e-03
 8.7125145e-04 5.1201816e-04 2.8117566e-04 1.3496823e-04 1.1698543e-04]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [3.9078751e-01 3.2318440e-01 5.1500421e-02 2.7315265e-03 4.2782366e-04
 2.5933381e-04 1.6379829e-04 1.3472549e-04 1.3356186e-04 1.3220738e-04]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [5.2403772e-01 3.9909431e-03 2.0815933e-03 2.1320533e-04 1.4339069e-04
 1.0459917e-04 9.7182266e-05 5.2546831e-05 2.8018349e-05 1.5114072e-05]  taking action:  0
Leaf selection - depth:  8
Leaf selection - action scores:  [5.8835411e-01 3.6191884e-02 7.5257843e-04 7.2917918e-04 3.0720310e-04
 5.6255300e-05 5.1672403e-05 4.7272420e-05 3.2425196e-05 3.1254938e-05]  taking action:  0
Leaf selection - depth:  9
Leaf selection - action scores:  [6.8763256e-01 2.9887870e-02 2.0125932e-03 1.7637654e-03 2.2547791e-04
 1.6278274e-04 1.5466736e-04 5.9732476e-05 5.4672018e-05 5.4418586e-05]  taking action:  0
Leaf selection - depth:  10
Leaf selection - action scores:  [8.5084122e-01 3.1398446e-03 2.4940565e-03 5.4271700e-04 2.7262888e-04
 1.6510942e-04 1.2974329e-04 1.1252184e-04 9.6951073e-05 9.0064103e-05]  taking action:  0
Leaf selection - depth:  11
Leaf selection - action scores:  [1.0897824e+00 1.0964577e-01 3.2736754e-04 2.0149919e-04 1.5287320e-04
 5.8611429e-05 2.3805424e-05 2.0635383e-05 1.8846446e-05 1.2255571e-05]  taking action:  0
Leaf selection - depth:  12
Leaf selection - action scores:  [1.9363081e+00 1.1593129e-02 1.2725417e-03 8.8382070e-04 3.3901367e-04
 1.8553187e-04 1.3216038e-04 6.2198524e-05 5.8307196e-05 5.3699539e-05]  taking action:  0
Adding child.
Leaf selection - depth:  13
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  19
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42,c43,c44,c45,c46,c47,c48,c49,c50,c51,c52,c53,c54,c55,c56,c57,c58,c59,c60,c61,c62,c63;
  adder_8 a1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
  adder_8 a3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
  adder_8 a4(sum[31:24], c4, in1[31:24], in2[31:24], c3);
  adder_8 a5(sum[39:32], c5, in1[39:32], in2[39:32], c4);
  adder_8 a6(sum[47:40], c6, in1[47:40], in2[47:40], c5);
  adder_8 a7(sum[55:48], c7, in1[55:48], in2[55:48], c6);
  adder_8 a8(sum[63:56], cout, in1[63:56], in2[63:56], c7);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 failed\n'
Tokens:  452
LLM generates return in:  199.691619  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  35.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [0.18562284 0.16395741 0.00528659 0.00307321 0.00121633 0.00106045
 0.1806407  0.00058526 0.00052092 0.0004505 ]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [0.19429743 0.07224377 0.02766124 0.02582779 0.01344947 0.01216208
 0.01196604 0.00543769 0.00379809 0.0027955 ]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.20568478 0.0584374  0.04386207 0.03934231 0.01148264 0.00873176
 0.00844122 0.00591838 0.00588479 0.00348017]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.1947993  0.21060714 0.17555682 0.08362797 0.00782346 0.00528164
 0.00373162 0.00366531 0.00301929 0.0026078 ]  taking action:  1
Leaf selection - depth:  4
Leaf selection - action scores:  [ 0.42220858 -0.2132014   0.27719367  0.25323638  0.05384109  0.01673489
  0.01360672  0.01070239  0.01055529  0.00845473]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [5.8602411e-01 9.7180327e-04 3.6026071e-05 8.9655123e-06 7.2746316e-06
 6.4735495e-06 5.8308551e-06 3.9791962e-06 3.2859582e-06 3.0393855e-06]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [6.2471402e-01 1.4856498e-03 8.3532184e-04 1.6261547e-04 9.0253314e-05
 5.9002014e-05 4.9639588e-05 2.4313971e-05 2.0342535e-05 1.7747407e-05]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [6.7076612e-01 2.4812534e-02 8.8078459e-04 4.5497087e-04 1.1004480e-04
 3.9374580e-05 3.0533520e-05 2.5189012e-05 1.9510280e-05 1.4007341e-05]  taking action:  0
Leaf selection - depth:  8
Leaf selection - action scores:  [0.36482272 0.2177942  0.18286207 0.28823087 0.16331811 0.1399932
 0.09236674 0.08098585 0.051427   0.04659922]  taking action:  0
Leaf selection - depth:  9
Leaf selection - action scores:  [0.9343917  0.2618157  0.18122579 0.10078888 0.07810228 0.06401889
 0.04968689 0.04617145 0.02298392 0.02083545]  taking action:  0
Adding child.
Leaf selection - depth:  10
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  198
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
  wire [31:0] c;
  adder_8 a1(sum[7:0], c[0], in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c[1], in1[15:8], in2[15:8], c[0]);
  adder_8 a3(sum[23:16], c[2], in1[23:16], in2[23:16], c[1]);
  adder_8 a4(sum[31:24], cout, in1[31:24], in2[31:24], c[2]);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  143
LLM generates return in:  51.089786  seconds
Running getPromptScore: 
adder_32
output_files/2329780_adder_32/synth_script.sh
Running bash in x seconds:  0.899737

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.1
Backpropogation: incorporating estimates.
Current runs:  36.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [0.18590573 0.16529941 0.00535951 0.0031156  0.00123311 0.00107508
 0.18251935 0.00059334 0.0005281  0.00045671]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [0.19580376 0.07367448 0.02820904 0.02633928 0.01371582 0.01240294
 0.01220301 0.00554537 0.0038733  0.00285086]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.20676054 0.06067346 0.04476654 0.04015358 0.01171942 0.00891182
 0.00861529 0.00604042 0.00600614 0.00355193]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.20123753 0.20608087 0.17950241 0.08550748 0.00799929 0.00540034
 0.00381549 0.00374769 0.00308714 0.00266641]  taking action:  1
Leaf selection - depth:  4
Leaf selection - action scores:  [ 0.40309846 -0.19920307  0.29072317  0.26559657  0.05646901  0.0175517
  0.01427085  0.01122476  0.01107048  0.0088674 ]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [5.5485940e-01 1.0307530e-03 3.8211419e-05 9.5093610e-06 7.7159120e-06
 6.8662357e-06 6.1845553e-06 4.2205747e-06 3.4852849e-06 3.2237549e-06]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [5.8573997e-01 1.5882265e-03 8.9299661e-04 1.7384325e-04 9.6484851e-05
 6.3075808e-05 5.3066953e-05 2.5992729e-05 2.1747084e-05 1.8972776e-05]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [6.2042516e-01 2.6800601e-02 9.5135614e-04 4.9142470e-04 1.1886197e-04
 4.2529406e-05 3.2979970e-05 2.7207243e-05 2.1073512e-05 1.5129658e-05]  taking action:  0
Leaf selection - depth:  8
Leaf selection - action scores:  [0.29658067 0.24335386 0.20508762 0.3157411  0.17890604 0.15335488
 0.10118269 0.08871555 0.05633546 0.05104689]  taking action:  3
Adding child.
Leaf selection - depth:  9
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  62
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
  wire [31:0] sum_1;
  wire [31:0] sum_2;
  wire [31:0] sum_3;
  wire [31:0] sum_4;
  wire [31:0] sum_5;
  wire [31:0] sum_6;
  wire [31:0] sum_7;
  wire [31:0] sum_8;
  wire [31:0] sum_9;
  wire [31:0] sum_10;
  wire [31:0] sum_11;
  wire [31:0] sum_12;
  wire [31:0] sum_13;
  wire [31:0] sum_14;
  wire [31:0] sum_15;
  wire [31:0] sum_16;
  wire [31:0] sum_17;
  wire [31:0] sum_18;
  wire [31:0] sum_19;
  wire [31:0] sum_20;
  wire [31:0] sum_21;
  wire [31:0] sum_22;
  wire [31:0] sum_23;
  wire [31:0] sum_24;
  wire [31:0] sum_25;
  wire [31:0] sum_26;
  wire [31:0] sum_27;
  wire [31:0] sum_28;
  wire [31:0] sum_29;
  wire [31:0] sum_30;
  wire [31:0] sum_31;
  wire [31:0] sum_32;
  wire [31:0] sum_33;
  wire [31:0] sum_34;
  wire [31:0] sum_35;
  wire [31:0] sum_36;
  wire [31:0] sum_37;
  wire [31:0] sum_38;
  wire [31:0] sum_39;
  wire [31:0] sum_40;
  wire [31:0] sum_41;
  wire [31:0] sum_42;
  wire [31:0] sum_43;
  wire [31:0] sum_44;
  wire [31:0] sum_45;
  wire [31:0] sum_46;
  wire [31:0] sum_47;
  wire [31:0] sum_48;
  wire [31:0] sum_49;
  wire [31:0] sum_50;
  wire [31:0] sum_51;
  wire [31:0] sum_52;
  wire [31:0] sum_53;
  wire [31:0] sum_54;
  wire [31:0] sum_55;
  wire [31:0] sum_56;
  wire [31:0] sum_57;
  wire [31:0] sum_58;
  wire [31:0] sum_59;
  wire [31:0] sum_60;
  wire [31:0] sum_61;
  wire [31:0] sum_62;
  wire [31:0] sum_63;
  wire [31:0] sum_64;
  wire [31:0] sum_65;
  wire [31:0] sum_66;
  wire [31:0] sum_67;
  wire [31:0] sum_68;
  wire [31:0] sum_69;
  wire [31:0] sum_70;
  wire [31:0] sum_71;
  wire [31:0] sum_72;
  wire [31:0] sum_73;
  wire [31:0] sum_74;
  wire [31:0] sum_75;
  wire [31:0] sum_76;
  wire [31:0] sum_77;
  wire [31:0] sum_78;
  wire [31:0] sum_79;
  wire [31:0] sum_80;
  wire [31:0] sum_81;
  wire [31:0] sum_82;
  wire [31:0] sum_83;
  wire [
Path:  output_files/2329780_adder_32/2329780_simulation
Verilog compilation failed, error:  2
Compilation output:  b'output_files/2329780_adder_32/2329780_adder_32.v:119: syntax error\nI give up.\n'
Tokens:  990
LLM generates return in:  599.640627  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  37.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [0.14538068 0.1666234  0.00543146 0.00315743 0.00124966 0.00108951
 0.18437279 0.0006013  0.00053519 0.00046285]  taking action:  6
Leaf selection - depth:  1
Leaf selection - action scores:  [5.1785278e-01 1.3134876e-01 4.3025194e-03 2.4482573e-04 2.2283132e-04
 1.9346191e-04 1.6063781e-04 1.1355092e-04 1.0528940e-04 9.7509102e-05]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.55290604 0.04914961 0.03273745 0.02169649 0.02121378 0.01343891
 0.0082499  0.00577022 0.00413939 0.00322933]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.5348718  0.32879868 0.05502223 0.0407034  0.01013354 0.00957665
 0.00429359 0.00361161 0.00345153 0.00314306]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.64987314 0.41703507 0.07599587 0.0482295  0.00535528 0.00496258
 0.0035014  0.00301773 0.00246768 0.00238268]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [0.90077233 0.25657356 0.1627326  0.14725128 0.03838291 0.01025844
 0.00769301 0.00768251 0.00735468 0.00485587]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [1.9508001e+00 7.6151942e-04 1.9017782e-05 5.3239492e-06 5.2134710e-06
 3.6026802e-06 3.3450135e-06 2.7553142e-06 2.2213083e-06 2.0362036e-06]  taking action:  0
Adding child.
Leaf selection - depth:  7
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  15
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);   
  wire [31:0] c;
  adder_8 a1(sum[7:0], c[0], in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c[1], in1[15:8], in2[15:8], c[0]);
  adder_8 a3(sum[23:16], c[2], in1[23:16], in2[23:16], c[1]);
  adder_8 a4(sum[31:24], cout, in1[31:24], in2[31:24], c[2]);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  147
LLM generates return in:  52.39269  seconds
Running getPromptScore: 
adder_32
output_files/2329780_adder_32/synth_script.sh
Running bash in x seconds:  0.902903

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.1
Backpropogation: incorporating estimates.
Current runs:  38.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [0.14873366 0.16793008 0.00550246 0.0031987  0.001266   0.00110376
 0.1775818  0.00060916 0.00054219 0.0004689 ]  taking action:  6
Leaf selection - depth:  1
Leaf selection - action scores:  [4.94521141e-01 1.38453752e-01 4.53525363e-03 2.58068991e-04
 2.34884850e-04 2.03926771e-04 1.69327119e-04 1.19693184e-04
 1.10984780e-04 1.02783619e-04]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.52412325 0.05213103 0.03472331 0.0230126  0.02250062 0.01425411
 0.00875034 0.00612024 0.00439049 0.00342522]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.5034154  0.35150057 0.05882124 0.04351376 0.01083321 0.01023787
 0.00459004 0.00386098 0.00368984 0.00336007]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.54745126 0.45579094 0.08208492 0.05209382 0.00578437 0.0053602
 0.00378195 0.00325952 0.00266539 0.00257359]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [0.7215915  0.29626563 0.18790743 0.17003113 0.04432077 0.01184543
 0.00888313 0.008871   0.00849246 0.00560707]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [1.2446162e+00 9.3266700e-04 2.3291930e-05 6.5204795e-06 6.3851721e-06
 4.4123640e-06 4.0967880e-06 3.3745571e-06 2.7205360e-06 2.4938299e-06]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [1.9497867e+00 1.0295785e-03 4.8139915e-04 8.9736670e-05 5.2841689e-05
 4.0222843e-05 2.9180166e-05 1.6803873e-05 1.2051960e-05 9.7096181e-06]  taking action:  0
Adding child.
Leaf selection - depth:  8
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  60
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);   
  wire [31:0] c;
  adder_8 a1(sum[7:0], c[0], in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c[1], in1[15:8], in2[15:8], c[0]);
  adder_8 a3(sum[23:16], c[2], in1[23:16], in2[23:16], c[1]);
  adder_8 a4(sum[31:24], cout, in1[31:24], in2[31:24], c[2]);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  146
LLM generates return in:  52.032372  seconds
Running getPromptScore: 
adder_32
output_files/2329780_adder_32/synth_script.sh
Running bash in x seconds:  0.905008

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.1
Backpropogation: incorporating estimates.
Current runs:  39.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [0.15204392 0.16922011 0.00557256 0.00323945 0.00128213 0.00111782
 0.17200647 0.00061692 0.0005491  0.00047487]  taking action:  6
Leaf selection - depth:  1
Leaf selection - action scores:  [4.74840045e-01 1.45211533e-01 4.75661410e-03 2.70665041e-04
 2.46349315e-04 2.13880208e-04 1.77591792e-04 1.25535284e-04
 1.16401825e-04 1.07800377e-04]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.50039643 0.05495093 0.03660158 0.02425741 0.02371773 0.01502516
 0.00922367 0.0064513  0.00462798 0.0036105 ]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.47819206 0.37282264 0.06238934 0.04615331 0.01149035 0.0108589
 0.00486848 0.00409518 0.00391366 0.00356389]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.4840573  0.49186403 0.08775247 0.05569063 0.00618375 0.0057303
 0.00404307 0.00348458 0.00284943 0.00275128]  taking action:  1
Leaf selection - depth:  5
Leaf selection - action scores:  [1.0512916  0.04678721 0.04232229 0.02922992 0.01596623 0.00582765
 0.00573807 0.00478427 0.00354221 0.00317141]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [1.9049345e+00 4.0044442e-02 2.6879320e-03 7.6672272e-04 7.5799826e-04
 5.6227035e-04 3.4230886e-04 2.0930510e-04 9.9486926e-05 8.5510255e-05]  taking action:  0
Adding child.
Leaf selection - depth:  7
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  66
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);   
  wire c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42,c43,c44,c45,c46,c47,c48,c49,c50,c51,c52,c53,c54,c55,c56,c57,c58,c59,c60,c61,c62,c63;
  adder_8 a1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
  adder_8 a3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
  adder_8 a4(sum[31:24], c4, in1[31:24], in2[31:24], c3);
  adder_8 a5(sum[39:32], c5, in1[39:32], in2[39:32], c4);
  adder_8 a6(sum[47:40], c6, in1[47:40], in2[47:40], c5);
  adder_8 a7(sum[55:48], c7, in1[55:48], in2[55:48], c6);
  adder_8 a8(sum[63:56], cout, in1[63:56], in2[63:56], c7);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 failed\n'
Tokens:  459
LLM generates return in:  202.033388  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  40.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [0.15531305 0.17049411 0.00564178 0.00327969 0.00129805 0.0011317
 0.15067686 0.00062459 0.00055592 0.00048077]  taking action:  1
Leaf selection - depth:  1
Leaf selection - action scores:  [1.0898757  0.16059606 0.07531754 0.0239789  0.00888511 0.00614135
 0.00609105 0.00523709 0.00290695 0.0017414 ]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [1.5570904  0.14573477 0.02149034 0.01529992 0.00987913 0.00502947
 0.00448193 0.00417827 0.0034575  0.00336118]  taking action:  0
Adding child.
Leaf selection - depth:  3
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  685
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);

  wire [31:0] c;
  adder_8 a1(sum[7:0], c[0], in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c[1], in1[15:8], in2[15:8], c[0]);
  adder_8 a3(sum[23:16], c[2], in1[23:16], in2[23:16], c[1]);
  adder_8 a4(sum[31:24], cout, in1[31:24], in2[31:24], c[2]);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  150
LLM generates return in:  53.239434  seconds
Running getPromptScore: 
adder_32
output_files/2329780_adder_32/synth_script.sh
Running bash in x seconds:  0.898476

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.1
Backpropogation: incorporating estimates.
Current runs:  41.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [0.15854255 0.15381451 0.00571017 0.00331945 0.00131379 0.00114542
 0.15199824 0.00063216 0.00056266 0.0004866 ]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [0.15478987 0.07507793 0.0287464  0.02684103 0.0139771  0.01263921
 0.01243547 0.00565101 0.00394709 0.00290516]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.16180569 0.06286523 0.04565309 0.04094877 0.01195151 0.00908831
 0.00878591 0.00616005 0.00612509 0.00362227]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.20753726 0.11053328 0.18336312 0.08734656 0.00817134 0.00551649
 0.00389755 0.00382829 0.00315354 0.00272375]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.3201234  0.06456164 0.05917507 0.04548478 0.01671199 0.00723014
 0.00709874 0.00639588 0.00475032 0.00472694]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [3.6096770e-01 5.6363650e-02 4.7103455e-03 1.4116609e-03 1.1209581e-03
 9.1377628e-04 5.3700921e-04 2.9489954e-04 1.4155588e-04 1.2269536e-04]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [3.5199237e-01 3.4337088e-01 5.4286212e-02 2.8792818e-03 4.5096574e-04
 2.7336183e-04 1.7265856e-04 1.4201313e-04 1.4078656e-04 1.3935882e-04]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [4.7083449e-01 4.2664977e-03 2.2253166e-03 2.2792608e-04 1.5329110e-04
 1.1182121e-04 1.0389221e-04 5.6174926e-05 2.9952875e-05 1.6157623e-05]  taking action:  0
Leaf selection - depth:  8
Leaf selection - action scores:  [5.1825416e-01 3.9091706e-02 8.1287761e-04 7.8760355e-04 3.3181728e-04
 6.0762668e-05 5.5812576e-05 5.1060051e-05 3.5023219e-05 3.3759192e-05]  taking action:  0
Leaf selection - depth:  9
Leaf selection - action scores:  [5.8833772e-01 3.2740522e-02 2.2046855e-03 1.9321082e-03 2.4699868e-04
 1.7831958e-04 1.6942961e-04 6.5433647e-05 5.9890197e-05 5.9612576e-05]  taking action:  0
Leaf selection - depth:  10
Leaf selection - action scores:  [6.9435370e-01 3.5104528e-03 2.7884399e-03 6.0677604e-04 3.0480832e-04
 1.8459794e-04 1.4505741e-04 1.2580324e-04 1.0839459e-04 1.0069472e-04]  taking action:  0
Leaf selection - depth:  11
Leaf selection - action scores:  [8.1073821e-01 1.2660803e-01 3.7801146e-04 2.3267121e-04 1.7652276e-04
 6.7678644e-05 2.7488135e-05 2.3827688e-05 2.1762000e-05 1.4151514e-05]  taking action:  0
Leaf selection - depth:  12
Leaf selection - action scores:  [1.1357418e+00 1.4198625e-02 1.5585389e-03 1.0824548e-03 4.1520529e-04
 2.2722922e-04 1.6186276e-04 7.6177326e-05 7.1411443e-05 6.5768232e-05]  taking action:  0
Leaf selection - depth:  13
Leaf selection - action scores:  [1.9466836e+00 2.5821913e-03 1.0236824e-03 4.0750045e-04 1.8033813e-04
 1.6459734e-04 1.0309515e-04 9.5223120e-05 7.4834490e-05 3.5825531e-05]  taking action:  0
Adding child.
Leaf selection - depth:  14
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  11
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42,c43,c44,c45,c46,c47,c48,c49,c50,c51,c52,c53,c54,c55,c56,c57,c58,c59,c60,c61,c62,c63;
  adder_8 a1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
  adder_8 a3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
  adder_8 a4(sum[31:24], c4, in1[31:24], in2[31:24], c3);
  adder_8 a5(sum[39:32], c5, in1[39:32], in2[39:32], c4);
  adder_8 a6(sum[47:40], c6, in1[47:40], in2[47:40], c5);
  adder_8 a7(sum[55:48], c7, in1[55:48], in2[55:48], c6);
  adder_8 a8(sum[63:56], cout, in1[63:56], in2[63:56], c7);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 failed\n'
Tokens:  451
LLM generates return in:  199.209279  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  42.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [0.1523862  0.15474725 0.00577775 0.00335873 0.00132934 0.00115898
 0.15330399 0.00063964 0.00056931 0.00049236]  taking action:  1
Leaf selection - depth:  1
Leaf selection - action scores:  [0.8671634  0.18544035 0.0869692  0.02768845 0.01025964 0.00709142
 0.00703334 0.00604727 0.00335666 0.0020108 ]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [1.0035192  0.17848791 0.02632019 0.0187385  0.01209941 0.00615982
 0.00548922 0.00511731 0.00423456 0.00411659]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [1.0590813  0.7563516  0.07288645 0.02521975 0.00387774 0.00226849
 0.00202373 0.00197638 0.00175657 0.00151904]  taking action:  0
Adding child.
Leaf selection - depth:  4
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  3132
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);

  wire [31:0] c;
  adder_8 a1(sum[7:0], c[0], in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c[1], in1[15:8], in2[15:8], c[0]);
  adder_8 a3(sum[23:16], c[2], in1[23:16], in2[23:16], c[1]);
  adder_8 a4(sum[31:24], cout, in1[31:24], in2[31:24], c[2]);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  149
LLM generates return in:  52.928489  seconds
Running getPromptScore: 
adder_32
output_files/2329780_adder_32/synth_script.sh
Running bash in x seconds:  0.897804

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.1
Backpropogation: incorporating estimates.
Current runs:  43.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [0.15542792 0.14453537 0.00584455 0.00339757 0.0013447  0.00117238
 0.15459463 0.00064703 0.0005759  0.00049805]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [0.15005937 0.07645562 0.0292739  0.02733357 0.01423358 0.01287114
 0.01266367 0.00575471 0.00401952 0.00295847]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.15634981 0.06501524 0.04652275 0.04172882 0.01217918 0.00926144
 0.00895327 0.00627739 0.00624177 0.00369127]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.18957575 0.11539017 0.1871442  0.08914772 0.00833984 0.00563024
 0.00397792 0.00390724 0.00321857 0.00277992]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.3004982  0.06719789 0.06159137 0.04734206 0.01739439 0.00752537
 0.00738861 0.00665705 0.00494429 0.00491996]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [3.3729124e-01 5.8869909e-02 4.9197953e-03 1.4744317e-03 1.1708025e-03
 9.5440814e-04 5.6088780e-04 3.0801250e-04 1.4785028e-04 1.2815112e-04]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [3.2083869e-01 3.6257091e-01 5.6935862e-02 3.0198162e-03 4.7297688e-04
 2.8670434e-04 1.8108584e-04 1.4894464e-04 1.4765820e-04 1.4616078e-04]  taking action:  1
Leaf selection - depth:  7
Leaf selection - action scores:  [1.9426937e+00 5.4856371e-03 1.1004576e-03 3.6032940e-04 2.9259952e-04
 2.4479147e-04 2.0687400e-04 1.4805274e-04 1.0946081e-04 7.4256131e-05]  taking action:  0
Adding child.
Leaf selection - depth:  8
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  11
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
  wire c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15, c16, c17, c18, c19, c20, c21, c22, c23, c24, c25, c26, c27, c28, c29, c30, c31, c32, c33, c34, c35, c36, c37, c38, c39, c40, c41, c42, c43, c44, c45, c46, c47, c48, c49, c50, c51, c52, c53, c54, c55, c56, c57, c58, c59, c60, c61, c62, c63;
  adder_8 a1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
  adder_8 a3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
  adder_8 a4(sum[31:24], c4, in1[31:24], in2[31:24], c3);
  adder_8 a5(sum[39:32], c5, in1[39:32], in2[39:32], c4);
  adder_8 a6(sum[47:40], c6, in1[47:40], in2[47:40], c5);
  adder_8 a7(sum[55:48], c7, in1[55:48], in2[55:48], c6);
  adder_8 a8(sum[63:56], cout, in1[63:56], in2[63:56], c7);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 failed\n'
Tokens:  457
LLM generates return in:  201.161004  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  44.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [0.14952372 0.14526461 0.00591059 0.00343596 0.0013599  0.00118562
 0.1558707  0.00065434 0.0005824  0.00050368]  taking action:  6
Leaf selection - depth:  1
Leaf selection - action scores:  [4.3975538e-01 1.5166849e-01 4.9681216e-03 2.8270041e-04 2.5730347e-04
 2.2339058e-04 1.8548858e-04 1.3111733e-04 1.2157774e-04 1.1259382e-04]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.46038583 0.05763303 0.03838807 0.02544139 0.02487537 0.01575852
 0.00967386 0.00676618 0.00485387 0.00378672]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.435138   0.39298958 0.06576414 0.04864986 0.01211189 0.01144629
 0.00513183 0.0043167  0.00412536 0.00375667]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.50856745 0.3693084  0.09307555 0.05906883 0.00655885 0.0060779
 0.00428833 0.00369595 0.00302227 0.00291818]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [0.62417114 0.33123502 0.21008688 0.19010058 0.04955212 0.01324359
 0.00993164 0.00991808 0.00949486 0.0062689 ]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [9.8628265e-01 1.0769510e-03 2.6895204e-05 7.5292010e-06 7.3729616e-06
 5.0949593e-06 4.7305634e-06 3.8966027e-06 3.1414042e-06 2.8796267e-06]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [1.2439955e+00 1.2609711e-03 5.8959116e-04 1.0990453e-04 6.4717591e-05
 4.9262722e-05 3.5738260e-05 2.0580457e-05 1.4760576e-05 1.1891805e-05]  taking action:  0
Leaf selection - depth:  8
Leaf selection - action scores:  [1.9327596e+00 1.7894190e-02 4.9033936e-04 2.7304096e-04 6.3575499e-05
 2.7939854e-05 2.1830581e-05 1.8678174e-05 1.3110590e-05 8.5297934e-06]  taking action:  0
Adding child.
Leaf selection - depth:  9
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  269
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);   
  wire [31:0] c;
  adder_8 a1(sum[7:0], c[0], in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c[1], in1[15:8], in2[15:8], c[0]);
  adder_8 a3(sum[23:16], c[2], in1[23:16], in2[23:16], c[1]);
  adder_8 a4(sum[31:24], cout, in1[31:24], in2[31:24], c[2]);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  145
LLM generates return in:  51.767032  seconds
Running getPromptScore: 
adder_32
output_files/2329780_adder_32/synth_script.sh
Running bash in x seconds:  0.914423

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.1
Backpropogation: incorporating estimates.
Current runs:  45.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [0.15239528 0.14598579 0.0059759  0.00347392 0.00137493 0.00119873
 0.15273784 0.00066158 0.00058884 0.00050924]  taking action:  6
Leaf selection - depth:  1
Leaf selection - action scores:  [4.2654148e-01 1.5786158e-01 5.1709847e-03 2.9424392e-04 2.6780993e-04
 2.3251229e-04 1.9306263e-04 1.3647124e-04 1.2654212e-04 1.1719136e-04]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.44502118 0.06019573 0.04009503 0.02657266 0.02598148 0.01645923
 0.01010402 0.00706705 0.0050697  0.0039551 ]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.41976276 0.41217098 0.06897403 0.05102441 0.01270306 0.01200497
 0.0053823  0.0045274  0.00432672 0.00394003]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.45979148 0.3933422  0.09811024 0.06226401 0.00691364 0.00640667
 0.00452029 0.00389588 0.00318576 0.00307603]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [0.56126946 0.3628498  0.23013864 0.20824476 0.05428163 0.01450763
 0.01087956 0.01086472 0.01040109 0.00686723]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [8.4612143e-01 1.2040678e-03 3.0069750e-05 8.4179028e-06 8.2432216e-06
 5.6963372e-06 5.2889304e-06 4.3565342e-06 3.5121968e-06 3.2195203e-06]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [9.8580492e-01 1.4560439e-03 6.8080117e-04 1.2690682e-04 7.4729433e-05
 5.6883688e-05 4.1266987e-05 2.3764265e-05 1.7044045e-05 1.3731474e-05]  taking action:  0
Leaf selection - depth:  8
Leaf selection - action scores:  [1.2335687e+00 2.1915818e-02 6.0054066e-04 3.3440551e-04 7.7863770e-05
 3.4219192e-05 2.6736892e-05 2.2875998e-05 1.6057127e-05 1.0446821e-05]  taking action:  0
Leaf selection - depth:  9
Leaf selection - action scores:  [0.37477615 0.31121042 0.26705587 0.19489062 0.11232171 0.10027039
 0.06324517 0.05264362 0.03802802 0.03334815]  taking action:  0
Adding child.
Leaf selection - depth:  10
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  26
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);   
  wire [31:0] c;
  adder_8 a1(sum[7:0], c[0], in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c[1], in1[15:8], in2[15:8], c[0]);
  adder_8 a3(sum[23:16], c[2], in1[23:16], in2[23:16], c[1]);
  adder_8 a4(sum[31:24], cout, in1[31:24], in2[31:24], c[2]);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  144
LLM generates return in:  51.413486  seconds
Running getPromptScore: 
adder_32
output_files/2329780_adder_32/synth_script.sh
Running bash in x seconds:  0.901559

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.1
Backpropogation: incorporating estimates.
Current runs:  46.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [0.15523579 0.14669917 0.00604051 0.00351148 0.00138979 0.00121169
 0.15004084 0.00066873 0.00059521 0.00051475]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [0.14558643 0.07780892 0.02979206 0.02781739 0.01448552 0.01309897
 0.01288782 0.00585657 0.00409066 0.00301084]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.15122506 0.06712578 0.04737645 0.04249455 0.01240267 0.00943138
 0.00911757 0.00639258 0.0063563  0.00375901]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.17407542 0.12015082 0.19085039 0.09091318 0.008505   0.00574174
 0.0040567  0.00398462 0.00328231 0.00283497]  taking action:  2
Adding child.
Leaf selection - depth:  4
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  3132
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
  wire[31:0] carry;
  adder_8 A1(sum[7:0], carry[7:0], in1[7:0], in2[7:0], cin);
  adder_8 A2(sum[15:8], carry[15:8], in1[15:8], in2[15:8], carry[7:0]);
  adder_8 A3(sum[23:16], carry[23:16], in1[23:16], in2[23:16], carry[15:8]);
  adder_8 A4(sum[31:24], carry[31:24], in1[31:24], in2[31:24], carry[23:16]);
  adder_8 A5(sum[39:32], carry[39:32], in1[39:32], in2[39:32], carry[31:24]);
  adder_8 A6(sum[47:40], carry[47:40], in1[47:40], in2[47:40], carry[39:32]);
  adder_8 A7(sum[55:48], carry[55:48], in1[55:48], in2[55:48], carry[47:40]);
  adder_8 A8(sum[63:56], carry[63:56], in1[63:56], in2[63:56], carry[55:48]);
  adder_8 A9(sum[71:64], carry[71:64], in1[71:64], in2[71:64], carry[63:56]);
  adder_8 A10(sum[79:72], carry[79:72], in1[79:72], in2[79:72], carry[71:64]);
  adder_8 A11(sum[87:80], carry[87:80], in1[87:80], in2[87:80], carry[79:72]);
  adder_8 A12(sum[95:88], carry[95:88], in1[95:88], in2[95:88], carry[87:80]);
  adder_8 A13(sum[103:96], carry[103:96], in1[103:96], in2[103:96], carry[95:88]);
  adder_8 A14(sum[111:104], carry[111:104], in1[111:104], in2[111:104], carry[103:96]);
  adder_8 A15(sum[119:112], carry[119:112], in1[119:112], in2[119:112], carry[111:104]);
  adder_8 A16(sum[127:120], carry[127:120], in1[127:120], in2[127:120], carry[119:112]);
  adder_8 A17(sum[135:128], carry[135:128], in1[135:128], in2[135:128], carry[127:120]);
  adder_8 A18(sum[143:136], carry[143:136], in1[143:136], in2[143:136], carry[135:128]);
  adder_8 A19(sum[151:144], carry[151:144], in1[151:144], in2[151:144], carry[143:136]);
  adder_8 A20(sum[159:152], carry[159:152], in1[159:152], in2[159:152], carry[151:144]);
  adder_8 A21(sum[167:160], carry[167:160], in1[167:160], in2[167:160], carry[159:152]);
  adder_8 A22(sum[175:168], carry[175:168], in1[175:168], in2[175:168], carry[167:160]);
  adder_8 A23(sum[183:176], carry[183:176], in1[183:176], in2[183:176], carry[175:168]);
  adder_8 A24(sum[191:184], carry[191:184], in1[191:184], in2[191:184], carry[183:176]);
  adder_8 A25(sum[199:192], carry[199:192], in1[199:192], in2[199:192
Path:  output_files/2329780_adder_32/2329780_simulation
Verilog compilation failed, error:  2
Compilation output:  b'output_files/2329780_adder_32/2329780_adder_32.v:61: syntax error\nI give up.\n'
Tokens:  995
LLM generates return in:  601.050389  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  47.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [0.1194447  0.147405   0.00610443 0.00354864 0.0014045  0.00122451
 0.1510995  0.0006758  0.0006015  0.00052019]  taking action:  6
Leaf selection - depth:  1
Leaf selection - action scores:  [4.14833963e-01 1.63820684e-01 5.36618428e-03 3.05351336e-04
 2.77919491e-04 2.41289395e-04 2.00350551e-04 1.41622892e-04
 1.31318957e-04 1.21615216e-04]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.43156555 0.06265371 0.04173223 0.0276577  0.02704238 0.01713131
 0.0105166  0.00735562 0.00527671 0.0041166 ]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.406449   0.43049854 0.07204101 0.05329326 0.01326792 0.01253878
 0.00562163 0.00472871 0.00451911 0.00411523]  taking action:  1
Adding child.
Leaf selection - depth:  4
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  62
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);   
  adder_8 a1(sum[7:0], cout, in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], cout, in1[15:8], in2[15:8], cout);
  adder_8 a3(sum[23:16], cout, in1[23:16], in2[23:16], cout);
  adder_8 a4(sum[31:24], cout, in1[31:24], in2[31:24], cout);
  adder_8 a5(sum[39:32], cout, in1[39:32], in2[39:32], cout);
  adder_8 a6(sum[47:40], cout, in1[47:40], in2[47:40], cout);
  adder_8 a7(sum[55:48], cout, in1[55:48], in2[55:48], cout);
  adder_8 a8(sum[63:56], cout, in1[63:56], in2[63:56], cout);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 failed\n'
Tokens:  256
LLM generates return in:  98.337333  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  48.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [0.12213332 0.14810351 0.00616769 0.00358542 0.00141905 0.0012372
 0.13533738 0.00068281 0.00060774 0.00052558]  taking action:  1
Leaf selection - depth:  1
Leaf selection - action scores:  [0.74623686 0.2073286  0.09723452 0.03095662 0.01147062 0.00792845
 0.00786351 0.00676105 0.00375286 0.00224814]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.8006861  0.20610008 0.03039194 0.02163736 0.01397119 0.00711274
 0.0063384  0.00590896 0.00488965 0.00475342]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.6985522  0.9263378  0.08926731 0.03088776 0.00474924 0.00277832
 0.00247855 0.00242056 0.00215135 0.00186043]  taking action:  1
Adding child.
Leaf selection - depth:  4
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  16
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);

  wire c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42,c43,c44,c45,c46,c47,c48,c49,c50,c51,c52,c53,c54,c55,c56,c57,c58,c59,c60,c61,c62,c63;

  adder_8 a1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
  adder_8 a3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
  adder_8 a4(sum[31:24], c4, in1[31:24], in2[31:24], c3);
  adder_8 a5(sum[39:32], c5, in1[39:32], in2[39:32], c4);
  adder_8 a6(sum[47:40], c6, in1[47:40], in2[47:40], c5);
  adder_8 a7(sum[55:48], c7, in1[55:48], in2[55:48], c6);
  adder_8 a8(sum[63:56], cout, in1[63:56], in2[63:56], c7);

  assign sum[63:64] = cout;
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Verilog compilation failed, error:  1
Compilation output:  b'output_files/2329780_adder_32/2329780_adder_32.v:48: error: Part select sum[63:64] indices reversed.\noutput_files/2329780_adder_32/2329780_adder_32.v:48:      : Did you mean sum[64:63]?\noutput_files/2329780_adder_32/2329780_adder_32.v:48: warning: Part select sum[63:64] is out of range.\nadders/ripple_carry/tb_ripplecarry_32.v:14: warning: Port 1 (sum) of adder_32 expects 64 bits, got 32.\nadders/ripple_carry/tb_ripplecarry_32.v:14:        : Padding 32 high bits of the port.\nadders/ripple_carry/tb_ripplecarry_32.v:14: warning: Port 3 (in1) of adder_32 expects 64 bits, got 32.\nadders/ripple_carry/tb_ripplecarry_32.v:14:        : Padding 32 high bits of the port.\nadders/ripple_carry/tb_ripplecarry_32.v:14: warning: Port 4 (in2) of adder_32 expects 64 bits, got 32.\nadders/ripple_carry/tb_ripplecarry_32.v:14:        : Padding 32 high bits of the port.\n1 error(s) during elaboration.\n'
Tokens:  474
LLM generates return in:  209.875526  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  49.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.12479464 -0.04267089  0.00623031  0.00362182  0.00143346  0.00124976
  0.13630529  0.00068974  0.00061391  0.00053092]  taking action:  6
Leaf selection - depth:  1
Leaf selection - action scores:  [3.9007589e-01 1.6957054e-01 5.5545284e-03 3.1606868e-04 2.8767402e-04
 2.4975828e-04 2.0738253e-04 1.4659362e-04 1.3592804e-04 1.2588371e-04]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.404262   0.06501882 0.04330758 0.02870175 0.0280632  0.017778
 0.01091359 0.00763328 0.0054759  0.004272  ]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.4215607  0.17403854 0.07498267 0.05546938 0.01380968 0.01305078
 0.00585118 0.0049218  0.00470364 0.00428327]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.42414227 0.41620147 0.1028989  0.06530306 0.00725109 0.00671937
 0.00474092 0.00408603 0.00334125 0.00322617]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [0.5165254  0.3919226  0.24857816 0.22493005 0.05863087 0.01567003
 0.01175127 0.01173524 0.01123446 0.00741746]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [7.5577694e-01 1.3189903e-03 3.2939763e-05 9.2213504e-06 9.0299964e-06
 6.2400250e-06 5.7937332e-06 4.7723443e-06 3.8474186e-06 3.5268079e-06]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [8.4572083e-01 1.6279066e-03 7.6115882e-04 1.4188614e-04 8.3550040e-05
 6.3597894e-05 4.6137891e-05 2.6569254e-05 1.9055820e-05 1.5352254e-05]  taking action:  0
Leaf selection - depth:  8
Leaf selection - action scores:  [9.7777832e-01 2.5306206e-02 6.9344457e-04 3.8613821e-04 8.9909328e-05
 3.9512921e-05 3.0873103e-05 2.6414926e-05 1.8541174e-05 1.2062948e-05]  taking action:  0
Leaf selection - depth:  9
Leaf selection - action scores:  [0.2795026  0.38115337 0.32707533 0.23869129 0.13756545 0.12280565
 0.0774592  0.06447501 0.04657462 0.04084297]  taking action:  1
Adding child.
Leaf selection - depth:  10
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  26
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);   
  wire [31:0] carry;
  adder_8 A1(sum[7:0], carry[0], in1[7:0], in2[7:0], cin);
  adder_8 A2(sum[15:8], carry[1], in1[15:8], in2[15:8], carry[0]);
  adder_8 A3(sum[23:16], carry[2], in1[23:16], in2[23:16], carry[1]);
  adder_8 A4(sum[31:24], carry[3], in1[31:24], in2[31:24], carry[2]);
  adder_8 A5(sum[39:32], carry[4], in1[39:32], in2[39:32], carry[3]);
  adder_8 A6(sum[47:40], carry[5], in1[47:40], in2[47:40], carry[4]);
  adder_8 A7(sum[55:48], carry[6], in1[55:48], in2[55:48], carry[5]);
  adder_8 A8(sum[63:56], cout, in1[63:56], in2[63:56], carry[6]);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 failed\n'
Tokens:  288
LLM generates return in:  114.129003  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  50.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.12742948 -0.04210043  0.0062923   0.00365786  0.00144772  0.00126219
  0.1224346   0.0006966   0.00062002  0.0005362 ]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [0.11031388 0.07913909 0.03030137 0.02829293 0.01473316 0.0133229
 0.01310814 0.00595669 0.0041606  0.00306231]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.11306588 0.06919897 0.04821504 0.04324673 0.0126222  0.00959832
 0.00927895 0.00650574 0.00646881 0.00382555]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [ 0.1791603   0.12482078 -0.40275702  0.09264503  0.00866701  0.00585112
  0.00413398  0.00406052  0.00334484  0.00288898]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.2833557  0.06973454 0.06391638 0.04912918 0.01805101 0.00780945
 0.00766752 0.00690834 0.00513093 0.00510568]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [3.1687796e-01 6.1273746e-02 5.1206849e-03 1.5346371e-03 1.2186099e-03
 9.9337951e-04 5.8379053e-04 3.2058958e-04 1.5388745e-04 1.3338392e-04]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [3.3905756e-01 2.2061083e-01 5.9467569e-02 3.1540953e-03 4.9400824e-04
 2.9945289e-04 1.8913798e-04 1.5556760e-04 1.5422396e-04 1.5265995e-04]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [4.2902043e-01 4.5253038e-03 2.3603046e-03 2.4175210e-04 1.6258974e-04
 1.1860430e-04 1.1019433e-04 5.9582504e-05 3.1769821e-05 1.7137747e-05]  taking action:  0
Leaf selection - depth:  8
Leaf selection - action scores:  [4.6553493e-01 4.1790791e-02 8.6900272e-04 8.4198359e-04 3.5472758e-04
 6.4958025e-05 5.9666156e-05 5.4585493e-05 3.7441394e-05 3.6090096e-05]  taking action:  0
Leaf selection - depth:  9
Leaf selection - action scores:  [5.1823938e-01 3.5363805e-02 2.3813325e-03 2.0869153e-03 2.6678908e-04
 1.9260716e-04 1.8300489e-04 7.0676426e-05 6.4688807e-05 6.4388943e-05]  taking action:  0
Leaf selection - depth:  10
Leaf selection - action scores:  [5.94227850e-01 3.84550844e-03 3.05458275e-03 6.64689869e-04
 3.33900796e-04 2.02216906e-04 1.58902418e-04 1.37810552e-04
 1.18740325e-04 1.10305540e-04]  taking action:  0
Leaf selection - depth:  11
Leaf selection - action scores:  [6.6072631e-01 1.4155208e-01 4.2262964e-04 2.6013431e-04 1.9735844e-04
 7.5667027e-05 3.0732666e-05 2.6640164e-05 2.4330655e-05 1.5821874e-05]  taking action:  0
Leaf selection - depth:  12
Leaf selection - action scores:  [8.4611773e-01 1.6395159e-02 1.7996457e-03 1.2499111e-03 4.7943773e-04
 2.6238168e-04 1.8690301e-04 8.7961991e-05 8.2458828e-05 7.5942611e-05]  taking action:  0
Leaf selection - depth:  13
Leaf selection - action scores:  [1.1420954e+00 3.1625256e-03 1.2537498e-03 4.9908413e-04 2.2086820e-04
 2.0158975e-04 1.2626527e-04 1.1662403e-04 9.1653157e-05 4.3877135e-05]  taking action:  0
Leaf selection - depth:  14
Leaf selection - action scores:  [1.9317517e+00 1.9519724e-02 1.2859775e-04 4.5316661e-05 2.7920911e-05
 2.1712005e-05 1.9413577e-05 1.3908172e-05 1.1169393e-05 7.6247707e-06]  taking action:  0
Adding child.
Leaf selection - depth:  15
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  66
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42,c43,c44,c45,c46,c47,c48,c49,c50,c51,c52,c53,c54,c55,c56,c57,c58,c59,c60,c61,c62,c63;
  adder_8 a1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
  adder_8 a3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
  adder_8 a4(sum[31:24], c4, in1[31:24], in2[31:24], c3);
  adder_8 a5(sum[39:32], c5, in1[39:32], in2[39:32], c4);
  adder_8 a6(sum[47:40], c6, in1[47:40], in2[47:40], c5);
  adder_8 a7(sum[55:48], c7, in1[55:48], in2[55:48], c6);
  adder_8 a8(sum[63:56], cout, in1[63:56], in2[63:56], c7);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 failed\n'
Tokens:  450
LLM generates return in:  198.887907  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  51.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.12261802 -0.04153555  0.00635369  0.00369354  0.00146185  0.00127451
  0.12332423  0.0007034   0.00062607  0.00054143]  taking action:  6
Leaf selection - depth:  1
Leaf selection - action scores:  [3.6825088e-01 1.7513169e-01 5.7366923e-03 3.2643432e-04 2.9710846e-04
 2.5794923e-04 2.1418376e-04 1.5140124e-04 1.4038588e-04 1.3001214e-04]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.38041598 0.06730088 0.0448276  0.02970914 0.02904817 0.01840198
 0.01129664 0.0079012  0.0056681  0.00442194]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.39142638 0.18249577 0.07781319 0.05756329 0.01433099 0.01354343
 0.00607206 0.00510759 0.00488119 0.00444495]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.37179193 0.43804318 0.10747439 0.06820682 0.00757351 0.00701816
 0.00495173 0.00426772 0.00348982 0.00336962]  taking action:  1
Leaf selection - depth:  5
Leaf selection - action scores:  [0.7811079  0.05402522 0.04886957 0.03375181 0.01843621 0.00672919
 0.00662575 0.0055244  0.00409019 0.00366203]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [1.11652946e+00 4.90442254e-02 3.29203089e-03 9.39039746e-04
 9.28354508e-04 6.88637723e-04 4.19241056e-04 2.56345345e-04
 1.21846104e-04 1.04728242e-04]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [1.4965974e+00 4.2218301e-01 2.8546598e-02 1.7564445e-03 2.7815386e-04
 1.8988860e-04 1.0768714e-04 8.5272724e-05 7.5546872e-05 7.5470249e-05]  taking action:  0
Adding child.
Leaf selection - depth:  8
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  17
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);   
  wire c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42,c43,c44,c45,c46,c47,c48,c49,c50,c51,c52,c53,c54,c55,c56,c57,c58,c59,c60,c61,c62,c63;
  adder_8 a1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
  adder_8 a3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
  adder_8 a4(sum[31:24], c4, in1[31:24], in2[31:24], c3);
  adder_8 a5(sum[39:32], c5, in1[39:32], in2[39:32], c4);
  adder_8 a6(sum[47:40], c6, in1[47:40], in2[47:40], c5);
  adder_8 a7(sum[55:48], c7, in1[55:48], in2[55:48], c6);
  adder_8 a8(sum[63:56], cout, in1[63:56], in2[63:56], c7);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 failed\n'
Tokens:  458
LLM generates return in:  201.574263  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  52.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.12511882 -0.04097606  0.00641449  0.00372889  0.00147584  0.0012867
  0.11101679  0.00071013  0.00063206  0.00054662]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [0.10732521 0.08044726 0.03080225 0.02876061 0.01497669 0.01354312
 0.01332482 0.00605515 0.00422937 0.00311293]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.10970138 0.0712367  0.04903929 0.04398604 0.01283798 0.00976241
 0.00943758 0.00661695 0.0065794  0.00389094]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [ 0.16520841  0.12940505 -0.4009726   0.09434508  0.00882605  0.00595849
  0.00420984  0.00413503  0.00340621  0.00294199]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.26821652 0.07218211 0.06615974 0.05085353 0.01868458 0.00808355
 0.00793664 0.00715081 0.00531101 0.00528488]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [2.9904622e-01 6.3586764e-02 5.3139855e-03 1.5925681e-03 1.2646111e-03
 1.0308785e-03 6.0582801e-04 3.3269150e-04 1.5969654e-04 1.3841903e-04]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [3.1087872e-01 2.3234123e-01 6.1895806e-02 3.2828865e-03 5.1418005e-04
 3.1168046e-04 1.9686106e-04 1.6191989e-04 1.6052138e-04 1.5889351e-04]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [3.95075858e-01 4.77008941e-03 2.48797960e-03 2.54829094e-04
 1.71384643e-04 1.25019913e-04 1.16155024e-04 6.28054768e-05
 3.34883298e-05 1.80647712e-05]  taking action:  0
Leaf selection - depth:  8
Leaf selection - action scores:  [4.2410204e-01 4.4325829e-02 9.2171656e-04 8.9305843e-04 3.7624541e-04
 6.8898386e-05 6.3285508e-05 5.7896654e-05 3.9712595e-05 3.8279326e-05]  taking action:  0
Leaf selection - depth:  9
Leaf selection - action scores:  [4.6552134e-01 3.7805498e-02 2.5457516e-03 2.2310065e-03 2.8520951e-04
 2.0590572e-04 1.9564046e-04 7.5556272e-05 6.9155241e-05 6.8834677e-05]  taking action:  0
Leaf selection - depth:  10
Leaf selection - action scores:  [5.2354109e-01 4.1536242e-03 3.2993266e-03 7.1794714e-04 3.6065408e-04
 2.1841924e-04 1.7163424e-04 1.4885241e-04 1.2825421e-04 1.1914361e-04]  taking action:  0
Leaf selection - depth:  11
Leaf selection - action scores:  [5.6475824e-01 1.5506253e-01 4.6296758e-04 2.8496288e-04 2.1619535e-04
 8.2889070e-05 3.3665950e-05 2.9182838e-05 2.6652897e-05 1.7331993e-05]  taking action:  0
Leaf selection - depth:  12
Leaf selection - action scores:  [6.9039297e-01 1.8330345e-02 2.0120649e-03 1.3974431e-03 5.3602766e-04
 2.9335162e-04 2.0896390e-04 9.8344499e-05 9.2191767e-05 8.4906424e-05]  taking action:  0
Leaf selection - depth:  13
Leaf selection - action scores:  [8.5100877e-01 3.6517701e-03 1.4477056e-03 5.7629269e-04 2.5503663e-04
 2.3277578e-04 1.4579856e-04 1.3466582e-04 1.0583195e-04 5.0664952e-05]  taking action:  0
Leaf selection - depth:  14
Leaf selection - action scores:  [1.1329516e+00 2.3906682e-02 1.5749944e-04 5.5501350e-05 3.4195993e-05
 2.6591668e-05 2.3776680e-05 1.7033963e-05 1.3679657e-05 9.3383987e-06]  taking action:  0
Leaf selection - depth:  15
Leaf selection - action scores:  [1.9463432e+00 3.9942861e-03 4.1176350e-04 3.2797852e-04 1.8292536e-04
 5.3755910e-05 2.2029761e-05 2.0269235e-05 1.7715865e-05 1.4058523e-05]  taking action:  0
Adding child.
Leaf selection - depth:  16
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  20
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42,c43,c44,c45,c46,c47,c48,c49,c50,c51,c52,c53,c54,c55,c56,c57,c58,c59,c60,c61,c62,c63;
  adder_8 a1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
  adder_8 a3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
  adder_8 a4(sum[31:24], c4, in1[31:24], in2[31:24], c3);
  adder_8 a5(sum[39:32], c5, in1[39:32], in2[39:32], c4);
  adder_8 a6(sum[47:40], c6, in1[47:40], in2[47:40], c5);
  adder_8 a7(sum[55:48], c7, in1[55:48], in2[55:48], c6);
  adder_8 a8(sum[63:56], cout, in1[63:56], in2[63:56], c7);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 failed\n'
Tokens:  449
LLM generates return in:  198.468152  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  53.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.12048376 -0.04042184  0.00647473  0.0037639   0.0014897   0.00129879
  0.11183829  0.0007168   0.00063799  0.00055175]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [0.10446712 0.0817345  0.03129512 0.02922081 0.01521634 0.01375983
 0.01353803 0.00615204 0.00429704 0.00316274]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.10650113 0.07324074 0.04984991 0.04471313 0.01305019 0.00992378
 0.00959358 0.00672633 0.00668816 0.00395526]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [ 0.15292318  0.13390812 -0.39921975  0.09601503  0.00898228  0.00606396
  0.00428435  0.00420822  0.00346651  0.00299407]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.25472093 0.07454936 0.06832949 0.0525213  0.01929735 0.00834865
 0.00819692 0.00738533 0.00548519 0.0054582 ]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [2.8329769e-01 6.5818563e-02 5.5004978e-03 1.6484647e-03 1.3089969e-03
 1.0670607e-03 6.2709162e-04 3.4436845e-04 1.6530164e-04 1.4327730e-04]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [2.8728315e-01 2.4362847e-01 6.4232312e-02 3.4068120e-03 5.3358986e-04
 3.2344609e-04 2.0429236e-04 1.6803220e-04 1.6658090e-04 1.6489158e-04]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [3.6682793e-01 5.0029121e-03 2.6094152e-03 2.6726702e-04 1.7974974e-04
 1.3112200e-04 1.2182442e-04 6.5870940e-05 3.5122859e-05 1.8946494e-05]  taking action:  0
Leaf selection - depth:  8
Leaf selection - action scores:  [3.9046746e-01 4.6723526e-02 9.7157457e-04 9.4136625e-04 3.9659749e-04
 7.2625277e-05 6.6708788e-05 6.1028433e-05 4.1860749e-05 4.0349954e-05]  taking action:  0
Leaf selection - depth:  9
Leaf selection - action scores:  [4.2408946e-01 4.0098783e-02 2.7001773e-03 2.3663396e-03 3.0251037e-04
 2.1839597e-04 2.0750803e-04 8.0139529e-05 7.3350209e-05 7.3010197e-05]  taking action:  0
Leaf selection - depth:  10
Leaf selection - action scores:  [4.7037947e-01 4.4404110e-03 3.5271286e-03 7.6751778e-04 3.8555544e-04
 2.3349999e-04 1.8348472e-04 1.5912992e-04 1.3710951e-04 1.2736987e-04]  taking action:  0
Leaf selection - depth:  11
Leaf selection - action scores:  [4.9701545e-01 1.6748667e-01 5.0006219e-04 3.0779510e-04 2.3351767e-04
 8.9530433e-05 3.6363384e-05 3.1521067e-05 2.8788420e-05 1.8720693e-05]  taking action:  0
Leaf selection - depth:  12
Leaf selection - action scores:  [5.9075683e-01 2.0079887e-02 2.2041067e-03 1.5308223e-03 5.8718887e-04
 3.2135061e-04 2.2890850e-04 1.0773100e-04 1.0099102e-04 9.3010327e-05]  taking action:  0
Leaf selection - depth:  13
Leaf selection - action scores:  [6.9449425e-01 4.0828027e-03 1.6185839e-03 6.4431474e-04 2.8513960e-04
 2.6025122e-04 1.6300775e-04 1.5056097e-04 1.1832371e-04 5.6645134e-05]  taking action:  0
Leaf selection - depth:  14
Leaf selection - action scores:  [8.4396982e-01 2.7605059e-02 1.8186469e-04 6.4087435e-05 3.9486131e-05
 3.0705411e-05 2.7454944e-05 1.9669125e-05 1.5795906e-05 1.0783054e-05]  taking action:  0
Leaf selection - depth:  15
Leaf selection - action scores:  [1.1418869e+00 4.8919814e-03 5.0430524e-04 4.0168999e-04 2.2403689e-04
 6.5837281e-05 2.6980837e-05 2.4824642e-05 2.1697415e-05 1.7218104e-05]  taking action:  0
Leaf selection - depth:  16
Leaf selection - action scores:  [1.9498720e+00 1.0509330e-03 2.6232941e-04 8.6534114e-05 6.7097841e-05
 6.0806837e-05 5.5912416e-05 3.5802994e-05 3.2125929e-05 2.0051202e-05]  taking action:  0
Adding child.
Leaf selection - depth:  17
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  11
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42,c43,c44,c45,c46,c47,c48,c49,c50,c51,c52,c53,c54,c55,c56,c57,c58,c59,c60,c61,c62,c63;
  adder_8 a1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
  adder_8 a3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
  adder_8 a4(sum[31:24], c4, in1[31:24], in2[31:24], c3);
  adder_8 a5(sum[39:32], c5, in1[39:32], in2[39:32], c4);
  adder_8 a6(sum[47:40], c6, in1[47:40], in2[47:40], c5);
  adder_8 a7(sum[55:48], c7, in1[55:48], in2[55:48], c6);
  adder_8 a8(sum[63:56], cout, in1[63:56], in2[63:56], c7);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 failed\n'
Tokens:  448
LLM generates return in:  198.663615  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  54.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.11610816 -0.03987272  0.0065344   0.00379859  0.00150343  0.00131076
  0.11265221  0.00072341  0.00064387  0.00055683]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [0.10173011 0.08300178 0.03178034 0.02967387 0.01545226 0.01397317
 0.01374793 0.00624742 0.00436367 0.00321178]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.10345189 0.07521273 0.05064756 0.04542859 0.01325901 0.01008257
 0.00974709 0.00683396 0.00679517 0.00401855]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [ 0.14201424  0.13833424 -0.39749688  0.09765643  0.00913583  0.00616762
  0.00435759  0.00428016  0.00352577  0.00304525]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.24259321 0.07684372 0.07043242 0.05413772 0.01989125 0.00860559
 0.00844919 0.00761262 0.00565401 0.00562619]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [2.6925832e-01 6.7977116e-02 5.6808898e-03 1.7025269e-03 1.3519262e-03
 1.1020555e-03 6.4765743e-04 3.5566220e-04 1.7072281e-04 1.4797617e-04]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [2.6717737e-01 2.5451934e-01 6.6486761e-02 3.5263856e-03 5.5231800e-04
 3.3479850e-04 2.1146268e-04 1.7392986e-04 1.7242762e-04 1.7067901e-04]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [3.4285563e-01 5.2253711e-03 2.7254452e-03 2.7915131e-04 1.8774248e-04
 1.3695245e-04 1.2724145e-04 6.8799956e-05 3.6684629e-05 1.9788966e-05]  taking action:  0
Leaf selection - depth:  8
Leaf selection - action scores:  [3.6247787e-01 4.9004048e-02 1.0189960e-03 9.8731334e-04 4.1595500e-04
 7.6170043e-05 6.9964772e-05 6.4007167e-05 4.3903929e-05 4.2319389e-05]  taking action:  0
Leaf selection - depth:  9
Leaf selection - action scores:  [3.9045566e-01 4.2267829e-02 2.8462366e-03 2.4943410e-03 3.1887391e-04
 2.3020958e-04 2.1873268e-04 8.4474479e-05 7.7317913e-05 7.6959506e-05]  taking action:  0
Leaf selection - depth:  10
Leaf selection - action scores:  [4.2859814e-01 4.7097667e-03 3.7410846e-03 8.1407547e-04 4.0894328e-04
 2.4766414e-04 1.9461493e-04 1.6878276e-04 1.4542660e-04 1.3509614e-04]  taking action:  0
Leaf selection - depth:  11
Leaf selection - action scores:  [4.4607335e-01 1.7905079e-01 5.3458894e-04 3.2904680e-04 2.4964090e-04
 9.5712057e-05 3.8874092e-05 3.3697441e-05 3.0776115e-05 2.0013264e-05]  taking action:  0
Leaf selection - depth:  12
Leaf selection - action scores:  [5.2041686e-01 2.1688757e-02 2.3807075e-03 1.6534771e-03 6.3423655e-04
 3.4709836e-04 2.4724944e-04 1.1636278e-04 1.0908277e-04 1.0046264e-04]  taking action:  0
Leaf selection - depth:  13
Leaf selection - action scores:  [5.9435093e-01 4.4724867e-03 1.7730700e-03 7.0581149e-04 3.1235479e-04
 2.8509094e-04 1.7856604e-04 1.6493128e-04 1.2961712e-04 6.2051637e-05]  taking action:  0
Leaf selection - depth:  14
Leaf selection - action scores:  [6.8859190e-01 3.0863391e-02 2.0333088e-04 7.1651928e-05 4.4146833e-05
 3.4329692e-05 3.0695559e-05 2.1990751e-05 1.7660361e-05 1.2055821e-05]  taking action:  0
Leaf selection - depth:  15
Leaf selection - action scores:  [8.5084832e-01 5.6487732e-03 5.8232149e-04 4.6383165e-04 2.5869551e-04
 7.6022341e-05 3.1154785e-05 2.8665027e-05 2.5054016e-05 1.9881754e-05]  taking action:  0
Leaf selection - depth:  16
Leaf selection - action scores:  [1.1440480e+00 1.2871248e-03 3.2128658e-04 1.0598221e-04 8.2177736e-05
 7.4472860e-05 6.8478446e-05 4.3849534e-05 3.9346069e-05 2.4557607e-05]  taking action:  0
Leaf selection - depth:  17
Leaf selection - action scores:  [1.94919145e+00 2.00306135e-03 1.09353685e-04 1.06937943e-04
 8.66320406e-05 1.55501730e-05 1.41177115e-05 1.38292371e-05
 1.10135234e-05 9.71006193e-06]  taking action:  0
Adding child.
Leaf selection - depth:  18
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  66
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42,c43,c44,c45,c46,c47,c48,c49,c50,c51,c52,c53,c54,c55,c56,c57,c58,c59,c60,c61,c62,c63;
  adder_8 a1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
  adder_8 a3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
  adder_8 a4(sum[31:24], c4, in1[31:24], in2[31:24], c3);
  adder_8 a5(sum[39:32], c5, in1[39:32], in2[39:32], c4);
  adder_8 a6(sum[47:40], c6, in1[47:40], in2[47:40], c5);
  adder_8 a7(sum[55:48], c7, in1[55:48], in2[55:48], c6);
  adder_8 a8(sum[63:56], cout, in1[63:56], in2[63:56], c7);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 failed\n'
Tokens:  447
LLM generates return in:  198.469794  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  55.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.1119697  -0.03932857  0.00659354  0.00383297  0.00151703  0.00132262
  0.11345877  0.00072995  0.0006497   0.00056187]  taking action:  6
Leaf selection - depth:  1
Leaf selection - action scores:  [3.4884089e-01 1.8052161e-01 5.9132469e-03 3.3648079e-04 3.0625236e-04
 2.6588797e-04 2.2077556e-04 1.5606082e-04 1.4470644e-04 1.3401345e-04]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.35937652 0.06950805 0.04629775 0.03068347 0.03000082 0.01900549
 0.01166712 0.00816032 0.00585399 0.00456696]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.36549604 0.19065599 0.0805443  0.05958367 0.01483398 0.01401878
 0.00628518 0.00528686 0.00505252 0.00460097]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.38442126 0.34719384 0.11186289 0.0709919  0.00788276 0.00730473
 0.00515393 0.00444198 0.00363232 0.00350721]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [0.45408723 0.41898286 0.26574123 0.24046034 0.06267903 0.01675197
 0.01256264 0.01254549 0.01201015 0.0079296 ]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [6.5826881e-01 1.4246723e-03 3.5579011e-05 9.9601966e-06 9.7535112e-06
 6.7399974e-06 6.2579470e-06 5.1547208e-06 4.1556873e-06 3.8093881e-06]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [7.1542591e-01 1.7832823e-03 8.3380775e-04 1.5542847e-04 9.1524489e-05
 6.9668007e-05 5.0541526e-05 2.9105160e-05 2.0874606e-05 1.6817552e-05]  taking action:  0
Leaf selection - depth:  8
Leaf selection - action scores:  [7.8899032e-01 2.8293198e-02 7.7529461e-04 4.3171566e-04 1.0052168e-04
 4.4176784e-05 3.4517179e-05 2.9532785e-05 2.0729662e-05 1.3486786e-05]  taking action:  0
Leaf selection - depth:  9
Leaf selection - action scores:  [0.31500676 0.17005901 0.37767404 0.27561694 0.15884688 0.14180374
 0.08944218 0.07444932 0.05377974 0.0471614 ]  taking action:  2
Adding child.
Leaf selection - depth:  10
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  62
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);   
  wire [31:0] cout_temp;
  adder_8 A1(sum[7:0], cout_temp[0], in1[7:0], in2[7:0], cin);
  adder_8 A2(sum[15:8], cout_temp[1], in1[15:8], in2[15:8], cout_temp[0]);
  adder_8 A3(sum[23:16], cout_temp[2], in1[23:16], in2[23:16], cout_temp[1]);
  adder_8 A4(sum[31:24], cout_temp[3], in1[31:24], in2[31:24], cout_temp[2]);
  adder_8 A5(sum[39:32], cout_temp[4], in1[39:32], in2[39:32], cout_temp[3]);
  adder_8 A6(sum[47:40], cout_temp[5], in1[47:40], in2[47:40], cout_temp[4]);
  adder_8 A7(sum[55:48], cout_temp[6], in1[55:48], in2[55:48], cout_temp[5]);
  adder_8 A8(sum[63:56], cout_temp[7], in1[63:56], in2[63:56], cout_temp[6]);
  assign cout = cout_temp[7];
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 failed\n'
Tokens:  334
LLM generates return in:  136.759593  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  56.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.11416765 -0.03878926  0.00665215  0.00386704  0.00153052  0.00133438
  0.10235493  0.00073644  0.00065547  0.00056687]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [0.0991057  0.08425    0.03225827 0.03012013 0.01568464 0.01418331
 0.01395468 0.00634138 0.00442929 0.00326008]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.10054184 0.07715413 0.05143284 0.04613295 0.01346459 0.0102389
 0.00989821 0.00693992 0.00690053 0.00408086]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [ 0.1322554   0.14268714 -0.39580253  0.09927069  0.00928685  0.00626957
  0.00442963  0.00435091  0.00358405  0.00309559]  taking action:  1
Leaf selection - depth:  4
Leaf selection - action scores:  [ 0.27714172 -0.18582785  0.30365047  0.27740657  0.05897996  0.01833216
  0.01490542  0.01172388  0.01156274  0.00926169]  taking action:  2
Adding child.
Leaf selection - depth:  5
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  25
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
  wire [15:0] in1_1, in1_2, in1_3, in1_4, in1_5, in1_6, in1_7, in1_8, in1_9, in1_10, in1_11, in1_12, in1_13, in1_14, in1_15, in1_16, in1_17, in1_18, in1_19, in1_20, in1_21, in1_22, in1_23, in1_24, in1_25, in1_26, in1_27, in1_28, in1_29, in1_30, in1_31, in1_32, in1_33, in1_34, in1_35, in1_36, in1_37, in1_38, in1_39, in1_40, in1_41, in1_42, in1_43, in1_44, in1_45, in1_46, in1_47, in1_48, in1_49, in1_50, in1_51, in1_52, in1_53, in1_54, in1_55, in1_56, in1_57, in1_58, in1_59, in1_60, in1_61, in1_62, in1_63;
  wire [7:0] in2_1, in2_2, in2_3, in2_4, in2_5, in2_6, in2_7, in2_8, in2_9, in2_10, in2_11, in2_12, in2_13, in2_14, in2_15, in2_16, in2_17, in2_18, in2_19, in2_20, in2_21, in2_22, in2_23, in2_24, in2_25, in2_26, in2_27, in2_28, in2_29, in2_30, in2_31, in2_32, in2_33, in2_34, in2_35, in2_36, in2_37, in2_38, in2_39, in2_40, in2_41, in2_42, in2_43, in2_44, in2_45, in2_46, in2_47, in2_48, in2_49, in2_50, in2_51, in2_52, in2_53, in2_54, in2_55, in2_56, in2_57, in2_58, in2_59, in2_60, in2_61, in2_62, in2_63;
  wire c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15, c16, c17, c18, c19, c20, c21, c22, c23, c24, c25, c26, c27, c28, c29, c30, c31, c32, c33, c34, c35, c36, c37, c38, c39, c40, c41, c42, c43, c44, c45, c46, c47, c48, c49, c50, c51, c52, c53, c54, c55, c56, c57, c58, c59, c60, c61, c62, c63;
  full_adder_1 FA1_1(in1_1,  in1_2,  in1_3,  in1_4,  in1_5,  in1_6,  in1_7,  in1_8,  in1_9,  in1_10,  in1_11,  in1_12,  in1_13,  in1_14,  in1_15,  in1_16,  in1_17,  in1_18,  in1_19,  in1_20,  in1_21,  in1_22,  in1_23,  in1_24,  in1_25,  
Path:  output_files/2329780_adder_32/2329780_simulation
Verilog compilation failed, error:  2
Compilation output:  b'output_files/2329780_adder_32/2329780_adder_32.v:39: syntax error\nI give up.\n'
Tokens:  994
LLM generates return in:  602.162772  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  57.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.08445078 -0.03825465  0.00671025  0.00390082  0.00154388  0.00134603
  0.10310331  0.00074287  0.0006612   0.00057182]  taking action:  6
Leaf selection - depth:  1
Leaf selection - action scores:  [3.3144537e-01 1.8575521e-01 6.0846810e-03 3.4623587e-04 3.1513110e-04
 2.7359647e-04 2.2717618e-04 1.6058526e-04 1.4890170e-04 1.3789869e-04]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.34064984 0.07164725 0.04772263 0.03162779 0.03092414 0.01959041
 0.01202619 0.00841147 0.00603415 0.00470751]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.34290826 0.19854844 0.0831858  0.06153775 0.01532047 0.01447854
 0.0064913  0.00546024 0.00521822 0.00475186]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.34139863 0.36331993 0.1160856  0.07367177 0.00818033 0.00758047
 0.00534848 0.00460966 0.00376944 0.00363961]  taking action:  1
Leaf selection - depth:  5
Leaf selection - action scores:  [0.6358806  0.06040203 0.05463784 0.03773567 0.02061231 0.00752346
 0.00740781 0.00617646 0.00457297 0.00409428]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [8.31328094e-01 5.66313900e-02 3.80130974e-03 1.08430965e-03
 1.07197149e-03 7.95170316e-04 4.84097836e-04 2.96002108e-04
 1.40695760e-04 1.20929755e-04]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [8.66474986e-01 5.17066479e-01 3.49623002e-02 2.15119636e-03
 3.40667495e-04 2.32565086e-04 1.31889276e-04 1.04437335e-04
 9.25256463e-05 9.24318010e-05]  taking action:  0
Leaf selection - depth:  8
Leaf selection - action scores:  [1.9455884e+00 3.7391433e-03 1.6688964e-03 1.3544598e-04 1.1751782e-04
 9.6259791e-05 6.1728468e-05 4.0676012e-05 2.3656341e-05 9.9368790e-06]  taking action:  0
Adding child.
Leaf selection - depth:  9
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  11
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);   
  wire c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42,c43,c44,c45,c46,c47,c48,c49,c50,c51,c52,c53,c54,c55,c56,c57,c58,c59,c60,c61,c62,c63;
  adder_8 a1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
  adder_8 a3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
  adder_8 a4(sum[31:24], c4, in1[31:24], in2[31:24], c3);
  adder_8 a5(sum[39:32], c5, in1[39:32], in2[39:32], c4);
  adder_8 a6(sum[47:40], c6, in1[47:40], in2[47:40], c5);
  adder_8 a7(sum[55:48], c7, in1[55:48], in2[55:48], c6);
  adder_8 a8(sum[63:56], cout, in1[63:56], in2[63:56], c7);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 failed\n'
Tokens:  457
LLM generates return in:  201.855674  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  58.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.08654911 -0.03772464  0.00676785  0.0039343   0.00155714  0.00135758
  0.09311657  0.00074925  0.00066687  0.00057673]  taking action:  6
Leaf selection - depth:  1
Leaf selection - action scores:  [3.1574953e-01 1.9084534e-01 6.2514157e-03 3.5572355e-04 3.2376644e-04
 2.8109367e-04 2.3340134e-04 1.6498569e-04 1.5298197e-04 1.4167745e-04]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.32385373 0.07372441 0.04910618 0.03254473 0.03182068 0.02015836
 0.01237485 0.00865533 0.00620909 0.00484399]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.32302576 0.20619787 0.08574595 0.06343167 0.01579198 0.01492414
 0.00669108 0.00562829 0.00537881 0.0048981 ]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.3518212  0.29906645 0.12016002 0.07625753 0.00846745 0.00784654
 0.00553621 0.00477145 0.00390174 0.00376735]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [0.40589517 0.4443984  0.28186113 0.2550467  0.06648115 0.01776814
 0.01332469 0.01330651 0.01273869 0.00841061]  taking action:  1
Adding child.
Leaf selection - depth:  6
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  25
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);   
  wire [63:0] c;
  adder_8 a1(sum[7:0], c[0], in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c[1], in1[15:8], in2[15:8], c[0]);
  adder_8 a3(sum[23:16], c[2], in1[23:16], in2[23:16], c[1]);
  adder_8 a4(sum[31:24], c[3], in1[31:24], in2[31:24], c[2]);
  adder_8 a5(sum[39:32], c[4], in1[39:32], in2[39:32], c[3]);
  adder_8 a6(sum[47:40], c[5], in1[47:40], in2[47:40], c[4]);
  adder_8 a7(sum[55:48], c[6], in1[55:48], in2[55:48], c[5]);
  adder_8 a8(sum[63:56], cout, in1[63:56], in2[63:56], c[6]);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 failed\n'
Tokens:  292
LLM generates return in:  115.776125  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  59.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.08862973 -0.0371991   0.00682496  0.0039675   0.00157028  0.00136904
  0.08412287  0.00075557  0.0006725   0.00058159]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [0.07011564 0.08547998 0.03272922 0.03055986 0.01591363 0.01439037
 0.01415841 0.00643396 0.00449396 0.00330767]  taking action:  1
Adding child.
Leaf selection - depth:  2
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  21809
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
    wire [31:0] carry;
    adder_8 A1(sum[7:0], carry[0], in1[7:0], in2[7:0], cin);
    adder_8 A2(sum[15:8], carry[1], in1[15:8], in2[15:8], carry[0]);
    adder_8 A3(sum[23:16], carry[2], in1[23:16], in2[23:16], carry[1]);
    adder_8 A4(sum[31:24], carry[3], in1[31:24], in2[31:24], carry[2]);
    adder_8 A5(sum[39:32], carry[4], in1[39:32], in2[39:32], carry[3]);
    adder_8 A6(sum[47:40], carry[5], in1[47:40], in2[47:40], carry[4]);
    adder_8 A7(sum[55:48], carry[6], in1[55:48], in2[55:48], carry[5]);
    adder_8 A8(sum[63:56], cout, in1[63:56], in2[63:56], carry[6]);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 failed\n'
Tokens:  295
LLM generates return in:  116.513093  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  60.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.08539605 -0.03667792  0.0068816   0.00400043  0.00158331  0.0013804
  0.0847795   0.00076184  0.00067808  0.00058642]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [ 0.07340488 -0.00665374  0.03319348  0.03099335  0.01613936  0.0145945
  0.01435925  0.00652522  0.0045577   0.00335459]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.06963545 0.07906634 0.05220631 0.04682672 0.01366707 0.01039288
 0.01004707 0.00704428 0.0070043  0.00414223]  taking action:  1
Leaf selection - depth:  3
Leaf selection - action scores:  [1.9492915e+00 8.5918716e-04 1.1717512e-04 9.8587065e-05 8.3406536e-05
 8.2741033e-05 6.9054717e-05 6.8668036e-05 5.8837591e-05 3.3844088e-05]  taking action:  0
Adding child.
Leaf selection - depth:  4
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  23
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
  adder_8 A1(sum[7:0], cout, in1[7:0], in2[7:0], cin);
  adder_8 A2(sum[15:8], cout, in1[15:8], in2[15:8], cout);
  adder_8 A3(sum[23:16], cout, in1[23:16], in2[23:16], cout);
  adder_8 A4(sum[31:24], cout, in1[31:24], in2[31:24], cout);
  adder_8 A5(sum[39:32], cout, in1[39:32], in2[39:32], cout);
  adder_8 A6(sum[47:40], cout, in1[47:40], in2[47:40], cout);
  adder_8 A7(sum[55:48], cout, in1[55:48], in2[55:48], cout);
  adder_8 A8(sum[63:56], cout, in1[63:56], in2[63:56], cout);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 failed\n'
Tokens:  255
LLM generates return in:  98.1223  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  61.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.08232124 -0.036161    0.00693778  0.00403308  0.00159623  0.00139167
  0.08543078  0.00076806  0.00068362  0.00059121]  taking action:  6
Leaf selection - depth:  1
Leaf selection - action scores:  [3.0150214e-01 1.9580318e-01 6.4138169e-03 3.6496465e-04 3.3217733e-04
 2.8839600e-04 2.3946472e-04 1.6927172e-04 1.5695617e-04 1.4535799e-04]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.30868766 0.07574464 0.0504518  0.03343653 0.03269264 0.02071075
 0.01271395 0.00889251 0.00637923 0.00497673]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.30536637 0.21362542 0.08823186 0.06527064 0.01624981 0.01535681
 0.00688507 0.00579146 0.00553475 0.00504011]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.31571165 0.31160748 0.12410074 0.07875844 0.00874514 0.00810387
 0.00571777 0.00492794 0.0040297  0.0038909 ]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [0.42582262 0.18421854 0.29710773 0.26884282 0.07007729 0.01872927
 0.01404546 0.01402629 0.01342775 0.00886556]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [5.8594286e-01 1.5230388e-03 3.8035563e-05 1.0647898e-05 1.0426942e-05
 7.2053604e-06 6.6900270e-06 5.5106284e-06 4.4426165e-06 4.0724071e-06]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [6.2461948e-01 1.9261651e-03 9.0061536e-04 1.6788194e-04 9.8857745e-05
 7.5250049e-05 5.4591092e-05 3.1437168e-05 2.2547152e-05 1.8165032e-05]  taking action:  0
Leaf selection - depth:  8
Leaf selection - action scores:  [6.6952759e-01 3.0993646e-02 8.4929267e-04 4.7292080e-04 1.1011599e-04
 4.8393245e-05 3.7811675e-05 3.2351545e-05 2.2708207e-05 1.4774035e-05]  taking action:  0
Leaf selection - depth:  9
Leaf selection - action scores:  [0.34628657 0.19603345 0.16112621 0.3081491  0.17759621 0.1585414
 0.0999994  0.08323687 0.06012757 0.05272805]  taking action:  0
Leaf selection - depth:  10
Leaf selection - action scores:  [0.8870753  0.28835836 0.21017627 0.10273892 0.0686169  0.05768322
 0.05160109 0.05064938 0.02333958 0.02324566]  taking action:  0
Adding child.
Leaf selection - depth:  11
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  198
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);   
  wire [31:0] c;
  adder_8 a1(sum[7:0], c[0], in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c[1], in1[15:8], in2[15:8], c[0]);
  adder_8 a3(sum[23:16], c[2], in1[23:16], in2[23:16], c[1]);
  adder_8 a4(sum[31:24], cout, in1[31:24], in2[31:24], c[2]);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  143
LLM generates return in:  51.260464  seconds
Running getPromptScore: 
adder_32
output_files/2329780_adder_32/synth_script.sh
Running bash in x seconds:  0.899924

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.1
Backpropogation: incorporating estimates.
Current runs:  62.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.08424158 -0.03564823  0.0069935   0.00406548  0.00160905  0.00140285
  0.08673983  0.00077423  0.00068911  0.00059596]  taking action:  6
Leaf selection - depth:  1
Leaf selection - action scores:  [2.9850039e-01 2.0063856e-01 6.5722070e-03 3.7397750e-04 3.4038050e-04
 2.9551797e-04 2.4537832e-04 1.7345192e-04 1.6083223e-04 1.4894763e-04]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.30543795 0.07771236 0.05176245 0.03430516 0.03354194 0.02124878
 0.01304423 0.00912352 0.00654496 0.00510601]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.3013227  0.22084938 0.09064963 0.06705921 0.01669509 0.01577762
 0.00707373 0.00595016 0.00568642 0.00517822]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.30409527 0.32376233 0.1279201  0.08118235 0.00901428 0.00835328
 0.00589374 0.0050796  0.00415372 0.00401065]  taking action:  1
Leaf selection - depth:  5
Leaf selection - action scores:  [0.54298455 0.06616711 0.05985275 0.04133735 0.02257965 0.00824154
 0.00811485 0.00676597 0.00500944 0.00448505]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [6.7799145e-01 6.3315816e-02 4.2499932e-03 1.2122950e-03 1.1985005e-03
 8.8902743e-04 5.4123782e-04 3.3094041e-04 1.5730264e-04 1.3520358e-04]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [6.3883609e-01 5.9705693e-01 4.0370986e-02 2.4839875e-03 3.9336894e-04
 2.6854302e-04 1.5229262e-04 1.2059384e-04 1.0683941e-04 1.0673105e-04]  taking action:  0
Leaf selection - depth:  8
Leaf selection - action scores:  [1.1414248e+00 4.5794966e-03 2.0439723e-03 1.6588677e-04 1.4392934e-04
 1.1789369e-04 7.5601623e-05 4.9817740e-05 2.8972983e-05 1.2170141e-05]  taking action:  0
Leaf selection - depth:  9
Leaf selection - action scores:  [1.9264346e+00 2.3455946e-02 5.4886437e-04 4.9362314e-04 2.9333579e-04
 3.8204653e-05 3.6367353e-05 3.3500364e-05 2.2856420e-05 2.2176033e-05]  taking action:  0
Adding child.
Leaf selection - depth:  10
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  66
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);   
  wire c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42,c43,c44,c45,c46,c47,c48,c49,c50,c51,c52,c53,c54,c55,c56,c57,c58,c59,c60,c61,c62,c63;
  adder_8 a1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
  adder_8 a3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
  adder_8 a4(sum[31:24], c4, in1[31:24], in2[31:24], c3);
  adder_8 a5(sum[39:32], c5, in1[39:32], in2[39:32], c4);
  adder_8 a6(sum[47:40], c6, in1[47:40], in2[47:40], c5);
  adder_8 a7(sum[55:48], c7, in1[55:48], in2[55:48], c6);
  adder_8 a8(sum[63:56], cout, in1[63:56], in2[63:56], c7);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 failed\n'
Tokens:  456
LLM generates return in:  201.516953  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  63.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.08614673 -0.03513951  0.00704879  0.00409762  0.00162177  0.00141394
  0.07883432  0.00078035  0.00069456  0.00060067]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [ 0.07160167 -0.00605583  0.03365135  0.03142087  0.01636199  0.01479581
  0.01455732  0.00661523  0.00462057  0.00340087]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.07307009 0.02063374 0.05296848 0.04751035 0.0138666  0.01054461
 0.01019375 0.00714713 0.00710656 0.0042027 ]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [ 0.13588285  0.05874191 -0.39413524  0.10085913  0.00943545  0.00636989
  0.0045005   0.00442053  0.0036414   0.00314512]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.23161817 0.07907154 0.07247437 0.05570725 0.02046793 0.00885508
 0.00869415 0.00783333 0.00581793 0.0057893 ]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [2.5664145e-01 7.0069209e-02 5.8557270e-03 1.7549247e-03 1.3935337e-03
 1.1359729e-03 6.6759001e-04 3.6660820e-04 1.7597704e-04 1.5253034e-04]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [2.4979614e-01 2.6505283e-01 6.8667233e-02 3.6420354e-03 5.7043158e-04
 3.4577842e-04 2.1839773e-04 1.7963399e-04 1.7808248e-04 1.7627652e-04]  taking action:  1
Leaf selection - depth:  7
Leaf selection - action scores:  [1.1396521e+00 6.7185061e-03 1.3477798e-03 4.4131160e-04 3.5835977e-04
 2.9980708e-04 2.5336788e-04 1.8132685e-04 1.3406157e-04 9.0944821e-05]  taking action:  0
Leaf selection - depth:  8
Leaf selection - action scores:  [1.87385774e+00 7.46509805e-02 1.26324513e-03 5.70080243e-04
 4.87373822e-04 1.04272614e-04 1.00880359e-04 8.06088283e-05
 4.67850477e-05 2.95784102e-05]  taking action:  0
Adding child.
Leaf selection - depth:  9
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  269
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
  wire c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15, c16, c17, c18, c19, c20, c21, c22, c23, c24, c25, c26, c27, c28, c29, c30, c31, c32, c33, c34, c35, c36, c37, c38, c39, c40, c41, c42, c43, c44, c45, c46, c47, c48, c49, c50, c51, c52, c53, c54, c55, c56, c57, c58, c59, c60, c61, c62, c63;
  adder_8 a1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
  adder_8 a3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
  adder_8 a4(sum[31:24], c4, in1[31:24], in2[31:24], c3);
  adder_8 a5(sum[39:32], c5, in1[39:32], in2[39:32], c4);
  adder_8 a6(sum[47:40], c6, in1[47:40], in2[47:40], c5);
  adder_8 a7(sum[55:48], c7, in1[55:48], in2[55:48], c6);
  adder_8 a8(sum[63:56], cout, in1[63:56], in2[63:56], c7);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 failed\n'
Tokens:  456
LLM generates return in:  201.290121  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  64.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.08308871 -0.03463475  0.00710364  0.00412951  0.0016344   0.00142494
  0.07941245  0.00078642  0.00069996  0.00060534]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [ 0.06985748 -0.00546595  0.03410306  0.03184264  0.01658162  0.01499442
  0.01475272  0.00670403  0.00468259  0.00344652]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.07110885 0.0218721  0.05371984 0.04818429 0.0140633  0.01069418
 0.01033835 0.00724851 0.00720737 0.00426232]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [ 0.12685117  0.06263439 -0.39249384  0.10242292  0.00958174  0.00646866
  0.00457028  0.00448907  0.00369785  0.00319388]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.22162503 0.08123828 0.07446034 0.05723376 0.0210288  0.00909773
 0.00893239 0.00804798 0.00597735 0.00594794]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [2.4522337e-01 7.2100617e-02 6.0254936e-03 1.8058026e-03 1.4339343e-03
 1.1689065e-03 6.8694446e-04 3.7723672e-04 1.8107888e-04 1.5695242e-04]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [2.6032490e-01 1.8144645e-01 7.0780560e-02 3.7541240e-03 5.8798736e-04
 3.5642023e-04 2.2511922e-04 1.8516247e-04 1.8356321e-04 1.8170167e-04]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [3.2218689e-01 5.4387385e-03 2.8367334e-03 2.9054988e-04 1.9540856e-04
 1.4254464e-04 1.3243711e-04 7.1609262e-05 3.8182574e-05 2.0597008e-05]  taking action:  0
Leaf selection - depth:  8
Leaf selection - action scores:  [3.3872521e-01 5.1183060e-02 1.0643066e-03 1.0312152e-03 4.3445081e-04
 7.9557009e-05 7.3075818e-05 6.6853303e-05 4.5856155e-05 4.4201159e-05]  taking action:  0
Leaf selection - depth:  9
Leaf selection - action scores:  [3.6246678e-01 4.4330876e-02 2.9851585e-03 2.6160870e-03 3.3443782e-04
 2.4144586e-04 2.2940878e-04 8.8597590e-05 8.1091712e-05 8.0715814e-05]  taking action:  0
Leaf selection - depth:  10
Leaf selection - action scores:  [3.9468020e-01 4.9645300e-03 3.9434494e-03 8.5811090e-04 4.3106408e-04
 2.6106092e-04 2.0514215e-04 1.7791265e-04 1.5329311e-04 1.4240385e-04]  taking action:  0
Leaf selection - depth:  11
Leaf selection - action scores:  [4.06040192e-01 1.89912036e-01 5.67017181e-04 3.49006819e-04
 2.64784147e-04 1.01517966e-04 4.12322006e-05 3.57415302e-05
 3.26429981e-05 2.12272698e-05]  taking action:  0
Leaf selection - depth:  12
Leaf selection - action scores:  [4.6751660e-01 2.3186257e-02 2.5450834e-03 1.7676414e-03 6.7802734e-04
 3.7106374e-04 2.6432076e-04 1.2439705e-04 1.1661439e-04 1.0739908e-04]  taking action:  0
Leaf selection - depth:  13
Leaf selection - action scores:  [5.2365196e-01 4.8308377e-03 1.9151345e-03 7.6236355e-04 3.3738176e-04
 3.0793343e-04 1.9287337e-04 1.7814615e-04 1.4000251e-04 6.7023429e-05]  taking action:  0
Leaf selection - depth:  14
Leaf selection - action scores:  [5.8917838e-01 3.3809152e-02 2.2273783e-04 7.8490753e-05 4.8360434e-05
 3.7606296e-05 3.3625303e-05 2.4089661e-05 1.9345955e-05 1.3206490e-05]  taking action:  0
Leaf selection - depth:  15
Leaf selection - action scores:  [6.9435966e-01 6.3155205e-03 6.5105519e-04 5.1857956e-04 2.8923037e-04
 8.4995554e-05 3.4832108e-05 3.2048472e-05 2.8011240e-05 2.2228476e-05]  taking action:  0
Leaf selection - depth:  16
Leaf selection - action scores:  [8.5251182e-01 1.4862437e-03 3.7098979e-04 1.2237771e-04 9.4890675e-05
 8.5993852e-05 7.9072095e-05 5.0633076e-05 4.5432924e-05 2.8356681e-05]  taking action:  0
Leaf selection - depth:  17
Leaf selection - action scores:  [1.1436312e+00 2.4532392e-03 1.3393037e-04 1.3097170e-04 1.0610215e-04
 1.9044994e-05 1.7290595e-05 1.6937287e-05 1.3488757e-05 1.1892349e-05]  taking action:  0
Leaf selection - depth:  18
Leaf selection - action scores:  [1.94752681e+00 3.29800858e-03 2.25930387e-04 2.05927092e-04
 9.75130752e-05 3.54691911e-05 1.75318837e-05 1.16981928e-05
 1.16088395e-05 1.05932195e-05]  taking action:  0
Adding child.
Leaf selection - depth:  19
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  21
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42,c43,c44,c45,c46,c47,c48,c49,c50,c51,c52,c53,c54,c55,c56,c57,c58,c59,c60,c61,c62,c63;
  adder_8 a1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
  adder_8 a3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
  adder_8 a4(sum[31:24], c4, in1[31:24], in2[31:24], c3);
  adder_8 a5(sum[39:32], c5, in1[39:32], in2[39:32], c4);
  adder_8 a6(sum[47:40], c6, in1[47:40], in2[47:40], c5);
  adder_8 a7(sum[55:48], c7, in1[55:48], in2[55:48], c6);
  adder_8 a8(sum[63:56], cout, in1[63:56], in2[63:56], c7);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 failed\n'
Tokens:  446
LLM generates return in:  198.204757  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  65.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.08017378 -0.03413386  0.00715808  0.00416115  0.00164692  0.00143586
  0.07998615  0.00079245  0.00070533  0.00060998]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [ 0.06816913 -0.00488378  0.03454887  0.0322589   0.01679838  0.01519044
  0.01494558  0.00679167  0.00474381  0.00349157]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.06921902 0.02309339 0.05446085 0.04884893 0.01425729 0.0108417
 0.01048095 0.00734849 0.00730679 0.00432111]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [ 0.11867434  0.06646831 -0.39087713  0.10396321  0.00972584  0.00656593
  0.00463901  0.00455658  0.00375346  0.00324192]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.21247618 0.08334871 0.07639469 0.0587206  0.02157509 0.00933407
 0.00916444 0.00825705 0.00613263 0.00610246]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [2.3482648e-01 7.4076347e-02 6.1906064e-03 1.8552858e-03 1.4732275e-03
 1.2009373e-03 7.0576835e-04 3.8757391e-04 1.8604087e-04 1.6125329e-04]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [2.4408051e-01 1.8888123e-01 7.2832599e-02 3.8629619e-03 6.0503406e-04
 3.6675340e-04 2.3164577e-04 1.9053061e-04 1.8888499e-04 1.8696948e-04]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [3.0413181e-01 5.6440458e-03 2.9438171e-03 3.0151784e-04 2.0278504e-04
 1.4792554e-04 1.3743647e-04 7.4312440e-05 3.9623927e-05 2.1374524e-05]  taking action:  0
Leaf selection - depth:  8
Leaf selection - action scores:  [3.1824607e-01 5.3273015e-02 1.1077655e-03 1.0733227e-03 4.5219072e-04
 8.2805564e-05 7.6059725e-05 6.9583126e-05 4.7728601e-05 4.6006026e-05]  taking action:  0
Leaf selection - depth:  9
Leaf selection - action scores:  [3.3871463e-01 4.6302091e-02 3.1178962e-03 2.7324136e-03 3.4930889e-04
 2.5218196e-04 2.3960965e-04 9.2537157e-05 8.4697531e-05 8.4304913e-05]  taking action:  0
Leaf selection - depth:  10
Leaf selection - action scores:  [3.6645442e-01 5.2068434e-03 4.1359249e-03 8.9999440e-04 4.5210385e-04
 2.7380302e-04 2.1515491e-04 1.8659637e-04 1.6077516e-04 1.4935443e-04]  taking action:  0
Leaf selection - depth:  11
Leaf selection - action scores:  [3.73544037e-01 2.00184852e-01 5.97688602e-04 3.67885485e-04
 2.79106986e-04 1.07009335e-04 4.34625545e-05 3.76748831e-05
 3.44087421e-05 2.23755069e-05]  taking action:  0
Leaf selection - depth:  12
Leaf selection - action scores:  [4.2594120e-01 2.4592739e-02 2.6994685e-03 1.8748667e-03 7.1915658e-04
 3.9357253e-04 2.8035449e-04 1.3194299e-04 1.2368824e-04 1.1391392e-04]  taking action:  0
Leaf selection - depth:  13
Leaf selection - action scores:  [4.7048104e-01 5.1643825e-03 2.0473648e-03 8.1500091e-04 3.6067626e-04
 3.2919468e-04 2.0619031e-04 1.9044624e-04 1.4966898e-04 7.1651062e-05]  taking action:  0
Leaf selection - depth:  14
Leaf selection - action scores:  [5.1899612e-01 3.6518060e-02 2.4058437e-04 8.4779713e-05 5.2235242e-05
 4.0619441e-05 3.6319478e-05 2.6019809e-05 2.0896021e-05 1.4264640e-05]  taking action:  0
Leaf selection - depth:  15
Leaf selection - action scores:  [5.9423310e-01 6.9183060e-03 7.1319524e-04 5.6807540e-04 3.1683600e-04
 9.3107963e-05 3.8156664e-05 3.5107343e-05 3.0684776e-05 2.4350076e-05]  taking action:  0
Leaf selection - depth:  16
Leaf selection - action scores:  [6.9575459e-01 1.6616709e-03 4.1477918e-04 1.3682243e-04 1.0609099e-04
 9.6144046e-05 8.8405286e-05 5.6609497e-05 5.0795552e-05 3.1703730e-05]  taking action:  0
Leaf selection - depth:  17
Leaf selection - action scores:  [8.5219097e-01 2.8327564e-03 1.5464946e-04 1.5123309e-04 1.2251621e-04
 2.1991264e-05 1.9965459e-05 1.9557494e-05 1.5575473e-05 1.3732101e-05]  taking action:  0
Leaf selection - depth:  18
Leaf selection - action scores:  [1.1426119e+00 4.0392191e-03 2.7670708e-04 2.5220815e-04 1.1942864e-04
 4.3440712e-05 2.1472086e-05 1.4327302e-05 1.4217867e-05 1.2973992e-05]  taking action:  0
Leaf selection - depth:  19
Leaf selection - action scores:  [1.9504197e+00 9.0167043e-04 4.3805478e-05 4.0269988e-05 3.6570698e-05
 2.4796374e-05 2.3128110e-05 2.2694185e-05 2.0736648e-05 2.0142170e-05]  taking action:  0
Adding child.
Leaf selection - depth:  20
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  11
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42,c43,c44,c45,c46,c47,c48,c49,c50,c51,c52,c53,c54,c55,c56,c57,c58,c59,c60,c61,c62,c63;
  adder_8 a1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
  adder_8 a3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
  adder_8 a4(sum[31:24], c4, in1[31:24], in2[31:24], c3);
  adder_8 a5(sum[39:32], c5, in1[39:32], in2[39:32], c4);
  adder_8 a6(sum[47:40], c6, in1[47:40], in2[47:40], c5);
  adder_8 a7(sum[55:48], c7, in1[55:48], in2[55:48], c6);
  adder_8 a8(sum[63:56], cout, in1[63:56], in2[63:56], c7);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 failed\n'
Tokens:  445
LLM generates return in:  197.927638  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  66.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.07739149 -0.03363675  0.0072121   0.00419256  0.00165935  0.0014467
  0.08055552  0.00079843  0.00071065  0.00061458]  taking action:  6
Leaf selection - depth:  1
Leaf selection - action scores:  [2.8610212e-01 2.0536010e-01 6.7268680e-03 3.8277815e-04 3.4839052e-04
 3.0247227e-04 2.5115270e-04 1.7753369e-04 1.6461703e-04 1.5245275e-04]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.29233176 0.07963147 0.05304074 0.03515233 0.03437026 0.02177352
 0.01336636 0.00934883 0.00670658 0.00523211]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.28642    0.22788559 0.09300455 0.0688013  0.0171288  0.0161875
 0.0072575  0.00610474 0.00583414 0.00531274]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.31185722 0.27334115 0.1316287  0.08353594 0.00927562 0.00859545
 0.00606461 0.00522686 0.00427414 0.00412693]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [0.40646777 0.19565049 0.31160924 0.28196475 0.07349768 0.01964342
 0.014731   0.0147109  0.01408315 0.00929828]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [5.5478400e-01 1.6154265e-03 4.0342806e-05 1.1293801e-05 1.1059442e-05
 7.6424385e-06 7.0958449e-06 5.8449041e-06 4.7121066e-06 4.3194400e-06]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [5.8565331e-01 2.0591570e-03 9.6279831e-04 1.7947334e-04 1.0568338e-04
 8.0445687e-05 5.8360332e-05 3.3607746e-05 2.4103920e-05 1.9419236e-05]  taking action:  0
Leaf selection - depth:  8
Leaf selection - action scores:  [6.1931038e-01 3.3476964e-02 9.1734098e-04 5.1081285e-04 1.1893887e-04
 5.2270680e-05 4.0841278e-05 3.4943663e-05 2.4527668e-05 1.5957781e-05]  taking action:  0
Leaf selection - depth:  9
Leaf selection - action scores:  [0.2830438  0.21951614 0.18127717 0.33756045 0.19454691 0.1736734
 0.10954385 0.09118143 0.06586646 0.05776068]  taking action:  3
Adding child.
Leaf selection - depth:  10
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  62
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);   
  wire [31:0] sum_1;
  wire [31:0] sum_2;
  wire [31:0] sum_3;
  wire [31:0] sum_4;
  wire [31:0] sum_5;
  wire [31:0] sum_6;
  wire [31:0] sum_7;
  wire [31:0] sum_8;
  wire [31:0] sum_9;
  wire [31:0] sum_10;
  wire [31:0] sum_11;
  wire [31:0] sum_12;
  wire [31:0] sum_13;
  wire [31:0] sum_14;
  wire [31:0] sum_15;
  wire [31:0] sum_16;
  wire [31:0] sum_17;
  wire [31:0] sum_18;
  wire [31:0] sum_19;
  wire [31:0] sum_20;
  wire [31:0] sum_21;
  wire [31:0] sum_22;
  wire [31:0] sum_23;
  wire [31:0] sum_24;
  wire [31:0] sum_25;
  wire [31:0] sum_26;
  wire [31:0] sum_27;
  wire [31:0] sum_28;
  wire [31:0] sum_29;
  wire [31:0] sum_30;
  wire [31:0] sum_31;
  wire [31:0] sum_32;
  wire [31:0] sum_33;
  wire [31:0] sum_34;
  wire [31:0] sum_35;
  wire [31:0] sum_36;
  wire [31:0] sum_37;
  wire [31:0] sum_38;
  wire [31:0] sum_39;
  wire [31:0] sum_40;
  wire [31:0] sum_41;
  wire [31:0] sum_42;
  wire [31:0] sum_43;
  wire [31:0] sum_44;
  wire [31:0] sum_45;
  wire [31:0] sum_46;
  wire [31:0] sum_47;
  wire [31:0] sum_48;
  wire [31:0] sum_49;
  wire [31:0] sum_50;
  wire [31:0] sum_51;
  wire [31:0] sum_52;
  wire [31:0] sum_53;
  wire [31:0] sum_54;
  wire [31:0] sum_55;
  wire [31:0] sum_56;
  wire [31:0] sum_57;
  wire [31:0] sum_58;
  wire [31:0] sum_59;
  wire [31:0] sum_60;
  wire [31:0] sum_61;
  wire [31:0] sum_62;
  wire [31:0] sum_63;
  wire [31:0] sum_64;
  wire [31:0] sum_65;
  wire [31:0] sum_66;
  wire [31:0] sum_67;
  wire [31:0] sum_68;
  wire [31:0] sum_69;
  wire [31:0] sum_70;
  wire [31:0] sum_71;
  wire [31:0] sum_72;
  wire [31:0] sum_73;
  wire [31:0] sum_74;
  wire [31:0] sum_75;
  wire [31:0] sum_76;
  wire [31:0] sum_77;
  wire [31:0] sum_78;
  wire [31:0] sum_79;
  wire [31:0] sum_80;
  wire [31:0] sum_81;
  wire [31:0] sum_82;
  wire [31:0] sum_83;
  wire
Path:  output_files/2329780_adder_32/2329780_simulation
Verilog compilation failed, error:  2
Compilation output:  b'output_files/2329780_adder_32/2329780_adder_32.v:119: syntax error\nI give up.\n'
Tokens:  989
LLM generates return in:  600.574771  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  67.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.07910075 -0.03314334  0.00726572  0.00422373  0.00167169  0.00145746
  0.03411542  0.00080437  0.00071593  0.00061915]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [ 0.06653363 -0.00430903  0.034989    0.03266986  0.01701238  0.01538395
  0.01513597  0.00687819  0.00480424  0.00353605]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.06739619 0.02429827 0.05519189 0.04950465 0.01444867 0.01098723
 0.01062164 0.00744713 0.00740487 0.00437911]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [ 0.11123222  0.07024629 -0.38928398  0.105481    0.00986783  0.00666179
  0.00470674  0.0046231   0.00380826  0.00328925]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.20405968 0.08540703 0.07828127 0.06017071 0.02210789 0.00956458
 0.00939075 0.00846096 0.00628408 0.00625316]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [2.2530772e-01 7.6000720e-02 6.3514276e-03 1.9034829e-03 1.5114994e-03
 1.2321356e-03 7.2410301e-04 3.9764241e-04 1.9087389e-04 1.6544238e-04]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [2.2975917e-01 1.9611220e-01 7.4828379e-02 3.9688163e-03 6.2161341e-04
 3.7680331e-04 2.3799342e-04 1.9575161e-04 1.9406089e-04 1.9209289e-04]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [2.8818575e-01 5.8421423e-03 3.0471403e-03 3.1210063e-04 2.0990247e-04
 1.5311749e-04 1.4226027e-04 7.6920682e-05 4.1014664e-05 2.2124736e-05]  taking action:  0
Leaf selection - depth:  8
Leaf selection - action scores:  [3.0035681e-01 5.5284020e-02 1.1495824e-03 1.1138396e-03 4.6926047e-04
 8.5931388e-05 7.8930898e-05 7.2209812e-05 4.9530307e-05 4.7742706e-05]  taking action:  0
Leaf selection - depth:  9
Leaf selection - action scores:  [3.1823602e-01 4.8192743e-02 3.2452091e-03 2.8439863e-03 3.6357221e-04
 2.6247930e-04 2.4939363e-04 9.6315729e-05 8.8155983e-05 8.7747336e-05]  taking action:  0
Leaf selection - depth:  10
Leaf selection - action scores:  [3.4250098e-01 5.4383706e-03 4.3198327e-03 9.4001344e-04 4.7220706e-04
 2.8597791e-04 2.2472197e-04 1.9489355e-04 1.6792418e-04 1.5599560e-04]  taking action:  0
Leaf selection - depth:  11
Leaf selection - action scores:  [3.46503407e-01 2.09955662e-01 6.26861118e-04 3.85841588e-04
 2.92729907e-04 1.12232345e-04 4.55839181e-05 3.95137504e-05
 3.60881968e-05 2.34676318e-05]  taking action:  0
Leaf selection - depth:  12
Leaf selection - action scores:  [3.9219075e-01 2.5923023e-02 2.8454897e-03 1.9762830e-03 7.5805763e-04
 4.1486186e-04 2.9551960e-04 1.3908012e-04 1.3037884e-04 1.2007581e-04]  taking action:  0
Leaf selection - depth:  13
Leaf selection - action scores:  [4.2869243e-01 5.4776547e-03 2.1715583e-03 8.6443900e-04 3.8255492e-04
 3.4916366e-04 2.1869784e-04 2.0199874e-04 1.5874792e-04 7.5997421e-05]  taking action:  0
Leaf selection - depth:  14
Leaf selection - action scores:  [4.6621478e-01 3.9039448e-02 2.5719550e-04 9.0633323e-05 5.5841821e-05
 4.3424010e-05 3.8827155e-05 2.7816344e-05 2.2338785e-05 1.5249541e-05]  taking action:  0
Leaf selection - depth:  15
Leaf selection - action scores:  [5.23545802e-01 7.47262500e-03 7.70338927e-04 6.13591634e-04
 3.42222018e-04 1.00568104e-04 4.12139088e-05 3.79202684e-05
 3.31433475e-05 2.63010897e-05]  taking action:  0
Leaf selection - depth:  16
Leaf selection - action scores:  [5.9545547e-01 1.8202693e-03 4.5436784e-04 1.4988147e-04 1.1621686e-04
 1.0532053e-04 9.6843141e-05 6.2012601e-05 5.5643741e-05 3.4729699e-05]  taking action:  0
Leaf selection - depth:  17
Leaf selection - action scores:  [6.9548553e-01 3.1671179e-03 1.7290335e-04 1.6908372e-04 1.3697728e-04
 2.4586980e-05 2.2322061e-05 2.1865942e-05 1.7413910e-05 1.5352955e-05]  taking action:  0
Leaf selection - depth:  18
Leaf selection - action scores:  [8.5140628e-01 4.6640886e-03 3.1951381e-04 2.9122489e-04 1.3790431e-04
 5.0161012e-05 2.4793828e-05 1.6543743e-05 1.6417378e-05 1.4981075e-05]  taking action:  0
Leaf selection - depth:  19
Leaf selection - action scores:  [1.1443833e+00 1.1043162e-03 5.3650532e-05 4.9320464e-05 4.4789776e-05
 3.0369232e-05 2.8326034e-05 2.7794587e-05 2.5397105e-05 2.4669020e-05]  taking action:  0
Leaf selection - depth:  20
Leaf selection - action scores:  [1.9396386e+00 1.1816665e-02 7.6456621e-05 3.2552340e-05 8.0577911e-06
 5.9840231e-06 3.4280085e-06 3.3293657e-06 2.0015239e-06 1.5061109e-06]  taking action:  0
Adding child.
Leaf selection - depth:  21
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  66
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42,c43,c44,c45,c46,c47,c48,c49,c50,c51,c52,c53,c54,c55,c56,c57,c58,c59,c60,c61,c62,c63;
  adder_8 a1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
  adder_8 a3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
  adder_8 a4(sum[31:24], c4, in1[31:24], in2[31:24], c3);
  adder_8 a5(sum[39:32], c5, in1[39:32], in2[39:32], c4);
  adder_8 a6(sum[47:40], c6, in1[47:40], in2[47:40], c5);
  adder_8 a7(sum[55:48], c7, in1[55:48], in2[55:48], c6);
  adder_8 a8(sum[63:56], cout, in1[63:56], in2[63:56], c7);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 failed\n'
Tokens:  444
LLM generates return in:  197.466022  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  68.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.07638778 -0.03265354  0.00731895  0.00425467  0.00168393  0.00146813
  0.03465202  0.00081026  0.00072118  0.00062369]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [ 0.06494823 -0.00374142  0.03542367  0.03307571  0.01722373  0.01557507
  0.01532401  0.00696363  0.00486392  0.00357998]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.06563635 0.02548741 0.05591339 0.0501518  0.01463755 0.01113086
 0.01076049 0.00754449 0.00750167 0.00443636]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [ 0.10442644  0.07397063 -0.3877135   0.10697725  0.0100078   0.00675629
  0.00477351  0.00468868  0.00386228  0.0033359 ]  taking action:  3
Adding child.
Leaf selection - depth:  4
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  16
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
  wire cout1, cout2, cout3, cout4, cout5, cout6, cout7, cout8;
  adder_8 A1(sum[7:0], cout1, in1[7:0], in2[7:0], cin);
  adder_8 A2(sum[15:8], cout2, in1[15:8], in2[15:8], cout1);
  adder_8 A3(sum[23:16], cout3, in1[23:16], in2[23:16], cout2);
  adder_8 A4(sum[31:24], cout4, in1[31:24], in2[31:24], cout3);
  adder_8 A5(sum[39:32], cout5, in1[39:32], in2[39:32], cout4);
  adder_8 A6(sum[47:40], cout6, in1[47:40], in2[47:40], cout5);
  adder_8 A7(sum[55:48], cout7, in1[55:48], in2[55:48], cout6);
  adder_8 A8(sum[63:56], cout8, in1[63:56], in2[63:56], cout7);
  assign cout = cout8;
  assign sum = sum[63:0];
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 failed\n'
Tokens:  318
LLM generates return in:  127.806468  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  69.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.07379234 -0.03216728  0.0073718   0.00428539  0.00169609  0.00147873
  0.03518476  0.00081611  0.00072638  0.00062819]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [ 0.06341039 -0.00318069  0.03585306  0.03347665  0.01743251  0.01576386
  0.01550976  0.00704805  0.00492288  0.00362338]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.06393583 0.02666139 0.05662569 0.0507907  0.01482402 0.01127266
 0.01089757 0.0076406  0.00759723 0.00449288]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [ 0.10718358  0.07764362 -0.3861646   0.00422644  0.01014585  0.00684949
  0.00483935  0.00475336  0.00391556  0.00338192]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.19628318 0.08741687 0.08012342 0.06158668 0.02262814 0.00978966
 0.00961174 0.00866007 0.00643196 0.00640031]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [2.1655066e-01 7.7877574e-02 6.5082773e-03 1.9504897e-03 1.5488261e-03
 1.2625633e-03 7.4198481e-04 4.0746224e-04 1.9558755e-04 1.6952799e-04]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [2.1701802e-01 2.0315523e-01 7.6772295e-02 4.0719192e-03 6.3776184e-04
 3.8659200e-04 2.4417607e-04 2.0083690e-04 1.9910226e-04 1.9708314e-04]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [2.7397007e-01 6.0337386e-03 3.1470731e-03 3.2233616e-04 2.1678634e-04
 1.5813907e-04 1.4692577e-04 7.9443344e-05 4.2359759e-05 2.2850329e-05]  taking action:  0
Leaf selection - depth:  8
Leaf selection - action scores:  [2.8455737e-01 5.7224397e-02 1.1899309e-03 1.1529336e-03 4.8573076e-04
 8.8947440e-05 8.1701248e-05 7.4744261e-05 5.1268740e-05 4.9418399e-05]  taking action:  0
Leaf selection - depth:  9
Leaf selection - action scores:  [3.0034715e-01 5.0011970e-02 3.3677125e-03 2.9513438e-03 3.7729670e-04
 2.7238764e-04 2.5880800e-04 9.9951547e-05 9.1483780e-05 9.1059708e-05]  taking action:  0
Leaf selection - depth:  10
Leaf selection - action scores:  [3.2184854e-01 5.6604352e-03 4.4962242e-03 9.7839697e-04 4.9148867e-04
 2.9765524e-04 2.3389804e-04 2.0285165e-04 1.7478103e-04 1.6236537e-04]  taking action:  0
Leaf selection - depth:  11
Leaf selection - action scores:  [3.2355720e-01 2.1929154e-01 6.5473508e-04 4.0299838e-04 3.0574639e-04
 1.1722286e-04 4.7610847e-05 4.1270767e-05 3.7692891e-05 2.4511142e-05]  taking action:  0
Leaf selection - depth:  12
Leaf selection - action scores:  [3.6410451e-01 2.7188297e-02 2.9843750e-03 2.0727434e-03 7.9505757e-04
 4.3511082e-04 3.0994357e-04 1.4586847e-04 1.3674250e-04 1.2593658e-04]  taking action:  0
Leaf selection - depth:  13
Leaf selection - action scores:  [3.9476854e-01 5.7739550e-03 2.2890235e-03 9.1119873e-04 4.0324830e-04
 3.6805082e-04 2.3052776e-04 2.1292537e-04 1.6733499e-04 8.0108322e-05]  taking action:  0
Leaf selection - depth:  14
Leaf selection - action scores:  [4.2473301e-01 4.1407585e-02 2.7279701e-04 9.6131153e-05 5.9229194e-05
 4.6058118e-05 4.1182415e-05 2.9503688e-05 2.3693859e-05 1.6174581e-05]  taking action:  0
Leaf selection - depth:  15
Leaf selection - action scores:  [4.7038376e-01 7.9885721e-03 8.2352699e-04 6.5595703e-04 3.6585072e-04
 1.0751182e-04 4.4059521e-05 4.0538471e-05 3.5431731e-05 2.8117047e-05]  taking action:  0
Leaf selection - depth:  16
Leaf selection - action scores:  [5.24646163e-01 1.96611555e-03 4.90773411e-04 1.61890493e-04
 1.25528561e-04 1.13759175e-04 1.04602557e-04 6.69812653e-05
 6.01021129e-05 3.75123636e-05]  taking action:  0
Leaf selection - depth:  17
Leaf selection - action scores:  [5.9521967e-01 3.4694038e-03 1.8940613e-04 1.8522194e-04 1.5005108e-04
 2.6933687e-05 2.4452593e-05 2.3952940e-05 1.9075982e-05 1.6818320e-05]  taking action:  0
Leaf selection - depth:  18
Leaf selection - action scores:  [6.9482756e-01 5.2146092e-03 3.5722731e-04 3.2559931e-04 1.5418170e-04
 5.6081713e-05 2.7720342e-05 1.8496467e-05 1.8355186e-05 1.6749351e-05]  taking action:  0
Leaf selection - depth:  19
Leaf selection - action scores:  [8.5276997e-01 1.2751545e-03 6.1950297e-05 5.6950365e-05 5.1718776e-05
 3.5067369e-05 3.2708085e-05 3.2094424e-05 2.9326049e-05 2.8485329e-05]  taking action:  0
Leaf selection - depth:  20
Leaf selection - action scores:  [1.1377813e+00 1.4472399e-02 9.3639857e-05 3.9868315e-05 9.8687387e-06
 7.3289020e-06 4.1984358e-06 4.0776235e-06 2.4513563e-06 1.8446017e-06]  taking action:  0
Leaf selection - depth:  21
Leaf selection - action scores:  [1.9484668e+00 2.4981862e-03 2.0432961e-04 1.6034467e-04 8.4076433e-05
 3.8471568e-05 9.7687816e-06 8.2187989e-06 7.9426909e-06 7.3981505e-06]  taking action:  0
Adding child.
Leaf selection - depth:  22
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  22
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42,c43,c44,c45,c46,c47,c48,c49,c50,c51,c52,c53,c54,c55,c56,c57,c58,c59,c60,c61,c62,c63;
  adder_8 a1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
  adder_8 a3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
  adder_8 a4(sum[31:24], c4, in1[31:24], in2[31:24], c3);
  adder_8 a5(sum[39:32], c5, in1[39:32], in2[39:32], c4);
  adder_8 a6(sum[47:40], c6, in1[47:40], in2[47:40], c5);
  adder_8 a7(sum[55:48], c7, in1[55:48], in2[55:48], c6);
  adder_8 a8(sum[63:56], cout, in1[63:56], in2[63:56], c7);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 failed\n'
Tokens:  443
LLM generates return in:  197.101894  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  70.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.07130647 -0.03168448  0.00742427  0.00431589  0.00170816  0.00148926
  0.0357137   0.00082192  0.00073155  0.00063266]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [ 0.06191768 -0.00262659  0.03627737  0.03387283  0.01763881  0.01595042
  0.01569331  0.00713146  0.00498114  0.00366626]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.0622912  0.02782079 0.05732914 0.05142167 0.01500818 0.0114127
 0.01103295 0.00773552 0.00769161 0.00454869]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [ 0.1007774   0.08126728 -0.38463658  0.00495434  0.01028204  0.00694143
  0.00490431  0.00481716  0.00396812  0.00342732]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.18906984 0.08938155 0.08192418 0.06297083 0.02313671 0.01000968
 0.00982776 0.0088547  0.00657651 0.00654416]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [2.0845933e-01 7.9710230e-02 6.6614337e-03 1.9963898e-03 1.5852740e-03
 1.2922747e-03 7.5944565e-04 4.1705088e-04 2.0019023e-04 1.7351743e-04]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [2.0559290e-01 2.1002431e-01 7.8668199e-02 4.1724760e-03 6.5351144e-04
 3.9613896e-04 2.5020604e-04 2.0579659e-04 2.0401912e-04 2.0195013e-04]  taking action:  1
Leaf selection - depth:  7
Leaf selection - action scores:  [8.4912795e-01 7.7578626e-03 1.5562820e-03 5.0958275e-04 4.1379820e-04
 3.4618741e-04 2.9256401e-04 2.0937819e-04 1.5480096e-04 1.0501403e-04]  taking action:  0
Leaf selection - depth:  8
Leaf selection - action scores:  [1.0974989e+00 9.1428407e-02 1.5471530e-03 6.9820287e-04 5.9690862e-04
 1.2770735e-04 1.2355270e-04 9.8725250e-05 5.7299749e-05 3.6226007e-05]  taking action:  0
Leaf selection - depth:  9
Leaf selection - action scores:  [1.8602320e+00 6.6955738e-02 2.2082862e-02 2.9055038e-04 2.4883015e-04
 2.2713705e-04 1.8054452e-04 1.0988072e-04 9.6923533e-05 7.9278878e-05]  taking action:  0
Adding child.
Leaf selection - depth:  10
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  18
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
  wire c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15, c16, c17, c18, c19, c20, c21, c22, c23, c24, c25, c26, c27, c28, c29, c30, c31, c32, c33, c34, c35, c36, c37, c38, c39, c40, c41, c42, c43, c44, c45, c46, c47, c48, c49, c50, c51, c52, c53, c54, c55, c56, c57, c58, c59, c60, c61, c62, c63;
  adder_8 a1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
  adder_8 a3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
  adder_8 a4(sum[31:24], c4, in1[31:24], in2[31:24], c3);
  adder_8 a5(sum[39:32], c5, in1[39:32], in2[39:32], c4);
  adder_8 a6(sum[47:40], c6, in1[47:40], in2[47:40], c5);
  adder_8 a7(sum[55:48], c7, in1[55:48], in2[55:48], c6);
  adder_8 a8(sum[63:56], cout, in1[63:56], in2[63:56], c7);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 failed\n'
Tokens:  455
LLM generates return in:  200.994205  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  71.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.06892292 -0.03120506  0.00747637  0.00434618  0.00172015  0.00149971
  0.03623892  0.00082769  0.00073669  0.0006371 ]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [ 0.06046793 -0.0020789   0.03669678  0.03426444  0.01784274  0.01613483
  0.01587475  0.0072139   0.00503873  0.00370864]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.06069939 0.02896613 0.05802407 0.05204498 0.0151901  0.01155104
 0.01116669 0.00782928 0.00778485 0.00460383]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [ 0.0948725   0.08484359 -0.38312846  0.00567273  0.01041645  0.00703217
  0.00496842  0.00488014  0.00401999  0.00347212]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.182355   0.09130394 0.08368619 0.06432519 0.02363433 0.01022497
 0.01003914 0.00904514 0.00671796 0.00668491]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [2.0095372e-01 8.1501700e-02 6.8111476e-03 2.0412582e-03 1.6209027e-03
 1.3213182e-03 7.7651400e-04 4.2642400e-04 2.0468945e-04 1.7741718e-04]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [2.1264586e-01 1.5338533e-01 8.0519460e-02 4.2706649e-03 6.6889025e-04
 4.0546112e-04 2.5609403e-04 2.1063953e-04 2.0882022e-04 2.0670253e-04]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [2.6119471e-01 6.2194355e-03 3.2439285e-03 3.3225649e-04 2.2345824e-04
 1.6300601e-04 1.5144762e-04 8.1888320e-05 4.3663440e-05 2.3553579e-05]  taking action:  0
Leaf selection - depth:  8
Leaf selection - action scores:  [2.7047253e-01 5.9101105e-02 1.2289555e-03 1.1907447e-03 5.0166057e-04
 9.1864516e-05 8.4380685e-05 7.7195546e-05 5.2950127e-05 5.1039104e-05]  taking action:  0
Leaf selection - depth:  9
Leaf selection - action scores:  [2.84548074e-01 5.17673083e-02 3.48591385e-03 3.05493129e-03
 3.90539208e-04 2.81948014e-04 2.67891737e-04 1.03459686e-04
 9.46947184e-05 9.42557599e-05]  taking action:  0
Leaf selection - depth:  10
Leaf selection - action scores:  [3.0380768e-01 5.8741109e-03 4.6659522e-03 1.0153305e-03 5.1004189e-04
 3.0889144e-04 2.4272746e-04 2.1050908e-04 1.8137884e-04 1.6849450e-04]  taking action:  0
Leaf selection - depth:  11
Leaf selection - action scores:  [3.0377436e-01 2.2824587e-01 6.8146986e-04 4.1945401e-04 3.1823094e-04
 1.2200941e-04 4.9554939e-05 4.2955977e-05 3.9232003e-05 2.5512005e-05]  taking action:  0
Leaf selection - depth:  12
Leaf selection - action scores:  [3.4026974e-01 2.8397251e-02 3.1170778e-03 2.1649096e-03 8.3041057e-04
 4.5445844e-04 3.2372552e-04 1.5235465e-04 1.4282289e-04 1.3153646e-04]  taking action:  0
Leaf selection - depth:  13
Leaf selection - action scores:  [3.6653778e-01 6.0557756e-03 2.4007482e-03 9.5567334e-04 4.2293043e-04
 3.8601499e-04 2.4177958e-04 2.2331803e-04 1.7550244e-04 8.4018320e-05]  taking action:  0
Leaf selection - depth:  14
Leaf selection - action scores:  [3.91058683e-01 4.36474271e-02 2.87553295e-04 1.01331134e-04
 6.24330496e-05 4.85495184e-05 4.34100766e-05 3.10996184e-05
 2.49755212e-05 1.70495059e-05]  taking action:  0
Leaf selection - depth:  15
Leaf selection - action scores:  [4.2860213e-01 8.4731597e-03 8.7348220e-04 6.9574744e-04 3.8804326e-04
 1.1403350e-04 4.6732177e-05 4.2997537e-05 3.7581023e-05 2.9822630e-05]  taking action:  0
Leaf selection - depth:  16
Leaf selection - action scores:  [4.7139204e-01 2.1018661e-03 5.2465883e-04 1.7306823e-04 1.3419568e-04
 1.2161367e-04 1.1182483e-04 7.1605988e-05 6.4251857e-05 4.0102404e-05]  taking action:  0
Leaf selection - depth:  17
Leaf selection - action scores:  [5.2443391e-01 3.7473845e-03 2.0458201e-04 2.0006257e-04 1.6207372e-04
 2.9091709e-05 2.6411821e-05 2.5872134e-05 2.0604415e-05 1.8165863e-05]  taking action:  0
Leaf selection - depth:  18
Leaf selection - action scores:  [5.9464306e-01 5.7123182e-03 3.9132292e-04 3.5667617e-04 1.6889759e-04
 6.1434439e-05 3.0366113e-05 2.0261865e-05 2.0107100e-05 1.8347995e-05]  taking action:  0
Leaf selection - depth:  19
Leaf selection - action scores:  [6.9597101e-01 1.4256660e-03 6.9262533e-05 6.3672444e-05 5.7823348e-05
 3.9206509e-05 3.6568752e-05 3.5882655e-05 3.2787517e-05 3.1847565e-05]  taking action:  0
Leaf selection - depth:  20
Leaf selection - action scores:  [8.47687721e-01 1.67112872e-02 1.08125991e-04 4.60359624e-05
 1.13954375e-05 8.46268631e-06 4.84793600e-06 4.70843406e-06
 2.83058216e-06 2.12996247e-06]  taking action:  0
Leaf selection - depth:  21
Leaf selection - action scores:  [1.14318740e+00 3.05964099e-03 2.50251644e-04 1.96381327e-04
 1.02972183e-04 4.71178537e-05 1.19642655e-05 1.00659317e-05
 9.72776979e-06 9.06084733e-06]  taking action:  0
Leaf selection - depth:  22
Leaf selection - action scores:  [1.9507254e+00 2.6263451e-04 1.8284415e-04 1.6594760e-04 1.4707303e-04
 2.0254514e-05 1.4547766e-05 1.1773772e-05 1.1692492e-05 1.1445100e-05]  taking action:  0
Adding child.
Leaf selection - depth:  23
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  11
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42,c43,c44,c45,c46,c47,c48,c49,c50,c51,c52,c53,c54,c55,c56,c57,c58,c59,c60,c61,c62,c63;
  adder_8 a1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
  adder_8 a3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
  adder_8 a4(sum[31:24], c4, in1[31:24], in2[31:24], c3);
  adder_8 a5(sum[39:32], c5, in1[39:32], in2[39:32], c4);
  adder_8 a6(sum[47:40], c6, in1[47:40], in2[47:40], c5);
  adder_8 a7(sum[55:48], c7, in1[55:48], in2[55:48], c6);
  adder_8 a8(sum[63:56], cout, in1[63:56], in2[63:56], c7);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 failed\n'
Tokens:  442
LLM generates return in:  196.749982  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  72.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.06663509 -0.03072897  0.00752811  0.00437626  0.00173206  0.00151009
  0.03676052  0.00083342  0.00074179  0.00064151]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [ 0.05905905 -0.0015374   0.03711144  0.03465162  0.01804436  0.01631715
  0.01605413  0.00729542  0.00509567  0.00375055]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.05915751 0.03009792 0.05871076 0.05266092 0.01536987 0.01168774
 0.01129885 0.00792194 0.00787698 0.00465831]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [ 0.08940991  0.0883743  -0.3816396   0.00638196  0.01054915  0.00712176
  0.00503172  0.00494231  0.0040712   0.00351635]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.17608407 0.09318671 0.08541186 0.06565163 0.02412168 0.01043581
 0.01024615 0.00923166 0.00685649 0.00682275]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [1.9396670e-01 8.3254620e-02 6.9576404e-03 2.0851612e-03 1.6557646e-03
 1.3497369e-03 7.9321512e-04 4.3559546e-04 2.0909187e-04 1.8123304e-04]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [0.2017881  0.15863061 0.08232912 0.00436665 0.00068392 0.00041457
 0.00026185 0.00021537 0.00021351 0.00021135]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [2.4963304e-01 6.3997465e-03 3.3379749e-03 3.4188913e-04 2.2993663e-04
 1.6773182e-04 1.5583832e-04 8.4262385e-05 4.4929311e-05 2.4236433e-05]  taking action:  0
Leaf selection - depth:  8
Leaf selection - action scores:  [2.5781488e-01 6.0920022e-02 1.2667782e-03 1.2273914e-03 5.1709986e-04
 9.4691779e-05 8.6977620e-05 7.9571342e-05 5.4579741e-05 5.2609899e-05]  taking action:  0
Leaf selection - depth:  9
Leaf selection - action scores:  [2.70463645e-01 5.34650460e-02 3.60023626e-03 3.15511948e-03
 4.03347134e-04 2.91194650e-04 2.76677398e-04 1.06852705e-04
 9.78002790e-05 9.73469287e-05]  taking action:  0
Leaf selection - depth:  10
Leaf selection - action scores:  [2.8787419e-01 6.0802829e-03 4.8297197e-03 1.0509669e-03 5.2794354e-04
 3.1973302e-04 2.5124679e-04 2.1789761e-04 1.8774494e-04 1.7440839e-04]  taking action:  0
Leaf selection - depth:  11
Leaf selection - action scores:  [2.8649402e-01 2.3686191e-01 7.0719467e-04 4.3528798e-04 3.3024384e-04
 1.2661515e-04 5.1425588e-05 4.4577519e-05 4.0712970e-05 2.6475056e-05]  taking action:  0
Leaf selection - depth:  12
Leaf selection - action scores:  [3.1971970e-01 2.9556794e-02 3.2443574e-03 2.2533094e-03 8.6431869e-04
 4.7301533e-04 3.3694418e-04 1.5857574e-04 1.4865477e-04 1.3690749e-04]  taking action:  0
Leaf selection - depth:  13
Leaf selection - action scores:  [3.4258014e-01 6.3250512e-03 2.5074997e-03 9.9816825e-04 4.4173640e-04
 4.0317950e-04 2.5253053e-04 2.3324807e-04 1.8330631e-04 8.7754270e-05]  taking action:  0
Leaf selection - depth:  14
Leaf selection - action scores:  [3.63035977e-01 4.57778126e-02 3.01588472e-04 1.06276995e-04
 6.54803443e-05 5.09191668e-05 4.55288755e-05 3.26175577e-05
 2.61945497e-05 1.78816736e-05]  taking action:  0
Leaf selection - depth:  15
Leaf selection - action scores:  [3.9468396e-01 8.9314952e-03 9.2073111e-04 7.3338224e-04 4.0903353e-04
 1.2020187e-04 4.9260041e-05 4.5323388e-05 3.9613878e-05 3.1435811e-05]  taking action:  0
Leaf selection - depth:  16
Leaf selection - action scores:  [4.2953786e-01 2.2293655e-03 5.5648468e-04 1.8356656e-04 1.4233601e-04
 1.2899078e-04 1.1860814e-04 7.5949611e-05 6.8149384e-05 4.2535019e-05]  taking action:  0
Leaf selection - depth:  17
Leaf selection - action scores:  [4.7119755e-01 4.0061227e-03 2.1870737e-04 2.1387589e-04 1.7326408e-04
 3.1100346e-05 2.8235423e-05 2.7658474e-05 2.2027047e-05 1.9420124e-05]  taking action:  0
Leaf selection - depth:  18
Leaf selection - action scores:  [5.2391487e-01 6.1700093e-03 4.2267705e-04 3.8525433e-04 1.8243026e-04
 6.6356784e-05 3.2799151e-05 2.1885315e-05 2.1718150e-05 1.9818101e-05]  taking action:  0
Leaf selection - depth:  19
Leaf selection - action scores:  [5.9564519e-01 1.5617389e-03 7.5873308e-05 6.9749665e-05 6.3342304e-05
 4.2948577e-05 4.0059062e-05 3.9307481e-05 3.5916928e-05 3.4887260e-05]  taking action:  0
Leaf selection - depth:  20
Leaf selection - action scores:  [6.9170946e-01 1.8683786e-02 1.2088853e-04 5.1469768e-05 1.2740486e-05
 9.4615707e-06 5.4201573e-06 5.2641890e-06 3.1646871e-06 2.3813702e-06]  taking action:  0
Leaf selection - depth:  21
Leaf selection - action scores:  [8.5184932e-01 3.5329689e-03 2.8896570e-04 2.2676161e-04 1.1890203e-04
 5.4407010e-05 1.3815144e-05 1.1623137e-05 1.1232661e-05 1.0462565e-05]  taking action:  0
Leaf selection - depth:  22
Leaf selection - action scores:  [1.1445706e+00 3.2166028e-04 2.2393744e-04 2.0324347e-04 1.8012695e-04
 2.4806614e-05 1.7817303e-05 1.4419867e-05 1.4320320e-05 1.4017328e-05]  taking action:  0
Leaf selection - depth:  23
Leaf selection - action scores:  [1.7438841e+00 2.0710312e-01 2.4453553e-04 1.0433305e-04 5.7845467e-05
 3.2083299e-05 2.8257735e-05 2.6627229e-05 9.2460014e-06 9.0741569e-06]  taking action:  0
Adding child.
Leaf selection - depth:  24
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  66
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42,c43,c44,c45,c46,c47,c48,c49,c50,c51,c52,c53,c54,c55,c56,c57,c58,c59,c60,c61,c62,c63;
  adder_8 a1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
  adder_8 a3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
  adder_8 a4(sum[31:24], c4, in1[31:24], in2[31:24], c3);
  adder_8 a5(sum[39:32], c5, in1[39:32], in2[39:32], c4);
  adder_8 a6(sum[47:40], c6, in1[47:40], in2[47:40], c5);
  adder_8 a7(sum[55:48], c7, in1[55:48], in2[55:48], c6);
  adder_8 a8(sum[63:56], cout, in1[63:56], in2[63:56], c7);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 failed\n'
Tokens:  441
LLM generates return in:  196.394854  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  73.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.06443693 -0.03025612  0.0075795   0.00440613  0.00174388  0.0015204
  0.03727855  0.0008391   0.00074685  0.00064589]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [ 0.05768915 -0.00100189  0.03752153  0.03503452  0.01824375  0.01649745
  0.01623153  0.00737604  0.00515197  0.00379199]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.05766293 0.03121662 0.05938953 0.05326974 0.01554757 0.01182287
 0.01142947 0.00801353 0.00796805 0.00471217]  taking action:  2
Adding child.
Leaf selection - depth:  3
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  7785
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
  genvar i;
  generate
    for(i=0;i<32;i=i+1) begin
      adder_8 a8(sum[i+8*i],cout,in1[i+8*i],in2[i+8*i],cin);
    end
  endgenerate
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Verilog compilation failed, error:  24
Compilation output:  b'output_files/2329780_adder_32/2329780_adder_32.v:39: warning: Port 1 (sum) of adder_8 expects 8 bits, got 1.\noutput_files/2329780_adder_32/2329780_adder_32.v:39:        : Padding 7 high bits of the port.\noutput_files/2329780_adder_32/2329780_adder_32.v:39: warning: Port 3 (in1) of adder_8 expects 8 bits, got 1.\noutput_files/2329780_adder_32/2329780_adder_32.v:39:        : Padding 7 high bits of the port.\noutput_files/2329780_adder_32/2329780_adder_32.v:39: warning: Port 4 (in2) of adder_8 expects 8 bits, got 1.\noutput_files/2329780_adder_32/2329780_adder_32.v:39:        : Padding 7 high bits of the port.\noutput_files/2329780_adder_32/2329780_adder_32.v:39: warning: Port 1 (sum) of adder_8 expects 8 bits, got 1.\noutput_files/2329780_adder_32/2329780_adder_32.v:39:        : Padding 7 high bits of the port.\noutput_files/2329780_adder_32/2329780_adder_32.v:39: warning: Port 3 (in1) of adder_8 expects 8 bits, got 1.\noutput_files/2329780_adder_32/2329780_adder_32.v:39:        : Padding 7 high bits of the port.\noutput_files/2329780_adder_32/2329780_adder_32.v:39: warning: Port 4 (in2) of adder_8 expects 8 bits, got 1.\noutput_files/2329780_adder_32/2329780_adder_32.v:39:        : Padding 7 high bits of the port.\noutput_files/2329780_adder_32/2329780_adder_32.v:39: warning: Port 1 (sum) of adder_8 expects 8 bits, got 1.\noutput_files/2329780_adder_32/2329780_adder_32.v:39:        : Padding 7 high bits of the port.\noutput_files/2329780_adder_32/2329780_adder_32.v:39: warning: Port 3 (in1) of adder_8 expects 8 bits, got 1.\noutput_files/2329780_adder_32/2329780_adder_32.v:39:        : Padding 7 high bits of the port.\noutput_files/2329780_adder_32/2329780_adder_32.v:39: warning: Port 4 (in2) of adder_8 expects 8 bits, got 1.\noutput_files/2329780_adder_32/2329780_adder_32.v:39:        : Padding 7 high bits of the port.\noutput_files/2329780_adder_32/2329780_adder_32.v:39: warning: Port 1 (sum) of adder_8 expects 8 bits, got 1.\noutput_files/2329780_adder_32/2329780_adder_32.v:39:        : Padding 7 high bits of the port.\noutput_files/2329780_adder_32/2329780_adder_32.v:39: warning: Port 3 (in1) of adder_8 expects 8 bits, got 1.\noutput_files/2329780_adder_32/2329780_adder_32.v:39:        : Padding 7 high bits of the port.\noutput_files/2329780_adder_32/2329780_adder_32.v:39: warning: Port 4 (in2) of adder_8 expects 8 bits, got 1.\noutput_files/2329780_adder_32/2329780_adder_32.v:39:        : Padding 7 high bits of the port.\noutput_files/2329780_adder_32/2329780_adder_32.v:39: warning: Port 1 (sum) of adder_8 expects 8 bits, got 1.\noutput_files/2329780_adder_32/2329780_adder_32.v:39:        : Padding 7 high bits of the port.\noutput_files/2329780_adder_32/2329780_adder_32.v:39: warning: Port 3 (in1) of adder_8 expects 8 bits, got 1.\noutput_files/2329780_adder_32/2329780_adder_32.v:39:        : Padding 7 high bits of the port.\noutput_files/2329780_adder_32/2329780_adder_32.v:39: warning: Port 4 (in2) of adder_8 expects 8 bits, got 1.\noutput_files/2329780_adder_32/2329780_adder_32.v:39:        : Padding 7 high bits of the port.\noutput_files/2329780_adder_32/2329780_adder_32.v:39: warning: Port 1 (sum) of adder_8 expects 8 bits, got 1.\noutput_files/2329780_adder_32/2329780_adder_32.v:39:        : Padding 7 high bits of the port.\noutput_files/2329780_adder_32/2329780_adder_32.v:39: warning: Port 3 (in1) of adder_8 expects 8 bits, got 1.\noutput_files/2329780_adder_32/2329780_adder_32.v:39:        : Padding 7 high bits of the port.\noutput_files/2329780_adder_32/2329780_adder_32.v:39: warning: Port 4 (in2) of adder_8 expects 8 bits, got 1.\noutput_files/2329780_adder_32/2329780_adder_32.v:39:        : Padding 7 high bits of the port.\noutput_files/2329780_adder_32/2329780_adder_32.v:39: warning: Port 1 (sum) of adder_8 expects 8 bits, got 1.\noutput_files/2329780_adder_32/2329780_adder_32.v:39:        : Padding 7 high bits of the port.\noutput_files/2329780_adder_32/2329780_adder_32.v:39: warning: Port 3 (in1) of adder_8 expects 8 bits, got 1.\noutput_files/2329780_adder_32/2329780_adder_32.v:39:        : Padding 7 high bits of the port.\noutput_files/2329780_adder_32/2329780_adder_32.v:39: warning: Port 4 (in2) of adder_8 expects 8 bits, got 1.\noutput_files/2329780_adder_32/2329780_adder_32.v:39:        : Padding 7 high bits of the port.\noutput_files/2329780_adder_32/2329780_adder_32.v:39: warning: Port 1 (sum) of adder_8 expects 8 bits, got 1.\noutput_files/2329780_adder_32/2329780_adder_32.v:39:        : Padding 7 high bits of the port.\noutput_files/2329780_adder_32/2329780_adder_32.v:39: warning: Port 3 (in1) of adder_8 expects 8 bits, got 1.\noutput_files/2329780_adder_32/2329780_adder_32.v:39:        : Padding 7 high bits of the port.\noutput_files/2329780_adder_32/2329780_adder_32.v:39: warning: Port 4 (in2) of adder_8 expects 8 bits, got 1.\noutput_files/2329780_adder_32/2329780_adder_32.v:39:        : Padding 7 high bits of the port.\noutput_files/2329780_adder_32/2329780_adder_32.v:39: error: Index sum[72] is out of range.\noutput_files/2329780_adder_32/2329780_adder_32.v:39: warning: Port 1 (sum) of adder_8 expects 8 bits, got 1.\noutput_files/2329780_adder_32/2329780_adder_32.v:39:        : Padding 7 high bits of the port.\noutput_files/2329780_adder_32/2329780_adder_32.v:39: warning: Port 3 (in1) of adder_8 expects 8 bits, got 1.\noutput_files/2329780_adder_32/2329780_adder_32.v:39:        : Padding 7 high bits of the port.\noutput_files/2329780_adder_32/2329780_adder_32.v:39: warning: Port 4 (in2) of adder_8 expects 8 bits, got 1.\noutput_files/2329780_adder_32/2329780_adder_32.v:39:        : Padding 7 high bits of the port.\noutput_files/2329780_adder_32/2329780_adder_32.v:39: error: Index sum[81] is out of range.\noutput_files/2329780_adder_32/2329780_adder_32.v:39: warning: Port 1 (sum) of adder_8 expects 8 bits, got 1.\noutput_files/2329780_adder_32/2329780_adder_32.v:39:        : Padding 7 high bits of the port.\noutput_files/2329780_adder_32/2329780_adder_32.v:39: warning: Port 3 (in1) of adder_8 expects 8 bits, got 1.\noutput_files/2329780_adder_32/2329780_adder_32.v:39:        : Padding 7 high bits of the port.\noutput_files/2329780_adder_32/2329780_adder_32.v:39: warning: Port 4 (in2) of adder_8 expects 8 bits, got 1.\noutput_files/2329780_adder_32/2329780_adder_32.v:39:        : Padding 7 high bits of the port.\noutput_files/2329780_adder_32/2329780_adder_32.v:39: error: Index sum[90] is out of range.\noutput_files/2329780_adder_32/2329780_adder_32.v:39: warning: Port 1 (sum) of adder_8 expects 8 bits, got 1.\noutput_files/2329780_adder_32/2329780_adder_32.v:39:        : Padding 7 high bits of the port.\noutput_files/2329780_adder_32/2329780_adder_32.v:39: warning: Port 3 (in1) of adder_8 expects 8 bits, got 1.\noutput_files/2329780_adder_32/2329780_adder_32.v:39:        : Padding 7 high bits of the port.\noutput_files/2329780_adder_32/2329780_adder_32.v:39: warning: Port 4 (in2) of adder_8 expects 8 bits, got 1.\noutput_files/2329780_adder_32/2329780_adder_32.v:39:        : Padding 7 high bits of the port.\noutput_files/2329780_adder_32/2329780_adder_32.v:39: error: Index sum[99] is out of range.\noutput_files/2329780_adder_32/2329780_adder_32.v:39: warning: Port 1 (sum) of adder_8 expects 8 bits, got 1.\noutput_files/2329780_adder_32/2329780_adder_32.v:39:        : Padding 7 high bits of the port.\noutput_files/2329780_adder_32/2329780_adder_32.v:39: warning: Port 3 (in1) of adder_8 expects 8 bits, got 1.\noutput_files/2329780_adder_32/2329780_adder_32.v:39:        : Padding 7 high bits of the port.\noutput_files/2329780_adder_32/2329780_adder_32.v:39: warning: Port 4 (in2) of adder_8 expects 8 bits, got 1.\noutput_files/2329780_adder_32/2329780_adder_32.v:39:        : Padding 7 high bits of the port.\noutput_files/2329780_adder_32/2329780_adder_32.v:39: error: Index sum[108] is out of range.\noutput_files/2329780_adder_32/2329780_adder_32.v:39: warning: Port 1 (sum) of adder_8 expects 8 bits, got 1.\noutput_files/2329780_adder_32/2329780_adder_32.v:39:        : Padding 7 high bits of the port.\noutput_files/2329780_adder_32/2329780_adder_32.v:39: warning: Port 3 (in1) of adder_8 expects 8 bits, got 1.\noutput_files/2329780_adder_32/2329780_adder_32.v:39:        : Padding 7 high bits of the port.\noutput_files/2329780_adder_32/2329780_adder_32.v:39: warning: Port 4 (in2) of adder_8 expects 8 bits, got 1.\noutput_files/2329780_adder_32/2329780_adder_32.v:39:        : Padding 7 high bits of the port.\noutput_files/2329780_adder_32/2329780_adder_32.v:39: error: Index sum[117] is out of range.\noutput_files/2329780_adder_32/2329780_adder_32.v:39: warning: Port 1 (sum) of adder_8 expects 8 bits, got 1.\noutput_files/2329780_adder_32/2329780_adder_32.v:39:        : Padding 7 high bits of the port.\noutput_files/2329780_adder_32/2329780_adder_32.v:39: warning: Port 3 (in1) of adder_8 expects 8 bits, got 1.\noutput_files/2329780_adder_32/2329780_adder_32.v:39:        : Padding 7 high bits of the port.\noutput_files/2329780_adder_32/2329780_adder_32.v:39: warning: Port 4 (in2) of adder_8 expects 8 bits, got 1.\noutput_files/2329780_adder_32/2329780_adder_32.v:39:        : Padding 7 high bits of the port.\noutput_files/2329780_adder_32/2329780_adder_32.v:39: error: Index sum[126] is out of range.\noutput_files/2329780_adder_32/2329780_adder_32.v:39: warning: Port 1 (sum) of adder_8 expects 8 bits, got 1.\noutput_files/2329780_adder_32/2329780_adder_32.v:39:        : Padding 7 high bits of the port.\noutput_files/2329780_adder_32/2329780_adder_32.v:39: warning: Port 3 (in1) of adder_8 expects 8 bits, got 1.\noutput_files/2329780_adder_32/2329780_adder_32.v:39:        : Padding 7 high bits of the port.\noutput_files/2329780_adder_32/2329780_adder_32.v:39: warning: Port 4 (in2) of adder_8 expects 8 bits, got 1.\noutput_files/2329780_adder_32/2329780_adder_32.v:39:        : Padding 7 high bits of the port.\noutput_files/2329780_adder_32/2329780_adder_32.v:39: error: Index sum[135] is out of range.\noutput_files/2329780_adder_32/2329780_adder_32.v:39: warning: Port 1 (sum) of adder_8 expects 8 bits, got 1.\noutput_files/2329780_adder_32/2329780_adder_32.v:39:        : Padding 7 high bits of the port.\noutput_files/2329780_adder_32/2329780_adder_32.v:39: warning: Port 3 (in1) of adder_8 expects 8 bits, got 1.\noutput_files/2329780_adder_32/2329780_adder_32.v:39:        : Padding 7 high bits of the port.\noutput_files/2329780_adder_32/2329780_adder_32.v:39: warning: Port 4 (in2) of adder_8 expects 8 bits, got 1.\noutput_files/2329780_adder_32/2329780_adder_32.v:39:        : Padding 7 high bits of the port.\noutput_files/2329780_adder_32/2329780_adder_32.v:39: error: Index sum[144] is out of range.\noutput_files/2329780_adder_32/2329780_adder_32.v:39: warning: Port 1 (sum) of adder_8 expects 8 bits, got 1.\noutput_files/2329780_adder_32/2329780_adder_32.v:39:        : Padding 7 high bits of the port.\noutput_files/2329780_adder_32/2329780_adder_32.v:39: warning: Port 3 (in1) of adder_8 expects 8 bits, got 1.\noutput_files/2329780_adder_32/2329780_adder_32.v:39:        : Padding 7 high bits of the port.\noutput_files/2329780_adder_32/2329780_adder_32.v:39: warning: Port 4 (in2) of adder_8 expects 8 bits, got 1.\noutput_files/2329780_adder_32/2329780_adder_32.v:39:        : Padding 7 high bits of the port.\noutput_files/2329780_adder_32/2329780_adder_32.v:39: error: Index sum[153] is out of range.\noutput_files/2329780_adder_32/2329780_adder_32.v:39: warning: Port 1 (sum) of adder_8 expects 8 bits, got 1.\noutput_files/2329780_adder_32/2329780_adder_32.v:39:        : Padding 7 high bits of the port.\noutput_files/2329780_adder_32/2329780_adder_32.v:39: warning: Port 3 (in1) of adder_8 expects 8 bits, got 1.\noutput_files/2329780_adder_32/2329780_adder_32.v:39:        : Padding 7 high bits of the port.\noutput_files/2329780_adder_32/2329780_adder_32.v:39: warning: Port 4 (in2) of adder_8 expects 8 bits, got 1.\noutput_files/2329780_adder_32/2329780_adder_32.v:39:        : Padding 7 high bits of the port.\noutput_files/2329780_adder_32/2329780_adder_32.v:39: error: Index sum[162] is out of range.\noutput_files/2329780_adder_32/2329780_adder_32.v:39: warning: Port 1 (sum) of adder_8 expects 8 bits, got 1.\noutput_files/2329780_adder_32/2329780_adder_32.v:39:        : Padding 7 high bits of the port.\noutput_files/2329780_adder_32/2329780_adder_32.v:39: warning: Port 3 (in1) of adder_8 expects 8 bits, got 1.\noutput_files/2329780_adder_32/2329780_adder_32.v:39:        : Padding 7 high bits of the port.\noutput_files/2329780_adder_32/2329780_adder_32.v:39: warning: Port 4 (in2) of adder_8 expects 8 bits, got 1.\noutput_files/2329780_adder_32/2329780_adder_32.v:39:        : Padding 7 high bits of the port.\noutput_files/2329780_adder_32/2329780_adder_32.v:39: error: Index sum[171] is out of range.\noutput_files/2329780_adder_32/2329780_adder_32.v:39: warning: Port 1 (sum) of adder_8 expects 8 bits, got 1.\noutput_files/2329780_adder_32/2329780_adder_32.v:39:        : Padding 7 high bits of the port.\noutput_files/2329780_adder_32/2329780_adder_32.v:39: warning: Port 3 (in1) of adder_8 expects 8 bits, got 1.\noutput_files/2329780_adder_32/2329780_adder_32.v:39:        : Padding 7 high bits of the port.\noutput_files/2329780_adder_32/2329780_adder_32.v:39: warning: Port 4 (in2) of adder_8 expects 8 bits, got 1.\noutput_files/2329780_adder_32/2329780_adder_32.v:39:        : Padding 7 high bits of the port.\noutput_files/2329780_adder_32/2329780_adder_32.v:39: error: Index sum[180] is out of range.\noutput_files/2329780_adder_32/2329780_adder_32.v:39: warning: Port 1 (sum) of adder_8 expects 8 bits, got 1.\noutput_files/2329780_adder_32/2329780_adder_32.v:39:        : Padding 7 high bits of the port.\noutput_files/2329780_adder_32/2329780_adder_32.v:39: warning: Port 3 (in1) of adder_8 expects 8 bits, got 1.\noutput_files/2329780_adder_32/2329780_adder_32.v:39:        : Padding 7 high bits of the port.\noutput_files/2329780_adder_32/2329780_adder_32.v:39: warning: Port 4 (in2) of adder_8 expects 8 bits, got 1.\noutput_files/2329780_adder_32/2329780_adder_32.v:39:        : Padding 7 high bits of the port.\noutput_files/2329780_adder_32/2329780_adder_32.v:39: error: Index sum[189] is out of range.\noutput_files/2329780_adder_32/2329780_adder_32.v:39: warning: Port 1 (sum) of adder_8 expects 8 bits, got 1.\noutput_files/2329780_adder_32/2329780_adder_32.v:39:        : Padding 7 high bits of the port.\noutput_files/2329780_adder_32/2329780_adder_32.v:39: warning: Port 3 (in1) of adder_8 expects 8 bits, got 1.\noutput_files/2329780_adder_32/2329780_adder_32.v:39:        : Padding 7 high bits of the port.\noutput_files/2329780_adder_32/2329780_adder_32.v:39: warning: Port 4 (in2) of adder_8 expects 8 bits, got 1.\noutput_files/2329780_adder_32/2329780_adder_32.v:39:        : Padding 7 high bits of the port.\noutput_files/2329780_adder_32/2329780_adder_32.v:39: error: Index sum[198] is out of range.\noutput_files/2329780_adder_32/2329780_adder_32.v:39: warning: Port 1 (sum) of adder_8 expects 8 bits, got 1.\noutput_files/2329780_adder_32/2329780_adder_32.v:39:        : Padding 7 high bits of the port.\noutput_files/2329780_adder_32/2329780_adder_32.v:39: warning: Port 3 (in1) of adder_8 expects 8 bits, got 1.\noutput_files/2329780_adder_32/2329780_adder_32.v:39:        : Padding 7 high bits of the port.\noutput_files/2329780_adder_32/2329780_adder_32.v:39: warning: Port 4 (in2) of adder_8 expects 8 bits, got 1.\noutput_files/2329780_adder_32/2329780_adder_32.v:39:        : Padding 7 high bits of the port.\noutput_files/2329780_adder_32/2329780_adder_32.v:39: error: Index sum[207] is out of range.\noutput_files/2329780_adder_32/2329780_adder_32.v:39: warning: Port 1 (sum) of adder_8 expects 8 bits, got 1.\noutput_files/2329780_adder_32/2329780_adder_32.v:39:        : Padding 7 high bits of the port.\noutput_files/2329780_adder_32/2329780_adder_32.v:39: warning: Port 3 (in1) of adder_8 expects 8 bits, got 1.\noutput_files/2329780_adder_32/2329780_adder_32.v:39:        : Padding 7 high bits of the port.\noutput_files/2329780_adder_32/2329780_adder_32.v:39: warning: Port 4 (in2) of adder_8 expects 8 bits, got 1.\noutput_files/2329780_adder_32/2329780_adder_32.v:39:        : Padding 7 high bits of the port.\noutput_files/2329780_adder_32/2329780_adder_32.v:39: error: Index sum[216] is out of range.\noutput_files/2329780_adder_32/2329780_adder_32.v:39: warning: Port 1 (sum) of adder_8 expects 8 bits, got 1.\noutput_files/2329780_adder_32/2329780_adder_32.v:39:        : Padding 7 high bits of the port.\noutput_files/2329780_adder_32/2329780_adder_32.v:39: warning: Port 3 (in1) of adder_8 expects 8 bits, got 1.\noutput_files/2329780_adder_32/2329780_adder_32.v:39:        : Padding 7 high bits of the port.\noutput_files/2329780_adder_32/2329780_adder_32.v:39: warning: Port 4 (in2) of adder_8 expects 8 bits, got 1.\noutput_files/2329780_adder_32/2329780_adder_32.v:39:        : Padding 7 high bits of the port.\noutput_files/2329780_adder_32/2329780_adder_32.v:39: error: Index sum[225] is out of range.\noutput_files/2329780_adder_32/2329780_adder_32.v:39: warning: Port 1 (sum) of adder_8 expects 8 bits, got 1.\noutput_files/2329780_adder_32/2329780_adder_32.v:39:        : Padding 7 high bits of the port.\noutput_files/2329780_adder_32/2329780_adder_32.v:39: warning: Port 3 (in1) of adder_8 expects 8 bits, got 1.\noutput_files/2329780_adder_32/2329780_adder_32.v:39:        : Padding 7 high bits of the port.\noutput_files/2329780_adder_32/2329780_adder_32.v:39: warning: Port 4 (in2) of adder_8 expects 8 bits, got 1.\noutput_files/2329780_adder_32/2329780_adder_32.v:39:        : Padding 7 high bits of the port.\noutput_files/2329780_adder_32/2329780_adder_32.v:39: error: Index sum[234] is out of range.\noutput_files/2329780_adder_32/2329780_adder_32.v:39: warning: Port 1 (sum) of adder_8 expects 8 bits, got 1.\noutput_files/2329780_adder_32/2329780_adder_32.v:39:        : Padding 7 high bits of the port.\noutput_files/2329780_adder_32/2329780_adder_32.v:39: warning: Port 3 (in1) of adder_8 expects 8 bits, got 1.\noutput_files/2329780_adder_32/2329780_adder_32.v:39:        : Padding 7 high bits of the port.\noutput_files/2329780_adder_32/2329780_adder_32.v:39: warning: Port 4 (in2) of adder_8 expects 8 bits, got 1.\noutput_files/2329780_adder_32/2329780_adder_32.v:39:        : Padding 7 high bits of the port.\noutput_files/2329780_adder_32/2329780_adder_32.v:39: error: Index sum[243] is out of range.\noutput_files/2329780_adder_32/2329780_adder_32.v:39: warning: Port 1 (sum) of adder_8 expects 8 bits, got 1.\noutput_files/2329780_adder_32/2329780_adder_32.v:39:        : Padding 7 high bits of the port.\noutput_files/2329780_adder_32/2329780_adder_32.v:39: warning: Port 3 (in1) of adder_8 expects 8 bits, got 1.\noutput_files/2329780_adder_32/2329780_adder_32.v:39:        : Padding 7 high bits of the port.\noutput_files/2329780_adder_32/2329780_adder_32.v:39: warning: Port 4 (in2) of adder_8 expects 8 bits, got 1.\noutput_files/2329780_adder_32/2329780_adder_32.v:39:        : Padding 7 high bits of the port.\noutput_files/2329780_adder_32/2329780_adder_32.v:39: error: Index sum[252] is out of range.\noutput_files/2329780_adder_32/2329780_adder_32.v:39: warning: Port 1 (sum) of adder_8 expects 8 bits, got 1.\noutput_files/2329780_adder_32/2329780_adder_32.v:39:        : Padding 7 high bits of the port.\noutput_files/2329780_adder_32/2329780_adder_32.v:39: warning: Port 3 (in1) of adder_8 expects 8 bits, got 1.\noutput_files/2329780_adder_32/2329780_adder_32.v:39:        : Padding 7 high bits of the port.\noutput_files/2329780_adder_32/2329780_adder_32.v:39: warning: Port 4 (in2) of adder_8 expects 8 bits, got 1.\noutput_files/2329780_adder_32/2329780_adder_32.v:39:        : Padding 7 high bits of the port.\noutput_files/2329780_adder_32/2329780_adder_32.v:39: error: Index sum[261] is out of range.\noutput_files/2329780_adder_32/2329780_adder_32.v:39: warning: Port 1 (sum) of adder_8 expects 8 bits, got 1.\noutput_files/2329780_adder_32/2329780_adder_32.v:39:        : Padding 7 high bits of the port.\noutput_files/2329780_adder_32/2329780_adder_32.v:39: warning: Port 3 (in1) of adder_8 expects 8 bits, got 1.\noutput_files/2329780_adder_32/2329780_adder_32.v:39:        : Padding 7 high bits of the port.\noutput_files/2329780_adder_32/2329780_adder_32.v:39: warning: Port 4 (in2) of adder_8 expects 8 bits, got 1.\noutput_files/2329780_adder_32/2329780_adder_32.v:39:        : Padding 7 high bits of the port.\noutput_files/2329780_adder_32/2329780_adder_32.v:39: error: Index sum[270] is out of range.\noutput_files/2329780_adder_32/2329780_adder_32.v:39: warning: Port 1 (sum) of adder_8 expects 8 bits, got 1.\noutput_files/2329780_adder_32/2329780_adder_32.v:39:        : Padding 7 high bits of the port.\noutput_files/2329780_adder_32/2329780_adder_32.v:39: warning: Port 3 (in1) of adder_8 expects 8 bits, got 1.\noutput_files/2329780_adder_32/2329780_adder_32.v:39:        : Padding 7 high bits of the port.\noutput_files/2329780_adder_32/2329780_adder_32.v:39: warning: Port 4 (in2) of adder_8 expects 8 bits, got 1.\noutput_files/2329780_adder_32/2329780_adder_32.v:39:        : Padding 7 high bits of the port.\noutput_files/2329780_adder_32/2329780_adder_32.v:39: error: Index sum[279] is out of range.\noutput_files/2329780_adder_32/2329780_adder_32.v:39: warning: Port 1 (sum) of adder_8 expects 8 bits, got 1.\noutput_files/2329780_adder_32/2329780_adder_32.v:39:        : Padding 7 high bits of the port.\noutput_files/2329780_adder_32/2329780_adder_32.v:39: warning: Port 3 (in1) of adder_8 expects 8 bits, got 1.\noutput_files/2329780_adder_32/2329780_adder_32.v:39:        : Padding 7 high bits of the port.\noutput_files/2329780_adder_32/2329780_adder_32.v:39: warning: Port 4 (in2) of adder_8 expects 8 bits, got 1.\noutput_files/2329780_adder_32/2329780_adder_32.v:39:        : Padding 7 high bits of the port.\nadders/ripple_carry/tb_ripplecarry_32.v:14: warning: Port 1 (sum) of adder_32 expects 64 bits, got 32.\nadders/ripple_carry/tb_ripplecarry_32.v:14:        : Padding 32 high bits of the port.\nadders/ripple_carry/tb_ripplecarry_32.v:14: warning: Port 3 (in1) of adder_32 expects 64 bits, got 32.\nadders/ripple_carry/tb_ripplecarry_32.v:14:        : Padding 32 high bits of the port.\nadders/ripple_carry/tb_ripplecarry_32.v:14: warning: Port 4 (in2) of adder_32 expects 64 bits, got 32.\nadders/ripple_carry/tb_ripplecarry_32.v:14:        : Padding 32 high bits of the port.\n24 error(s) during elaboration.\n'
Tokens:  75
LLM generates return in:  24.981861  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  74.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.04317399 -0.02978646  0.00763054  0.0044358   0.00175562  0.00153063
  0.0377931   0.00084476  0.00075188  0.00065024]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [ 0.03635633 -0.00047217  0.03792717  0.03541328  0.01844098  0.01667581
  0.01640701  0.00745578  0.00520767  0.00383299]  taking action:  2
Adding child.
Leaf selection - depth:  2
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  21809
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);

wire c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42,c43,c44,c45,c46,c47,c48,c49,c50,c51,c52,c53,c54,c55,c56,c57,c58,c59,c60,c61,c62,c63;

adder_8 a1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
adder_8 a2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
adder_8 a3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
adder_8 a4(sum[31:24], c4, in1[31:24], in2[31:24], c3);
adder_8 a5(sum[39:32], c5, in1[39:32], in2[39:32], c4);
adder_8 a6(sum[47:40], c6, in1[47:40], in2[47:40], c5);
adder_8 a7(sum[55:48], c7, in1[55:48], in2[55:48], c6);
adder_8 a8(sum[63:56], cout, in1[63:56], in2[63:56], c7);

endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 failed\n'
Tokens:  457
LLM generates return in:  200.124573  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  75.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.04153801 -0.02931992  0.00768124  0.00446528  0.00176729  0.0015408
  0.03830422  0.00085037  0.00075688  0.00065456]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [ 3.8504809e-02  5.1952899e-05 -3.0835735e-02  3.5788041e-02
  1.8636132e-02  1.6852278e-02  1.6580630e-02  7.5346776e-03
  5.2627828e-03  3.8735517e-03]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [ 0.06002326  0.03232269 -0.4699697   0.05387168  0.01572325  0.01195646
  0.01155862  0.00810408  0.00805808  0.00476541]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [ 0.08433965  0.09186117 -0.38016924  0.00708239  0.0106802   0.00721023
  0.00509423  0.0050037   0.00412178  0.00356003]  taking action:  1
Leaf selection - depth:  4
Leaf selection - action scores:  [ 0.29090822 -0.1729993  -0.3419753   0.2887339   0.06138829  0.01908071
  0.01551405  0.0122026   0.01203488  0.00963988]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [4.0697303e-01 1.0865091e-03 4.0278373e-05 1.0023748e-05 8.1332855e-06
 7.2376483e-06 6.5190939e-06 4.4488766e-06 3.6738129e-06 3.3981362e-06]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [4.1709569e-01 1.6845685e-03 9.4716594e-04 1.8438861e-04 1.0233764e-04
 6.6901994e-05 5.6286000e-05 2.7569451e-05 2.3066264e-05 2.0123667e-05]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [4.2466715e-01 2.8651047e-02 1.0170424e-03 5.2535511e-04 1.2706879e-04
 4.5465848e-05 3.5257071e-05 2.9085766e-05 2.2528531e-05 1.6174285e-05]  taking action:  0
Leaf selection - depth:  8
Leaf selection - action scores:  [ 0.31500217  0.26685837  0.22552614 -0.32948032  0.19324061  0.16564222
  0.10928981  0.09582375  0.06084925  0.05513695]  taking action:  0
Leaf selection - depth:  9
Leaf selection - action scores:  [0.6221957  0.32065743 0.22195536 0.12344067 0.09565537 0.07840681
 0.06085377 0.05654825 0.02814944 0.02551811]  taking action:  0
Leaf selection - depth:  10
Leaf selection - action scores:  [1.8785766e+00 1.7269839e-02 1.6308893e-02 9.2741121e-03 2.3754917e-03
 1.3839850e-03 9.2843367e-04 6.0347997e-04 5.8510475e-04 5.4841099e-04]  taking action:  0
Adding child.
Leaf selection - depth:  11
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  50286
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
  wire [31:0] c;
  adder_8 a1(sum[7:0], c[0], in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c[1], in1[15:8], in2[15:8], c[0]);
  adder_8 a3(sum[23:16], c[2], in1[23:16], in2[23:16], c[1]);
  adder_8 a4(sum[31:24], cout, in1[31:24], in2[31:24], c[2]);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  142
LLM generates return in:  50.844517  seconds
Running getPromptScore: 
adder_32
output_files/2329780_adder_32/synth_script.sh
Running bash in x seconds:  0.897165

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.1
Backpropogation: incorporating estimates.
Current runs:  76.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.04404178 -0.02885644  0.00773161  0.00449456  0.00177888  0.00155091
  0.03881199  0.00085594  0.00076184  0.00065885]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [ 0.04192162  0.00057064 -0.03063714  0.03615891  0.01882926  0.01702692
  0.01675245  0.00761276  0.00531732  0.00391369]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [ 0.06325376  0.03341652 -0.46963787  0.05446696  0.01589699  0.01208858
  0.01168635  0.00819363  0.00814713  0.00481807]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [ 0.08652751  0.09564106 -0.3787167   0.00777432  0.01080966  0.00729763
  0.00515598  0.00506436  0.00417174  0.00360319]  taking action:  1
Leaf selection - depth:  4
Leaf selection - action scores:  [ 0.28559512 -0.16065532 -0.33601004  0.29963332  0.06370563  0.01980099
  0.01609969  0.01266323  0.01248919  0.01000377]  taking action:  3
Adding child.
Leaf selection - depth:  5
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  25
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
  wire [7:0] c;
  adder_8 a1(sum[7:0], c[0], in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c[1], in1[15:8], in2[15:8], c[0]);
  adder_8 a3(sum[23:16], c[2], in1[23:16], in2[23:16], c[1]);
  adder_8 a4(sum[31:24], c[3], in1[31:24], in2[31:24], c[2]);
  adder_8 a5(sum[39:32], c[4], in1[39:32], in2[39:32], c[3]);
  adder_8 a6(sum[47:40], c[5], in1[47:40], in2[47:40], c[4]);
  adder_8 a7(sum[55:48], c[6], in1[55:48], in2[55:48], c[5]);
  adder_8 a8(sum[63:56], cout, in1[63:56], in2[63:56], c[6]);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 failed\n'
Tokens:  292
LLM generates return in:  115.543753  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  77.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.04243708 -0.02839596  0.00778165  0.00452365  0.00179039  0.00156095
  0.03931648  0.00086148  0.00076677  0.00066312]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [ 0.04091707  0.00108406 -0.03044055  0.03652602  0.01902042  0.01719978
  0.01692254  0.00769005  0.00537131  0.00395343]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [ 0.06165877  0.03449854 -0.4693096   0.05505581  0.01606886  0.01221927
  0.01181269  0.00828221  0.00823521  0.00487016]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [ 0.08868949  0.08554833 -0.37728134  0.00845806  0.01093759  0.00738399
  0.005217    0.00512429  0.00422111  0.00364583]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.17021033 0.09503216 0.08710334 0.06695178 0.02459939 0.01064248
 0.01044907 0.00941448 0.00699228 0.00695787]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [1.8744141e-01 8.4971398e-02 7.1011125e-03 2.1281587e-03 1.6899079e-03
 1.3775695e-03 8.0957182e-04 4.4457777e-04 2.1340350e-04 1.8497021e-04]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [0.19194047 0.16376305 0.08409984 0.00446056 0.00069863 0.00042349
 0.00026748 0.00022001 0.00021811 0.00021589]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [2.3910525e-01 6.5751146e-03 3.4294433e-03 3.5125768e-04 2.3623744e-04
 1.7232806e-04 1.6010866e-04 8.6571374e-05 4.6160480e-05 2.4900570e-05]  taking action:  0
Leaf selection - depth:  8
Leaf selection - action scores:  [2.4635977e-01 6.2686190e-02 1.3035041e-03 1.2629754e-03 5.3209136e-04
 9.7437034e-05 8.9499234e-05 8.1878236e-05 5.6162091e-05 5.4135144e-05]  taking action:  0
Leaf selection - depth:  9
Leaf selection - action scores:  [2.5780618e-01 5.5110507e-02 3.7110385e-03 3.2522227e-03 4.1576070e-04
 3.0015656e-04 2.8519251e-04 1.1014124e-04 1.0081022e-04 1.0034291e-04]  taking action:  0
Leaf selection - depth:  10
Leaf selection - action scores:  [2.7366978e-01 6.2796893e-03 4.9881130e-03 1.0854340e-03 5.4525776e-04
 3.3021884e-04 2.5948658e-04 2.2504368e-04 1.9390215e-04 1.8012821e-04]  taking action:  0
Leaf selection - depth:  11
Leaf selection - action scores:  [2.7123296e-01 2.4517538e-01 7.3201605e-04 4.5056589e-04 3.4183485e-04
 1.3105913e-04 5.3230542e-05 4.6142119e-05 4.2141932e-05 2.7404289e-05]  taking action:  0
Leaf selection - depth:  12
Leaf selection - action scores:  [3.0176842e-01 3.0672533e-02 3.3668287e-03 2.3383696e-03 8.9694583e-04
 4.9087114e-04 3.4966349e-04 1.6456182e-04 1.5426634e-04 1.4207562e-04]  taking action:  0
Leaf selection - depth:  13
Leaf selection - action scores:  [3.2192409e-01 6.5833218e-03 2.6098883e-03 1.0389264e-03 4.5977382e-04
 4.1964251e-04 2.6284211e-04 2.4277228e-04 1.9079125e-04 9.1337541e-05]  taking action:  0
Leaf selection - depth:  14
Leaf selection - action scores:  [3.3925512e-01 4.7813363e-02 3.1499888e-04 1.1100270e-04 6.8391986e-05
 5.3183336e-05 4.7553360e-05 3.4067925e-05 2.7359314e-05 1.8676797e-05]  taking action:  0
Leaf selection - depth:  15
Leaf selection - action scores:  [3.6645794e-01 9.3674315e-03 9.6567103e-04 7.6917780e-04 4.2899800e-04
 1.2606879e-04 5.1664370e-05 4.7535570e-05 4.1547388e-05 3.2970162e-05]  taking action:  0
Leaf selection - depth:  16
Leaf selection - action scores:  [3.9556068e-01 2.3499576e-03 5.8658636e-04 1.9349615e-04 1.5003532e-04
 1.3596822e-04 1.2502396e-04 8.0057922e-05 7.1835762e-05 4.4835848e-05]  taking action:  0
Leaf selection - depth:  17
Leaf selection - action scores:  [4.2935738e-01 4.2491346e-03 2.3197419e-04 2.2684962e-04 1.8377430e-04
 3.2986896e-05 2.9948189e-05 2.9336241e-05 2.3363211e-05 2.0598151e-05]  taking action:  0
Leaf selection - depth:  18
Leaf selection - action scores:  [4.7072196e-01 6.5960172e-03 4.5186077e-04 4.1185418e-04 1.9502615e-04
 7.0938382e-05 3.5063767e-05 2.3396386e-05 2.3217679e-05 2.1186439e-05]  taking action:  0
Leaf selection - depth:  19
Leaf selection - action scores:  [5.2481687e-01 1.6868709e-03 8.1952545e-05 7.5338256e-05 6.8417510e-05
 4.6389770e-05 4.3268734e-05 4.2456933e-05 3.8794718e-05 3.7682548e-05]  taking action:  0
Leaf selection - depth:  20
Leaf selection - action scores:  [5.9191048e-01 2.0467062e-02 1.3242675e-04 5.6382305e-05 1.3956504e-05
 1.0364632e-05 5.9374847e-06 5.7666302e-06 3.4667410e-06 2.6086605e-06]  taking action:  0
Leaf selection - depth:  21
Leaf selection - action scores:  [6.95199072e-01 3.94997932e-03 3.23073473e-04 2.53527192e-04
 1.32936504e-04 6.08288829e-05 1.54457994e-05 1.29950622e-05
 1.25584957e-05 1.16975025e-05]  taking action:  0
Leaf selection - depth:  22
Leaf selection - action scores:  [8.5291409e-01 3.7142128e-04 2.5858067e-04 2.3468534e-04 2.0799268e-04
 2.8644210e-05 2.0573649e-05 1.6650627e-05 1.6535680e-05 1.6185815e-05]  taking action:  0
Leaf selection - depth:  23
Leaf selection - action scores:  [1.0179065e+00 2.5364849e-01 2.9949364e-04 1.2778137e-04 7.0845941e-05
 3.9293856e-05 3.4608518e-05 3.2611562e-05 1.1323993e-05 1.1113528e-05]  taking action:  0
Leaf selection - depth:  24
Leaf selection - action scores:  [1.9123837e+00 2.5557619e-02 1.0459897e-02 9.6785789e-04 6.8764010e-04
 2.5984438e-04 1.5220785e-04 1.1819103e-04 7.5850730e-05 6.2761683e-05]  taking action:  0
Adding child.
Leaf selection - depth:  25
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  23
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42,c43,c44,c45,c46,c47,c48,c49,c50,c51,c52,c53,c54,c55,c56,c57,c58,c59,c60,c61,c62,c63;
  adder_8 a1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
  adder_8 a3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
  adder_8 a4(sum[31:24], c4, in1[31:24], in2[31:24], c3);
  adder_8 a5(sum[39:32], c5, in1[39:32], in2[39:32], c4);
  adder_8 a6(sum[47:40], c6, in1[47:40], in2[47:40], c5);
  adder_8 a7(sum[55:48], c7, in1[55:48], in2[55:48], c6);
  adder_8 a8(sum[63:56], cout, in1[63:56], in2[63:56], c7);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 failed\n'
Tokens:  440
LLM generates return in:  196.180028  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  78.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.04088731 -0.02793842  0.00783138  0.00455255  0.00180183  0.00157092
  0.03981774  0.00086699  0.00077167  0.00066736]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [ 0.03993471  0.00159237 -0.03024593  0.03688947  0.01920968  0.01737093
  0.01709092  0.00776657  0.00542475  0.00399277]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [ 0.06011353  0.03556909 -0.46898484  0.05563843  0.0162389   0.01234858
  0.0119377   0.00836986  0.00832235  0.0049217 ]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [ 0.08375886  0.08846422 -0.37586257  0.00913391  0.01106404  0.00746936
  0.00527731  0.00518354  0.00426991  0.00368798]  taking action:  1
Leaf selection - depth:  4
Leaf selection - action scores:  [ 0.29721445 -0.14874488 -0.33025426  0.10507499  0.06594159  0.02049597
  0.01666476  0.01310769  0.01292754  0.01035489]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [3.9756989e-01 1.1395405e-03 4.2244315e-05 1.0512996e-05 8.5302627e-06
 7.5909097e-06 6.8372838e-06 4.6660211e-06 3.8531275e-06 3.5639955e-06]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [4.0672597e-01 1.7756912e-03 9.9840062e-04 1.9436266e-04 1.0787334e-04
 7.0520895e-05 5.9330654e-05 2.9060753e-05 2.4313978e-05 2.1212209e-05]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [4.1344836e-01 3.0389024e-02 1.0787364e-03 5.5722322e-04 1.3477680e-04
 4.8223814e-05 3.7395770e-05 3.0850115e-05 2.3895114e-05 1.7155418e-05]  taking action:  0
Leaf selection - depth:  8
Leaf selection - action scores:  [ 0.27411136  0.28873584  0.24454983 -0.3177068   0.2065829   0.17707898
  0.11683571  0.1024399   0.06505059  0.05894388]  taking action:  1
Leaf selection - depth:  9
Leaf selection - action scores:  [1.6134294  0.15895481 0.08353037 0.01285915 0.01176552 0.00976356
 0.00870186 0.0061301  0.00536798 0.00441167]  taking action:  0
Adding child.
Leaf selection - depth:  10
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  198
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
  wire [31:0] carry;
  adder_8 A1(sum[7:0], carry[0], in1[7:0], in2[7:0], cin);
  adder_8 A2(sum[15:8], carry[1], in1[15:8], in2[15:8], carry[0]);
  adder_8 A3(sum[23:16], carry[2], in1[23:16], in2[23:16], carry[1]);
  adder_8 A4(sum[31:24], carry[3], in1[31:24], in2[31:24], carry[2]);
  adder_8 A5(sum[39:32], carry[4], in1[39:32], in2[39:32], carry[3]);
  adder_8 A6(sum[47:40], carry[5], in1[47:40], in2[47:40], carry[4]);
  adder_8 A7(sum[55:48], carry[6], in1[55:48], in2[55:48], carry[5]);
  adder_8 A8(sum[63:56], cout, in1[63:56], in2[63:56], carry[6]);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 failed\n'
Tokens:  287
LLM generates return in:  113.949349  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  79.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.03938946 -0.02748377  0.00788079  0.00458128  0.0018132   0.00158083
  0.04031585  0.00087246  0.00077654  0.00067157]  taking action:  6
Leaf selection - depth:  1
Leaf selection - action scores:  [2.3378073e-01 2.0997553e-01 6.8780528e-03 3.9138101e-04 3.5622052e-04
 3.0927025e-04 2.5679730e-04 1.8152370e-04 1.6831675e-04 1.5587908e-04]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.2374559  0.0815054  0.05428892 0.03597955 0.03517908 0.02228591
 0.01368091 0.00956883 0.00686441 0.00535523]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.22554454 0.23474802 0.09530131 0.07050035 0.0175518  0.01658725
 0.00743672 0.0062555  0.00597822 0.00544394]  taking action:  1
Leaf selection - depth:  4
Leaf selection - action scores:  [1.9494978e+00 7.3084171e-04 1.1027663e-04 9.8300821e-05 8.1867518e-05
 7.5783275e-05 7.4656768e-05 6.0244776e-05 4.5240180e-05 2.8791092e-05]  taking action:  0
Adding child.
Leaf selection - depth:  5
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  23
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);   
  adder_8 a1(sum[7:0], cout, in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], cout, in1[15:8], in2[15:8], cout);
  adder_8 a3(sum[23:16], cout, in1[23:16], in2[23:16], cout);
  adder_8 a4(sum[31:24], cout, in1[31:24], in2[31:24], cout);
  adder_8 a5(sum[39:32], cout, in1[39:32], in2[39:32], cout);
  adder_8 a6(sum[47:40], cout, in1[47:40], in2[47:40], cout);
  adder_8 a7(sum[55:48], cout, in1[55:48], in2[55:48], cout);
  adder_8 a8(sum[63:56], cout, in1[63:56], in2[63:56], cout);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 failed\n'
Tokens:  255
LLM generates return in:  98.281043  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  80.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.04059343 -0.02703195  0.00792989  0.00460982  0.0018245   0.00159068
  0.03494372  0.0008779   0.00078138  0.00067575]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [ 0.03897381  0.00209573 -0.0300532   0.03724937  0.0193971   0.01754041
  0.01725767  0.00784234  0.00547768  0.00403172]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [ 0.05861536  0.03662856 -0.46866342  0.05621501  0.01640719  0.01247655
  0.0120614   0.00845659  0.0084086   0.0049727 ]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [ 0.08579344  0.07938793 -0.37445986  0.0098021   0.01118906  0.00755376
  0.00533694  0.00524211  0.00431816  0.00372965]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.16469373 0.09684247 0.08876261 0.06822717 0.02506799 0.01084522
 0.01064811 0.00959382 0.00712547 0.00709041]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [0.18132931 0.08665416 0.00724174 0.0021703  0.00172337 0.00140485
 0.0008256  0.00045338 0.00021763 0.00018863]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [0.1829594  0.16878963 0.08583404 0.00455254 0.00071304 0.00043222
 0.000273   0.00022454 0.0002226  0.00022035]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [2.2946660e-01 6.7459247e-03 3.5185344e-03 3.6038278e-04 2.4237449e-04
 1.7680485e-04 1.6426800e-04 8.8820350e-05 4.7359652e-05 2.5547444e-05]  taking action:  0
Leaf selection - depth:  8
Leaf selection - action scores:  [2.3592913e-01 6.4403936e-02 1.3392231e-03 1.2975839e-03 5.4667197e-04
 1.0010704e-04 9.1951719e-05 8.4121893e-05 5.7701065e-05 5.5618573e-05]  taking action:  0
Leaf selection - depth:  9
Leaf selection - action scores:  [2.46351391e-01 5.67082465e-02 3.81862721e-03 3.34650953e-03
 4.27814259e-04 3.08858551e-04 2.93460675e-04 1.13334405e-04
 1.03732862e-04 1.03252009e-04]  taking action:  0
Leaf selection - depth:  10
Leaf selection - action scores:  [2.6090449e-01 6.4729555e-03 5.1416289e-03 1.1188397e-03 5.6203880e-04
 3.4038178e-04 2.6747264e-04 2.3196972e-04 1.9986974e-04 1.8567189e-04]  taking action:  0
Leaf selection - depth:  11
Leaf selection - action scores:  [2.5762862e-01 2.5321606e-01 7.5602293e-04 4.6534243e-04 3.5304553e-04
 1.3535729e-04 5.4976270e-05 4.7655376e-05 4.3524000e-05 2.8303028e-05]  taking action:  0
Leaf selection - depth:  12
Leaf selection - action scores:  [2.8591415e-01 3.1749092e-02 3.4849988e-03 2.4204426e-03 9.2842721e-04
 5.0809997e-04 3.6193611e-04 1.7033768e-04 1.5968083e-04 1.4706224e-04]  taking action:  0
Leaf selection - depth:  13
Leaf selection - action scores:  [3.0388004e-01 6.8318360e-03 2.7084090e-03 1.0781448e-03 4.7712983e-04
 4.3548358e-04 2.7276413e-04 2.5193670e-04 1.9799343e-04 9.4785442e-05]  taking action:  0
Leaf selection - depth:  14
Leaf selection - action scores:  [3.18751633e-01 4.97657247e-02 3.27861228e-04 1.15535266e-04
 7.11846369e-05 5.53549689e-05 4.94951055e-05 3.54590229e-05
 2.84764756e-05 1.94394270e-05]  taking action:  0
Leaf selection - depth:  15
Leaf selection - action scores:  [3.4250432e-01 9.7839627e-03 1.0086105e-03 8.0337998e-04 4.4807378e-04
 1.3167456e-04 5.3961674e-05 4.9649283e-05 4.3394830e-05 3.4436209e-05]  taking action:  0
Leaf selection - depth:  16
Leaf selection - action scores:  [3.6728555e-01 2.4646565e-03 6.1521702e-04 2.0294049e-04 1.5735839e-04
 1.4260468e-04 1.3112625e-04 8.3965460e-05 7.5341988e-05 4.7024238e-05]  taking action:  0
Leaf selection - depth:  17
Leaf selection - action scores:  [3.9539158e-01 4.4789813e-03 2.4452226e-04 2.3912051e-04 1.9371512e-04
 3.4771241e-05 3.1568161e-05 3.0923115e-05 2.4626986e-05 2.1712358e-05]  taking action:  0
Leaf selection - depth:  18
Leaf selection - action scores:  [4.2891601e-01 6.9961324e-03 4.7927070e-04 4.3683732e-04 2.0685645e-04
 7.5241514e-05 3.7190741e-05 2.4815614e-05 2.4626066e-05 2.2471611e-05]  taking action:  0
Leaf selection - depth:  19
Leaf selection - action scores:  [4.7154850e-01 1.8033409e-03 8.7610955e-05 8.0539976e-05 7.3141397e-05
 4.9592749e-05 4.6256220e-05 4.5388369e-05 4.1473297e-05 4.0284340e-05]  taking action:  0
Leaf selection - depth:  20
Leaf selection - action scores:  [5.2145529e-01 2.2106955e-02 1.4303725e-04 6.0899853e-05 1.5074747e-05
 1.1195082e-05 6.4132169e-06 6.2286726e-06 3.7445084e-06 2.8176755e-06]  taking action:  0
Leaf selection - depth:  21
Leaf selection - action scores:  [5.9496868e-01 4.3269852e-03 3.5390924e-04 2.7772511e-04 1.4562465e-04
 6.6634704e-05 1.6920027e-05 1.4235377e-05 1.3757143e-05 1.2813973e-05]  taking action:  0
Leaf selection - depth:  22
Leaf selection - action scores:  [6.9609189e-01 4.1526160e-04 2.8910197e-04 2.6238619e-04 2.3254288e-04
 3.2025200e-05 2.3002038e-05 1.8615967e-05 1.8487452e-05 1.8096291e-05]  taking action:  0
Leaf selection - depth:  23
Leaf selection - action scores:  [7.55408168e-01 2.92888016e-01 3.45825450e-04 1.47549203e-04
 8.18058397e-05 4.53726352e-05 3.99624732e-05 3.76565877e-05
 1.30758208e-05 1.28327965e-05]  taking action:  0
Leaf selection - depth:  24
Leaf selection - action scores:  [1.1210911e+00 3.1301562e-02 1.2810705e-02 1.1853790e-03 8.4218371e-04
 3.1824308e-04 1.8641580e-04 1.4475385e-04 9.2897790e-05 7.6867051e-05]  taking action:  0
Leaf selection - depth:  25
Leaf selection - action scores:  [1.9468133e+00 2.3026795e-03 1.7208024e-03 2.9663110e-04 6.9283349e-05
 5.1981177e-05 3.8692546e-05 3.0789368e-05 2.7543249e-05 2.7175460e-05]  taking action:  0
Adding child.
Leaf selection - depth:  26
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  11
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42,c43,c44,c45,c46,c47,c48,c49,c50,c51,c52,c53,c54,c55,c56,c57,c58,c59,c60,c61,c62,c63;
  adder_8 a1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
  adder_8 a3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
  adder_8 a4(sum[31:24], c4, in1[31:24], in2[31:24], c3);
  adder_8 a5(sum[39:32], c5, in1[39:32], in2[39:32], c4);
  adder_8 a6(sum[47:40], c6, in1[47:40], in2[47:40], c5);
  adder_8 a7(sum[55:48], c7, in1[55:48], in2[55:48], c6);
  adder_8 a8(sum[63:56], cout, in1[63:56], in2[63:56], c7);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 failed\n'
Tokens:  439
LLM generates return in:  195.847729  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  81.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.03911471 -0.02658291  0.00797869  0.00463819  0.00183572  0.00160047
  0.03541518  0.0008833   0.00078618  0.00067991]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [ 0.03803355  0.00259426 -0.02986232  0.03760583  0.01958272  0.01770826
  0.01742282  0.00791739  0.0055301   0.0040703 ]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [ 0.0571619   0.03767727 -0.46834528  0.05678573  0.01657376  0.01260322
  0.01218386  0.00854245  0.00849397  0.00502319]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [ 0.0810982   0.08206081 -0.37307262  0.01046292  0.0113127   0.00763723
  0.00539592  0.00530003  0.00436588  0.00377087]  taking action:  1
Leaf selection - depth:  4
Leaf selection - action scores:  [ 0.27441475 -0.13722527 -0.32468733  0.11016075  0.06810419  0.02116815
  0.01721129  0.01353757  0.0133515   0.01069448]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [3.7083286e-01 1.1902112e-03 4.4122749e-05 1.0980465e-05 8.9095684e-06
 7.9284464e-06 7.1413101e-06 4.8735001e-06 4.0244604e-06 3.7224718e-06]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [3.7733668e-01 1.8623607e-03 1.0471314e-03 2.0384930e-04 1.1313852e-04
 7.3962939e-05 6.2226522e-05 3.0479177e-05 2.5500718e-05 2.2247554e-05]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [3.8108632e-01 3.2032844e-02 1.1370881e-03 5.8736483e-04 1.4206722e-04
 5.0832361e-05 3.9418603e-05 3.2518874e-05 2.5187663e-05 1.8083399e-05]  taking action:  0
Leaf selection - depth:  8
Leaf selection - action scores:  [ 0.2861895   0.17285573  0.26241726 -0.30664885  0.21911424  0.1878206
  0.12392299  0.10865392  0.06899656  0.06251942]  taking action:  0
Leaf selection - depth:  9
Leaf selection - action scores:  [0.50714314 0.37026328 0.25629196 0.142537   0.11045331 0.09053638
 0.07026788 0.06529629 0.03250417 0.02946578]  taking action:  0
Leaf selection - depth:  10
Leaf selection - action scores:  [1.2003886e+00 2.1151146e-02 1.9974234e-02 1.1358421e-02 2.9093714e-03
 1.6950286e-03 1.1370943e-03 7.3910906e-04 7.1660406e-04 6.7166355e-04]  taking action:  0
Leaf selection - depth:  11
Leaf selection - action scores:  [1.9434253e+00 2.6626233e-03 2.6582391e-03 8.4705150e-04 4.3288249e-04
 1.5627450e-04 1.3952251e-04 1.0445609e-04 9.8394674e-05 4.6862548e-05]  taking action:  0
Adding child.
Leaf selection - depth:  12
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  26676
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
  wire [31:0] c;
  adder_8 a1(sum[7:0], c[0], in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c[1], in1[15:8], in2[15:8], c[0]);
  adder_8 a3(sum[23:16], c[2], in1[23:16], in2[23:16], c[1]);
  adder_8 a4(sum[31:24], cout, in1[31:24], in2[31:24], c[2]);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  141
LLM generates return in:  50.563504  seconds
Running getPromptScore: 
adder_32
output_files/2329780_adder_32/synth_script.sh
Running bash in x seconds:  0.890125

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.1
Backpropogation: incorporating estimates.
Current runs:  82.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.04138745 -0.0261366   0.00802719  0.00466638  0.00184688  0.0016102
  0.03588376  0.00088867  0.00079096  0.00068404]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [ 0.0410348   0.00308811 -0.02967323  0.03795895  0.0197666   0.01787454
  0.01758641  0.00799173  0.00558202  0.00410852]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [ 0.06000617  0.03871554 -0.4680303   0.05735078  0.01673868  0.01272862
  0.01230509  0.00862745  0.00857849  0.00507317]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [ 0.08301745  0.08560449 -0.3717004   0.01111659  0.011435    0.0077198
  0.00545425  0.00535733  0.00441308  0.00381163]  taking action:  1
Leaf selection - depth:  4
Leaf selection - action scores:  [ 0.27021453 -0.1260604  -0.31929183  0.11508992  0.07020019  0.02181963
  0.01774099  0.01395421  0.01376241  0.01102362]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [3.64525735e-01 1.23881095e-03 4.59244111e-05 1.14288305e-05
 9.27337260e-06 8.25218831e-06 7.43291093e-06 5.07249979e-06
 4.18879108e-06 3.87447153e-06]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [3.7061140e-01 1.9451723e-03 1.0936931e-03 2.1291364e-04 1.1816933e-04
 7.7251767e-05 6.4993481e-05 3.1834461e-05 2.6634631e-05 2.3236811e-05]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [3.7411088e-01 3.3596333e-02 1.1925880e-03 6.1603350e-04 1.4900137e-04
 5.3313433e-05 4.1342581e-05 3.4106088e-05 2.6417045e-05 1.8966031e-05]  taking action:  0
Leaf selection - depth:  8
Leaf selection - action scores:  [ 0.25809062  0.18581215  0.2793167  -0.29619002  0.2309667   0.1979803
  0.1306263   0.11453129  0.07272876  0.06590126]  taking action:  2
Leaf selection - depth:  9
Leaf selection - action scores:  [0.73395437 0.59420663 0.27057382 0.11593723 0.05386319 0.04895197
 0.00745668 0.00661464 0.00633194 0.00515274]  taking action:  0
Adding child.
Leaf selection - depth:  10
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  29510
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
  wire [31:0] cout_temp;
  adder_8 A1(sum[7:0], cout_temp[0], in1[7:0], in2[7:0], cin);
  adder_8 A2(sum[15:8], cout_temp[1], in1[15:8], in2[15:8], cout_temp[0]);
  adder_8 A3(sum[23:16], cout_temp[2], in1[23:16], in2[23:16], cout_temp[1]);
  adder_8 A4(sum[31:24], cout_temp[3], in1[31:24], in2[31:24], cout_temp[2]);
  adder_8 A5(sum[39:32], cout_temp[4], in1[39:32], in2[39:32], cout_temp[3]);
  adder_8 A6(sum[47:40], cout_temp[5], in1[47:40], in2[47:40], cout_temp[4]);
  adder_8 A7(sum[55:48], cout_temp[6], in1[55:48], in2[55:48], cout_temp[5]);
  adder_8 A8(sum[63:56], cout_temp[7], in1[63:56], in2[63:56], cout_temp[6]);
  assign cout = cout_temp[7];
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 failed\n'
Tokens:  333
LLM generates return in:  136.283671  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  83.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.03993443 -0.02569298  0.0080754   0.00469441  0.00185798  0.00161987
  0.03634954  0.000894    0.00079571  0.00068815]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [ 0.04005833  0.00357741 -0.02948588  0.03830881  0.01994879  0.01803929
  0.0177485   0.00806539  0.00563347  0.00414639]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [ 0.05854678  0.03974368 -0.4677184   0.05791031  0.01690199  0.01285281
  0.01242515  0.00871162  0.00866218  0.00512267]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [ 0.08491643  0.07761848 -0.37034267  0.01176335  0.01155601  0.00780149
  0.00551197  0.00541403  0.00445978  0.00385197]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.15949956 0.09861954 0.09039142 0.06947915 0.02552799 0.01104423
 0.01084351 0.00976987 0.00725623 0.00722052]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [0.17558868 0.08830487 0.00737969 0.00221165 0.0017562  0.00143161
 0.00084133 0.00046202 0.00022178 0.00019223]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [0.1747277  0.17371662 0.08753388 0.0046427  0.00072716 0.00044078
 0.0002784  0.00022899 0.00022701 0.00022471]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [2.2059922e-01 6.9125164e-03 3.6054251e-03 3.6928247e-04 2.4835995e-04
 1.8117107e-04 1.6832462e-04 9.1013782e-05 4.8529204e-05 2.6178341e-05]  taking action:  0
Leaf selection - depth:  8
Leaf selection - action scores:  [2.2637947e-01 6.6077039e-02 1.3740138e-03 1.3312929e-03 5.6087354e-04
 1.0270765e-04 9.4340467e-05 8.6307235e-05 5.9200040e-05 5.7063447e-05]  taking action:  0
Leaf selection - depth:  9
Leaf selection - action scores:  [2.3592100e-01 5.8262188e-02 3.9232667e-03 3.4382117e-03 4.3953737e-04
 3.1732203e-04 3.0150221e-04 1.1644004e-04 1.0657539e-04 1.0608136e-04]  taking action:  0
Leaf selection - depth:  10
Leaf selection - action scores:  [2.4935198e-01 6.6606160e-03 5.2906927e-03 1.1512766e-03 5.7833316e-04
 3.5024996e-04 2.7522707e-04 2.3869488e-04 2.0566427e-04 1.9105480e-04]  taking action:  0
Leaf selection - depth:  11
Leaf selection - action scores:  [2.4540304e-01 2.6100913e-01 7.7929057e-04 4.7966398e-04 3.6391098e-04
 1.3952309e-04 5.6668239e-05 4.9122034e-05 4.4863511e-05 2.9174093e-05]  taking action:  1
Adding child.
Leaf selection - depth:  12
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  198
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
  wire c1,c2,c3;
  adder_8 A1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
  adder_8 A2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
  adder_8 A3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
  adder_8 A4(sum[31:24], cout, in1[31:24], in2[31:24], c3);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  137
LLM generates return in:  49.015924  seconds
Running getPromptScore: 
adder_32
output_files/2329780_adder_32/synth_script.sh
Running bash in x seconds:  0.895282

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.1
Backpropogation: incorporating estimates.
Current runs:  84.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.04209822 -0.02525198  0.00812333  0.00472227  0.001869    0.00162948
  0.03681254  0.00089931  0.00080044  0.00069224]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [ 0.04287685  0.00406228 -0.02930023  0.0386555   0.02012932  0.01820254
  0.01790913  0.00813838  0.00568445  0.00418391]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [ 0.06121103  0.04076199 -0.46740946  0.05846449  0.01706373  0.01297581
  0.01254405  0.00879499  0.00874507  0.00517169]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [ 0.08725101  0.07991971 -0.36899906  0.0124034   0.01167577  0.00788234
  0.00556909  0.00547013  0.004506    0.00389189]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.1617406  0.10036515 0.09199139 0.07070897 0.02597985 0.01123971
 0.01103545 0.0099428  0.00738467 0.00734833]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [0.17759094 0.08992527 0.00751511 0.00225223 0.00178843 0.00145788
 0.00085677 0.0004705  0.00022585 0.00019575]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [0.17623988 0.17854975 0.08920135 0.00473114 0.00074101 0.00044918
 0.00028371 0.00023335 0.00023134 0.00022899]  taking action:  1
Leaf selection - depth:  7
Leaf selection - action scores:  [6.92917109e-01 8.67355336e-03 1.73997611e-03 5.69730822e-04
 4.62640426e-04 3.87049280e-04 3.27096495e-04 2.34091931e-04
 1.73072738e-04 1.17409254e-04]  taking action:  0
Leaf selection - depth:  8
Leaf selection - action scores:  [8.16678405e-01 1.05572425e-01 1.78649835e-03 8.06215219e-04
 6.89250650e-04 1.47463739e-04 1.42666366e-04 1.13998096e-04
 6.61640515e-05 4.18301861e-05]  taking action:  0
Leaf selection - depth:  9
Leaf selection - action scores:  [1.0891548e+00 8.2003698e-02 2.7045872e-02 3.5585012e-04 3.0475346e-04
 2.7818492e-04 2.2112098e-04 1.3457585e-04 1.1870661e-04 9.7096396e-05]  taking action:  0
Leaf selection - depth:  10
Leaf selection - action scores:  [1.9420577e+00 3.5336176e-03 1.3501111e-03 1.2989836e-03 7.1012444e-04
 5.0784781e-04 3.8366549e-04 3.2066234e-04 1.9778659e-04 1.4769858e-04]  taking action:  0
Adding child.
Leaf selection - depth:  11
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  11
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
  wire c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15, c16, c17, c18, c19, c20, c21, c22, c23, c24, c25, c26, c27, c28, c29, c30, c31, c32, c33, c34, c35, c36, c37, c38, c39, c40, c41, c42, c43, c44, c45, c46, c47, c48, c49, c50, c51, c52, c53, c54, c55, c56, c57, c58, c59, c60, c61, c62, c63;
  adder_8 a1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
  adder_8 a3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
  adder_8 a4(sum[31:24], c4, in1[31:24], in2[31:24], c3);
  adder_8 a5(sum[39:32], c5, in1[39:32], in2[39:32], c4);
  adder_8 a6(sum[47:40], c6, in1[47:40], in2[47:40], c5);
  adder_8 a7(sum[55:48], c7, in1[55:48], in2[55:48], c6);
  adder_8 a8(sum[63:56], cout, in1[63:56], in2[63:56], c7);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 failed\n'
Tokens:  454
LLM generates return in:  200.683187  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  85.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.04067103 -0.02481357  0.00817097  0.00474997  0.00187996  0.00163904
  0.03727284  0.00090459  0.00080513  0.0006963 ]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [ 0.04187259  0.00454285 -0.02911622  0.03899911  0.02030825  0.01836434
  0.01806832  0.00821073  0.00573498  0.00422111]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [ 0.059752    0.04177073 -0.46710345  0.05901346  0.01722396  0.01309765
  0.01266184  0.00887757  0.00882719  0.00522025]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [ 0.08274549  0.08219759 -0.36766905  0.01303696  0.01179431  0.00796236
  0.00562563  0.00552567  0.00455174  0.0039314 ]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.15685843 0.10208092 0.093564   0.07191776 0.02642398 0.01143186
 0.0112241  0.01011278 0.00751091 0.00747395]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [0.17222536 0.09151699 0.00764813 0.0022921  0.00182009 0.00148369
 0.00087194 0.00047882 0.00022984 0.00019922]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [0.18105868 0.13607848 0.09083821 0.00481796 0.00075461 0.00045742
 0.00028891 0.00023763 0.00023558 0.00023319]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [2.2192958e-01 7.0751859e-03 3.6902700e-03 3.7797264e-04 2.5420450e-04
 1.8543449e-04 1.7228574e-04 9.3155570e-05 4.9671220e-05 2.6794385e-05]  taking action:  0
Leaf selection - depth:  8
Leaf selection - action scores:  [2.27594018e-01 6.77088201e-02 1.40794530e-03 1.36416941e-03
 5.74724399e-04 1.05244035e-04 9.66702210e-05 8.84386027e-05
 6.06619906e-05 5.84726367e-05]  taking action:  0
Leaf selection - depth:  9
Leaf selection - action scores:  [2.3689789e-01 5.9775740e-02 4.0251864e-03 3.5275307e-03 4.5095582e-04
 3.2556549e-04 3.0933472e-04 1.1946495e-04 1.0934404e-04 1.0883717e-04]  taking action:  0
Leaf selection - depth:  10
Leaf selection - action scores:  [2.4994367e-01 6.8431329e-03 5.4356703e-03 1.1828244e-03 5.9418083e-04
 3.5984765e-04 2.8276895e-04 2.4523569e-04 2.1129996e-04 1.9629016e-04]  taking action:  0
Leaf selection - depth:  11
Leaf selection - action scores:  [2.5523561e-01 1.8428808e-01 8.0188341e-04 4.9357017e-04 3.7446132e-04
 1.4356809e-04 5.8311140e-05 5.0546158e-05 4.6164172e-05 3.0019894e-05]  taking action:  0
Leaf selection - depth:  12
Leaf selection - action scores:  [2.7178043e-01 3.2790318e-02 3.5992914e-03 2.4998223e-03 9.5887546e-04
 5.2476337e-04 3.7380602e-04 1.7592398e-04 1.6491766e-04 1.5188522e-04]  taking action:  0
Leaf selection - depth:  13
Leaf selection - action scores:  [2.8794375e-01 7.0716222e-03 2.8034698e-03 1.1159859e-03 4.9387629e-04
 4.5076836e-04 2.8233771e-04 2.6077926e-04 2.0494268e-04 9.8112258e-05]  taking action:  0
Leaf selection - depth:  14
Leaf selection - action scores:  [3.00841093e-01 5.16443327e-02 3.40237661e-04 1.19896606e-04
 7.38717790e-05 5.74445621e-05 5.13634950e-05 3.67975626e-05
 2.95514346e-05 2.01732455e-05]  taking action:  0
Leaf selection - depth:  15
Leaf selection - action scores:  [3.2185176e-01 1.0183471e-02 1.0497951e-03 8.3618442e-04 4.6636999e-04
 1.3705122e-04 5.6165092e-05 5.1676612e-05 4.5166769e-05 3.5842342e-05]  taking action:  0
Leaf selection - depth:  16
Leaf selection - action scores:  [3.4329015e-01 2.5742496e-03 6.4257317e-04 2.1196442e-04 1.6435547e-04
 1.4894572e-04 1.3695689e-04 8.7699067e-05 7.8692137e-05 4.9115213e-05]  taking action:  0
Leaf selection - depth:  17
Leaf selection - action scores:  [3.6712596e-01 4.6975953e-03 2.5645713e-04 2.5079172e-04 2.0317016e-04
 3.6468387e-05 3.3108972e-05 3.2432436e-05 2.5829004e-05 2.2772114e-05]  taking action:  0
Leaf selection - depth:  18
Leaf selection - action scores:  [3.9497799e-01 7.3745712e-03 5.0519570e-04 4.6046698e-04 2.1804585e-04
 7.9311525e-05 3.9202485e-05 2.6157955e-05 2.5958154e-05 2.3687158e-05]  taking action:  0
Leaf selection - depth:  19
Leaf selection - action scores:  [4.2968306e-01 1.9127317e-03 9.2925446e-05 8.5425541e-05 7.7578159e-05
 5.2601052e-05 4.9062128e-05 4.8141635e-05 4.3989072e-05 4.2727992e-05]  taking action:  0
Leaf selection - depth:  20
Leaf selection - action scores:  [4.6846819e-01 2.3633329e-02 1.5291324e-04 6.5104679e-05 1.6115582e-05
 1.1968046e-05 6.8560171e-06 6.6587313e-06 4.0030477e-06 3.0122219e-06]  taking action:  0
Leaf selection - depth:  21
Leaf selection - action scores:  [5.2420795e-01 4.6736784e-03 3.8226572e-04 2.9997743e-04 1.5729261e-04
 7.1973707e-05 1.8275718e-05 1.5375965e-05 1.4859414e-05 1.3840672e-05]  taking action:  0
Leaf selection - depth:  22
Leaf selection - action scores:  [5.9575111e-01 4.5489628e-04 3.1669534e-04 2.8742966e-04 2.5473797e-04
 3.5081848e-05 2.5197469e-05 2.0392770e-05 2.0251990e-05 1.9823494e-05]  taking action:  0
Leaf selection - depth:  23
Leaf selection - action scores:  [6.14330649e-01 3.27458769e-01 3.86644591e-04 1.64965022e-04
 9.14617049e-05 5.07281475e-05 4.46794002e-05 4.21013428e-05
 1.46192115e-05 1.43475017e-05]  taking action:  0
Leaf selection - depth:  24
Leaf selection - action scores:  [8.3483958e-01 3.6143929e-02 1.4792528e-02 1.3687577e-03 9.7246992e-04
 3.6747544e-04 2.1525440e-04 1.6714734e-04 1.0726913e-04 8.8758425e-05]  taking action:  0
Leaf selection - depth:  25
Leaf selection - action scores:  [1.1421748e+00 2.8201947e-03 2.1075439e-03 3.6329744e-04 8.4854430e-05
 6.3663683e-05 4.7388497e-05 3.7709120e-05 3.3733453e-05 3.3283006e-05]  taking action:  0
Leaf selection - depth:  26
Leaf selection - action scores:  [1.2518148e+00 6.9771069e-01 1.0805802e-03 5.0392159e-04 2.0325508e-04
 5.9440132e-05 3.6758986e-05 1.8548630e-05 1.5416059e-05 1.2951599e-05]  taking action:  0
Adding child.
Leaf selection - depth:  27
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  66
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42,c43,c44,c45,c46,c47,c48,c49,c50,c51,c52,c53,c54,c55,c56,c57,c58,c59,c60,c61,c62,c63;
  adder_8 a1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
  adder_8 a3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
  adder_8 a4(sum[31:24], c4, in1[31:24], in2[31:24], c3);
  adder_8 a5(sum[39:32], c5, in1[39:32], in2[39:32], c4);
  adder_8 a6(sum[47:40], c6, in1[47:40], in2[47:40], c5);
  adder_8 a7(sum[55:48], c7, in1[55:48], in2[55:48], c6);
  adder_8 a8(sum[63:56], cout, in1[63:56], in2[63:56], c7);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 failed\n'
Tokens:  438
LLM generates return in:  195.424926  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  86.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.03928697 -0.0243777   0.00821834  0.0047775   0.00189086  0.00164854
  0.03773046  0.00090983  0.0008098   0.00070033]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [ 0.04089075  0.00501921 -0.02893383  0.03933972  0.02048562  0.01852473
  0.01822613  0.00828244  0.00578507  0.00425797]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [ 0.05833422  0.04277018 -0.46680024  0.05955738  0.01738271  0.01321837
  0.01277854  0.0089594   0.00890855  0.00526836]  taking action:  3
Adding child.
Leaf selection - depth:  3
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  50286
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
  
  wire [31:0] c;
  wire [63:0] in1_64, in2_64;
  
  assign in1_64 = {in1[63:32], in1[31:0]};
  assign in2_64 = {in2[63:32], in2[31:0]};
  
  adder_8 a1(sum[7:0], c[0], in1_64[7:0], in2_64[7:0], cin);
  adder_8 a2(sum[15:8], c[1], in1_64[15:8], in2_64[15:8], c[0]);
  adder_8 a3(sum[23:16], c[2], in1_64[23:16], in2_64[23:16], c[1]);
  adder_8 a4(sum[31:24], c[3], in1_64[31:24], in2_64[31:24], c[2]);
  adder_8 a5(sum[39:32], c[4], in1_64[39:32], in2_64[39:32], c[3]);
  adder_8 a6(sum[47:40], c[5], in1_64[47:40], in2_64[47:40], c[4]);
  adder_8 a7(sum[55:48], c[6], in1_64[55:48], in2_64[55:48], c[5]);
  adder_8 a8(sum[63:56], cout, in1_64[63:56], in2_64[63:56], c[6]);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 failed\n'
Tokens:  400
LLM generates return in:  169.905516  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  87.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.03794397 -0.02394434  0.00826544  0.00480488  0.0019017   0.00165799
  0.03818546  0.00091504  0.00081444  0.00070435]  taking action:  6
Leaf selection - depth:  1
Leaf selection - action scores:  [2.2501317e-01 2.1449164e-01 7.0259846e-03 3.9979874e-04 3.6388205e-04
 3.1592199e-04 2.6232045e-04 1.8542788e-04 1.7193687e-04 1.5923170e-04]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.22833493 0.08333722 0.05550905 0.03678818 0.03596972 0.02278678
 0.01398838 0.00978389 0.00701868 0.00547559]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.2322146  0.12763256 0.09754399 0.07215941 0.01796484 0.01697759
 0.00761173 0.0064027  0.0061189  0.00557205]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.20945589 0.28318012 0.13523564 0.08582503 0.0095298  0.00883099
 0.0062308  0.00537009 0.00439126 0.00424002]  taking action:  1
Leaf selection - depth:  5
Leaf selection - action scores:  [0.47741684 0.07146865 0.06464837 0.04464944 0.02438881 0.00890188
 0.00876504 0.00730809 0.00541081 0.00484441]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [5.7988864e-01 6.9359004e-02 4.6556345e-03 1.3280027e-03 1.3128915e-03
 9.7388076e-04 5.9289637e-04 3.6252706e-04 1.7231640e-04 1.4810810e-04]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [5.16582072e-01 6.67529881e-01 4.51361313e-02 2.77718250e-03
 4.39799827e-04 3.00240208e-04 1.70268308e-04 1.34828006e-04
 1.19450087e-04 1.19328935e-04]  taking action:  1
Adding child.
Leaf selection - depth:  8
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  17
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);   
  wire c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15, c16, c17, c18, c19, c20, c21, c22, c23, c24, c25, c26, c27, c28, c29, c30, c31, c32, c33, c34, c35, c36, c37, c38, c39, c40, c41, c42, c43, c44, c45, c46, c47, c48, c49, c50, c51, c52, c53, c54, c55, c56, c57, c58, c59, c60, c61, c62, c63;
  adder_8 a1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
  adder_8 a3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
  adder_8 a4(sum[31:24], c4, in1[31:24], in2[31:24], c3);
  adder_8 a5(sum[39:32], c5, in1[39:32], in2[39:32], c4);
  adder_8 a6(sum[47:40], c6, in1[47:40], in2[47:40], c5);
  adder_8 a7(sum[55:48], c7, in1[55:48], in2[55:48], c6);
  adder_8 a8(sum[63:56], cout, in1[63:56], in2[63:56], c7);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 failed\n'
Tokens:  458
LLM generates return in:  202.104844  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  88.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.038956   -0.02351342  0.00831227  0.00483211  0.00191247  0.00166738
  0.03309237  0.00092023  0.00081905  0.00070834]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [ 0.03993052  0.0054915  -0.028753    0.03967741  0.02066147  0.01868375
  0.01838258  0.00835353  0.00583473  0.00429452]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [ 0.06003329  0.04376057 -0.4664998  -0.01995182  0.01754002  0.01333799
  0.01289418  0.00904048  0.00898917  0.00531604]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [ 0.07851394  0.08445276 -0.36635232  0.0136642   0.01191167  0.00804159
  0.00568161  0.00558065  0.00459704  0.00397052]  taking action:  1
Leaf selection - depth:  4
Leaf selection - action scores:  [ 0.2520804  -0.1152193  -0.31405282  0.11987613  0.0722354   0.02245221
  0.01825533  0.01435876  0.01416141  0.01134321]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [3.43237191e-01 1.28557486e-03 4.76580099e-05 1.18602575e-05
 9.62343256e-06 8.56370025e-06 7.71349551e-06 5.26398117e-06
 4.34691401e-06 4.02072874e-06]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [3.4764776e-01 2.0245996e-03 1.1383519e-03 2.2160754e-04 1.2299453e-04
 8.0406193e-05 6.7647357e-05 3.3134358e-05 2.7722203e-05 2.4185640e-05]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [3.4936661e-01 3.5090223e-02 1.2456175e-03 6.4342597e-04 1.5562685e-04
 5.5684064e-05 4.3180917e-05 3.5622645e-05 2.7591703e-05 1.9809373e-05]  taking action:  0
Leaf selection - depth:  8
Leaf selection - action scores:  [ 0.266783    0.19813535  0.16359353 -0.28624225  0.24223994  0.20764351
  0.13700202  0.12012143  0.07627857  0.06911783]  taking action:  0
Leaf selection - depth:  9
Leaf selection - action scores:  [0.44435072 0.41396692 0.28654313 0.15936121 0.12349055 0.10122275
 0.07856188 0.07300348 0.03634077 0.03294374]  taking action:  0
Leaf selection - depth:  10
Leaf selection - action scores:  [9.5223618e-01 2.4423240e-02 2.3064258e-02 1.3115575e-02 3.3594526e-03
 1.9572505e-03 1.3130035e-03 8.5344957e-04 8.2746305e-04 7.7557022e-04]  taking action:  0
Leaf selection - depth:  11
Leaf selection - action scores:  [1.2401000e+00 3.2610341e-03 3.2556646e-03 1.0374220e-03 5.3017063e-04
 1.9139639e-04 1.7087949e-04 1.2793206e-04 1.2050837e-04 5.7394664e-05]  taking action:  0
Leaf selection - depth:  12
Leaf selection - action scores:  [1.0456784  0.46645728 0.23864147 0.02764979 0.02615903 0.02531661
 0.00973022 0.00853301 0.00816223 0.00727657]  taking action:  0
Adding child.
Leaf selection - depth:  13
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  62
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
  wire [31:0] c;
  adder_8 a1(sum[7:0], c[0], in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c[1], in1[15:8], in2[15:8], c[0]);
  adder_8 a3(sum[23:16], c[2], in1[23:16], in2[23:16], c[1]);
  adder_8 a4(sum[31:24], cout, in1[31:24], in2[31:24], c[2]);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  140
LLM generates return in:  50.213543  seconds
Running getPromptScore: 
adder_32
output_files/2329780_adder_32/synth_script.sh
Running bash in x seconds:  0.899021

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.1
Backpropogation: incorporating estimates.
Current runs:  89.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.040963   -0.02308492  0.00835883  0.00485918  0.00192319  0.00167673
  0.03352426  0.00092538  0.00082364  0.0007123 ]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [ 0.04249984  0.00595978 -0.0285737   0.04001224  0.02083583  0.01884142
  0.01853771  0.00842403  0.00588397  0.00433076]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [ 0.06245351  0.04474218 -0.46620202 -0.01968472  0.01769594  0.01345655
  0.0130088   0.00912084  0.00906907  0.0053633 ]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [ 0.08016116  0.0873867  -0.3650484   0.01428533  0.01202788  0.00812005
  0.00573704  0.0056351   0.00464189  0.00400926]  taking action:  1
Leaf selection - depth:  4
Leaf selection - action scores:  [ 0.24948493 -0.10467538 -0.30895746  0.12453113  0.07421482  0.02306746
  0.01875557  0.01475222  0.01454946  0.01165404]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [3.3880460e-01 1.3306964e-03 4.9330731e-05 1.2276533e-05 9.9611998e-06
 8.8642728e-06 7.9842266e-06 5.4487386e-06 4.4994836e-06 4.1618500e-06]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [3.4303483e-01 2.1010260e-03 1.1813234e-03 2.2997300e-04 1.2763745e-04
 8.3441446e-05 7.0200971e-05 3.4385146e-05 2.8768687e-05 2.5098623e-05]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [3.4472543e-01 3.6523063e-02 1.2964798e-03 6.6969899e-04 1.6198156e-04
 5.7957812e-05 4.4944125e-05 3.7077221e-05 2.8718356e-05 2.0618249e-05]  taking action:  0
Leaf selection - depth:  8
Leaf selection - action scores:  [ 0.24590707  0.20991     0.17383227 -0.27673733  0.25301135  0.21687657
  0.14309394  0.12546274  0.07967037  0.07219122]  taking action:  4
Adding child.
Leaf selection - depth:  9
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  16
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
  wire [31:0] in1_1, in1_2, in2_1, in2_2;
  wire [4:0] c1, c2, c3, c4, c5, c6, c7, c8;
  wire [8:0] c9, c10, c11, c12, c13, c14, c15, c16;
  wire [12:0] c17, c18, c19, c20, c21, c22, c23, c24;
  wire [16:0] c25, c26, c27, c28, c29, c30, c31, c32;
  wire [20:0] c33, c34, c35, c36, c37, c38, c39, c40;
  wire [24:0] c41, c42, c43, c44, c45, c46, c47, c48;
  wire [28:0] c49, c50, c51, c52, c53, c54, c55, c56;
  wire [32:0] c57, c58, c59, c60, c61, c62, c63, c64;
  wire [36:0] c65, c66, c67, c68, c69, c70, c71, c72;
  wire [40:0] c73, c74, c75, c76, c77, c78, c79, c80;
  wire [44:0] c81, c82, c83, c84, c85, c86, c87, c88;
  wire [48:0] c89, c90, c91, c92, c93, c94, c95, c96;
  wire [52:0] c97, c98, c99, c100, c101, c102, c103, c104;
  wire [56:0] c105, c106, c107, c108, c109, c110, c111, c112;
  wire [60:0] c113, c114, c115, c116, c117, c118, c119, c120;
  wire [64:0] c121, c122, c123, c124, c125, c126, c127, c128;
  wire [68:0] c129, c130, c131, c132, c133, c134, c135, c136;
  wire [72:0] c137, c138, c139, c140, c141, c142, c143, c144;
  wire [76:0] c145, c146, c147, c148, c149, c150, c151, c152;
  wire [80:0] c153, c154, c155, c156, c157, c158, c159, c160;
  wire [84:0] c161, c162, c163, c164, c165, c166, c167, c168;
  wire [88:0] c169, c170, c171, c172, c173, c174, c175, c176;
  wire [92:0] c177, c178, c179, c180, c181, c182, c183, c184;
  wire [96:0] c185, c186, c187, c188, c189, c190, c191, c192;
  wire [100:0] c193, c194, c195, c196, c197, c198, c199, c200;
  wire [104:0] c201, c202, c203, c204, c205, c206, c207, c208;
  wire [108:0] c209, c210, c211, c212, c213, c214, c215, c216;
  wire [112:0] c217, c218, c219, c220, c221, c222, c223, c224;
  wire [116:0] c225, c226, c227, c228, c229, c230, c231, c232;
  wire [120:0] c233, c234, c235, c236, c237, c238, c239, c240;
  wire [124:0] c241, c
Path:  output_files/2329780_adder_32/2329780_simulation
Verilog compilation failed, error:  2
Compilation output:  b'output_files/2329780_adder_32/2329780_adder_32.v:67: syntax error\nI give up.\n'
Tokens:  990
LLM generates return in:  600.139964  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  90.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.024866   -0.0226588   0.00840514  0.0048861   0.00193384  0.00168602
  0.03395377  0.00093051  0.00082821  0.00071625]  taking action:  6
Leaf selection - depth:  1
Leaf selection - action scores:  [2.1686266e-01 2.1891461e-01 7.1708658e-03 4.0804289e-04 3.7138557e-04
 3.2243654e-04 2.6772969e-04 1.8925156e-04 1.7548235e-04 1.6251518e-04]  taking action:  1
Adding child.
Leaf selection - depth:  2
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  50286
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);   

  wire [31:0] c;
  adder_8 a1(sum[7:0], c[0], in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c[1], in1[15:8], in2[15:8], c[0]);
  adder_8 a3(sum[23:16], c[2], in1[23:16], in2[23:16], c[1]);
  adder_8 a4(sum[31:24], cout, in1[31:24], in2[31:24], c[2]);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  152
LLM generates return in:  53.964767  seconds
Running getPromptScore: 
adder_32
output_files/2329780_adder_32/synth_script.sh
Running bash in x seconds:  0.89652

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.1
Backpropogation: incorporating estimates.
Current runs:  91.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.02582866 -0.02223501  0.0084512   0.00491287  0.00194444  0.00169525
  0.03690472  0.00093561  0.00083274  0.00072018]  taking action:  6
Leaf selection - depth:  1
Leaf selection - action scores:  [2.2214757e-01 1.6162498e-01 7.3128766e-03 4.1612374e-04 3.7874046e-04
 3.2882203e-04 2.7303179e-04 1.9299946e-04 1.7895758e-04 1.6573361e-04]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.21987909 0.08512962 0.05670293 0.03757942 0.03674335 0.02327687
 0.01428924 0.00999431 0.00716964 0.00559336]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.221798   0.1319994  0.09973627 0.07378117 0.0183686  0.01735916
 0.0077828  0.0065466  0.00625642 0.00569728]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.2161961  0.24366793 0.13874884 0.08805461 0.00977736 0.0090604
 0.00639266 0.0055096  0.00450534 0.00435016]  taking action:  1
Leaf selection - depth:  5
Leaf selection - action scores:  [0.4281147  0.0764032  0.06911201 0.04773226 0.02607274 0.00951651
 0.00937022 0.00781267 0.0057844  0.00517889]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [5.1063442e-01 7.4916288e-02 5.0286604e-03 1.4344068e-03 1.4180850e-03
 1.0519115e-03 6.4040127e-04 3.9157399e-04 1.8612300e-04 1.5997504e-04]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [5.7304567e-01 3.1562117e-01 4.9444158e-02 3.0422509e-03 4.8177657e-04
 3.2889668e-04 1.8651960e-04 1.4769669e-04 1.3085101e-04 1.3071830e-04]  taking action:  0
Leaf selection - depth:  8
Leaf selection - action scores:  [8.5049248e-01 5.2879471e-03 2.3601758e-03 1.9154954e-04 1.6619528e-04
 1.3613190e-04 8.7297230e-05 5.7524569e-05 3.3455119e-05 1.4052869e-05]  taking action:  0
Leaf selection - depth:  9
Leaf selection - action scores:  [1.1296955e+00 2.8727548e-02 6.7221880e-04 6.0456240e-04 3.5926150e-04
 4.6790956e-05 4.4540728e-05 4.1029398e-05 2.7993285e-05 2.7159982e-05]  taking action:  0
Leaf selection - depth:  10
Leaf selection - action scores:  [1.9249227e+00 2.2593202e-02 1.5460146e-03 1.2496150e-03 1.9051510e-04
 1.4018579e-04 1.2907429e-04 4.6255183e-05 4.4364890e-05 4.3051794e-05]  taking action:  0
Adding child.
Leaf selection - depth:  11
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  18
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);   
  wire c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42,c43,c44,c45,c46,c47,c48,c49,c50,c51,c52,c53,c54,c55,c56,c57,c58,c59,c60,c61,c62,c63;
  adder_8 a1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
  adder_8 a3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
  adder_8 a4(sum[31:24], c4, in1[31:24], in2[31:24], c3);
  adder_8 a5(sum[39:32], c5, in1[39:32], in2[39:32], c4);
  adder_8 a6(sum[47:40], c6, in1[47:40], in2[47:40], c5);
  adder_8 a7(sum[55:48], c7, in1[55:48], in2[55:48], c6);
  adder_8 a8(sum[63:56], cout, in1[63:56], in2[63:56], c7);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 failed\n'
Tokens:  455
LLM generates return in:  200.758953  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  92.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.02678611 -0.02181351  0.00849701  0.0049395   0.00195498  0.00170444
  0.03222754  0.00094068  0.00083726  0.00072408]  taking action:  6
Leaf selection - depth:  1
Leaf selection - action scores:  [2.1423854e-01 1.6375138e-01 7.4521825e-03 4.2405064e-04 3.8595521e-04
 3.3508588e-04 2.7823288e-04 1.9667599e-04 1.8236661e-04 1.6889074e-04]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.21201292 0.08688506 0.05787219 0.03835433 0.03750103 0.02375686
 0.0145839  0.01020041 0.00731748 0.0057087 ]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.2122465  0.13627228 0.10188138 0.07536805 0.01876367 0.01773251
 0.00795019 0.00668741 0.00639098 0.00581981]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.22276984 0.21275215 0.14217526 0.09022913 0.01001882 0.00928415
 0.00655053 0.00564566 0.0046166  0.00445759]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [0.28030893 0.20657356 0.3254652  0.29450256 0.07676583 0.02051688
 0.01538603 0.01536503 0.01470937 0.00971173]  taking action:  2
Adding child.
Leaf selection - depth:  6
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  25
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);   
  wire [15:0] in1_1, in1_2, in1_3, in1_4, in1_5, in1_6, in1_7, in1_8, in1_9, in1_10, in1_11, in1_12, in1_13, in1_14, in1_15, in1_16, in1_17, in1_18, in1_19, in1_20, in1_21, in1_22, in1_23, in1_24, in1_25, in1_26, in1_27, in1_28, in1_29, in1_30, in1_31, in1_32, in1_33, in1_34, in1_35, in1_36, in1_37, in1_38, in1_39, in1_40, in1_41, in1_42, in1_43, in1_44, in1_45, in1_46, in1_47, in1_48, in1_49, in1_50, in1_51, in1_52, in1_53, in1_54, in1_55, in1_56, in1_57, in1_58, in1_59, in1_60, in1_61, in1_62, in1_63;
  wire [7:0] in2_1, in2_2, in2_3, in2_4, in2_5, in2_6, in2_7, in2_8, in2_9, in2_10, in2_11, in2_12, in2_13, in2_14, in2_15, in2_16, in2_17, in2_18, in2_19, in2_20, in2_21, in2_22, in2_23, in2_24, in2_25, in2_26, in2_27, in2_28, in2_29, in2_30, in2_31, in2_32, in2_33, in2_34, in2_35, in2_36, in2_37, in2_38, in2_39, in2_40, in2_41, in2_42, in2_43, in2_44, in2_45, in2_46, in2_47, in2_48, in2_49, in2_50, in2_51, in2_52, in2_53, in2_54, in2_55, in2_56, in2_57, in2_58, in2_59, in2_60, in2_61, in2_62, in2_63;
  wire c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15, c16, c17, c18, c19, c20, c21, c22, c23, c24, c25, c26, c27, c28, c29, c30, c31, c32, c33, c34, c35, c36, c37, c38, c39, c40, c41, c42, c43, c44, c45, c46, c47, c48, c49, c50, c51, c52, c53, c54, c55, c56, c57, c58, c59, c60, c61, c62, c63;
  full_adder_1 FA1_1(in1_1,  in2_1,  1'b0,  sum[0],  c1);
  full_adder_1 FA1_2(in1_2,  in2_2,  c1,  sum[1],  c2);
  full_adder_1 FA1_3(in1_3,  in2_3,  c2,  sum[2],  c3);
  full_adder_1 FA1_4(in1_4,  in2_4,  c3,  sum[3],  c4);
  full_adder_1 FA1_5(in1_
Path:  output_files/2329780_adder_32/2329780_simulation
Verilog compilation failed, error:  2
Compilation output:  b'output_files/2329780_adder_32/2329780_adder_32.v:43: syntax error\nI give up.\n'
Tokens:  993
LLM generates return in:  600.21287  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  93.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.02773843 -0.02139428  0.00854257  0.00496598  0.00196546  0.00171358
 -0.00426044  0.00094572  0.00084175  0.00072796]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [ 0.02600271  0.00642419 -0.02839588  0.04034431  0.02100874  0.01899778
  0.01869155  0.00849394  0.0059328   0.0043667 ]  taking action:  3
Adding child.
Leaf selection - depth:  2
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  21809
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
   wire [31:0] c;
   adder_8 a1(sum[7:0], c[0], in1[7:0], in2[7:0], cin);
   adder_8 a2(sum[15:8], c[1], in1[15:8], in2[15:8], c[0]);
   adder_8 a3(sum[23:16], c[2], in1[23:16], in2[23:16], c[1]);
   adder_8 a4(sum[31:24], cout, in1[31:24], in2[31:24], c[2]);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  151
LLM generates return in:  53.577219  seconds
Running getPromptScore: 
adder_32
output_files/2329780_adder_32/synth_script.sh
Running bash in x seconds:  0.903779

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.1
Backpropogation: incorporating estimates.
Current runs:  94.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.02983593 -0.02097727  0.00858789  0.00499233  0.00197589  0.00172267
 -0.00388516  0.00095074  0.00084621  0.00073182]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [ 0.02746762  0.0068848  -0.02821952  0.07033683  0.02118025  0.01915287
  0.01884414  0.00856328  0.00598123  0.00440235]  taking action:  3
Leaf selection - depth:  2
Leaf selection - action scores:  [1.6031053  0.1327328  0.08099692 0.01431356 0.01018653 0.00473793
 0.00424788 0.00316638 0.00199555 0.00181918]  taking action:  0
Adding child.
Leaf selection - depth:  3
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  685
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
   wire [31:0] c;
   adder_8 a1(sum[7:0], c[0], in1[7:0], in2[7:0], cin);
   adder_8 a2(sum[15:8], c[1], in1[15:8], in2[15:8], c[0]);
   adder_8 a3(sum[23:16], c[2], in1[23:16], in2[23:16], c[1]);
   adder_8 a4(sum[31:24], cout, in1[31:24], in2[31:24], c[2]);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  150
LLM generates return in:  53.241213  seconds
Running getPromptScore: 
adder_32
output_files/2329780_adder_32/synth_script.sh
Running bash in x seconds:  0.891607

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.1
Backpropogation: incorporating estimates.
Current runs:  95.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.03186203 -0.02056245  0.00863297  0.00501854  0.00198626  0.00173172
 -0.00351186  0.00095573  0.00085065  0.00073566]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [ 0.0289208   0.00734171 -0.02804458  0.08033346  0.02135037  0.01930671
  0.0189955   0.00863206  0.00602927  0.00443771]  taking action:  3
Leaf selection - depth:  2
Leaf selection - action scores:  [1.0316975  0.16256382 0.09920056 0.01753046 0.0124759  0.00580276
 0.00520257 0.00387801 0.00244404 0.00222803]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [1.1617581  0.69756514 0.04385562 0.01534558 0.00433204 0.0041751
 0.00275973 0.00196316 0.00151755 0.00131791]  taking action:  0
Adding child.
Leaf selection - depth:  4
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  3132
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
   wire [31:0] c;
   adder_8 a1(sum[7:0], c[0], in1[7:0], in2[7:0], cin);
   adder_8 a2(sum[15:8], c[1], in1[15:8], in2[15:8], c[0]);
   adder_8 a3(sum[23:16], c[2], in1[23:16], in2[23:16], c[1]);
   adder_8 a4(sum[31:24], cout, in1[31:24], in2[31:24], c[2]);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  149
LLM generates return in:  52.942407  seconds
Running getPromptScore: 
adder_32
output_files/2329780_adder_32/synth_script.sh
Running bash in x seconds:  0.899633

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.1
Backpropogation: incorporating estimates.
Current runs:  96.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.03382015 -0.02014978  0.00867781  0.00504461  0.00199658  0.00174071
 -0.00314049  0.0009607   0.00085507  0.00073949]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [ 0.03036247  0.00779502 -0.02787101  0.08533112  0.02151915  0.01945934
  0.01914566  0.0087003   0.00607694  0.00447279]  taking action:  3
Leaf selection - depth:  2
Leaf selection - action scores:  [0.82237774 0.18771252 0.11454693 0.02024243 0.01440592 0.00670045
 0.00600741 0.00447794 0.00282213 0.00257271]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.7614286  0.85433936 0.05371194 0.01879442 0.00530564 0.00511343
 0.00337997 0.00240437 0.00185861 0.0016141 ]  taking action:  1
Adding child.
Leaf selection - depth:  4
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  16
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
   wire c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42,c43,c44,c45,c46,c47,c48,c49,c50,c51,c52,c53,c54,c55,c56,c57,c58,c59,c60,c61,c62,c63;
  adder_8 a1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
  adder_8 a3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
  adder_8 a4(sum[31:24], c4, in1[31:24], in2[31:24], c3);
  adder_8 a5(sum[39:32], c5, in1[39:32], in2[39:32], c4);
  adder_8 a6(sum[47:40], c6, in1[47:40], in2[47:40], c5);
  adder_8 a7(sum[55:48], c7, in1[55:48], in2[55:48], c6);
  adder_8 a8(sum[63:56], cout, in1[63:56], in2[63:56], c7);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 failed\n'
Tokens:  461
LLM generates return in:  202.495929  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  97.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.03263656 -0.01973924  0.00872243  0.00507054  0.00200684  0.00174966
 -0.00277103  0.00096564  0.00085947  0.00074329]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [ 0.03179292  0.00824479 -0.0276988   0.04832922  0.02168662  0.01961077
  0.01929466  0.008768    0.00612423  0.0045076 ]  taking action:  3
Leaf selection - depth:  2
Leaf selection - action scores:  [0.65868294 0.20986897 0.12806736 0.02263172 0.01610631 0.00749133
 0.00671649 0.00500649 0.00315524 0.00287638]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.87148696 0.44325304 0.06202121 0.02170192 0.00612642 0.00590448
 0.00390285 0.00277633 0.00214614 0.00186381]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [1.4524996  0.22498547 0.09930719 0.06627005 0.04050203 0.00911158
 0.00733716 0.00634784 0.00574605 0.00263211]  taking action:  0
Adding child.
Leaf selection - depth:  5
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  25
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
   wire [31:0] c;
   adder_8 a1(sum[7:0], c[0], in1[7:0], in2[7:0], cin);
   adder_8 a2(sum[15:8], c[1], in1[15:8], in2[15:8], c[0]);
   adder_8 a3(sum[23:16], c[2], in1[23:16], in2[23:16], c[1]);
   adder_8 a4(sum[31:24], cout, in1[31:24], in2[31:24], c[2]);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  148
LLM generates return in:  52.602111  seconds
Running getPromptScore: 
adder_32
output_files/2329780_adder_32/synth_script.sh
Running bash in x seconds:  0.902134

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.1
Backpropogation: incorporating estimates.
Current runs:  98.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.03451477 -0.01933079  0.00876682  0.00509635  0.00201706  0.00175857
 -0.00240345  0.00097055  0.00086384  0.00074707]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [ 0.03321241  0.00869112 -0.02752791  0.0569942   0.0218528   0.01976105
  0.01944251  0.00883519  0.00617116  0.00454214]  taking action:  3
Leaf selection - depth:  2
Leaf selection - action scores:  [0.59533197 0.22989994 0.14029077 0.02479181 0.01764358 0.00820634
 0.00735755 0.00548434 0.00345639 0.00315092]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.6789669  0.50147367 0.06934182 0.02426349 0.00684955 0.00660141
 0.00436352 0.00310403 0.00239946 0.0020838 ]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.93947077 0.2755498  0.12162598 0.08116391 0.04960466 0.01115936
 0.00898615 0.00777449 0.00703745 0.00322366]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [1.9511824e+00 3.8128404e-04 2.3107339e-05 4.2463766e-06 4.1730545e-06
 3.1600364e-06 2.9767555e-06 2.5768745e-06 1.8361027e-06 1.7578926e-06]  taking action:  0
Adding child.
Leaf selection - depth:  6
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  15
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
   wire [31:0] c;
   adder_8 a1(sum[7:0], c[0], in1[7:0], in2[7:0], cin);
   adder_8 a2(sum[15:8], c[1], in1[15:8], in2[15:8], c[0]);
   adder_8 a3(sum[23:16], c[2], in1[23:16], in2[23:16], c[1]);
   adder_8 a4(sum[31:24], cout, in1[31:24], in2[31:24], c[2]);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  147
LLM generates return in:  52.268175  seconds
Running getPromptScore: 
adder_32
output_files/2329780_adder_32/synth_script.sh
Running bash in x seconds:  0.890896

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.1
Backpropogation: incorporating estimates.
Current runs:  99.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.03633265 -0.01892439  0.00881099  0.00512202  0.00202722  0.00176742
 -0.00203772  0.00097544  0.0008682   0.00075083]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [ 0.03462121  0.00913408 -0.0273583   0.06318313  0.02201773  0.01991019
  0.01958925  0.00890187  0.00621773  0.00457642]  taking action:  3
Leaf selection - depth:  2
Leaf selection - action scores:  [0.5498559  0.24832033 0.15153135 0.02677822 0.01905725 0.00886386
 0.00794706 0.00592376 0.00373333 0.00340338]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.5780559  0.5541091  0.07596015 0.02657932 0.00750331 0.00723148
 0.00477999 0.0034003  0.00262848 0.00228269]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.7513815  0.3181775  0.14044158 0.09372    0.05727853 0.01288572
 0.01037631 0.0089772  0.00812615 0.00372237]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [1.2448503e+00 4.6697567e-04 2.8300596e-05 5.2007281e-06 5.1109273e-06
 3.8702383e-06 3.6457659e-06 3.1560139e-06 2.2487575e-06 2.1529700e-06]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [1.9500570e+00 7.9776754e-04 4.6894763e-04 9.0036476e-05 5.0828661e-05
 2.9174418e-05 2.1132841e-05 1.7036904e-05 9.7992324e-06 8.7333901e-06]  taking action:  0
Adding child.
Leaf selection - depth:  7
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  60
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
   wire [31:0] c;
   adder_8 a1(sum[7:0], c[0], in1[7:0], in2[7:0], cin);
   adder_8 a2(sum[15:8], c[1], in1[15:8], in2[15:8], c[0]);
   adder_8 a3(sum[23:16], c[2], in1[23:16], in2[23:16], c[1]);
   adder_8 a4(sum[31:24], cout, in1[31:24], in2[31:24], c[2]);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  146
LLM generates return in:  51.998241  seconds
Running getPromptScore: 
adder_32
output_files/2329780_adder_32/synth_script.sh
Running bash in x seconds:  0.903893

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.1
Backpropogation: incorporating estimates.
Current runs:  100.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.03809294 -0.01852002  0.00885493  0.00514757  0.00203733  0.00177624
 -0.00167381  0.0009803   0.00087253  0.00075458]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [ 0.0360195   0.00957374 -0.02718996  0.06782454  0.02218143  0.02005822
  0.0197349   0.00896806  0.00626396  0.00461045]  taking action:  3
Leaf selection - depth:  2
Leaf selection - action scores:  [0.51517296 0.2654656  0.16199383 0.02862712 0.02037305 0.00947587
 0.00849576 0.00633276 0.0039911  0.00363836]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.51469004 0.6025124  0.08204634 0.02870895 0.0081045  0.0078109
 0.00516298 0.00367274 0.00283908 0.00246558]  taking action:  1
Leaf selection - depth:  4
Leaf selection - action scores:  [1.7749279  0.04824841 0.03839501 0.03024069 0.01016102 0.00542699
 0.0049518  0.00372856 0.00337261 0.00291962]  taking action:  0
Adding child.
Leaf selection - depth:  5
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  11
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
   wire c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42,c43,c44,c45,c46,c47,c48,c49,c50,c51,c52,c53,c54,c55,c56,c57,c58,c59,c60,c61,c62,c63;
  adder_8 a1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
  adder_8 a3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
  adder_8 a4(sum[31:24], c4, in1[31:24], in2[31:24], c3);
  adder_8 a5(sum[39:32], c5, in1[39:32], in2[39:32], c4);
  adder_8 a6(sum[47:40], c6, in1[47:40], in2[47:40], c5);
  adder_8 a7(sum[55:48], c7, in1[55:48], in2[55:48], c6);
  adder_8 a8(sum[63:56], cout, in1[63:56], in2[63:56], c7);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 failed\n'
Tokens:  460
LLM generates return in:  202.156582  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  101.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.03689963 -0.01811765  0.00889866  0.00517299  0.00204739  0.00178501
 -0.00131171  0.00098515  0.00087683  0.00075831]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [ 0.03740756  0.01001018 -0.02702285  0.04921204  0.02234394  0.02020517
  0.01987948  0.00903376  0.00630985  0.00464422]  taking action:  3
Leaf selection - depth:  2
Leaf selection - action scores:  [0.46258745 0.28156877 0.1718204  0.03036364 0.02160889 0.01005067
 0.00901112 0.00671691 0.0042332  0.00385907]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.54470325 0.39837676 0.08771124 0.03069116 0.00866407 0.0083502
 0.00551946 0.00392633 0.00303511 0.00263582]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.64915085 0.35573325 0.15701845 0.10478215 0.06403933 0.01440667
 0.01160106 0.01003682 0.00908531 0.00416173]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [9.8646283e-01 5.3921703e-04 3.2678712e-05 6.0052835e-06 5.9015902e-06
 4.4689664e-06 4.2097677e-06 3.6442509e-06 2.5966413e-06 2.4860356e-06]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [1.24416113e+00 9.77061689e-04 5.74341218e-04 1.10271714e-04
 6.22521475e-05 3.57312201e-05 2.58823384e-05 2.08658603e-05
 1.20015602e-05 1.06961743e-05]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [1.92864394e+00 2.22314987e-02 3.08286340e-04 2.42294467e-04
 7.06185820e-05 2.26723641e-05 1.91168219e-05 1.31204561e-05
 1.03203865e-05 9.59594490e-06]  taking action:  0
Adding child.
Leaf selection - depth:  8
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  269
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
   wire [31:0] c;
   adder_8 a1(sum[7:0], c[0], in1[7:0], in2[7:0], cin);
   adder_8 a2(sum[15:8], c[1], in1[15:8], in2[15:8], c[0]);
   adder_8 a3(sum[23:16], c[2], in1[23:16], in2[23:16], c[1]);
   adder_8 a4(sum[31:24], cout, in1[31:24], in2[31:24], c[2]);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  145
LLM generates return in:  51.673444  seconds
Running getPromptScore: 
adder_32
output_files/2329780_adder_32/synth_script.sh
Running bash in x seconds:  0.90271

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.1
Backpropogation: incorporating estimates.
Current runs:  102.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.03859368 -0.01771724  0.00894217  0.00519828  0.0020574   0.00179374
 -0.00095137  0.00098996  0.00088112  0.00076201]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [ 0.03878559  0.01044347 -0.02685695  0.05432182  0.02250527  0.02035106
  0.02002301  0.00909899  0.00635541  0.00467776]  taking action:  3
Leaf selection - depth:  2
Leaf selection - action scores:  [0.44273916 0.29679954 0.1811146  0.03200609 0.02277777 0.01059434
 0.00949855 0.00708025 0.00446219 0.00406781]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.49407682 0.42658636 0.09303181 0.03255288 0.00918964 0.00885672
 0.00585427 0.0041645  0.00321922 0.00279571]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.5831606  0.38968626 0.1720051  0.11478309 0.07015158 0.01578172
 0.01270833 0.01099478 0.00995246 0.00455895]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [8.4627253e-01 6.0286297e-04 3.6535908e-05 6.7141109e-06 6.5981781e-06
 4.9964560e-06 4.7066633e-06 4.0743962e-06 2.9031332e-06 2.7794722e-06]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [9.8593235e-01 1.1282137e-03 6.6319207e-04 1.2733080e-04 7.1882583e-05
 4.1258856e-05 2.9886349e-05 2.4093819e-05 1.3858207e-05 1.2350878e-05]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [1.2310483e+00 2.7227916e-02 3.7757211e-04 2.9674891e-04 8.6489745e-05
 2.7767861e-05 2.3413229e-05 1.6069213e-05 1.2639841e-05 1.1752584e-05]  taking action:  0
Leaf selection - depth:  8
Leaf selection - action scores:  [0.33887285 0.32907012 0.3201659  0.16083977 0.13340877 0.07768124
 0.04945054 0.04617454 0.03279665 0.0301876 ]  taking action:  0
Adding child.
Leaf selection - depth:  9
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  26
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
   wire [31:0] c;
   adder_8 a1(sum[7:0], c[0], in1[7:0], in2[7:0], cin);
   adder_8 a2(sum[15:8], c[1], in1[15:8], in2[15:8], c[0]);
   adder_8 a3(sum[23:16], c[2], in1[23:16], in2[23:16], c[1]);
   adder_8 a4(sum[31:24], cout, in1[31:24], in2[31:24], c[2]);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  144
LLM generates return in:  51.337344  seconds
Running getPromptScore: 
adder_32
output_files/2329780_adder_32/synth_script.sh
Running bash in x seconds:  0.906135

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.1
Backpropogation: incorporating estimates.
Current runs:  103.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.04023621 -0.01731878  0.00898548  0.00522346  0.00206737  0.00180243
 -0.00059278  0.00099476  0.00088539  0.0007657 ]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [ 0.04015383  0.01087369 -0.02669223  0.05850235  0.02266545  0.02049591
  0.02016553  0.00916375  0.00640065  0.00471105]  taking action:  3
Leaf selection - depth:  2
Leaf selection - action scores:  [0.42596155 0.311286   0.18995461 0.03356827 0.02388952 0.01111144
 0.00996217 0.00742583 0.00467998 0.00426636]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.45682424 0.4532677  0.09806414 0.03431375 0.00968673 0.00933581
 0.00617094 0.00438976 0.00339335 0.00294693]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.53622967 0.42090926 0.18578675 0.12397992 0.07577237 0.01704621
 0.01372656 0.01187573 0.01074988 0.00492423]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [7.5590938e-01 6.6040328e-04 4.0023086e-05 7.3549400e-06 7.2279422e-06
 5.4733437e-06 5.1558914e-06 4.4632775e-06 3.1802231e-06 3.0447593e-06]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [8.4582770e-01 1.2613812e-03 7.4147125e-04 1.4236016e-04 8.0367165e-05
 4.6128804e-05 3.3413955e-05 2.6937709e-05 1.5493946e-05 1.3808701e-05]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [9.7583818e-01 3.1440087e-02 4.3598271e-04 3.4265613e-04 9.9869758e-05
 3.2063563e-05 2.7035268e-05 1.8555127e-05 1.4595230e-05 1.3570715e-05]  taking action:  0
Leaf selection - depth:  8
Leaf selection - action scores:  [0.2575164  0.40302694 0.39212155 0.19698769 0.16339171 0.0951397
 0.06056429 0.05655203 0.04016753 0.03697211]  taking action:  1
Adding child.
Leaf selection - depth:  9
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  26
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
   wire [31:0] carry;
   adder_8 A1(sum[7:0], carry[0], in1[7:0], in2[7:0], cin);
   adder_8 A2(sum[15:8], carry[1], in1[15:8], in2[15:8], carry[0]);
   adder_8 A3(sum[23:16], carry[2], in1[23:16], in2[23:16], carry[1]);
   adder_8 A4(sum[31:24], carry[3], in1[31:24], in2[31:24], carry[2]);
   adder_8 A5(sum[39:32], carry[4], in1[39:32], in2[39:32], carry[3]);
   adder_8 A6(sum[47:40], carry[5], in1[47:40], in2[47:40], carry[4]);
   adder_8 A7(sum[55:48], carry[6], in1[55:48], in2[55:48], carry[5]);
   adder_8 A8(sum[63:56], cout, in1[63:56], in2[63:56], carry[6]);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 failed\n'
Tokens:  288
LLM generates return in:  114.085865  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  104.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.03905166 -0.01692222  0.00902857  0.00524851  0.00207728  0.00181107
 -0.00023591  0.00099953  0.00088964  0.00076938]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [ 0.04151246  0.01130087 -0.02652866  0.04531927  0.02282451  0.02063974
  0.02030704  0.00922806  0.00644557  0.00474411]  taking action:  3
Leaf selection - depth:  2
Leaf selection - action scores:  [0.39334455 0.32512763 0.19840112 0.03506092 0.02495179 0.01160552
 0.01040514 0.00775602 0.00488808 0.00445607]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.4030705  0.4786451  0.10285054 0.03598857 0.01015953 0.00979148
 0.00647214 0.00460402 0.00355898 0.00309077]  taking action:  1
Leaf selection - depth:  4
Leaf selection - action scores:  [1.036917   0.059092   0.04702409 0.03703713 0.01244466 0.00664668
 0.00606469 0.00456653 0.00413059 0.00357579]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [1.8901774e+00 5.4661501e-02 2.8128407e-03 7.9901103e-04 7.5437321e-04
 5.1216251e-04 2.7246238e-04 2.4072436e-04 1.0889772e-04 9.7749427e-05]  taking action:  0
Adding child.
Leaf selection - depth:  6
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  66
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
   wire c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42,c43,c44,c45,c46,c47,c48,c49,c50,c51,c52,c53,c54,c55,c56,c57,c58,c59,c60,c61,c62,c63;
  adder_8 a1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
  adder_8 a3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
  adder_8 a4(sum[31:24], c4, in1[31:24], in2[31:24], c3);
  adder_8 a5(sum[39:32], c5, in1[39:32], in2[39:32], c4);
  adder_8 a6(sum[47:40], c6, in1[47:40], in2[47:40], c5);
  adder_8 a7(sum[55:48], c7, in1[55:48], in2[55:48], c6);
  adder_8 a8(sum[63:56], cout, in1[63:56], in2[63:56], c7);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 failed\n'
Tokens:  459
LLM generates return in:  201.813107  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  105.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.03789599 -0.01652755  0.00907146  0.00527344  0.00208715  0.00181967
  0.00011927  0.00100428  0.00089386  0.00077303]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [ 0.04286167  0.0117251  -0.02636623  0.0341642   0.02298246  0.02078258
  0.02044758  0.00929192  0.00649017  0.00477694]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [ 0.0440135   0.0457152  -0.46590683 -0.01941995  0.01785049  0.01357408
  0.01312242  0.0092005   0.00914828  0.00541014]  taking action:  1
Leaf selection - depth:  3
Leaf selection - action scores:  [1.14369249e+00 1.05228508e-03 1.43509635e-04 1.20744007e-04
 1.02151724e-04 1.01336664e-04 8.45744071e-05 8.41008296e-05
 7.20610406e-05 4.14503738e-05]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [1.9409696e+00 6.6175782e-03 9.8510983e-04 8.9811679e-04 6.0285209e-04
 3.1198573e-04 1.8832588e-04 1.6098292e-04 1.0387180e-04 7.8276847e-05]  taking action:  0
Adding child.
Leaf selection - depth:  5
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  317
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
  adder_8 A1(sum[7:0], cout, in1[7:0], in2[7:0], cin);
  adder_8 A2(sum[15:8], cout, in1[15:8], in2[15:8], cout);
  adder_8 A3(sum[23:16], cout, in1[23:16], in2[23:16], cout);
  adder_8 A4(sum[31:24], cout, in1[31:24], in2[31:24], cout);
  adder_8 A5(sum[39:32], cout, in1[39:32], in2[39:32], cout);
  adder_8 A6(sum[47:40], cout, in1[47:40], in2[47:40], cout);
  adder_8 A7(sum[55:48], cout, in1[55:48], in2[55:48], cout);
  adder_8 A8(sum[63:56], cout, in1[63:56], in2[63:56], cout);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 failed\n'
Tokens:  254
LLM generates return in:  97.583356  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  106.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.03676807 -0.01613474  0.00911415  0.00529826  0.00209697  0.00182824
  0.00047277  0.001009    0.00089807  0.00077667]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [ 0.0417576   0.01214644 -0.0262049   0.03418737  0.02313934  0.02092444
  0.02058715  0.00935535  0.00653447  0.00480955]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [ 0.045606    0.0100099  -0.46561417 -0.01915745  0.01800371  0.0136906
  0.01323506  0.00927947  0.00922681  0.00545658]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [ 0.08179263  0.035008   -0.36375695  0.01490052  0.01214298  0.00819776
  0.00579194  0.00568902  0.00468631  0.00404762]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.15223552 0.10376832 0.09511062 0.07310656 0.02686077 0.01162083
 0.01140963 0.01027994 0.00763506 0.0075975 ]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [0.1671547  0.0930815  0.00777888 0.00233128 0.0018512  0.00150905
 0.00088684 0.00048701 0.00023377 0.00020262]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [0.17336646 0.13996217 0.09244609 0.00490324 0.00076797 0.00046552
 0.00029403 0.00024184 0.00023975 0.00023732]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [2.1389639e-01 7.2341985e-03 3.7732080e-03 3.8646747e-04 2.5991770e-04
 1.8960208e-04 1.7615782e-04 9.5249219e-05 5.0787570e-05 2.7396582e-05]  taking action:  0
Leaf selection - depth:  8
Leaf selection - action scores:  [2.1900013e-01 6.9302186e-02 1.4410779e-03 1.3962719e-03 5.8824912e-04
 1.0772070e-04 9.8945122e-05 9.0519796e-05 6.2089523e-05 5.9848651e-05]  taking action:  0
Leaf selection - depth:  9
Leaf selection - action scores:  [2.27586329e-01 6.12519085e-02 4.12458880e-03 3.61464359e-03
 4.62092226e-04 3.33605392e-04 3.16973776e-04 1.22415149e-04
 1.12044305e-04 1.11524918e-04]  taking action:  0
Leaf selection - depth:  10
Leaf selection - action scores:  [2.3972785e-01 7.0209056e-03 5.5768797e-03 1.2135521e-03 6.0961663e-04
 3.6919588e-04 2.9011481e-04 2.5160649e-04 2.1678918e-04 2.0138944e-04]  taking action:  0
Leaf selection - depth:  11
Leaf selection - action scores:  [2.4333990e-01 1.8796790e-01 8.2385691e-04 5.0709519e-04 3.8472246e-04
 1.4750220e-04 5.9909002e-05 5.1931242e-05 4.7429181e-05 3.0842511e-05]  taking action:  0
Leaf selection - depth:  12
Leaf selection - action scores:  [2.5907874e-01 3.3799488e-02 3.7100646e-03 2.5767579e-03 9.8838622e-04
 5.4091366e-04 3.8531041e-04 1.8133830e-04 1.6999322e-04 1.5655970e-04]  taking action:  0
Leaf selection - depth:  13
Leaf selection - action scores:  [2.73736835e-01 7.30354013e-03 2.89541110e-03 1.15258538e-03
 5.10073267e-04 4.65551566e-04 2.91597127e-04 2.69331649e-04
 2.11663893e-04 1.01329904e-04]  taking action:  0
Leaf selection - depth:  14
Leaf selection - action scores:  [2.8502285e-01 5.3456966e-02 3.5217943e-04 1.2410479e-04 7.6464567e-05
 5.9460774e-05 5.3166270e-05 3.8089100e-05 3.0588642e-05 2.0881294e-05]  taking action:  0
Leaf selection - depth:  15
Leaf selection - action scores:  [3.0381078e-01 1.0567887e-02 1.0894238e-03 8.6774951e-04 4.8397499e-04
 1.4222476e-04 5.8285266e-05 5.3627351e-05 4.6871770e-05 3.7195354e-05]  taking action:  0
Leaf selection - depth:  16
Leaf selection - action scores:  [3.2260147e-01 2.6793638e-03 6.6881138e-04 2.2061956e-04 1.7106660e-04
 1.5502762e-04 1.4254925e-04 9.1280075e-05 8.1905368e-05 5.1120733e-05]  taking action:  0
Leaf selection - depth:  17
Leaf selection - action scores:  [3.4313861e-01 4.9064783e-03 2.6786074e-04 2.6194341e-04 2.1220429e-04
 3.8089987e-05 3.4581190e-05 3.3874574e-05 2.6977514e-05 2.3784698e-05]  taking action:  0
Leaf selection - depth:  18
Leaf selection - action scores:  [3.6673555e-01 7.7345162e-03 5.2985374e-04 4.8294186e-04 2.2868844e-04
 8.3182633e-05 4.1115916e-05 2.7434697e-05 2.7225144e-05 2.4843304e-05]  taking action:  0
Leaf selection - depth:  19
Leaf selection - action scores:  [3.9569676e-01 2.0161963e-03 9.7952019e-05 9.0046429e-05 8.1774560e-05
 5.5446377e-05 5.1716026e-05 5.0745741e-05 4.6368554e-05 4.5039258e-05]  taking action:  0
Leaf selection - depth:  20
Leaf selection - action scores:  [4.26824301e-01 2.50669289e-02 1.62188982e-04 6.90539382e-05
 1.70931562e-05 1.26940295e-05 7.27190400e-06 7.06265064e-06
 4.24587324e-06 3.19494347e-06]  taking action:  0
Leaf selection - depth:  21
Leaf selection - action scores:  [4.7099054e-01 4.9963724e-03 4.0865922e-04 3.2068935e-04 1.6815287e-04
 7.6943135e-05 1.9537563e-05 1.6437598e-05 1.5885382e-05 1.4796301e-05]  taking action:  0
Leaf selection - depth:  22
Leaf selection - action scores:  [5.2491224e-01 4.9134420e-04 3.4207010e-04 3.1045952e-04 2.7514846e-04
 3.7892729e-05 2.7216380e-05 2.2026710e-05 2.1874650e-05 2.1411823e-05]  taking action:  0
Leaf selection - depth:  23
Leaf selection - action scores:  [5.2409917e-01 3.5871309e-01 4.2354793e-04 1.8071014e-04 1.0019128e-04
 5.5569901e-05 4.8943832e-05 4.6119712e-05 1.6014543e-05 1.5716902e-05]  taking action:  0
Leaf selection - depth:  24
Leaf selection - action scores:  [6.80935979e-01 4.04101387e-02 1.65385474e-02 1.53031759e-03
 1.08725438e-03 4.10850014e-04 2.40661742e-04 1.86876408e-04
 1.19930526e-04 9.92349305e-05]  taking action:  0
Leaf selection - depth:  25
Leaf selection - action scores:  [8.5106993e-01 3.2564804e-03 2.4335820e-03 4.1949973e-04 9.7981450e-05
 7.3512485e-05 5.4719520e-05 4.3542739e-05 3.8952036e-05 3.8431903e-05]  taking action:  0
Leaf selection - depth:  26
Leaf selection - action scores:  [7.1657693e-01 8.5451758e-01 1.3234350e-03 6.1717542e-04 2.4893563e-04
 7.2798997e-05 4.5020377e-05 2.2717340e-05 1.8880741e-05 1.5862404e-05]  taking action:  1
Adding child.
Leaf selection - depth:  27
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  198
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7,c8;
  adder_8 A1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
  adder_8 A2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
  adder_8 A3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
  adder_8 A4(sum[31:24], c4, in1[31:24], in2[31:24], c3);
  adder_8 A5(sum[39:32], c5, in1[39:32], in2[39:32], c4);
  adder_8 A6(sum[47:40], c6, in1[47:40], in2[47:40], c5);
  adder_8 A7(sum[55:48], c7, in1[55:48], in2[55:48], c6);
  adder_8 A8(sum[63:56], cout, in1[63:56], in2[63:56], c7);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 failed\n'
Tokens:  273
LLM generates return in:  109.680858  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  107.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.03566685 -0.01574375  0.00915664  0.00532296  0.00210675  0.00183676
  0.00082463  0.00101371  0.00090226  0.00078029]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [ 0.0406816   0.01256495 -0.02604467  0.03421039  0.02329516  0.02106535
  0.02072579  0.00941835  0.00657848  0.00484194]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [ 0.04445942  0.01072729 -0.46532398 -0.01889717  0.01815565  0.01380613
  0.01334675  0.00935778  0.00930467  0.00550263]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [ 0.07767723  0.03697996 -0.36247766  0.01550992  0.012257    0.00827473
  0.00584633  0.00574244  0.00473031  0.00408563]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.14784989 0.10542872 0.09663249 0.07427634 0.02729057 0.01180677
 0.0115922  0.01044443 0.00775723 0.00771907]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [0.16235311 0.09462014 0.00790746 0.00236982 0.0018818  0.001534
 0.0009015  0.00049506 0.00023764 0.00020597]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [0.16624105 0.14377949 0.09402648 0.00498706 0.0007811  0.00047348
 0.00029905 0.00024597 0.00024385 0.00024138]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [2.0642588e-01 7.3897904e-03 3.8543614e-03 3.9477955e-04 2.6550796e-04
 1.9368001e-04 1.7994658e-04 9.7297823e-05 5.1879899e-05 2.7985823e-05]  taking action:  0
Leaf selection - depth:  8
Leaf selection - action scores:  [2.1103725e-01 7.0859738e-02 1.4734658e-03 1.4276527e-03 6.0146989e-04
 1.1014169e-04 1.0116889e-04 9.2554204e-05 6.3484971e-05 6.1193736e-05]  taking action:  0
Leaf selection - depth:  9
Leaf selection - action scores:  [2.18992651e-01 6.26933202e-02 4.22165124e-03 3.69970547e-03
 4.72966436e-04 3.41455976e-04 3.24432971e-04 1.25295905e-04
 1.14680995e-04 1.14149392e-04]  taking action:  0
Leaf selection - depth:  10
Leaf selection - action scores:  [2.3034117e-01 7.1942881e-03 5.7146014e-03 1.2435209e-03 6.2467123e-04
 3.7831321e-04 2.9727921e-04 2.5781995e-04 2.2214281e-04 2.0636278e-04]  taking action:  0
Leaf selection - depth:  11
Leaf selection - action scores:  [2.3254502e-01 1.9155207e-01 8.4525929e-04 5.2026863e-04 3.9471689e-04
 1.5133405e-04 6.1465333e-05 5.3280328e-05 4.8661310e-05 3.1643747e-05]  taking action:  0
Leaf selection - depth:  12
Leaf selection - action scores:  [2.4758378e-01 3.4779385e-02 3.8176249e-03 2.6514621e-03 1.0170410e-03
 5.5659562e-04 3.9648113e-04 1.8659557e-04 1.7492159e-04 1.6109861e-04]  taking action:  0
Leaf selection - depth:  13
Leaf selection - action scores:  [2.6096928e-01 7.5283167e-03 2.9845214e-03 1.1880577e-03 5.2577147e-04
 4.7987956e-04 3.0057144e-04 2.7762071e-04 2.1817815e-04 1.0444847e-04]  taking action:  0
Leaf selection - depth:  14
Leaf selection - action scores:  [2.7092123e-01 5.5210117e-02 3.6372937e-04 1.2817487e-04 7.8972262e-05
 6.1410821e-05 5.4909888e-05 3.9338251e-05 3.1591811e-05 2.1566108e-05]  taking action:  0
Leaf selection - depth:  15
Leaf selection - action scores:  [2.8787714e-01 1.0938803e-02 1.1276607e-03 8.9820614e-04 5.0096173e-04
 1.4721662e-04 6.0330985e-05 5.5509587e-05 4.8516893e-05 3.8500850e-05]  taking action:  0
Leaf selection - depth:  16
Leaf selection - action scores:  [3.0452895e-01 2.7805073e-03 6.9405831e-04 2.2894773e-04 1.7752418e-04
 1.6087976e-04 1.4793035e-04 9.4725809e-05 8.4997213e-05 5.3050488e-05]  taking action:  0
Leaf selection - depth:  17
Leaf selection - action scores:  [3.2245687e-01 5.1068245e-03 2.7879828e-04 2.7263933e-04 2.2086923e-04
 3.9645314e-05 3.5993246e-05 3.5257774e-05 2.8079086e-05 2.4755898e-05]  taking action:  0
Leaf selection - depth:  18
Leaf selection - action scores:  [3.4276792e-01 8.0784382e-03 5.5341417e-04 5.0441630e-04 2.3885728e-04
 8.6881424e-05 4.2944172e-05 2.8654604e-05 2.8435734e-05 2.5947984e-05]  taking action:  0
Leaf selection - depth:  19
Leaf selection - action scores:  [3.6741397e-01 2.1146047e-03 1.0273295e-04 9.4441501e-05 8.5765889e-05
 5.8152655e-05 5.4240227e-05 5.3222586e-05 4.8631755e-05 4.7237576e-05]  taking action:  0
Leaf selection - depth:  20
Leaf selection - action scores:  [3.93018126e-01 2.64228638e-02 1.70962201e-04 7.27892475e-05
 1.80177685e-05 1.33806825e-05 7.66525955e-06 7.44468753e-06
 4.47554339e-06 3.36776634e-06]  taking action:  0
Leaf selection - depth:  21
Leaf selection - action scores:  [4.2916521e-01 5.2994532e-03 4.3344856e-04 3.4014240e-04 1.7835305e-04
 8.1610509e-05 2.0722715e-05 1.7434704e-05 1.6848991e-05 1.5693848e-05]  taking action:  0
Leaf selection - depth:  22
Leaf selection - action scores:  [4.7163582e-01 5.2526902e-04 3.6568829e-04 3.3189519e-04 2.9414607e-04
 4.0509029e-05 2.9095532e-05 2.3547544e-05 2.3384984e-05 2.2890201e-05]  taking action:  0
Leaf selection - depth:  23
Leaf selection - action scores:  [4.60418075e-01 3.87454450e-01 4.57484071e-04 1.95189263e-04
 1.08218956e-04 6.00223539e-05 5.28653836e-05 4.98149820e-05
 1.72976852e-05 1.69761934e-05]  taking action:  0
Leaf selection - depth:  24
Leaf selection - action scores:  [5.8246911e-01 4.4267092e-02 1.8117072e-02 1.6763790e-03 1.1910276e-03
 4.5006364e-04 2.6363172e-04 2.0471285e-04 1.3137731e-04 1.0870642e-04]  taking action:  0
Leaf selection - depth:  25
Leaf selection - action scores:  [6.94545507e-01 3.64085566e-03 2.72082724e-03 4.69014951e-04
 1.09546585e-04 8.21894500e-05 6.11782816e-05 4.86822610e-05
 4.35496950e-05 4.29681750e-05]  taking action:  0
Leaf selection - depth:  26
Leaf selection - action scores:  [8.3516675e-01 4.4335592e-01 1.5281711e-03 7.1265275e-04 2.8744608e-04
 8.4061037e-05 5.1985055e-05 2.6231724e-05 2.1801601e-05 1.8316327e-05]  taking action:  0
Leaf selection - depth:  27
Leaf selection - action scores:  [1.9353809e+00 8.3776060e-03 5.3002029e-03 7.7058934e-04 5.7170173e-04
 1.5270313e-04 1.0589871e-04 7.4201009e-05 5.7400259e-05 4.1773161e-05]  taking action:  0
Adding child.
Leaf selection - depth:  28
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  24
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42,c43,c44,c45,c46,c47,c48,c49,c50,c51,c52,c53,c54,c55,c56,c57,c58,c59,c60,c61,c62,c63;
  adder_8 a1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
  adder_8 a3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
  adder_8 a4(sum[31:24], c4, in1[31:24], in2[31:24], c3);
  adder_8 a5(sum[39:32], c5, in1[39:32], in2[39:32], c4);
  adder_8 a6(sum[47:40], c6, in1[47:40], in2[47:40], c5);
  adder_8 a7(sum[55:48], c7, in1[55:48], in2[55:48], c6);
  adder_8 a8(sum[63:56], cout, in1[63:56], in2[63:56], c7);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 failed\n'
Tokens:  437
LLM generates return in:  194.668618  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  108.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.03459131 -0.01535458  0.00919894  0.00534755  0.00211648  0.00184525
  0.00117486  0.00101839  0.00090642  0.00078389]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [ 0.03963245  0.01298066 -0.02588549  0.03423325  0.02344995  0.02120532
  0.0208635   0.00948093  0.00662219  0.00487411]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [ 0.0433419   0.01143873 -0.4650362  -0.01863905  0.01830632  0.01392071
  0.01345751  0.00943544  0.00938189  0.00554829]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [ 0.07379728  0.03893374 -0.36121014  0.01611372  0.01236997  0.008351
  0.00590021  0.00579537  0.00477391  0.00412329]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.143682   0.10706337 0.09813076 0.07542798 0.0277137  0.01198984
 0.01177193 0.01060637 0.00787751 0.00783875]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [0.15779778 0.09613416 0.00803399 0.00240774 0.00191191 0.00155854
 0.00091593 0.00050298 0.00024144 0.00020927]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [0.15961798 0.14753366 0.09558073 0.0050695  0.00079401 0.0004813
 0.000304   0.00025004 0.00024788 0.00024537]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [1.9945580e-01 7.5421738e-03 3.9338414e-03 4.0292021e-04 2.7098291e-04
 1.9767384e-04 1.8365722e-04 9.9304176e-05 5.2949701e-05 2.8562912e-05]  taking action:  0
Leaf selection - depth:  8
Leaf selection - action scores:  [2.03632206e-01 7.23837689e-02 1.50515686e-03 1.45835837e-03
 6.14406192e-04 1.12510599e-04 1.03344806e-04 9.45448410e-05
 6.48503919e-05 6.25098764e-05]  taking action:  0
Leaf selection - depth:  9
Leaf selection - action scores:  [2.11029917e-01 6.41023368e-02 4.31653159e-03 3.78285535e-03
 4.83596232e-04 3.49130132e-04 3.31724528e-04 1.28111889e-04
 1.17258416e-04 1.16714866e-04]  taking action:  0
Leaf selection - depth:  10
Leaf selection - action scores:  [2.2167805e-01 7.3635881e-03 5.8490806e-03 1.2727842e-03 6.3937134e-04
 3.8721590e-04 3.0427496e-04 2.6388711e-04 2.2737040e-04 2.1121903e-04]  taking action:  0
Leaf selection - depth:  11
Leaf selection - action scores:  [2.2269268e-01 1.9504771e-01 8.6613308e-04 5.3311675e-04 4.0446446e-04
 1.5507126e-04 6.2983228e-05 5.4596094e-05 4.9863007e-05 3.2425192e-05]  taking action:  0
Leaf selection - depth:  12
Leaf selection - action scores:  [2.3711681e-01 3.5732422e-02 3.9222371e-03 2.7241183e-03 1.0449104e-03
 5.7184766e-04 4.0734568e-04 1.9170872e-04 1.7971484e-04 1.6551309e-04]  taking action:  0
Leaf selection - depth:  13
Leaf selection - action scores:  [2.4941471e-01 7.7465740e-03 3.0710471e-03 1.2225014e-03 5.4101436e-04
 4.9379200e-04 3.0928545e-04 2.8566938e-04 2.2450346e-04 1.0747659e-04]  taking action:  0
Leaf selection - depth:  14
Leaf selection - action scores:  [2.5824845e-01 5.6909282e-02 3.7492363e-04 1.3211963e-04 8.1402744e-05
 6.3300824e-05 5.6599816e-05 4.0548941e-05 3.2564094e-05 2.2229835e-05]  taking action:  0
Leaf selection - depth:  15
Leaf selection - action scores:  [2.7367264e-01 1.1297546e-02 1.1646430e-03 9.2766329e-04 5.1739102e-04
 1.5204468e-04 6.2309569e-05 5.7330053e-05 5.0108032e-05 3.9763509e-05]  taking action:  0
Leaf selection - depth:  16
Leaf selection - action scores:  [2.8856745e-01 2.8780985e-03 7.1841868e-04 2.3698343e-04 1.8375499e-04
 1.6652638e-04 1.5312246e-04 9.8050528e-05 8.7980479e-05 5.4912474e-05]  taking action:  0
Leaf selection - depth:  17
Leaf selection - action scores:  [3.0439043e-01 5.2996017e-03 2.8932263e-04 2.8293117e-04 2.2920682e-04
 4.1141888e-05 3.7351954e-05 3.6588721e-05 2.9139042e-05 2.5690408e-05]  taking action:  0
Leaf selection - depth:  18
Leaf selection - action scores:  [3.2210320e-01 8.4083052e-03 5.7601172e-04 5.2501314e-04 2.4861054e-04
 9.0429050e-05 4.4697710e-05 2.9824658e-05 2.9596849e-05 2.7007518e-05]  taking action:  0
Leaf selection - depth:  19
Leaf selection - action scores:  [3.43412101e-01 2.20863242e-03 1.07301064e-04 9.86409286e-05
 8.95795529e-05 6.07384645e-05 5.66520685e-05 5.55891747e-05
 5.07942095e-05 4.93380394e-05]  taking action:  0
Leaf selection - depth:  20
Leaf selection - action scores:  [3.6488557e-01 2.7712535e-02 1.7930668e-04 7.6342010e-05 1.8897197e-05
 1.4033779e-05 8.0393929e-06 7.8080548e-06 4.6939899e-06 3.5321434e-06]  taking action:  0
Leaf selection - depth:  21
Leaf selection - action scores:  [3.9521158e-01 5.5861142e-03 4.5689489e-04 3.5854158e-04 1.8800062e-04
 8.6025037e-05 2.1843660e-05 1.8377794e-05 1.7760396e-05 1.6542768e-05]  taking action:  0
Leaf selection - depth:  22
Leaf selection - action scores:  [4.2976418e-01 5.5713189e-04 3.8787100e-04 3.5202800e-04 3.1198902e-04
 4.2966312e-05 3.0860472e-05 2.4975941e-05 2.4803519e-05 2.4278723e-05]  taking action:  0
Leaf selection - depth:  23
Leaf selection - action scores:  [4.12538320e-01 4.14206237e-01 4.89071070e-04 2.08666097e-04
 1.15690935e-04 6.41665974e-05 5.65154696e-05 5.32544582e-05
 1.84920027e-05 1.81483138e-05]  taking action:  1
Adding child.
Leaf selection - depth:  24
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  198
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  wire [31:0] in1_1, in1_2, in2_1, in2_2;
  wire [31:0] sum_1, sum_2;
  adder_8 A1(sum_1[7:0], c1, in1[7:0], in2[7:0], cin);
  adder_8 A2(sum_1[15:8], c2, in1[15:8], in2[15:8], c1);
  adder_8 A3(sum_1[23:16], c3, in1[23:16], in2[23:16], c2);
  adder_8 A4(sum_1[31:24], c4, in1[31:24], in2[31:24], c3);
  adder_8 A5(sum_2[7:0], c5, in1_1[7:0], in2_1[7:0], c4);
  adder_8 A6(sum_2[15:8], c6, in1_1[15:8], in2_1[15:8], c5);
  adder_8 A7(sum_2[23:16], c7, in1_1[23:16], in2_1[23:16], c6);
  adder_8 A8(sum_2[31:24], cout, in1_2[31:24], in2_2[31:24], c7);
  assign sum[63:32] = sum_1[63:32] + sum_2[63:32];
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 failed\n'
Tokens:  377
LLM generates return in:  161.662697  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  109.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.0335405  -0.01496718  0.00924104  0.00537202  0.00212616  0.00185369
  0.00152349  0.00102305  0.00091057  0.00078748]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [ 0.03860906  0.01339365 -0.02572736  0.03425597  0.02360372  0.02134437
  0.02100031  0.0095431   0.00666561  0.00490607]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [ 0.04225218  0.01214437 -0.4647508  -0.01838304  0.01845576  0.01403435
  0.01356737  0.00951247  0.00945848  0.00559358]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [ 0.07013233  0.04086982 -0.35995412  0.01671204  0.01248192  0.00842657
  0.00595361  0.00584782  0.00481711  0.0041606 ]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.13971454 0.10867344 0.09960649 0.0765623  0.02813048 0.01217015
 0.01194897 0.01076588 0.00799597 0.00795663]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [0.15346843 0.0976247  0.00815856 0.00244507 0.00194156 0.00158271
 0.00093013 0.00051078 0.00024518 0.00021251]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [0.15344243 0.15122774 0.09711013 0.00515062 0.00080671 0.000489
 0.00030886 0.00025404 0.00025185 0.00024929]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [1.9293311e-01 7.6915380e-03 4.0117465e-03 4.1089958e-04 2.7634943e-04
 2.0158855e-04 1.8729434e-04 1.0127079e-04 5.3998312e-05 2.9128569e-05]  taking action:  0
Leaf selection - depth:  8
Leaf selection - action scores:  [1.96723342e-01 7.38763809e-02 1.53619435e-03 1.48843077e-03
 6.27075729e-04 1.14830655e-04 1.05475854e-04 9.64944265e-05
 6.61876620e-05 6.37988778e-05]  taking action:  0
Leaf selection - depth:  9
Leaf selection - action scores:  [2.03625083e-01 6.54810444e-02 4.40937094e-03 3.86421639e-03
 4.93997359e-04 3.56639153e-04 3.38859216e-04 1.30867295e-04
 1.19780394e-04 1.19225151e-04]  taking action:  0
Leaf selection - depth:  10
Leaf selection - action scores:  [0.21365088 0.00752908 0.00598054 0.00130139 0.00065374 0.00039592
 0.00031111 0.00026982 0.00023248 0.00021597]  taking action:  0
Leaf selection - depth:  11
Leaf selection - action scores:  [2.1365447e-01 1.9846106e-01 8.8651542e-04 5.4566236e-04 4.1398258e-04
 1.5872049e-04 6.4465385e-05 5.5880879e-05 5.1036412e-05 3.3188240e-05]  taking action:  0
Leaf selection - depth:  12
Leaf selection - action scores:  [2.2753386e-01 3.6660690e-02 4.0241298e-03 2.7948862e-03 1.0720553e-03
 5.8670325e-04 4.1792780e-04 1.9668900e-04 1.8438353e-04 1.6981285e-04]  taking action:  0
Leaf selection - depth:  13
Leaf selection - action scores:  [2.3889345e-01 7.9588480e-03 3.1552012e-03 1.2560008e-03 5.5583945e-04
 5.0732307e-04 3.1776060e-04 2.9349737e-04 2.3065538e-04 1.1042170e-04]  taking action:  0
Leaf selection - depth:  14
Leaf selection - action scores:  [2.4677968e-01 5.8559172e-02 3.8579325e-04 1.3594999e-04 8.3762730e-05
 6.5136017e-05 5.8240730e-05 4.1724517e-05 3.3508179e-05 2.2874312e-05]  taking action:  0
Leaf selection - depth:  15
Leaf selection - action scores:  [2.6090729e-01 1.1645244e-02 1.2004864e-03 9.5621345e-04 5.3331448e-04
 1.5672405e-04 6.4227235e-05 5.9094466e-05 5.1650175e-05 4.0987285e-05]  taking action:  0
Leaf selection - depth:  16
Leaf selection - action scores:  [2.7433807e-01 2.9724874e-03 7.4197957e-04 2.4475541e-04 1.8978135e-04
 1.7198770e-04 1.5814419e-04 1.0126615e-04 9.0865848e-05 5.6713361e-05]  taking action:  0
Leaf selection - depth:  17
Leaf selection - action scores:  [2.8843430e-01 5.4856092e-03 2.9947740e-04 2.9286160e-04 2.3725162e-04
 4.2585900e-05 3.8662947e-05 3.7872924e-05 3.0161777e-05 2.6592099e-05]  taking action:  0
Leaf selection - depth:  18
Leaf selection - action scores:  [3.0405164e-01 8.7257102e-03 5.9775560e-04 5.4483186e-04 2.5799533e-04
 9.3842660e-05 4.6385005e-05 3.0950509e-05 3.0714102e-05 2.8027023e-05]  taking action:  0
Leaf selection - depth:  19
Leaf selection - action scores:  [3.22717816e-01 2.29881750e-03 1.11682486e-04 1.02668731e-04
 9.32373514e-05 6.32185984e-05 5.89653428e-05 5.78590480e-05
 5.28682867e-05 5.13526575e-05]  taking action:  0
Leaf selection - depth:  20
Leaf selection - action scores:  [3.4101135e-01 2.8944798e-02 1.8727971e-04 7.9736630e-05 1.9737477e-05
 1.4657804e-05 8.3968716e-06 8.1552471e-06 4.9027126e-06 3.6892034e-06]  taking action:  0
Leaf selection - depth:  21
Leaf selection - action scores:  [3.6695597e-01 5.8587664e-03 4.7919544e-04 3.7604160e-04 1.9717672e-04
 9.0223824e-05 2.2909826e-05 1.9274794e-05 1.8627261e-05 1.7350201e-05]  taking action:  0
Leaf selection - depth:  22
Leaf selection - action scores:  [3.9577276e-01 5.8726862e-04 4.0885195e-04 3.7107011e-04 3.2886531e-04
 4.5290471e-05 3.2529795e-05 2.6326954e-05 2.6145206e-05 2.5592020e-05]  taking action:  0
Leaf selection - depth:  23
Leaf selection - action scores:  [4.4276237e-01 1.6966602e-01 5.1873818e-04 2.2132380e-04 1.2270876e-04
 6.8058951e-05 5.9943708e-05 5.6484878e-05 1.9613730e-05 1.9249193e-05]  taking action:  0
Leaf selection - depth:  24
Leaf selection - action scores:  [5.12957096e-01 4.78139259e-02 1.95686743e-02 1.81069633e-03
 1.28645683e-03 4.86124307e-04 2.84754817e-04 2.21115159e-04
 1.41903714e-04 1.17416355e-04]  taking action:  0
Leaf selection - depth:  25
Leaf selection - action scores:  [5.94395936e-01 3.98835773e-03 2.98051699e-03 5.13780164e-04
 1.20002274e-04 9.00340383e-05 6.70174486e-05 5.33287457e-05
 4.77063040e-05 4.70692758e-05]  taking action:  0
Leaf selection - depth:  26
Leaf selection - action scores:  [5.9309769e-01 5.0158870e-01 1.7085471e-03 7.9676998e-04 3.2137448e-04
 9.3983093e-05 5.8121055e-05 2.9327957e-05 2.4374929e-05 2.0478275e-05]  taking action:  0
Leaf selection - depth:  27
Leaf selection - action scores:  [1.1351740e+00 1.0260430e-02 6.4913966e-03 9.4377541e-04 7.0018874e-04
 1.8702238e-04 1.2969891e-04 9.0877307e-05 7.0300674e-05 5.1161463e-05]  taking action:  0
Leaf selection - depth:  28
Leaf selection - action scores:  [1.9464432e+00 3.5725615e-03 4.3579482e-04 1.8444833e-04 1.8205482e-04
 8.2753882e-05 7.7434634e-05 7.6068543e-05 5.4475418e-05 4.3296608e-05]  taking action:  0
Adding child.
Leaf selection - depth:  29
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  11
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42,c43,c44,c45,c46,c47,c48,c49,c50,c51,c52,c53,c54,c55,c56,c57,c58,c59,c60,c61,c62,c63;
  adder_8 a1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
  adder_8 a3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
  adder_8 a4(sum[31:24], c4, in1[31:24], in2[31:24], c3);
  adder_8 a5(sum[39:32], c5, in1[39:32], in2[39:32], c4);
  adder_8 a6(sum[47:40], c6, in1[47:40], in2[47:40], c5);
  adder_8 a7(sum[55:48], c7, in1[55:48], in2[55:48], c6);
  adder_8 a8(sum[63:56], cout, in1[63:56], in2[63:56], c7);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 failed\n'
Tokens:  436
LLM generates return in:  194.228518  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  110.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.03251352 -0.01458154  0.00928295  0.00539639  0.00213581  0.0018621
  0.00187053  0.00102769  0.0009147   0.00079105]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [ 0.03761029  0.01380397 -0.02557026  0.03427854  0.0237565   0.02148252
  0.02113624  0.00960487  0.00670876  0.00493783]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [ 0.0411891   0.01284433 -0.46446767 -0.01812909  0.018604    0.01414708
  0.01367635  0.00958887  0.00953445  0.00563851]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [ 0.06666435  0.04278873 -0.35870922  0.01730505  0.01259287  0.00850148
  0.00600653  0.0058998   0.00485993  0.00419759]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.13593203 0.11025999 0.10106068 0.07768005 0.02854116 0.01234782
 0.01212341 0.01092305 0.00811271 0.00807279]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [0.14934713 0.09909283 0.00828125 0.00248184 0.00197075 0.00160651
 0.00094411 0.00051846 0.00024887 0.00021571]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [0.14766744 0.15486458 0.0986158  0.00523048 0.00081922 0.00049659
 0.00031365 0.00025798 0.00025575 0.00025316]  taking action:  1
Leaf selection - depth:  7
Leaf selection - action scores:  [5.9296882e-01 9.5014023e-03 1.9060484e-03 6.2410883e-04 5.0679722e-04
 4.2399124e-04 3.5831626e-04 2.5643487e-04 1.8959168e-04 1.2861539e-04]  taking action:  0
Leaf selection - depth:  8
Leaf selection - action scores:  [6.6570729e-01 1.1803356e-01 1.9973658e-03 9.0137601e-04 7.7060563e-04
 1.6486947e-04 1.5950584e-04 1.2745374e-04 7.3973650e-05 4.6767571e-05]  taking action:  0
Leaf selection - depth:  9
Leaf selection - action scores:  [8.1025505e-01 9.4689712e-02 3.1229882e-02 4.1090031e-04 3.5189898e-04
 3.2122029e-04 2.5532852e-04 1.5539480e-04 1.3707057e-04 1.1211726e-04]  taking action:  0
Leaf selection - depth:  10
Leaf selection - action scores:  [1.1392627e+00 4.3277801e-03 1.6535417e-03 1.5909234e-03 8.6972129e-04
 6.2198401e-04 4.6989237e-04 3.9272956e-04 2.4223811e-04 1.8089307e-04]  taking action:  0
Leaf selection - depth:  11
Leaf selection - action scores:  [1.6159954e+00 3.3375436e-01 6.2729191e-04 4.0138638e-04 3.1830865e-04
 9.6788754e-05 6.7501947e-05 2.7261181e-05 2.1442162e-05 1.6543199e-05]  taking action:  0
Adding child.
Leaf selection - depth:  12
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  269
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
  wire c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15, c16, c17, c18, c19, c20, c21, c22, c23, c24, c25, c26, c27, c28, c29, c30, c31, c32, c33, c34, c35, c36, c37, c38, c39, c40, c41, c42, c43, c44, c45, c46, c47, c48, c49, c50, c51, c52, c53, c54, c55, c56, c57, c58, c59, c60, c61, c62, c63;
  adder_8 a1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
  adder_8 a3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
  adder_8 a4(sum[31:24], c4, in1[31:24], in2[31:24], c3);
  adder_8 a5(sum[39:32], c5, in1[39:32], in2[39:32], c4);
  adder_8 a6(sum[47:40], c6, in1[47:40], in2[47:40], c5);
  adder_8 a7(sum[55:48], c7, in1[55:48], in2[55:48], c6);
  adder_8 a8(sum[63:56], cout, in1[63:56], in2[63:56], c7);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 failed\n'
Tokens:  453
LLM generates return in:  199.771051  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  111.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.0315095  -0.01419764  0.00932467  0.00542064  0.00214541  0.00187047
  0.00221602  0.00103231  0.00091881  0.00079461]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [ 0.03663521  0.01421167 -0.02541416  0.03430096  0.0239083   0.02161979
  0.0212713   0.00966624  0.00675163  0.00496938]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [ 0.04015157  0.01353877 -0.46418676 -0.01787714  0.01875107  0.01425891
  0.01378446  0.00966468  0.00960983  0.00568309]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [ 0.06337716  0.04469083 -0.35747522  0.01789287  0.01270286  0.00857573
  0.00605899  0.00595133  0.00490238  0.00423425]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.13232061 0.11182404 0.10249423 0.07878195 0.02894602 0.01252297
 0.01229538 0.01107799 0.00822779 0.00818731]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [0.14541781 0.10053951 0.00840215 0.00251807 0.00199953 0.00162996
 0.0009579  0.00052603 0.0002525  0.00021886]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [0.15122487 0.12152574 0.10009883 0.00530913 0.00083154 0.00050405
 0.00031837 0.00026186 0.0002596  0.00025696]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [1.8681224e-01 7.8380564e-03 4.0881680e-03 4.1872697e-04 2.8161373e-04
 2.0542869e-04 1.9086218e-04 1.0319993e-04 5.5026943e-05 2.9683450e-05]  taking action:  0
Leaf selection - depth:  8
Leaf selection - action scores:  [1.9025800e-01 7.5339422e-02 1.5666169e-03 1.5179075e-03 6.3949428e-04
 1.1710474e-04 1.0756469e-04 9.8405391e-05 6.7498433e-05 6.5062341e-05]  taking action:  0
Leaf selection - depth:  9
Leaf selection - action scores:  [1.9671637e-01 6.6831313e-02 4.5002955e-03 3.9438992e-03 5.0418393e-04
 3.6399331e-04 3.4584673e-04 1.3356589e-04 1.2225035e-04 1.2168366e-04]  taking action:  0
Leaf selection - depth:  10
Leaf selection - action scores:  [0.206186   0.00769102 0.00610917 0.00132938 0.0006678  0.00040443
 0.0003178  0.00027562 0.00023748 0.00022061]  taking action:  0
Leaf selection - depth:  11
Leaf selection - action scores:  [2.0532517e-01 2.0179768e-01 9.0643967e-04 5.5792596e-04 4.2328672e-04
 1.6228769e-04 6.5914232e-05 5.7136789e-05 5.2183441e-05 3.3934139e-05]  taking action:  0
Leaf selection - depth:  12
Leaf selection - action scores:  [2.1871777e-01 3.7566032e-02 4.1235061e-03 2.8639063e-03 1.0985299e-03
 6.0119200e-04 4.2824860e-04 2.0154625e-04 1.8893692e-04 1.7400639e-04]  taking action:  0
Leaf selection - depth:  13
Leaf selection - action scores:  [2.2926073e-01 8.1656054e-03 3.2371678e-03 1.2886295e-03 5.7027920e-04
 5.2050245e-04 3.2601549e-04 3.0112194e-04 2.3664742e-04 1.1329027e-04]  taking action:  0
Leaf selection - depth:  14
Leaf selection - action scores:  [2.3633659e-01 6.0163829e-02 3.9636489e-04 1.3967534e-04 8.6058026e-05
 6.6920897e-05 5.9836668e-05 4.2867869e-05 3.4426383e-05 2.3501123e-05]  taking action:  0
Leaf selection - depth:  15
Leaf selection - action scores:  [2.4935466e-01 1.1982858e-02 1.2352904e-03 9.8393555e-04 5.4877606e-04
 1.6126773e-04 6.6089284e-05 6.0807703e-05 5.3147593e-05 4.2175569e-05]  taking action:  0
Leaf selection - depth:  16
Leaf selection - action scores:  [2.6155031e-01 3.0639698e-03 7.6481502e-04 2.5228813e-04 1.9562212e-04
 1.7728086e-04 1.6301130e-04 1.0438276e-04 9.3662369e-05 5.8458794e-05]  taking action:  0
Leaf selection - depth:  17
Leaf selection - action scores:  [2.7420974e-01 5.6655128e-03 3.0929892e-04 3.0246619e-04 2.4503242e-04
 4.3982527e-05 3.9930917e-05 3.9114988e-05 3.1150947e-05 2.7464203e-05]  taking action:  0
Leaf selection - depth:  18
Leaf selection - action scores:  [2.8810871e-01 9.0319682e-03 6.1873585e-04 5.6395459e-04 2.6705055e-04
 9.7136384e-05 4.8013040e-05 3.2036820e-05 3.1792115e-05 2.9010727e-05]  taking action:  0
Leaf selection - depth:  19
Leaf selection - action scores:  [3.0464035e-01 2.3855956e-03 1.1589839e-04 1.0654437e-04 9.6756965e-05
 6.5605032e-05 6.1191226e-05 6.0043167e-05 5.4864013e-05 5.3291169e-05]  taking action:  0
Leaf selection - depth:  20
Leaf selection - action scores:  [3.2042730e-01 3.0126700e-02 1.9492691e-04 8.2992512e-05 2.0543417e-05
 1.5256325e-05 8.7397411e-06 8.4882504e-06 5.1029047e-06 3.8398443e-06]  taking action:  0
Leaf selection - depth:  21
Leaf selection - action scores:  [3.4297723e-01 6.1192820e-03 5.0050329e-04 3.9276265e-04 2.0594437e-04
 9.4235707e-05 2.3928531e-05 2.0131863e-05 1.9455540e-05 1.8121695e-05]  taking action:  0
Leaf selection - depth:  22
Leaf selection - action scores:  [3.6748567e-01 6.1593251e-04 4.2880757e-04 3.8918163e-04 3.4491686e-04
 4.7501049e-05 3.4117536e-05 2.7611944e-05 2.7421325e-05 2.6841140e-05]  taking action:  0
Leaf selection - depth:  23
Leaf selection - action scores:  [3.9993039e-01 1.8154831e-01 5.4679805e-04 2.3329578e-04 1.2934639e-04
 7.1740433e-05 6.3186213e-05 5.9540293e-05 2.0674686e-05 2.0290432e-05]  taking action:  0
Leaf selection - depth:  24
Leaf selection - action scores:  [4.6068108e-01 5.1115237e-02 2.0919794e-02 1.9357158e-03 1.3752802e-03
 5.1968877e-04 3.0441571e-04 2.3638205e-04 1.5170146e-04 1.2552337e-04]  taking action:  0
Leaf selection - depth:  25
Leaf selection - action scores:  [5.2369237e-01 4.3079187e-03 3.2193265e-03 5.5494602e-04 1.2961727e-04
 9.7247874e-05 7.2387120e-05 5.7601632e-05 5.1528699e-05 5.0840630e-05]  taking action:  0
Leaf selection - depth:  26
Leaf selection - action scores:  [4.6705174e-01 5.5423516e-01 1.8716197e-03 8.7281782e-04 3.5204811e-04
 1.0295332e-04 6.3668427e-05 3.2127169e-05 2.6701398e-05 2.2432827e-05]  taking action:  1
Leaf selection - depth:  27
Leaf selection - action scores:  [1.9094113e+00 2.9023642e-02 5.4076407e-03 2.7721704e-03 3.3658475e-04
 3.0561865e-04 1.6588588e-04 9.2902446e-05 8.2563602e-05 7.7726014e-05]  taking action:  0
Adding child.
Leaf selection - depth:  28
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  50286
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7,c8;
  adder_8 A1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
  adder_8 A2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
  adder_8 A3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
  adder_8 A4(sum[31:24], c4, in1[31:24], in2[31:24], c3);
  adder_8 A5(sum[39:32], c5, in1[39:32], in2[39:32], c4);
  adder_8 A6(sum[47:40], c6, in1[47:40], in2[47:40], c5);
  adder_8 A7(sum[55:48], c7, in1[55:48], in2[55:48], c6);
  adder_8 A8(sum[63:56], cout, in1[63:56], in2[63:56], c7);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 failed\n'
Tokens:  272
LLM generates return in:  109.298031  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  112.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.03052761 -0.01381544  0.00936621  0.00544478  0.00215496  0.0018788
  0.00255997  0.00103691  0.00092291  0.00079815]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [ 0.03568281  0.01461679 -0.02525904  0.03432324  0.02405914  0.0217562
  0.0214055   0.00972723  0.00679422  0.00500073]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [ 0.03913848  0.01422779 -0.46390808 -0.01762715  0.018897    0.01436988
  0.01389174  0.00973989  0.00968461  0.00572731]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [ 0.06025647  0.04657662 -0.3562518   0.01847566  0.0128119   0.00864934
  0.006111    0.00600241  0.00494446  0.00427059]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.1288679  0.11336652 0.10390802 0.07986865 0.02934529 0.01269571
 0.01246498 0.0112308  0.00834128 0.00830024]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [0.14166607 0.10196567 0.00852133 0.00255379 0.00202789 0.00165308
 0.00097149 0.00053349 0.00025608 0.00022196]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [0.14563286 0.12455132 0.10156021 0.00538664 0.00084368 0.00051141
 0.00032301 0.00026568 0.00026339 0.00026072]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [1.8105379e-01 7.9818862e-03 4.1631865e-03 4.2641067e-04 2.8678137e-04
 2.0919833e-04 1.9436453e-04 1.0509366e-04 5.6036697e-05 3.0228144e-05]  taking action:  0
Leaf selection - depth:  8
Leaf selection - action scores:  [1.84191033e-01 7.67745897e-02 1.59646000e-03 1.54682272e-03
 6.51676208e-04 1.19335513e-04 1.09613728e-04 1.00279954e-04
 6.87842330e-05 6.63017418e-05]  taking action:  0
Leaf selection - depth:  9
Leaf selection - action scores:  [1.9025114e-01 6.8154827e-02 4.5894189e-03 4.0220041e-03 5.1416876e-04
 3.7120178e-04 3.5269585e-04 1.3621101e-04 1.2467138e-04 1.2409347e-04]  taking action:  0
Leaf selection - depth:  10
Leaf selection - action scores:  [0.1992212  0.00784961 0.00623514 0.00135679 0.00068157 0.00041277
 0.00032436 0.0002813  0.00024238 0.00022516]  taking action:  0
Leaf selection - depth:  11
Leaf selection - action scores:  [1.9761738e-01 2.0506252e-01 9.2593516e-04 5.6992576e-04 4.3239069e-04
 1.6577814e-04 6.7331901e-05 5.8365677e-05 5.3305794e-05 3.4663986e-05]  taking action:  1
Leaf selection - depth:  12
Leaf selection - action scores:  [1.9090744e+00 1.9112587e-02 6.4002052e-03 3.8272806e-03 6.2117894e-04
 4.6942019e-04 4.0130201e-04 3.3413080e-04 2.7018305e-04 2.5778884e-04]  taking action:  0
Adding child.
Leaf selection - depth:  13
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  50286
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
  wire c1,c2,c3;
  adder_8 A1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
  adder_8 A2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
  adder_8 A3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
  adder_8 A4(sum[31:24], cout, in1[31:24], in2[31:24], c3);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  136
LLM generates return in:  48.524962  seconds
Running getPromptScore: 
adder_32
output_files/2329780_adder_32/synth_script.sh
Running bash in x seconds:  0.88858

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.1
Backpropogation: incorporating estimates.
Current runs:  113.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.03203623 -0.01343494  0.00940756  0.00546882  0.00216448  0.00188709
  0.0029024   0.00104148  0.00092698  0.00080167]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [ 0.03778255  0.01501939 -0.02510489  0.03434539  0.02420904  0.02189175
  0.02153887  0.00978783  0.00683655  0.00503189]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [ 0.04148227  0.01491154 -0.46363148 -0.01737908  0.0190418   0.01447999
  0.01399819  0.00981453  0.00975882  0.0057712 ]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [ 0.06255255  0.04844649 -0.3550387   0.01905352  0.01292002  0.00872233
  0.00616257  0.00605306  0.00498619  0.00430663]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.13096799 0.11488828 0.10530281 0.08094076 0.02973921 0.01286613
 0.01263231 0.01138156 0.00845325 0.00841166]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [0.14363465 0.10337217 0.00863888 0.00258902 0.00205586 0.00167589
 0.00098489 0.00054085 0.00025962 0.00022503]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [0.14727673 0.12753394 0.10300084 0.00546305 0.00085565 0.00051867
 0.0003276  0.00026945 0.00026712 0.00026441]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [1.8276647e-01 8.1231697e-03 4.2368770e-03 4.3395834e-04 2.9185755e-04
 2.1290124e-04 1.9780488e-04 1.0695388e-04 5.7028574e-05 3.0763196e-05]  taking action:  0
Leaf selection - depth:  8
Leaf selection - action scores:  [1.85890734e-01 7.81834126e-02 1.62575522e-03 1.57520710e-03
 6.63634564e-04 1.21525336e-04 1.11625151e-04 1.02120102e-04
 7.00464370e-05 6.75183837e-05]  taking action:  0
Leaf selection - depth:  9
Leaf selection - action scores:  [1.9187659e-01 6.9453135e-02 4.6768445e-03 4.0986207e-03 5.2396330e-04
 3.7827296e-04 3.5941447e-04 1.3880574e-04 1.2704630e-04 1.2645738e-04]  taking action:  0
Leaf selection - depth:  10
Leaf selection - action scores:  [0.20070341 0.00800506 0.00635862 0.00138366 0.00069507 0.00042095
 0.00033078 0.00028688 0.00024718 0.00022962]  taking action:  0
Leaf selection - depth:  11
Leaf selection - action scores:  [2.0366076e-01 1.7217335e-01 9.4502867e-04 5.8167806e-04 4.4130691e-04
 1.6919662e-04 6.8720336e-05 5.9569222e-05 5.4404998e-05 3.5378784e-05]  taking action:  0
Leaf selection - depth:  12
Leaf selection - action scores:  [2.1057178e-01 3.8450055e-02 4.2205430e-03 2.9313015e-03 1.1243811e-03
 6.1533961e-04 4.3832639e-04 2.0628916e-04 1.9338308e-04 1.7810121e-04]  taking action:  0
Leaf selection - depth:  13
Leaf selection - action scores:  [2.2039877e-01 8.3672563e-03 3.3171102e-03 1.3204524e-03 5.8436231e-04
 5.3335633e-04 3.3406648e-04 3.0855820e-04 2.4249146e-04 1.1608799e-04]  taking action:  0
Leaf selection - depth:  14
Leaf selection - action scores:  [2.2677551e-01 6.1726782e-02 4.0666177e-04 1.4330386e-04 8.8293666e-05
 6.8659385e-05 6.1391118e-05 4.3981501e-05 3.5320722e-05 2.4111641e-05]  taking action:  0
Leaf selection - depth:  15
Leaf selection - action scores:  [2.3883516e-01 1.2311216e-02 1.2691403e-03 1.0108977e-03 5.6381384e-04
 1.6568686e-04 6.7900284e-05 6.2473977e-05 5.4603963e-05 4.3331278e-05]  taking action:  0
Leaf selection - depth:  16
Leaf selection - action scores:  [2.49977380e-01 3.15279886e-03 7.86988181e-04 2.59602326e-04
 2.01293515e-04 1.82420510e-04 1.67737249e-04 1.07408974e-04
 9.63777857e-05 6.01536012e-05]  taking action:  0
Leaf selection - depth:  17
Leaf selection - action scores:  [2.6142627e-01 5.8398768e-03 3.1881803e-04 3.1177499e-04 2.5257363e-04
 4.5336150e-05 4.1159848e-05 4.0318806e-05 3.2109663e-05 2.8309450e-05]  taking action:  0
Leaf selection - depth:  18
Leaf selection - action scores:  [2.73895800e-01 9.32817720e-03 6.39027625e-04 5.82449778e-04
 2.75808619e-04 1.00322024e-04 4.95876557e-05 3.30874864e-05
 3.28347560e-05 2.99621497e-05]  taking action:  0
Leaf selection - depth:  19
Leaf selection - action scores:  [2.8867456e-01 2.4693261e-03 1.1996624e-04 1.1028391e-04 1.0015298e-04
 6.7907669e-05 6.3338935e-05 6.2150582e-05 5.6789650e-05 5.5161603e-05]  taking action:  0
Leaf selection - depth:  20
Leaf selection - action scores:  [3.0244625e-01 3.1263951e-02 2.0228520e-04 8.6125394e-05 2.1318911e-05
 1.5832236e-05 9.0696576e-06 8.8086726e-06 5.2955343e-06 3.9847946e-06]  taking action:  0
Leaf selection - depth:  21
Leaf selection - action scores:  [3.2230294e-01 6.3691502e-03 5.2094035e-04 4.0880032e-04 2.1435368e-04
 9.8083634e-05 2.4905605e-05 2.0953908e-05 2.0249967e-05 1.8861658e-05]  taking action:  0
Leaf selection - depth:  22
Leaf selection - action scores:  [3.4348020e-01 6.4332056e-04 4.4787489e-04 4.0648694e-04 3.6025391e-04
 4.9613227e-05 3.5634606e-05 2.8839733e-05 2.8640639e-05 2.8034656e-05]  taking action:  0
Leaf selection - depth:  23
Leaf selection - action scores:  [3.6553007e-01 1.9284993e-01 5.7348667e-04 2.4468268e-04 1.3565965e-04
 7.5242009e-05 6.6270266e-05 6.2446386e-05 2.1683796e-05 2.1280786e-05]  taking action:  0
Leaf selection - depth:  24
Leaf selection - action scores:  [4.1959730e-01 5.4215893e-02 2.2188790e-02 2.0531365e-03 1.4587048e-03
 5.5121310e-04 3.2288159e-04 2.5072100e-04 1.6090368e-04 1.3313763e-04]  taking action:  0
Leaf selection - depth:  25
Leaf selection - action scores:  [4.7051811e-01 4.6053589e-03 3.4416048e-03 5.9326220e-04 1.3856670e-04
 1.0396235e-04 7.7385092e-05 6.1578736e-05 5.5086497e-05 5.4350920e-05]  taking action:  0
Leaf selection - depth:  26
Leaf selection - action scores:  [5.1048279e-01 3.6843237e-01 2.0215805e-03 9.4275101e-04 3.8025543e-04
 1.1120230e-04 6.8769761e-05 3.4701308e-05 2.8840806e-05 2.4230223e-05]  taking action:  0
Leaf selection - depth:  27
Leaf selection - action scores:  [8.4568065e-01 1.1847723e-02 7.4956189e-03 1.0897779e-03 8.0850831e-04
 2.1595483e-04 1.4976339e-04 1.0493607e-04 8.1176222e-05 5.9076167e-05]  taking action:  0
Leaf selection - depth:  28
Leaf selection - action scores:  [1.14194822e+00 4.37547639e-03 5.33737475e-04 2.25902157e-04
 2.22970717e-04 1.01352394e-04 9.48376692e-05 9.31645554e-05
 6.67184941e-05 5.30273028e-05]  taking action:  0
Leaf selection - depth:  29
Leaf selection - action scores:  [1.6468321e+00 3.0380470e-01 4.4476421e-04 1.7472585e-04 7.8117198e-05
 5.4206885e-05 3.7662201e-05 3.5237859e-05 3.5167493e-05 5.0439880e-06]  taking action:  0
Adding child.
Leaf selection - depth:  30
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  66
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42,c43,c44,c45,c46,c47,c48,c49,c50,c51,c52,c53,c54,c55,c56,c57,c58,c59,c60,c61,c62,c63;
  adder_8 a1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
  adder_8 a3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
  adder_8 a4(sum[31:24], c4, in1[31:24], in2[31:24], c3);
  adder_8 a5(sum[39:32], c5, in1[39:32], in2[39:32], c4);
  adder_8 a6(sum[47:40], c6, in1[47:40], in2[47:40], c5);
  adder_8 a7(sum[55:48], c7, in1[55:48], in2[55:48], c6);
  adder_8 a8(sum[63:56], cout, in1[63:56], in2[63:56], c7);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 failed\n'
Tokens:  435
LLM generates return in:  193.988216  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  114.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.0310662  -0.01305609  0.00944873  0.00549276  0.00217395  0.00189535
  0.00324333  0.00104604  0.00093104  0.00080518]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [ 0.0368277   0.01541952 -0.02495169  0.03436739  0.02435802  0.02202647
  0.02167142  0.00984807  0.00687863  0.00506286]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [ 0.04046066  0.01559013 -0.463357   -0.01713288  0.01918552  0.01458928
  0.01410384  0.0098886   0.00983248  0.00581476]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [ 0.05959255  0.05030087 -0.3538357   0.01962659  0.01302724  0.00879472
  0.00621371  0.0061033   0.00502757  0.00434237]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.12765774 0.11639015 0.10667938 0.08199885 0.03012797 0.01303433
 0.01279744 0.01153034 0.00856375 0.00852162]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [0.14005055 0.10475977 0.00875484 0.00262377 0.00208346 0.00169838
 0.00099811 0.00054811 0.0002631  0.00022805]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [0.14210147 0.13047546 0.10442162 0.00553841 0.00086745 0.00052582
 0.00033212 0.00027317 0.00027081 0.00026806]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [1.77388430e-01 8.26203730e-03 4.30930732e-03 4.41376964e-04
 2.96846905e-04 2.16540851e-04 2.01186398e-04 1.08782275e-04
 5.80034903e-05 3.12891025e-05]  taking action:  0
Leaf selection - depth:  8
Leaf selection - action scores:  [1.80243939e-01 7.95672983e-02 1.65453192e-03 1.60308904e-03
 6.75381219e-04 1.23676393e-04 1.13600974e-04 1.03927683e-04
 7.12862893e-05 6.87134961e-05]  taking action:  0
Leaf selection - depth:  9
Leaf selection - action scores:  [1.8588415e-01 7.0727609e-02 4.7626649e-03 4.1738306e-03 5.3357816e-04
 3.8521431e-04 3.6600977e-04 1.4135285e-04 1.2937761e-04 1.2877789e-04]  taking action:  0
Leaf selection - depth:  10
Leaf selection - action scores:  [0.19427946 0.00815756 0.00647975 0.00141002 0.00070831 0.00042897
 0.00033708 0.00029234 0.00025189 0.00023399]  taking action:  0
Leaf selection - depth:  11
Leaf selection - action scores:  [1.9612418e-01 1.7426279e-01 9.6374389e-04 5.9319753e-04 4.5004650e-04
 1.7254737e-04 7.0081267e-05 6.0748920e-05 5.5482429e-05 3.6079422e-05]  taking action:  0
Leaf selection - depth:  12
Leaf selection - action scores:  [2.0301548e-01 3.9314210e-02 4.3153986e-03 2.9971816e-03 1.1496514e-03
 6.2916917e-04 4.4817766e-04 2.1092546e-04 1.9772931e-04 1.8210399e-04]  taking action:  0
Leaf selection - depth:  13
Leaf selection - action scores:  [2.1221043e-01 8.5641593e-03 3.3951704e-03 1.3515261e-03 5.9811387e-04
 5.4590759e-04 3.4192792e-04 3.1581937e-04 2.4819790e-04 1.1881984e-04]  taking action:  0
Leaf selection - depth:  14
Leaf selection - action scores:  [2.1797954e-01 6.3251138e-02 4.1670434e-04 1.4684277e-04 9.0474095e-05
 7.0354938e-05 6.2907180e-05 4.5067631e-05 3.6192971e-05 2.4707082e-05]  taking action:  0
Leaf selection - depth:  15
Leaf selection - action scores:  [2.2920404e-01 1.2631041e-02 1.3021104e-03 1.0371591e-03 5.7846075e-04
 1.6999111e-04 6.9664216e-05 6.4096945e-05 5.6022480e-05 4.4456952e-05]  taking action:  0
Leaf selection - depth:  16
Leaf selection - action scores:  [2.3943943e-01 3.2391930e-03 8.0855354e-04 2.6671606e-04 2.0680943e-04
 1.8741927e-04 1.7233365e-04 1.1035224e-04 9.9018769e-05 6.1801955e-05]  taking action:  0
Leaf selection - depth:  17
Leaf selection - action scores:  [2.4985728e-01 6.0091838e-03 3.2806105e-04 3.2081382e-04 2.5989613e-04
 4.6650515e-05 4.2353135e-05 4.1487710e-05 3.3040571e-05 2.9130186e-05]  taking action:  0
Leaf selection - depth:  18
Leaf selection - action scores:  [2.6112294e-01 9.6152648e-03 6.5869460e-04 6.0037547e-04 2.8429701e-04
 1.0340958e-04 5.1113784e-05 3.4105800e-05 3.3845292e-05 3.0884275e-05]  taking action:  0
Leaf selection - depth:  19
Leaf selection - action scores:  [2.7444130e-01 2.5503091e-03 1.2390059e-04 1.1390073e-04 1.0343755e-04
 7.0134738e-05 6.5416170e-05 6.4188847e-05 5.8652098e-05 5.6970657e-05]  taking action:  0
Leaf selection - depth:  20
Leaf selection - action scores:  [2.8656566e-01 3.2361269e-02 2.0938508e-04 8.9148256e-05 2.2067170e-05
 1.6387923e-05 9.3879880e-06 9.1178435e-06 5.4813991e-06 4.1246544e-06]  taking action:  0
Leaf selection - depth:  21
Leaf selection - action scores:  [3.0424291e-01 6.6095795e-03 5.4060528e-04 4.2423210e-04 2.2244532e-04
 1.0178619e-04 2.5845766e-05 2.1744898e-05 2.1014383e-05 1.9573667e-05]  taking action:  0
Leaf selection - depth:  22
Leaf selection - action scores:  [3.2278278e-01 6.6958921e-04 4.6616295e-04 4.2308503e-04 3.7496415e-04
 5.1639083e-05 3.7089671e-05 3.0017347e-05 2.9810122e-05 2.9179395e-05]  taking action:  0
Leaf selection - depth:  23
Leaf selection - action scores:  [3.3716258e-01 2.0364849e-01 5.9898727e-04 2.5556274e-04 1.4169188e-04
 7.8587713e-05 6.9217036e-05 6.5223125e-05 2.2647986e-05 2.2227056e-05]  taking action:  0
Leaf selection - depth:  24
Leaf selection - action scores:  [3.8624662e-01 5.7148568e-02 2.3389040e-02 2.1641960e-03 1.5376100e-03
 5.8102969e-04 3.4034709e-04 2.6428315e-04 1.6960739e-04 1.4033938e-04]  taking action:  0
Leaf selection - depth:  25
Leaf selection - action scores:  [4.28726822e-01 4.88472031e-03 3.65037285e-03 6.29249611e-04
 1.46972176e-04 1.10268724e-04 8.20792775e-05 6.53141105e-05
 5.84280497e-05 5.76478560e-05]  taking action:  0
Leaf selection - depth:  26
Leaf selection - action scores:  [4.2072594e-01 3.9847380e-01 2.1611603e-03 1.0078432e-03 4.0651017e-04
 1.1888026e-04 7.3517971e-05 3.7097259e-05 3.0832118e-05 2.5903199e-05]  taking action:  0
Leaf selection - depth:  27
Leaf selection - action scores:  [6.90026462e-01 1.32461572e-02 8.38035624e-03 1.21840870e-03
 9.03939770e-04 2.41444839e-04 1.67440550e-04 1.17322095e-04
 9.07577705e-05 6.60491642e-05]  taking action:  0
Leaf selection - depth:  28
Leaf selection - action scores:  [8.5089540e-01 5.0523649e-03 6.1630696e-04 2.6084934e-04 2.5746439e-04
 1.1703166e-04 1.0950911e-04 1.0757716e-04 7.7039876e-05 6.1230654e-05]  taking action:  0
Leaf selection - depth:  29
Leaf selection - action scores:  [9.5847458e-01 3.7208325e-01 5.4472266e-04 2.1399459e-04 9.5673640e-05
 6.6389606e-05 4.6126588e-05 4.3157386e-05 4.3071210e-05 6.1775986e-06]  taking action:  0
Leaf selection - depth:  30
Leaf selection - action scores:  [1.93602335e+00 7.12157274e-03 3.51361930e-03 1.87895517e-03
 7.15689152e-04 2.41171409e-04 1.24437414e-04 1.23841673e-04
 1.13180606e-04 1.00994919e-04]  taking action:  0
Adding child.
Leaf selection - depth:  31
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  940
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42,c43,c44,c45,c46,c47,c48,c49,c50,c51,c52,c53,c54,c55,c56,c57,c58,c59,c60,c61,c62,c63;
  adder_8 a1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
  adder_8 a3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
  adder_8 a4(sum[31:24], c4, in1[31:24], in2[31:24], c3);
  adder_8 a5(sum[39:32], c5, in1[39:32], in2[39:32], c4);
  adder_8 a6(sum[47:40], c6, in1[47:40], in2[47:40], c5);
  adder_8 a7(sum[55:48], c7, in1[55:48], in2[55:48], c6);
  adder_8 a8(sum[63:56], cout, in1[63:56], in2[63:56], c7);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 failed\n'
Tokens:  434
LLM generates return in:  193.625059  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  115.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.03011681 -0.01267889  0.00948972  0.00551659  0.00218338  0.00190357
  0.00358278  0.00105058  0.00093508  0.00080867]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [ 0.03589433  0.01581721 -0.02479942  0.03438927  0.0245061   0.02216037
  0.02180316  0.00990793  0.00692044  0.00509363]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [ 0.03946246  0.01626367 -0.46308458 -0.01688851  0.01932816  0.01469775
  0.0142087   0.00996212  0.00990558  0.00585799]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [ 0.05677096  0.05214007 -0.3526425   0.02019498  0.01313359  0.00886651
  0.00626444  0.00615312  0.00506861  0.00437782]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.12448288 0.11787289 0.1080384  0.08304347 0.03051178 0.01320038
 0.01296047 0.01167723 0.00867285 0.00863018]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [0.13661689 0.10612924 0.00886929 0.00265807 0.00211069 0.00172058
 0.00101115 0.00055528 0.00026654 0.00023103]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [0.13722023 0.13337746 0.10582331 0.00561275 0.00087909 0.00053288
 0.00033657 0.00027683 0.00027444 0.00027166]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [1.7229904e-01 8.3986083e-03 4.3805400e-03 4.4867292e-04 3.0175381e-04
 2.2012027e-04 2.0451202e-04 1.1058045e-04 5.8962290e-05 3.1806310e-05]  taking action:  0
Leaf selection - depth:  8
Leaf selection - action scores:  [1.74911261e-01 8.09275210e-02 1.68281654e-03 1.63049425e-03
 6.86927000e-04 1.25790670e-04 1.15543015e-04 1.05704348e-04
 7.25049467e-05 6.98881704e-05]  taking action:  0
Leaf selection - depth:  9
Leaf selection - action scores:  [1.8023747e-01 7.1979523e-02 4.8469668e-03 4.2477096e-03 5.4302276e-04
 3.9203282e-04 3.7248834e-04 1.4385486e-04 1.3166766e-04 1.3105731e-04]  taking action:  0
Leaf selection - depth:  10
Leaf selection - action scores:  [0.18824047 0.00830725 0.00659865 0.00143589 0.00072131 0.00043684
 0.00034327 0.0002977  0.00025651 0.00023829]  taking action:  0
Leaf selection - depth:  11
Leaf selection - action scores:  [1.8911225e-01 1.7631243e-01 9.8210259e-04 6.0449756e-04 4.5861962e-04
 1.7583428e-04 7.1416267e-05 6.1906154e-05 5.6539335e-05 3.6766713e-05]  taking action:  0
Leaf selection - depth:  12
Leaf selection - action scores:  [1.9598122e-01 4.0159773e-02 4.4082133e-03 3.0616445e-03 1.1743777e-03
 6.4270123e-04 4.5781699e-04 2.1546200e-04 2.0198204e-04 1.8602065e-04]  taking action:  0
Leaf selection - depth:  13
Leaf selection - action scores:  [2.0461479e-01 8.7566366e-03 3.4714760e-03 1.3819013e-03 6.1155634e-04
 5.5817672e-04 3.4961267e-04 3.2291733e-04 2.5377609e-04 1.2149029e-04]  taking action:  0
Leaf selection - depth:  14
Leaf selection - action scores:  [2.0985217e-01 6.4739600e-02 4.2651047e-04 1.5029835e-04 9.2603179e-05
 7.2010575e-05 6.4387554e-05 4.6128189e-05 3.7044683e-05 2.5288502e-05]  taking action:  0
Leaf selection - depth:  15
Leaf selection - action scores:  [2.2034363e-01 1.2942966e-02 1.3342662e-03 1.0627719e-03 5.9274590e-04
 1.7418906e-04 7.1384587e-05 6.5679829e-05 5.7405963e-05 4.5554822e-05]  taking action:  0
Leaf selection - depth:  16
Leaf selection - action scores:  [2.29791388e-01 3.32334172e-03 8.29558354e-04 2.73644866e-04
 2.12181985e-04 1.92288091e-04 1.76810572e-04 1.13218994e-04
 1.01591104e-04 6.34074604e-05]  taking action:  0
Leaf selection - depth:  17
Leaf selection - action scores:  [2.3932284e-01 6.1738496e-03 3.3705070e-04 3.2960487e-04 2.6701789e-04
 4.7928850e-05 4.3513712e-05 4.2624572e-05 3.3945958e-05 2.9928422e-05]  taking action:  0
Leaf selection - depth:  18
Leaf selection - action scores:  [2.4956352e-01 9.8940255e-03 6.7779113e-04 6.1778130e-04 2.9253922e-04
 1.0640758e-04 5.2595653e-05 3.5094577e-05 3.4826517e-05 3.1779658e-05]  taking action:  0
Leaf selection - depth:  19
Leaf selection - action scores:  [2.6165009e-01 2.6287984e-03 1.2771381e-04 1.1740618e-04 1.0662099e-04
 7.2293231e-05 6.7429442e-05 6.6164350e-05 6.0457198e-05 5.8724007e-05]  taking action:  0
Leaf selection - depth:  20
Leaf selection - action scores:  [2.7240843e-01 3.3422574e-02 2.1625198e-04 9.2071925e-05 2.2790875e-05
 1.6925373e-05 9.6958720e-06 9.4168681e-06 5.6611643e-06 4.2599249e-06]  taking action:  0
Leaf selection - depth:  21
Leaf selection - action scores:  [2.8829256e-01 6.8415650e-03 5.5957970e-04 4.3912197e-04 2.3025280e-04
 1.0535872e-04 2.6752910e-05 2.2508108e-05 2.1751954e-05 2.0260670e-05]  taking action:  0
Leaf selection - depth:  22
Leaf selection - action scores:  [3.0470264e-01 6.9486554e-04 4.8376012e-04 4.3905605e-04 3.8911868e-04
 5.3588406e-05 3.8489768e-05 3.1150470e-05 3.0935425e-05 3.0280888e-05]  taking action:  0
Leaf selection - depth:  23
Leaf selection - action scores:  [3.1327718e-01 2.1400569e-01 6.2344573e-04 2.6599813e-04 1.4747758e-04
 8.1796679e-05 7.2043375e-05 6.7886380e-05 2.3572771e-05 2.3134653e-05]  taking action:  0
Leaf selection - depth:  24
Leaf selection - action scores:  [3.5849378e-01 5.9937928e-02 2.4530632e-02 2.2698280e-03 1.6126591e-03
 6.0938910e-04 3.5695906e-04 2.7718252e-04 1.7788574e-04 1.4718920e-04]  taking action:  0
Leaf selection - depth:  25
Leaf selection - action scores:  [3.94800723e-01 5.14894724e-03 3.84783093e-03 6.63287297e-04
 1.54922265e-04 1.16233445e-04 8.65191541e-05 6.88471191e-05
 6.15885729e-05 6.07661750e-05]  taking action:  0
Leaf selection - depth:  26
Leaf selection - action scores:  [3.5925001e-01 4.2668924e-01 2.2922566e-03 1.0689792e-03 4.3116912e-04
 1.2609156e-04 7.7977580e-05 3.9347586e-05 3.2702399e-05 2.7474491e-05]  taking action:  1
Leaf selection - depth:  27
Leaf selection - action scores:  [1.11927092e+00 3.55465561e-02 6.62298035e-03 3.39520141e-03
 4.12230467e-04 3.74304887e-04 2.03167874e-04 1.13781796e-04
 1.01119353e-04 9.51945403e-05]  taking action:  0
Leaf selection - depth:  28
Leaf selection - action scores:  [1.9489248e+00 9.0342294e-04 3.4546354e-04 2.2393466e-04 1.7597027e-04
 8.5670821e-05 4.8578218e-05 3.7866106e-05 2.9460243e-05 2.2006365e-05]  taking action:  0
Adding child.
Leaf selection - depth:  29
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  26676
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7,c8;
  adder_8 A1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
  adder_8 A2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
  adder_8 A3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
  adder_8 A4(sum[31:24], c4, in1[31:24], in2[31:24], c3);
  adder_8 A5(sum[39:32], c5, in1[39:32], in2[39:32], c4);
  adder_8 A6(sum[47:40], c6, in1[47:40], in2[47:40], c5);
  adder_8 A7(sum[55:48], c7, in1[55:48], in2[55:48], c6);
  adder_8 A8(sum[63:56], cout, in1[63:56], in2[63:56], c7);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 failed\n'
Tokens:  271
LLM generates return in:  108.966089  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  116.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.02918734 -0.01230332  0.00953054  0.00554031  0.00219277  0.00191176
  0.00392077  0.0010551   0.0009391   0.00081215]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [ 0.03498164  0.01621251 -0.02464806  0.03441101  0.02465328  0.02229347
  0.02193411  0.00996744  0.00696201  0.00512423]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [ 0.03848684  0.01693228 -0.46281412 -0.01664594  0.01946976  0.01480543
  0.01431279  0.0100351   0.00997815  0.00590091]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [ 0.05407781  0.05396453 -0.3514589   0.0207588   0.01323908  0.00893773
  0.00631475  0.00620255  0.00510932  0.00441299]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.12143453 0.1193372  0.10938055 0.0840751  0.03089083 0.01336436
 0.01312148 0.0118223  0.00878059 0.00873739]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [0.13332352 0.10748126 0.00898228 0.00269193 0.00213758 0.0017425
 0.00102404 0.00056235 0.00026994 0.00023397]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [0.13260698 0.13624153 0.10720668 0.00568613 0.00089059 0.00053985
 0.00034097 0.00028045 0.00027803 0.00027521]  taking action:  1
Leaf selection - depth:  7
Leaf selection - action scores:  [5.2240789e-01 1.0262688e-02 2.0587677e-03 6.7411462e-04 5.4740359e-04
 4.5796289e-04 3.8702582e-04 2.7698133e-04 2.0478242e-04 1.3892051e-04]  taking action:  0
Leaf selection - depth:  8
Leaf selection - action scores:  [5.6912333e-01 1.2929928e-01 2.1880046e-03 9.8740798e-04 8.4415619e-04
 1.8060545e-04 1.7472990e-04 1.3961858e-04 8.1034079e-05 5.1231305e-05]  taking action:  0
Leaf selection - depth:  9
Leaf selection - action scores:  [6.6032124e-01 1.0586631e-01 3.4916069e-02 4.5940047e-04 3.9343501e-04
 3.5913519e-04 2.8546594e-04 1.7373665e-04 1.5324957e-04 1.2535090e-04]  taking action:  0
Leaf selection - depth:  10
Leaf selection - action scores:  [8.4882808e-01 4.9972897e-03 1.9093454e-03 1.8370401e-03 1.0042676e-03
 7.1820524e-04 5.4258492e-04 4.5348503e-04 2.7971246e-04 2.0887732e-04]  taking action:  0
Leaf selection - depth:  11
Leaf selection - action scores:  [9.3959105e-01 4.0876395e-01 7.6827256e-04 4.9159594e-04 3.8984691e-04
 1.1854153e-04 8.2672661e-05 3.3387994e-05 2.6261177e-05 2.0261199e-05]  taking action:  0
Leaf selection - depth:  12
Leaf selection - action scores:  [1.87734723e+00 4.31825444e-02 2.78531052e-02 8.94892844e-04
 3.72503593e-04 2.28528341e-04 1.51058382e-04 1.23020596e-04
 1.01188576e-04 8.37360931e-05]  taking action:  0
Adding child.
Leaf selection - depth:  13
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  19
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
  wire c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15, c16, c17, c18, c19, c20, c21, c22, c23, c24, c25, c26, c27, c28, c29, c30, c31, c32, c33, c34, c35, c36, c37, c38, c39, c40, c41, c42, c43, c44, c45, c46, c47, c48, c49, c50, c51, c52, c53, c54, c55, c56, c57, c58, c59, c60, c61, c62, c63;
  adder_8 a1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
  adder_8 a3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
  adder_8 a4(sum[31:24], c4, in1[31:24], in2[31:24], c3);
  adder_8 a5(sum[39:32], c5, in1[39:32], in2[39:32], c4);
  adder_8 a6(sum[47:40], c6, in1[47:40], in2[47:40], c5);
  adder_8 a7(sum[55:48], c7, in1[55:48], in2[55:48], c6);
  adder_8 a8(sum[63:56], cout, in1[63:56], in2[63:56], c7);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 failed\n'
Tokens:  452
LLM generates return in:  199.51668  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  117.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.02827713 -0.01192934  0.00957118  0.00556394  0.00220212  0.00191991
  0.00425732  0.0010596   0.0009431   0.00081561]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [ 0.03408884  0.01660546 -0.0244976   0.03443262  0.02479959  0.02242577
  0.02206429  0.0100266   0.00700332  0.00515464]  taking action:  3
Leaf selection - depth:  2
Leaf selection - action scores:  [0.3655944  0.33840355 0.20650242 0.03649256 0.02597065 0.01207941
 0.01083002 0.00807272 0.00508768 0.00463802]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.4182143  0.3521697  0.10742389 0.03758883 0.01061128 0.01022686
 0.00675993 0.00480875 0.00371723 0.00322821]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.47214276 0.44997093 0.19861439 0.1325401  0.08100407 0.01822316
 0.01467431 0.01269568 0.01149211 0.00526422]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [6.5838802e-01 7.1331713e-04 4.3229873e-05 7.9442434e-06 7.8070698e-06
 5.9118870e-06 5.5689993e-06 4.8208908e-06 3.4350337e-06 3.2887160e-06]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [7.1551961e-01 1.3817739e-03 8.1224111e-04 1.5594774e-04 8.8037821e-05
 5.0531573e-05 3.6603153e-05 2.9508781e-05 1.6972768e-05 1.5126674e-05]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [7.8736341e-01 3.5151087e-02 4.8744347e-04 3.8310117e-04 1.1165778e-04
 3.5848152e-05 3.0226347e-05 2.0745261e-05 1.6317963e-05 1.5172520e-05]  taking action:  0
Leaf selection - depth:  8
Leaf selection - action scores:  [0.2896193  0.18268771 0.45278296 0.22746179 0.18866847 0.10985787
 0.06993362 0.06530066 0.04638147 0.04269171]  taking action:  2
Adding child.
Leaf selection - depth:  9
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  62
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
   wire [31:0] cout_d;
   adder_8 A1(sum[7:0], cout_d[0], in1[7:0], in2[7:0], cin);
   adder_8 A2(sum[15:8], cout_d[1], in1[15:8], in2[15:8], cout_d[0]);
   adder_8 A3(sum[23:16], cout_d[2], in1[23:16], in2[23:16], cout_d[1]);
   adder_8 A4(sum[31:24], cout_d[3], in1[31:24], in2[31:24], cout_d[2]);
   adder_8 A5(sum[39:32], cout_d[4], in1[39:32], in2[39:32], cout_d[3]);
   adder_8 A6(sum[47:40], cout_d[5], in1[47:40], in2[47:40], cout_d[4]);
   adder_8 A7(sum[55:48], cout_d[6], in1[55:48], in2[55:48], cout_d[5]);
   adder_8 A8(sum[63:56], cout_d[7], in1[63:56], in2[63:56], cout_d[6]);
   assign cout = cout_d[7];
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 failed\n'
Tokens:  334
LLM generates return in:  136.173459  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  118.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.02738554 -0.01155695  0.00961165  0.00558747  0.00221143  0.00192803
  0.00459245  0.00106408  0.00094709  0.00081906]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [ 0.03511827  0.01699611 -0.02434803  0.02485025  0.02494505  0.02255731
  0.02219369  0.0100854   0.0070444   0.00518487]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [ 0.03753291  0.01759606 -0.46254563 -0.01640511  0.01961034  0.01491233
  0.01441614  0.01010756  0.0100502   0.00594351]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [ 0.05150422  0.05577455 -0.35028464  0.02131817  0.01334374  0.00900839
  0.00636467  0.00625158  0.00514971  0.00444787]  taking action:  1
Leaf selection - depth:  4
Leaf selection - action scores:  [ 0.17828006 -0.09440553 -0.30399448  0.12906516  0.0761428   0.02366671
  0.01924281  0.01513546  0.01492743  0.01195679]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [2.6123333e-01 1.3743374e-03 5.0948558e-05 1.2679149e-05 1.0287883e-05
 9.1549809e-06 8.2460738e-06 5.6274330e-06 4.6470464e-06 4.2983402e-06]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [2.6003867e-01 2.1747686e-03 1.2227860e-03 2.3804467e-04 1.3211732e-04
 8.6370106e-05 7.2664916e-05 3.5592009e-05 2.9778421e-05 2.5979543e-05]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [2.5562006e-01 3.7901770e-02 1.3454206e-03 6.9497945e-04 1.6809620e-04
 6.0145660e-05 4.6640718e-05 3.8476850e-05 2.9802444e-05 2.1396567e-05]  taking action:  0
Leaf selection - depth:  8
Leaf selection - action scores:  [ 0.25254545  0.22120345  0.18365255 -0.26762086 -0.36832872  0.22573228
  0.1489369   0.13058576  0.08292355  0.07513899]  taking action:  0
Leaf selection - depth:  9
Leaf selection - action scores:  [0.40368277 0.45347807 0.31389228 0.17457145 0.13527712 0.11088397
 0.08606023 0.0799713  0.03980931 0.03608806]  taking action:  1
Adding child.
Leaf selection - depth:  10
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  62
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
  wire [31:0] cin_1;
  wire [31:0] cin_2;
  wire [31:0] cin_3;
  wire [31:0] cin_4;
  wire [31:0] cin_5;
  wire [31:0] cin_6;
  wire [31:0] cin_7;
  wire [31:0] cin_8;
  wire [31:0] cin_9;
  wire [31:0] cin_10;
  wire [31:0] cin_11;
  wire [31:0] cin_12;
  wire [31:0] cin_13;
  wire [31:0] cin_14;
  wire [31:0] cin_15;
  wire [31:0] cin_16;
  wire [31:0] cin_17;
  wire [31:0] cin_18;
  wire [31:0] cin_19;
  wire [31:0] cin_20;
  wire [31:0] cin_21;
  wire [31:0] cin_22;
  wire [31:0] cin_23;
  wire [31:0] cin_24;
  wire [31:0] cin_25;
  wire [31:0] cin_26;
  wire [31:0] cin_27;
  wire [31:0] cin_28;
  wire [31:0] cin_29;
  wire [31:0] cin_30;
  wire [31:0] cin_31;
  wire [31:0] cin_32;
  wire [31:0] cin_33;
  wire [31:0] cin_34;
  wire [31:0] cin_35;
  wire [31:0] cin_36;
  wire [31:0] cin_37;
  wire [31:0] cin_38;
  wire [31:0] cin_39;
  wire [31:0] cin_40;
  wire [31:0] cin_41;
  wire [31:0] cin_42;
  wire [31:0] cin_43;
  wire [31:0] cin_44;
  wire [31:0] cin_45;
  wire [31:0] cin_46;
  wire [31:0] cin_47;
  wire [31:0] cin_48;
  wire [31:0] cin_49;
  wire [31:0] cin_50;
  wire [31:0] cin_51;
  wire [31:0] cin_52;
  wire [31:0] cin_53;
  wire [31:0] cin_54;
  wire [31:0] cin_55;
  wire [31:0] cin_56;
  wire [31:0] cin_57;
  wire [31:0] cin_58;
  wire [31:0] cin_59;
  wire [31:0] cin_60;
  wire [31:0] cin_61;
  wire [31:0] cin_62;
  wire [31:0] cin_63;
  wire [31:0] cin_64;
  wire [31:0] cin_65;
  wire [31:0] cin_66;
  wire [31:0] cin_67;
  wire [31:0] cin_68;
  wire [31:0] cin_69;
  wire [31:0] cin_70;
  wire [31:0] cin_71;
  wire [31:0] cin_72;
  wire [31:0] cin_73;
  wire [31:0] cin_74;
  wire [31:0] cin_75;
  wire [31:0] cin_76;
  wire [31:0] cin_77
Path:  output_files/2329780_adder_32/2329780_simulation
Verilog compilation failed, error:  2
Compilation output:  b'output_files/2329780_adder_32/2329780_adder_32.v:112: syntax error\nI give up.\n'
Tokens:  989
LLM generates return in:  599.066217  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  119.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.01616715 -0.01118612  0.00965195  0.00561089  0.00222071  0.00193612
  0.00492617  0.00106854  0.00095106  0.0008225 ]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [ 0.02154818  0.0173845  -0.02419932  0.02487008  0.02508966  0.02268807
  0.02232236  0.01014387  0.00708524  0.00521493]  taking action:  4
Adding child.
Leaf selection - depth:  2
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  21809
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
	wire [31:0] c;
	adder_8 a1(sum[7:0], c[0], in1[7:0], in2[7:0], cin);
	adder_8 a2(sum[15:8], c[1], in1[15:8], in2[15:8], c[0]);
	adder_8 a3(sum[23:16], c[2], in1[23:16], in2[23:16], c[1]);
	adder_8 a4(sum[31:24], cout, in1[31:24], in2[31:24], c[2]);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  151
LLM generates return in:  53.537287  seconds
Running getPromptScore: 
adder_32
output_files/2329780_adder_32/synth_script.sh
Running bash in x seconds:  0.896489

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.1
Backpropogation: incorporating estimates.
Current runs:  120.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.01770128 -0.01081683  0.00969208  0.00563422  0.00222994  0.00194417
  0.00525851  0.00107298  0.00095502  0.00082592]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [ 0.02255145  0.01777066 -0.02405146  0.0248898   0.06261672  0.02281809
  0.02245028  0.010202    0.00712584  0.00524481]  taking action:  4
Leaf selection - depth:  2
Leaf selection - action scores:  [1.1443806  0.15314256 0.15283206 0.10692908 0.06995628 0.04433751
 0.03854601 0.02536757 0.02378699 0.01113202]  taking action:  0
Adding child.
Leaf selection - depth:  3
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  685
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
	wire [31:0] c;
	adder_8 a1(sum[7:0], c[0], in1[7:0], in2[7:0], cin);
	adder_8 a2(sum[15:8], c[1], in1[15:8], in2[15:8], c[0]);
	adder_8 a3(sum[23:16], c[2], in1[23:16], in2[23:16], c[1]);
	adder_8 a4(sum[31:24], cout, in1[31:24], in2[31:24], c[2]);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  150
LLM generates return in:  53.196625  seconds
Running getPromptScore: 
adder_32
output_files/2329780_adder_32/synth_script.sh
Running bash in x seconds:  0.900795

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.1
Backpropogation: incorporating estimates.
Current runs:  121.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.01919857 -0.01044906  0.00973205  0.00565746  0.00223914  0.00195218
  0.00558947  0.00107741  0.00095895  0.00082932]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [ 0.02354905  0.01815464 -0.02390444  0.02490941  0.07512547  0.02294737
  0.02257748  0.0102598   0.00716621  0.00527453]  taking action:  4
Leaf selection - depth:  2
Leaf selection - action scores:  [0.75078714 0.18756056 0.1871803  0.13096084 0.08567859 0.05430214
 0.04720902 0.03106881 0.029133   0.01363388]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.9537784  0.8681601  0.0612911  0.02727173 0.00455875 0.0033287
 0.0025647  0.00247449 0.00225916 0.00149336]  taking action:  0
Adding child.
Leaf selection - depth:  4
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  3132
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
	wire [31:0] c;
	adder_8 a1(sum[7:0], c[0], in1[7:0], in2[7:0], cin);
	adder_8 a2(sum[15:8], c[1], in1[15:8], in2[15:8], c[0]);
	adder_8 a3(sum[23:16], c[2], in1[23:16], in2[23:16], c[1]);
	adder_8 a4(sum[31:24], cout, in1[31:24], in2[31:24], c[2]);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  149
LLM generates return in:  52.933829  seconds
Running getPromptScore: 
adder_32
output_files/2329780_adder_32/synth_script.sh
Running bash in x seconds:  0.903945

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.1
Backpropogation: incorporating estimates.
Current runs:  122.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.02066027 -0.0100828   0.00977186  0.0056806   0.00224829  0.00196017
  0.00591908  0.00108181  0.00096288  0.00083272]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [ 0.02454105  0.01853646 -0.02375825  0.02492891  0.08137964  0.02307593
  0.02270396  0.01031728  0.00720636  0.00530408]  taking action:  4
Leaf selection - depth:  2
Leaf selection - action scores:  [0.6061328  0.21657628 0.21613717 0.15122055 0.09893312 0.06270271
 0.05451228 0.03587517 0.03363989 0.01574305]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.6340676  1.0632746  0.07506596 0.03340091 0.0055833  0.00407681
 0.0031411  0.00303062 0.0027669  0.00182898]  taking action:  1
Adding child.
Leaf selection - depth:  4
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  16
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
	wire c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42,c43,c44,c45,c46,c47,c48,c49,c50,c51,c52,c53,c54,c55,c56,c57,c58,c59,c60,c61,c62,c63;
	adder_8 a1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
	adder_8 a2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
	adder_8 a3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
	adder_8 a4(sum[31:24], c4, in1[31:24], in2[31:24], c3);
	adder_8 a5(sum[39:32], c5, in1[39:32], in2[39:32], c4);
	adder_8 a6(sum[47:40], c6, in1[47:40], in2[47:40], c5);
	adder_8 a7(sum[55:48], c7, in1[55:48], in2[55:48], c6);
	adder_8 a8(sum[63:56], cout, in1[63:56], in2[63:56], c7);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 failed\n'
Tokens:  461
LLM generates return in:  202.378128  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  123.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.01988978 -0.00971802  0.0098115   0.00570364  0.00225741  0.00196812
  0.00624736  0.0010862   0.00096678  0.00083609]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [ 0.02552755  0.01891616 -0.02361286  0.02494831  0.04513199  0.02320378
  0.02282975  0.01037444  0.00724629  0.00533346]  taking action:  4
Leaf selection - depth:  2
Leaf selection - action scores:  [0.4773561  0.24213962 0.2416487  0.1690697  0.11061058 0.07010376
 0.06094658 0.04010966 0.03761053 0.01760126]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.72442317 0.5638819  0.0866787  0.03856805 0.00644704 0.0047075
 0.00362703 0.00349946 0.00319494 0.00211193]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [1.385304   0.2647532  0.10649442 0.08575889 0.02830424 0.00930701
 0.00781466 0.00732419 0.00533666 0.00428211]  taking action:  0
Adding child.
Leaf selection - depth:  5
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  25
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
	wire [31:0] c;
	adder_8 a1(sum[7:0], c[0], in1[7:0], in2[7:0], cin);
	adder_8 a2(sum[15:8], c[1], in1[15:8], in2[15:8], c[0]);
	adder_8 a3(sum[23:16], c[2], in1[23:16], in2[23:16], c[1]);
	adder_8 a4(sum[31:24], cout, in1[31:24], in2[31:24], c[2]);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  148
LLM generates return in:  52.605045  seconds
Running getPromptScore: 
adder_32
output_files/2329780_adder_32/synth_script.sh
Running bash in x seconds:  0.900064

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.1
Backpropogation: incorporating estimates.
Current runs:  124.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.02130774 -0.00935471  0.00985098  0.00572659  0.0022665   0.00197604
  0.00657431  0.00109057  0.00097067  0.00083946]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [ 0.02650864  0.01929379 -0.02346827  0.02496759  0.05430009  0.02333092
  0.02295484  0.01043129  0.00728599  0.00536269]  taking action:  4
Leaf selection - depth:  2
Leaf selection - action scores:  [0.43642503 0.26525068 0.2647129  0.18520659 0.12116782 0.07679482
 0.06676364 0.04393793 0.04120027 0.01928122]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.569352   0.6363408  0.09690973 0.04312039 0.00720801 0.00526314
 0.00405514 0.00391252 0.00357205 0.00236121]  taking action:  1
Leaf selection - depth:  4
Leaf selection - action scores:  [1.8028569  0.03420852 0.03265682 0.03060916 0.00690701 0.00411572
 0.00363964 0.00346728 0.0034159  0.0030799 ]  taking action:  0
Adding child.
Leaf selection - depth:  5
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  11
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
	wire c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42,c43,c44,c45,c46,c47,c48,c49,c50,c51,c52,c53,c54,c55,c56,c57,c58,c59,c60,c61,c62,c63;
	adder_8 a1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
	adder_8 a2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
	adder_8 a3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
	adder_8 a4(sum[31:24], c4, in1[31:24], in2[31:24], c3);
	adder_8 a5(sum[39:32], c5, in1[39:32], in2[39:32], c4);
	adder_8 a6(sum[47:40], c6, in1[47:40], in2[47:40], c5);
	adder_8 a7(sum[55:48], c7, in1[55:48], in2[55:48], c6);
	adder_8 a8(sum[63:56], cout, in1[63:56], in2[63:56], c7);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 failed\n'
Tokens:  460
LLM generates return in:  201.966611  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  125.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.0205425  -0.00899285  0.00989031  0.00574946  0.00227555  0.00198393
  0.00689996  0.00109493  0.00097455  0.00084281]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [ 0.02748442  0.01966937 -0.02332447  0.02498678  0.0322772   0.02345738
  0.02307926  0.01048783  0.00732548  0.00539176]  taking action:  4
Leaf selection - depth:  2
Leaf selection - action scores:  [0.37349    0.2865035  0.28592262 0.20004599 0.13087621 0.08294789
 0.07211298 0.04745839 0.04450138 0.0208261 ]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.61733085 0.43456578 0.10615929 0.04723602 0.00789598 0.00576548
 0.00444219 0.00428595 0.00391299 0.00258657]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.898322   0.3242551  0.1304285  0.10503277 0.03466548 0.01139871
 0.00957097 0.00897026 0.00653605 0.0052445 ]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [1.9511501e+00 4.1122286e-04 2.1566251e-05 5.2870537e-06 3.8999165e-06
 3.5884843e-06 3.4649279e-06 2.7275078e-06 2.1365784e-06 1.7816474e-06]  taking action:  0
Adding child.
Leaf selection - depth:  6
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  15
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
	wire [31:0] c;
	adder_8 a1(sum[7:0], c[0], in1[7:0], in2[7:0], cin);
	adder_8 a2(sum[15:8], c[1], in1[15:8], in2[15:8], c[0]);
	adder_8 a3(sum[23:16], c[2], in1[23:16], in2[23:16], c[1]);
	adder_8 a4(sum[31:24], cout, in1[31:24], in2[31:24], c[2]);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  147
LLM generates return in:  52.273804  seconds
Running getPromptScore: 
adder_32
output_files/2329780_adder_32/synth_script.sh
Running bash in x seconds:  0.908906

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.1
Backpropogation: incorporating estimates.
Current runs:  126.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.02191911 -0.00863243  0.00992948  0.00577223  0.00228456  0.00199179
  0.00722431  0.00109926  0.00097841  0.00084615]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [ 0.02845496  0.02004294 -0.02318144  0.02500585  0.04075994  0.02358316
  0.02320301  0.01054406  0.00736476  0.00542067]  taking action:  4
Leaf selection - depth:  2
Leaf selection - action scores:  [0.3555373  0.3062851  0.30566412 0.21385816 0.13991256 0.08867502
 0.07709201 0.05073515 0.04757398 0.02226403]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.521089   0.47472632 0.11466514 0.05102073 0.00852863 0.00622743
 0.00479811 0.00462935 0.00422651 0.00279382]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.7197052  0.37441754 0.15060584 0.12128139 0.04002824 0.0131621
 0.0110516  0.01035796 0.00754718 0.00605582]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [1.2448305e+00 5.0364312e-04 2.6413156e-05 6.4752921e-06 4.7764029e-06
 4.3949776e-06 4.2436527e-06 3.3405013e-06 2.6167636e-06 2.1820636e-06]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [1.9497188e+00 1.0213127e-03 5.1720894e-04 8.7727800e-05 5.8203041e-05
 5.0809384e-05 3.5055280e-05 1.9636045e-05 1.4425125e-05 9.1705660e-06]  taking action:  0
Adding child.
Leaf selection - depth:  7
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  60
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
	wire [31:0] c;
	adder_8 a1(sum[7:0], c[0], in1[7:0], in2[7:0], cin);
	adder_8 a2(sum[15:8], c[1], in1[15:8], in2[15:8], c[0]);
	adder_8 a3(sum[23:16], c[2], in1[23:16], in2[23:16], c[1]);
	adder_8 a4(sum[31:24], cout, in1[31:24], in2[31:24], c[2]);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  146
LLM generates return in:  51.925594  seconds
Running getPromptScore: 
adder_32
output_files/2329780_adder_32/synth_script.sh
Running bash in x seconds:  0.901665

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.1
Backpropogation: incorporating estimates.
Current runs:  127.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.02326466 -0.00827342  0.00996849  0.00579491  0.00229354  0.00199961
  0.0075474   0.00110358  0.00098225  0.00084947]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [ 0.02942036  0.02041451 -0.02303916  0.02502483  0.04735754  0.02370827
  0.0233261   0.0106      0.00740383  0.00544942]  taking action:  4
Leaf selection - depth:  2
Leaf selection - action scores:  [0.34094968 0.3248644  0.32420576 0.22683081 0.14839967 0.09405406
 0.08176842 0.05381275 0.05045982 0.02361457]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.46151137 0.5121068  0.1225822  0.05454346 0.00911749 0.00665741
 0.0051294  0.00494899 0.00451833 0.00298672]  taking action:  1
Leaf selection - depth:  4
Leaf selection - action scores:  [1.0540199  0.04189672 0.03999628 0.03748841 0.00845933 0.00504071
 0.00445763 0.00424653 0.0041836  0.00377209]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [1.9125373e+00 3.1286035e-02 3.6934181e-03 7.1497547e-04 6.3234189e-04
 6.2787114e-04 3.7725459e-04 2.2404350e-04 1.2302918e-04 9.4824747e-05]  taking action:  0
Adding child.
Leaf selection - depth:  6
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  66
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
	wire c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42,c43,c44,c45,c46,c47,c48,c49,c50,c51,c52,c53,c54,c55,c56,c57,c58,c59,c60,c61,c62,c63;
	adder_8 a1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
	adder_8 a2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
	adder_8 a3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
	adder_8 a4(sum[31:24], c4, in1[31:24], in2[31:24], c3);
	adder_8 a5(sum[39:32], c5, in1[39:32], in2[39:32], c4);
	adder_8 a6(sum[47:40], c6, in1[47:40], in2[47:40], c5);
	adder_8 a7(sum[55:48], c7, in1[55:48], in2[55:48], c6);
	adder_8 a8(sum[63:56], cout, in1[63:56], in2[63:56], c7);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 failed\n'
Tokens:  459
LLM generates return in:  201.743452  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  128.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.02249682 -0.00791581  0.01000736  0.0058175   0.00230248  0.00200741
  0.00786922  0.00110789  0.00098608  0.00085278]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [ 0.0303807   0.02078415 -0.02289764  0.02504371  0.03263555  0.02383272
  0.02344855  0.01065564  0.0074427   0.00547803]  taking action:  4
Leaf selection - depth:  2
Leaf selection - action scores:  [0.30654582 0.34243715 0.34174287 0.23910068 0.156427   0.09914168
 0.08619149 0.05672362 0.05318933 0.02489194]  taking action:  1
Adding child.
Leaf selection - depth:  3
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  685
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
	 wire [31:0] c;
	 wire [63:0] in1_64;
	 assign in1_64 = {in1[63:32], in1[31:0]};
	 wire [63:0] in2_64;
	 assign in2_64 = {in2[63:32], in2[31:0]};
	 wire [63:0] in1_64_2;
	 wire [63:0] in2_64_2;
	 wire [63:0] in1_64_3;
	 wire [63:0] in2_64_3;
	 wire [63:0] in1_64_4;
	 wire [63:0] in2_64_4;
	 wire [63:0] in1_64_5;
	 wire [63:0] in2_64_5;
	 wire [63:0] in1_64_6;
	 wire [63:0] in2_64_6;
	 wire [63:0] in1_64_7;
	 wire [63:0] in2_64_7;
	 wire [63:0] in1_64_8;
	 wire [63:0] in2_64_8;
	 wire [63:0] in1_64_9;
	 wire [63:0] in2_64_9;
	 wire [63:0] in1_64_10;
	 wire [63:0] in2_64_10;
	 wire [63:0] in1_64_11;
	 wire [63:0] in2_64_11;
	 wire [63:0] in1_64_12;
	 wire [63:0] in2_64_12;
	 wire [63:0] in1_64_13;
	 wire [63:0] in2_64_13;
	 wire [63:0] in1_64_14;
	 wire [63:0] in2_64_14;
	 wire [63:0] in1_64_15;
	 wire [63:0] in2_64_15;
	 wire [63:0] in1_64_16;
	 wire [63:0] in2_64_16;
	 wire [63:0] in1_64_17;
	 wire [63:0] in2_64_17;
	 wire [63:0] in1_64_18;
	 wire [63:0] in2_64_18;
	 wire [63:0] in1_64_19;
	 wire [63:0] in2_64_19;
	 wire [63:0] in1_64_20;
	 wire [63:0] in2_64_20;
	 wire [63:0] in1_64_21;
	 wire [63:0] in2_64_21;
	 wire [63:0] in1_64_22;
	 wire [63:0] in2_64_22;
	 wire [63:0] in1_64_23;
	 wire [63:0] in2_64_23;
	 wire [63:0] in1_64_24;
	 wire [63:0] in2_64_24;
	 wire [63:0] in1_64_25;
	 wire [63:0] in2_64_25;
	 wire [63:0] in1_64_26;
	 wire [63:0] in2_64_26;
	 wire [63:0] in1_64_27;
	 wire [63:0] in2_64_27;
	 wire [63:0] in1_64_28;
	 wire [63:0] in2_64_28;
	 wire [63:0] in1_64_29;
	 wire [63:0] in2_64_29;
	 wire [63:0] in1_64_30;
	 wire [63:0] in2_64_30;
	 wire [63:0] in1_64_31;
	 wire [63:0] in2_64_31;
	 wire [63:0] in1_64_32;

Path:  output_files/2329780_adder_32/2329780_simulation
Verilog compilation failed, error:  2
Compilation output:  b'output_files/2329780_adder_32/2329780_adder_32.v:102: syntax error\nI give up.\n'
Tokens:  996
LLM generates return in:  601.276602  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  129.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.01246449 -0.00755958  0.01004607  0.00584     0.00231138  0.00201517
  0.0081898   0.00111217  0.0009899   0.00085608]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [ 0.03133602  0.02115187 -0.02275684  0.02506249 -0.06122796  0.02395653
  0.02357036  0.010711    0.00748136  0.00550649]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [ 0.0227537   0.01825511 -0.46227905 -0.01616599  0.01974992  0.01501847
  0.01451874  0.0101795   0.01012173  0.00598582]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [ 0.05259062  0.00720999 -0.3491195   0.02187319  0.01344758  0.00907849
  0.00641421  0.00630023  0.00518979  0.00448249]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.11850456 0.12078378 0.11070643 0.08509424 0.03126527 0.01352636
 0.01328053 0.0119656  0.00888703 0.0088433 ]  taking action:  1
Adding child.
Leaf selection - depth:  5
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  11
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
  wire c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15, c16, c17, c18, c19, c20, c21, c22, c23, c24, c25, c26, c27, c28, c29, c30, c31, c32, c33, c34, c35, c36, c37, c38, c39, c40, c41, c42, c43, c44, c45, c46, c47, c48, c49, c50, c51, c52, c53, c54, c55, c56, c57, c58, c59, c60, c61, c62, c63;
  adder_8 a1(sum[7:0], c0, in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c1, in1[15:8], in2[15:8], c0);
  adder_8 a3(sum[23:16], c2, in1[23:16], in2[23:16], c1);
  adder_8 a4(sum[31:24], c3, in1[31:24], in2[31:24], c2);
  adder_8 a5(sum[39:32], c4, in1[39:32], in2[39:32], c3);
  adder_8 a6(sum[47:40], c5, in1[47:40], in2[47:40], c4);
  adder_8 a7(sum[55:48], c6, in1[55:48], in2[55:48], c5);
  adder_8 a8(sum[63:56], cout, in1[63:56], in2[63:56], c6);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 failed\n'
Tokens:  463
LLM generates return in:  203.650946  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  130.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.01181864 -0.00720472  0.01008463  0.00586242  0.00232026  0.00202291
  0.00850915  0.00111644  0.0009937   0.00085937]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [ 0.03044914  0.02151768 -0.02261678  0.02508117 -0.06121558  0.0240797
  0.02369155  0.01076607  0.00751983  0.0055348 ]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [ 0.02205053  0.01890954 -0.46201432 -0.01592856  0.01988851  0.01512386
  0.01462063  0.01025094  0.01019276  0.00602782]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [ 0.050095    0.00890729 -0.34796333  0.02242395  0.01355063  0.00914806
  0.00646336  0.00634851  0.00522956  0.00451684]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.12094616 0.0111066  0.1120166  0.0861013  0.03163529 0.01368644
 0.0134377  0.01210721 0.0089922  0.00894796]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [0.13016123 0.10881648 0.00909386 0.00272537 0.00216414 0.00176415
 0.00103676 0.00056934 0.00027329 0.00023688]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [0.13537121 0.10918544 0.10857242 0.00575856 0.00090193 0.00054672
 0.00034532 0.00028403 0.00028157 0.00027872]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [1.6747364e-01 8.5329954e-03 4.4506332e-03 4.5585216e-04 3.0658219e-04
 2.2364242e-04 2.0778443e-04 1.1234985e-04 5.9905749e-05 3.2315245e-05]  taking action:  0
Leaf selection - depth:  8
Leaf selection - action scores:  [1.6986485e-01 8.2265250e-02 1.7106335e-03 1.6574464e-03 6.9828192e-04
 1.2786999e-04 1.1745294e-04 1.0745165e-04 7.3703457e-05 7.1043425e-05]  taking action:  0
Leaf selection - depth:  9
Leaf selection - action scores:  [1.7490491e-01 7.3210031e-02 4.9298266e-03 4.3203253e-03 5.5230584e-04
 3.9873470e-04 3.7885612e-04 1.4631409e-04 1.3391855e-04 1.3329777e-04]  taking action:  0
Leaf selection - depth:  10
Leaf selection - action scores:  [0.18254986 0.00845429 0.00671545 0.00146131 0.00073408 0.00044457
 0.00034934 0.00030297 0.00026105 0.00024251]  taking action:  0
Leaf selection - depth:  11
Leaf selection - action scores:  [1.8256742e-01 1.7832445e-01 1.0001244e-03 6.1559019e-04 4.6703534e-04
 1.7906087e-04 7.2726769e-05 6.3042135e-05 5.7576839e-05 3.7441387e-05]  taking action:  0
Leaf selection - depth:  12
Leaf selection - action scores:  [0.18941182 0.0409879  0.00449911 0.00312478 0.00119859 0.00065595
 0.00046726 0.0002199  0.00020615 0.00018986]  taking action:  0
Leaf selection - depth:  13
Leaf selection - action scores:  [1.9754387e-01 8.9449733e-03 3.5461399e-03 1.4116230e-03 6.2470959e-04
 5.7018187e-04 3.5713208e-04 3.2986255e-04 2.5923425e-04 1.2410327e-04]  taking action:  0
Leaf selection - depth:  14
Leaf selection - action scores:  [2.0231313e-01 6.6194601e-02 4.3609619e-04 1.5367627e-04 9.4684416e-05
 7.3628995e-05 6.5834647e-05 4.7164907e-05 3.7877253e-05 2.5856856e-05]  taking action:  0
Leaf selection - depth:  15
Leaf selection - action scores:  [2.1215664e-01 1.3247548e-02 1.3656649e-03 1.0877816e-03 6.0669478e-04
 1.7828817e-04 7.3064446e-05 6.7225446e-05 5.8756876e-05 4.6626847e-05]  taking action:  0
Leaf selection - depth:  16
Leaf selection - action scores:  [2.20915392e-01 3.40541219e-03 8.50044424e-04 2.80402572e-04
 2.17421853e-04 1.97036672e-04 1.81176933e-04 1.16014955e-04
 1.04099912e-04 6.49733192e-05]  taking action:  0
Leaf selection - depth:  17
Leaf selection - action scores:  [2.2967811e-01 6.3342359e-03 3.4580671e-04 3.3816745e-04 2.7395456e-04
 4.9173959e-05 4.4644123e-05 4.3731885e-05 3.4827819e-05 3.0705909e-05]  taking action:  0
Leaf selection - depth:  18
Leaf selection - action scores:  [2.39037812e-01 1.01651456e-02 6.96364266e-04 6.34709955e-04
 3.00555490e-04 1.09323395e-04 5.40368965e-05 3.60562553e-05
 3.57808458e-05 3.26504960e-05]  taking action:  0
Leaf selection - depth:  19
Leaf selection - action scores:  [2.50074029e-01 2.70501128e-03 1.31416426e-04 1.20809964e-04
 1.09712091e-04 7.43891214e-05 6.93843322e-05 6.80825542e-05
 6.22099469e-05 6.04265078e-05]  taking action:  0
Leaf selection - depth:  20
Leaf selection - action scores:  [2.5968558e-01 3.4451198e-02 2.2290743e-04 9.4905561e-05 2.3492295e-05
 1.7446275e-05 9.9942763e-06 9.7066850e-06 5.8353949e-06 4.3910300e-06]  taking action:  0
Leaf selection - depth:  21
Leaf selection - action scores:  [2.7407306e-01 7.0659379e-03 5.7793141e-04 4.5352321e-04 2.3780407e-04
 1.0881402e-04 2.7630287e-05 2.3246273e-05 2.2465321e-05 2.0925130e-05]  taking action:  0
Leaf selection - depth:  22
Leaf selection - action scores:  [2.8873438e-01 7.1925420e-04 5.0073932e-04 4.5446621e-04 4.0277612e-04
 5.5469274e-05 3.9840699e-05 3.2243803e-05 3.2021209e-05 3.1343698e-05]  taking action:  0
Leaf selection - depth:  23
Leaf selection - action scores:  [2.9282358e-01 2.2397165e-01 6.4698013e-04 2.7603930e-04 1.5304470e-04
 8.4884421e-05 7.4762938e-05 7.0449023e-05 2.4462619e-05 2.4007963e-05]  taking action:  0
Leaf selection - depth:  24
Leaf selection - action scores:  [3.3494222e-01 6.2603123e-02 2.5621410e-02 2.3707580e-03 1.6843674e-03
 6.3648616e-04 3.7283159e-04 2.8950771e-04 1.8579558e-04 1.5373410e-04]  taking action:  0
Leaf selection - depth:  25
Leaf selection - action scores:  [3.6656818e-01 5.4002618e-03 4.0356396e-03 6.9566164e-04 1.6248386e-04
 1.2190667e-04 9.0742062e-05 7.2207469e-05 6.4594642e-05 6.3732106e-05]  taking action:  0
Leaf selection - depth:  26
Leaf selection - action scores:  [3.8319051e-01 3.1503212e-01 2.4162505e-03 1.1268030e-03 4.5449217e-04
 1.3291217e-04 8.2195584e-05 4.1475996e-05 3.4471355e-05 2.8960656e-05]  taking action:  0
Leaf selection - depth:  27
Leaf selection - action scores:  [5.9043562e-01 1.4510438e-02 9.1802208e-03 1.3346999e-03 9.9021639e-04
 2.6448956e-04 1.8342194e-04 1.2851991e-04 9.9420155e-05 7.2353228e-05]  taking action:  0
Leaf selection - depth:  28
Leaf selection - action scores:  [6.9439918e-01 5.6487154e-03 6.8905210e-04 2.9163843e-04 2.8785394e-04
 1.3084536e-04 1.2243490e-04 1.2027492e-04 8.6133194e-05 6.8457950e-05]  taking action:  0
Leaf selection - depth:  29
Leaf selection - action scores:  [7.0965743e-01 4.2964473e-01 6.2899158e-04 2.4709967e-04 1.1047440e-04
 7.6660108e-05 5.3262396e-05 4.9833856e-05 4.9734346e-05 7.1332765e-06]  taking action:  0
Leaf selection - depth:  30
Leaf selection - action scores:  [1.1355674e+00 8.7221097e-03 4.3032872e-03 2.3012408e-03 8.7653665e-04
 2.9537344e-04 1.5240409e-04 1.5167445e-04 1.3861737e-04 1.2369301e-04]  taking action:  0
Leaf selection - depth:  31
Leaf selection - action scores:  [1.9354429e+00 6.5850564e-03 6.1889677e-03 2.0556259e-03 2.4603633e-04
 1.0170763e-04 7.9994010e-05 6.7344758e-05 6.2358842e-05 5.9291138e-05]  taking action:  0
Adding child.
Leaf selection - depth:  32
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  11
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42,c43,c44,c45,c46,c47,c48,c49,c50,c51,c52,c53,c54,c55,c56,c57,c58,c59,c60,c61,c62,c63;
  adder_8 a1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
  adder_8 a3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
  adder_8 a4(sum[31:24], c4, in1[31:24], in2[31:24], c3);
  adder_8 a5(sum[39:32], c5, in1[39:32], in2[39:32], c4);
  adder_8 a6(sum[47:40], c6, in1[47:40], in2[47:40], c5);
  adder_8 a7(sum[55:48], c7, in1[55:48], in2[55:48], c6);
  adder_8 a8(sum[63:56], cout, in1[63:56], in2[63:56], c7);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 failed\n'
Tokens:  433
LLM generates return in:  193.257064  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  131.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.01118394 -0.00685121  0.01012305  0.00588476  0.0023291   0.00203062
  0.00882728  0.00112069  0.00099748  0.00086264]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [ 0.02958184  0.02188164 -0.02247742  0.02509976 -0.06120326  0.02420224
  0.02381212  0.01082086  0.0075581   0.00556296]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [ 0.02136046  0.01955944 -0.46175146 -0.01569277  0.02002615  0.01522852
  0.01472181  0.01032188  0.0102633   0.00606954]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [ 0.04770505  0.0105918  -0.34681588  0.02297055  0.0136529   0.0092171
  0.00651214  0.00639642  0.00526902  0.00455092]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.1180415  0.01181307 0.11331164 0.08709673 0.03200103 0.01384467
 0.01359306 0.01224718 0.00909616 0.00905141]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [0.1271216  0.11013552 0.00920409 0.00275841 0.00219037 0.00178553
 0.00104932 0.00057624 0.0002766  0.00023975]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [0.1308859  0.11162883 0.1099212  0.0058301  0.00091314 0.00055352
 0.00034961 0.00028755 0.00028507 0.00028218]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [1.6289037e-01 8.6652972e-03 4.5196395e-03 4.6292006e-04 3.1133567e-04
 2.2710995e-04 2.1100607e-04 1.1409181e-04 6.0834576e-05 3.2816286e-05]  taking action:  0
Leaf selection - depth:  8
Leaf selection - action scores:  [1.65080309e-01 8.35815817e-02 1.73800543e-03 1.68396719e-03
 7.09455169e-04 1.29916050e-04 1.19332311e-04 1.09170986e-04
 7.48827879e-05 7.21801916e-05]  taking action:  0
Leaf selection - depth:  9
Leaf selection - action scores:  [1.6985865e-01 7.4420191e-02 5.0113169e-03 4.3917401e-03 5.6143547e-04
 4.0532579e-04 3.8511862e-04 1.4873267e-04 1.3613222e-04 1.3550119e-04]  taking action:  0
Leaf selection - depth:  10
Leaf selection - action scores:  [0.17717576 0.00859882 0.00683026 0.00148629 0.00074662 0.00045217
 0.00035532 0.00030815 0.00026551 0.00024665]  taking action:  0
Leaf selection - depth:  11
Leaf selection - action scores:  [1.7644058e-01 1.8030085e-01 1.0178271e-03 6.2648644e-04 4.7530211e-04
 1.8223033e-04 7.4014068e-05 6.4158012e-05 5.8595979e-05 3.8104117e-05]  taking action:  1
Leaf selection - depth:  12
Leaf selection - action scores:  [1.2190646e+00 2.3408044e-02 7.8386180e-03 4.6874424e-03 7.6078571e-04
 5.7491998e-04 4.9149262e-04 4.0922500e-04 3.3090528e-04 3.1572554e-04]  taking action:  0
Leaf selection - depth:  13
Leaf selection - action scores:  [1.9491680e+00 6.0105853e-04 3.0223696e-04 2.7860052e-04 1.4177291e-04
 1.1571919e-04 3.9867493e-05 3.1307642e-05 2.9893456e-05 2.7341301e-05]  taking action:  0
Adding child.
Leaf selection - depth:  14
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  26676
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
  wire c1,c2,c3;
  adder_8 A1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
  adder_8 A2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
  adder_8 A3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
  adder_8 A4(sum[31:24], cout, in1[31:24], in2[31:24], c3);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  135
LLM generates return in:  48.203264  seconds
Running getPromptScore: 
adder_32
output_files/2329780_adder_32/synth_script.sh
Running bash in x seconds:  0.895753

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.1
Backpropogation: incorporating estimates.
Current runs:  132.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.01256009 -0.00649904  0.01016132  0.005907    0.0023379   0.00203829
  0.00914421  0.00112493  0.00100125  0.0008659 ]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [ 0.03143615  0.02224377 -0.02233876  0.02511826 -0.061191    0.02432417
  0.02393208  0.01087537  0.00759617  0.00559099]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [ 0.02362427  0.02020491 -0.46149036 -0.01545859  0.02016285  0.01533248
  0.0148223   0.01039234  0.01033336  0.00611097]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [ 0.04985834  0.01226377 -0.34567696  0.02351309  0.01375441  0.00928563
  0.00656056  0.00644398  0.0053082   0.00458476]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.11989705 0.01251154 0.11459204 0.0880809  0.03236263 0.01400111
 0.01374666 0.01238557 0.00919895 0.00915369]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [0.12895885 0.11143894 0.00931302 0.00279105 0.00221629 0.00180667
 0.00106174 0.00058306 0.00027988 0.00024259]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [0.13251564 0.11404261 0.11125363 0.00590077 0.0009242  0.00056023
 0.00035384 0.00029104 0.00028853 0.0002856 ]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [1.64590389e-01 8.79561063e-03 4.58760792e-03 4.69881663e-04
 3.16017686e-04 2.30525344e-04 2.14179294e-04 1.15807576e-04
 6.17494370e-05 3.33097923e-05]  taking action:  0
Leaf selection - depth:  8
Leaf selection - action scores:  [1.6678584e-01 8.4877498e-02 1.7649529e-03 1.7100768e-03 7.2045514e-04
 1.3193037e-04 1.2118253e-04 1.1086366e-04 7.6043827e-05 7.3299329e-05]  taking action:  0
Leaf selection - depth:  9
Leaf selection - action scores:  [1.7152578e-01 7.5610995e-02 5.0915033e-03 4.4620130e-03 5.7041901e-04
 4.1181143e-04 3.9128092e-04 1.5111254e-04 1.3831048e-04 1.3766935e-04]  taking action:  0
Leaf selection - depth:  10
Leaf selection - action scores:  [0.1787567  0.00874096 0.00694316 0.00151086 0.00075897 0.00045965
 0.00036119 0.00031325 0.0002699  0.00025073]  taking action:  0
Leaf selection - depth:  11
Leaf selection - action scores:  [1.8110062e-01 1.6168259e-01 1.0352271e-03 6.3719635e-04 4.8342749e-04
 1.8534561e-04 7.5279357e-05 6.5254811e-05 5.9597689e-05 3.8755516e-05]  taking action:  0
Leaf selection - depth:  12
Leaf selection - action scores:  [0.18325835 0.04179962 0.00458821 0.00318666 0.00122233 0.00066894
 0.00047651 0.00022426 0.00021023 0.00019362]  taking action:  0
Leaf selection - depth:  13
Leaf selection - action scores:  [1.9094026e-01 9.1294255e-03 3.6192639e-03 1.4407317e-03 6.3759158e-04
 5.8193947e-04 3.6449640e-04 3.3666458e-04 2.6457987e-04 1.2666237e-04]  taking action:  0
Leaf selection - depth:  14
Leaf selection - action scores:  [1.9529496e-01 6.7618303e-02 4.4547566e-04 1.5698151e-04 9.6720869e-05
 7.5212592e-05 6.7250607e-05 4.8179321e-05 3.8691909e-05 2.6412979e-05]  taking action:  0
Leaf selection - depth:  15
Leaf selection - action scores:  [2.0456231e-01 1.3545283e-02 1.3963579e-03 1.1122292e-03 6.2033004e-04
 1.8229516e-04 7.4706557e-05 6.8736321e-05 6.0077418e-05 4.7674770e-05]  taking action:  0
Leaf selection - depth:  16
Leaf selection - action scores:  [2.1271397e-01 3.4855504e-03 8.7004818e-04 2.8700117e-04 2.2253835e-04
 2.0167345e-04 1.8544050e-04 1.1874508e-04 1.0654965e-04 6.6502311e-05]  taking action:  0
Leaf selection - depth:  17
Leaf selection - action scores:  [2.2080509e-01 6.4906604e-03 3.5434644e-04 3.4651853e-04 2.8071989e-04
 5.0388317e-05 4.5746616e-05 4.4811852e-05 3.5687895e-05 3.1464198e-05]  taking action:  0
Leaf selection - depth:  18
Leaf selection - action scores:  [2.2940107e-01 1.0429218e-02 7.1445463e-04 6.5119861e-04 3.0836341e-04
 1.1216343e-04 5.5440683e-05 3.6992933e-05 3.6710371e-05 3.3498702e-05]  taking action:  0
Leaf selection - depth:  19
Leaf selection - action scores:  [2.3953316e-01 2.7791350e-03 1.3501754e-04 1.2412044e-04 1.1271846e-04
 7.6427561e-05 7.1285627e-05 6.9948175e-05 6.3914646e-05 6.2082334e-05]  taking action:  0
Leaf selection - depth:  20
Leaf selection - action scores:  [2.4817151e-01 3.5449993e-02 2.2936986e-04 9.7657023e-05 2.4173372e-05
 1.7952070e-05 1.0284026e-05 9.9880963e-06 6.0045718e-06 4.5183328e-06]  taking action:  0
Leaf selection - depth:  21
Leaf selection - action scores:  [2.6129425e-01 7.2834017e-03 5.9571804e-04 4.6748103e-04 2.4512282e-04
 1.1216292e-04 2.8480648e-05 2.3961709e-05 2.3156723e-05 2.1569129e-05]  taking action:  0
Leaf selection - depth:  22
Leaf selection - action scores:  [2.7449894e-01 7.4284256e-04 5.1716133e-04 4.6937069e-04 4.1598536e-04
 5.7288420e-05 4.1147297e-05 3.3301254e-05 3.3071359e-05 3.2371630e-05]  taking action:  0
Leaf selection - depth:  23
Leaf selection - action scores:  [2.7506334e-01 2.3358761e-01 6.6968810e-04 2.8572782e-04 1.5841633e-04
 8.7863729e-05 7.7386998e-05 7.2921670e-05 2.5321218e-05 2.4850602e-05]  taking action:  0
Leaf selection - depth:  24
Leaf selection - action scores:  [3.1463674e-01 6.5159395e-02 2.6667608e-02 2.4675631e-03 1.7531451e-03
 6.6247577e-04 3.8805540e-04 3.0132916e-04 1.9338218e-04 1.6001152e-04]  taking action:  0
Leaf selection - depth:  25
Leaf selection - action scores:  [3.4260902e-01 5.6403894e-03 4.2150877e-03 7.2659488e-04 1.6970886e-04
 1.2732737e-04 9.4776995e-05 7.5418240e-05 6.7466906e-05 6.6566012e-05]  taking action:  0
Leaf selection - depth:  26
Leaf selection - action scores:  [3.3368090e-01 3.3406913e-01 2.5341853e-03 1.1818010e-03 4.7667543e-04
 1.3939948e-04 8.6207459e-05 4.3500397e-05 3.6153866e-05 3.0374194e-05]  taking action:  1
Leaf selection - depth:  27
Leaf selection - action scores:  [8.3343852e-01 4.1045625e-02 7.6475586e-03 3.9204410e-03 4.7600272e-04
 4.3221004e-04 2.3459805e-04 1.3138390e-04 1.1676257e-04 1.0992118e-04]  taking action:  0
Leaf selection - depth:  28
Leaf selection - action scores:  [1.14346790e+00 1.10646256e-03 4.23104706e-04 2.74262857e-04
 2.15518696e-04 1.04924904e-04 5.94959238e-05 4.63763172e-05
 3.60812846e-05 2.69521825e-05]  taking action:  0
Leaf selection - depth:  29
Leaf selection - action scores:  [1.3223404  0.51779246 0.02856097 0.01476414 0.00933578 0.00805694
 0.00637364 0.00612085 0.00156757 0.00154757]  taking action:  0
Adding child.
Leaf selection - depth:  30
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  62
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7,c8;
  adder_8 A1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
  adder_8 A2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
  adder_8 A3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
  adder_8 A4(sum[31:24], c4, in1[31:24], in2[31:24], c3);
  adder_8 A5(sum[39:32], c5, in1[39:32], in2[39:32], c4);
  adder_8 A6(sum[47:40], c6, in1[47:40], in2[47:40], c5);
  adder_8 A7(sum[55:48], c7, in1[55:48], in2[55:48], c6);
  adder_8 A8(sum[63:56], cout, in1[63:56], in2[63:56], c7);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 failed\n'
Tokens:  270
LLM generates return in:  108.640014  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  133.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.01192697 -0.00614819  0.01019945  0.00592917  0.00234667  0.00204594
  0.00945995  0.00112915  0.00100501  0.00086915]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [ 0.03056987  0.0226041  -0.0222008   0.02513666 -0.06117881  0.02444549
  0.02405144  0.01092961  0.00763406  0.00561888]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [ 0.02291654  0.02084603 -0.46123105 -0.01522598  0.02029863  0.01543573
  0.01492212  0.01046232  0.01040294  0.00615212]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [ 0.04756305  0.01392348 -0.34454635  0.02405165  0.01385517  0.00935366
  0.00660862  0.00649119  0.00534709  0.00461835]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.11709822 0.0132023  0.11585829 0.0890542  0.03272024 0.01415583
 0.01389856 0.01252244 0.0093006  0.00925483]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [0.12603152 0.1127273  0.00942069 0.00282332 0.00224192 0.00182755
 0.00107402 0.0005898  0.00028311 0.00024539]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [0.12830877 0.11642781 0.11257029 0.00597061 0.00093514 0.00056686
 0.00035803 0.00029448 0.00029194 0.00028898]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [1.6025698e-01 8.9240205e-03 4.6545840e-03 4.7674161e-04 3.2063131e-04
 2.3389085e-04 2.1730615e-04 1.1749829e-04 6.2650935e-05 3.3796092e-05]  taking action:  0
Leaf selection - depth:  8
Leaf selection - action scores:  [1.6227290e-01 8.6153924e-02 1.7914950e-03 1.7357938e-03 7.3128968e-04
 1.3391441e-04 1.2300492e-04 1.1253088e-04 7.7187411e-05 7.4401636e-05]  taking action:  0
Leaf selection - depth:  9
Leaf selection - action scores:  [1.6677982e-01 7.6783329e-02 5.1704459e-03 4.5311954e-03 5.7926326e-04
 4.1819646e-04 3.9734764e-04 1.5345552e-04 1.4045495e-04 1.3980389e-04]  taking action:  0
Leaf selection - depth:  10
Leaf selection - action scores:  [0.17371976 0.00888082 0.00705426 0.00153504 0.00077111 0.000467
 0.00036697 0.00031826 0.00027422 0.00025474]  taking action:  0
Leaf selection - depth:  11
Leaf selection - action scores:  [1.7510280e-01 1.6311546e-01 1.0523393e-03 6.4772926e-04 4.9141858e-04
 1.8840937e-04 7.6523727e-05 6.6333472e-05 6.0582843e-05 3.9396145e-05]  taking action:  0
Leaf selection - depth:  12
Leaf selection - action scores:  [0.17747886 0.04259587 0.00467562 0.00324736 0.00124562 0.00068169
 0.00048559 0.00022853 0.00021423 0.0001973 ]  taking action:  0
Leaf selection - depth:  13
Leaf selection - action scores:  [1.8475470e-01 9.3102232e-03 3.6909394e-03 1.4692638e-03 6.5021834e-04
 5.9346412e-04 3.7171485e-04 3.4333183e-04 2.6981957e-04 1.2917079e-04]  taking action:  0
Leaf selection - depth:  14
Leaf selection - action scores:  [1.8874058e-01 6.9012649e-02 4.5466170e-04 1.6021859e-04 9.8715325e-05
 7.6763528e-05 6.8637361e-05 4.9172817e-05 3.9489769e-05 2.6957636e-05]  taking action:  0
Leaf selection - depth:  15
Leaf selection - action scores:  [1.9749261e-01 1.3836612e-02 1.4263905e-03 1.1361508e-03 6.3367200e-04
 1.8621593e-04 7.6313328e-05 7.0214686e-05 6.1369552e-05 4.8700153e-05]  taking action:  0
Leaf selection - depth:  16
Leaf selection - action scores:  [2.05106288e-01 3.56388721e-03 8.89602292e-04 2.93451449e-04
 2.27539844e-04 2.06206008e-04 1.89608225e-04 1.21413854e-04
 1.08944325e-04 6.79969307e-05]  taking action:  0
Leaf selection - depth:  17
Leaf selection - action scores:  [2.1260647e-01 6.6434024e-03 3.6268512e-04 3.5467301e-04 2.8732597e-04
 5.1574083e-05 4.6823152e-05 4.5866389e-05 3.6527723e-05 3.2204629e-05]  taking action:  0
Leaf selection - depth:  18
Leaf selection - action scores:  [2.2053538e-01 1.0686769e-02 7.3209812e-04 6.6728005e-04 3.1597848e-04
 1.1493332e-04 5.6809797e-05 3.7906477e-05 3.7616941e-05 3.4325956e-05]  taking action:  0
Leaf selection - depth:  19
Leaf selection - action scores:  [2.2988252e-01 2.8513321e-03 1.3852507e-04 1.2734489e-04 1.1564670e-04
 7.8413017e-05 7.3137504e-05 7.1765309e-05 6.5575034e-05 6.3695130e-05]  taking action:  0
Leaf selection - depth:  20
Leaf selection - action scores:  [2.37687081e-01 3.64214070e-02 2.35655141e-04 1.00333054e-04
 2.48357810e-05 1.84439996e-05 1.05658319e-05 1.02617942e-05
 6.16911120e-06 4.64214554e-06]  taking action:  0
Leaf selection - depth:  21
Leaf selection - action scores:  [2.49729395e-01 7.49455858e-03 6.12988835e-04 4.81034018e-04
 2.52229307e-04 1.15414696e-04 2.93063458e-05 2.46563959e-05
 2.38280718e-05 2.21944520e-05]  taking action:  0
Leaf selection - depth:  22
Leaf selection - action scores:  [2.6170582e-01 7.6570455e-04 5.3307769e-04 4.8381623e-04 4.2878790e-04
 5.9051548e-05 4.2413660e-05 3.4326149e-05 3.4089178e-05 3.3367913e-05]  taking action:  0
Leaf selection - depth:  23
Leaf selection - action scores:  [2.5946063e-01 2.4288802e-01 6.9165090e-04 2.9509841e-04 1.6361168e-04
 9.0745270e-05 7.9924946e-05 7.5313175e-05 2.6151642e-05 2.5665593e-05]  taking action:  0
Leaf selection - depth:  24
Leaf selection - action scores:  [2.9689932e-01 6.7619100e-02 2.7674284e-02 2.5607110e-03 1.8193246e-03
 6.8748352e-04 4.0270411e-04 3.1270404e-04 2.0068216e-04 1.6605179e-04]  taking action:  0
Leaf selection - depth:  25
Leaf selection - action scores:  [3.2195163e-01 5.8707036e-03 4.3872022e-03 7.5626391e-04 1.7663857e-04
 1.3252652e-04 9.8647019e-05 7.8497789e-05 7.0221780e-05 6.9284099e-05]  taking action:  0
Leaf selection - depth:  26
Leaf selection - action scores:  [3.5232970e-01 2.6180702e-01 2.6468700e-03 1.2343508e-03 4.9787125e-04
 1.4559799e-04 9.0040754e-05 4.5434681e-05 3.7761482e-05 3.1724809e-05]  taking action:  0
Leaf selection - depth:  27
Leaf selection - action scores:  [5.2012771e-01 1.5673066e-02 9.9157719e-03 1.4416407e-03 1.0695560e-03
 2.8568140e-04 1.9811834e-04 1.3881738e-04 1.0738605e-04 7.8150428e-05]  taking action:  0
Leaf selection - depth:  28
Leaf selection - action scores:  [5.9426767e-01 6.1878581e-03 7.5481873e-04 3.1947388e-04 3.1532819e-04
 1.4333392e-04 1.3412071e-04 1.3175457e-04 9.4354189e-05 7.4991927e-05]  taking action:  0
Leaf selection - depth:  29
Leaf selection - action scores:  [5.7596755e-01 4.8035738e-01 7.0323393e-04 2.7626581e-04 1.2351412e-04
 8.5708605e-05 5.9549166e-05 5.5715944e-05 5.5604691e-05 7.9752454e-06]  taking action:  0
Leaf selection - depth:  30
Leaf selection - action scores:  [8.4598345e-01 1.0071425e-02 4.9690083e-03 2.6572437e-03 1.0121373e-03
 3.4106788e-04 1.7598108e-04 1.7513857e-04 1.6006155e-04 1.4282839e-04]  taking action:  0
Leaf selection - depth:  31
Leaf selection - action scores:  [1.1352119e+00 8.0650141e-03 7.5799068e-03 2.5176171e-03 3.0133175e-04
 1.2456589e-04 9.7972254e-05 8.2480154e-05 7.6373668e-05 7.2616524e-05]  taking action:  0
Leaf selection - depth:  32
Leaf selection - action scores:  [1.78595495e+00 1.65224791e-01 1.50714943e-04 4.74607587e-05
 3.91714348e-05 2.85001315e-05 1.25692295e-05 1.12151847e-05
 7.09148344e-06 4.63317792e-06]  taking action:  0
Adding child.
Leaf selection - depth:  33
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  66
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42,c43,c44,c45,c46,c47,c48,c49,c50,c51,c52,c53,c54,c55,c56,c57,c58,c59,c60,c61,c62,c63;
  adder_8 a1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
  adder_8 a3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
  adder_8 a4(sum[31:24], c4, in1[31:24], in2[31:24], c3);
  adder_8 a5(sum[39:32], c5, in1[39:32], in2[39:32], c4);
  adder_8 a6(sum[47:40], c6, in1[47:40], in2[47:40], c5);
  adder_8 a7(sum[55:48], c7, in1[55:48], in2[55:48], c6);
  adder_8 a8(sum[63:56], cout, in1[63:56], in2[63:56], c7);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 failed\n'
Tokens:  432
LLM generates return in:  193.070882  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  134.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.01130449 -0.00579865  0.01023744  0.00595125  0.00235541  0.00205356
  0.00977451  0.00113336  0.00100875  0.00087239]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [ 0.02972206  0.02296263 -0.02206352  0.02515497 -0.06116667  0.02456621
  0.02417021  0.01098359  0.00767176  0.00564662]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [ 0.02222194  0.02148288 -0.46097344 -0.01499492  0.02043351  0.01553829
  0.01502127  0.01053184  0.01047207  0.006193  ]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [ 0.04535867  0.01557122 -0.34342393  0.02458632  0.01395521  0.0094212
  0.00665634  0.00653806  0.0053857   0.0046517 ]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.11440056 0.01388558 0.11711084 0.09001698 0.03307398 0.01430887
 0.01404882 0.01265782 0.00940115 0.00935489]  taking action:  2
Adding child.
Leaf selection - depth:  5
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  11
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
  wire c8, c16, c24, c32;
  wire [31:0] in1_1, in1_2, in2_1, in2_2;
  wire [7:0] in1_3, in1_4, in2_3, in2_4;
  wire [3:0] in1_5, in1_6, in2_5, in2_6;
  wire [1:0] in1_7, in1_8, in2_7, in2_8;
  adder_8 a1(in1_1, in1_2, in1_3, in1_4, in1_5, in1_6, in1_7, in1_8, in1[31:0], in2[31:0], cin);
  adder_8 a2(in1_9, in1_10, in1_11, in1_12, in1_13, in1_14, in1_15, in1_16, in1[63:32], in2[63:32], c8);
  adder_8 a3(in1_17, in1_18, in1_19, in1_20, in1_21, in1_22, in1_23, in1_24, in1[95:64], in2[95:64], c16);
  adder_8 a4(in1_25, in1_26, in1_27, in1_28, in1_29, in1_30, in1_31, in1_32, in1[127:96], in2[127:96], c24);
  adder_8 a5(in1_33, in1_34, in1_35, in1_36, in1_37, in1_38, in1_39, in1_40, in1[159:128], in2[159:128], c32);
  adder_8 a6(in1_41, in1_42, in1_43, in1_44, in1_45, in1_46, in1_47, in1_48, in1[191:160], in2[191:160], cout);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Verilog compilation failed, error:  6
Compilation output:  b'output_files/2329780_adder_32/2329780_adder_32.v:41: error: Wrong number of ports. Expecting 5, got 11.\noutput_files/2329780_adder_32/2329780_adder_32.v:42: error: Wrong number of ports. Expecting 5, got 11.\noutput_files/2329780_adder_32/2329780_adder_32.v:43: error: Wrong number of ports. Expecting 5, got 11.\noutput_files/2329780_adder_32/2329780_adder_32.v:44: error: Wrong number of ports. Expecting 5, got 11.\noutput_files/2329780_adder_32/2329780_adder_32.v:45: error: Wrong number of ports. Expecting 5, got 11.\noutput_files/2329780_adder_32/2329780_adder_32.v:46: error: Wrong number of ports. Expecting 5, got 11.\nadders/ripple_carry/tb_ripplecarry_32.v:14: warning: Port 1 (sum) of adder_32 expects 64 bits, got 32.\nadders/ripple_carry/tb_ripplecarry_32.v:14:        : Padding 32 high bits of the port.\nadders/ripple_carry/tb_ripplecarry_32.v:14: warning: Port 3 (in1) of adder_32 expects 64 bits, got 32.\nadders/ripple_carry/tb_ripplecarry_32.v:14:        : Padding 32 high bits of the port.\nadders/ripple_carry/tb_ripplecarry_32.v:14: warning: Port 4 (in2) of adder_32 expects 64 bits, got 32.\nadders/ripple_carry/tb_ripplecarry_32.v:14:        : Padding 32 high bits of the port.\n6 error(s) during elaboration.\n'
Tokens:  513
LLM generates return in:  233.932876  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  135.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.00195449 -0.0054504   0.01027529  0.00597325  0.00236412  0.00206115
  0.01008791  0.00113755  0.00101248  0.00087562]  taking action:  2
Adding child.
Leaf selection - depth:  1
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  198
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin); 
  wire [31:0] c;
  adder_8 a1(sum[7:0], c[0], in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c[1], in1[15:8], in2[15:8], c[0]);
  adder_8 a3(sum[23:16], c[2], in1[23:16], in2[23:16], c[1]);
  adder_8 a4(sum[31:24], cout, in1[31:24], in2[31:24], c[2]);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  153
LLM generates return in:  54.263458  seconds
Running getPromptScore: 
adder_32
output_files/2329780_adder_32/synth_script.sh
Running bash in x seconds:  0.917677

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.1
Backpropogation: incorporating estimates.
Current runs:  136.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.00242128 -0.00510343  0.0551565   0.00599517  0.0023728   0.00206872
  0.01040016  0.00114172  0.0010162   0.00087883]  taking action:  2
Leaf selection - depth:  1
Leaf selection - action scores:  [1.83692706e+00 1.13089032e-01 1.29110238e-03 9.35628123e-05
 2.26344728e-05 1.79651397e-05 1.30320423e-05 1.04357305e-05
 1.00048292e-05 9.15185319e-06]  taking action:  0
Adding child.
Leaf selection - depth:  2
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  50286
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin); 
  wire [31:0] c;
  adder_8 a1(sum[7:0], c[0], in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c[1], in1[15:8], in2[15:8], c[0]);
  adder_8 a3(sum[23:16], c[2], in1[23:16], in2[23:16], c[1]);
  adder_8 a4(sum[31:24], cout, in1[31:24], in2[31:24], c[2]);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  152
LLM generates return in:  53.910918  seconds
Running getPromptScore: 
adder_32
output_files/2329780_adder_32/synth_script.sh
Running bash in x seconds:  0.909478

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.1
Backpropogation: incorporating estimates.
Current runs:  137.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.00288636 -0.00475772  0.07011686  0.00601701  0.00238144  0.00207625
  0.01071127  0.00114588  0.0010199   0.00088203]  taking action:  2
Leaf selection - depth:  1
Leaf selection - action scores:  [1.1748835e+00 1.3850522e-01 1.5812711e-03 1.1459058e-04 2.7721455e-05
 2.2002714e-05 1.5960928e-05 1.2781107e-05 1.2253363e-05 1.1208686e-05]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [1.8460895e+00 2.0188401e-02 1.5274276e-02 1.2352414e-02 7.6936418e-03
 6.5513151e-03 4.8545781e-03 2.2096701e-03 1.4906614e-03 1.4091887e-03]  taking action:  0
Adding child.
Leaf selection - depth:  3
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  21809
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin); 
  wire [31:0] c;
  adder_8 a1(sum[7:0], c[0], in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c[1], in1[15:8], in2[15:8], c[0]);
  adder_8 a3(sum[23:16], c[2], in1[23:16], in2[23:16], c[1]);
  adder_8 a4(sum[31:24], cout, in1[31:24], in2[31:24], c[2]);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  151
LLM generates return in:  53.602533  seconds
Running getPromptScore: 
adder_32
output_files/2329780_adder_32/synth_script.sh
Running bash in x seconds:  0.901589

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.1
Backpropogation: incorporating estimates.
Current runs:  138.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.00334975 -0.00441326  0.077597    0.00603878  0.00239006  0.00208376
  0.01102126  0.00115003  0.00102359  0.00088522]  taking action:  2
Leaf selection - depth:  1
Leaf selection - action scores:  [9.32602406e-01 1.59932047e-01 1.82589446e-03 1.32317800e-04
 3.20099789e-05 2.54065435e-05 1.84300916e-05 1.47583505e-05
 1.41489645e-05 1.29426753e-05]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [1.1804942  0.02472564 0.01870709 0.01512856 0.00942275 0.00802369
 0.00594562 0.00270628 0.00182568 0.0017259 ]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [1.6913967  0.13639672 0.03102336 0.027853   0.00635051 0.00435353
 0.00252594 0.00240089 0.00206192 0.00200774]  taking action:  0
Adding child.
Leaf selection - depth:  4
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  685
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin); 
  wire [31:0] c;
  adder_8 a1(sum[7:0], c[0], in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c[1], in1[15:8], in2[15:8], c[0]);
  adder_8 a3(sum[23:16], c[2], in1[23:16], in2[23:16], c[1]);
  adder_8 a4(sum[31:24], cout, in1[31:24], in2[31:24], c[2]);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  150
LLM generates return in:  53.298073  seconds
Running getPromptScore: 
adder_32
output_files/2329780_adder_32/synth_script.sh
Running bash in x seconds:  0.900486

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.1
Backpropogation: incorporating estimates.
Current runs:  139.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.00381149 -0.00407004  0.08208506  0.00606046  0.00239864  0.00209124
  0.01133013  0.00115416  0.00102726  0.0008884 ]  taking action:  2
Leaf selection - depth:  1
Leaf selection - action scores:  [8.0110914e-01 1.7880945e-01 2.0414121e-03 1.4793579e-04 3.5788242e-05
 2.8405379e-05 2.0605468e-05 1.6500337e-05 1.5819023e-05 1.4470351e-05]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.9369216  0.02855071 0.02160109 0.01746895 0.01088045 0.00926496
 0.00686541 0.00312495 0.00210811 0.00199289]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [1.0857646  0.1670512  0.0379957  0.03411283 0.00777776 0.00533197
 0.00309364 0.00294048 0.00252533 0.00245897]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.96922904 0.8729906  0.05162913 0.02657478 0.00354116 0.00276465
 0.00205211 0.00156136 0.00150999 0.00118997]  taking action:  0
Adding child.
Leaf selection - depth:  5
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  3132
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin); 
  wire [31:0] c;
  adder_8 a1(sum[7:0], c[0], in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c[1], in1[15:8], in2[15:8], c[0]);
  adder_8 a3(sum[23:16], c[2], in1[23:16], in2[23:16], c[1]);
  adder_8 a4(sum[31:24], cout, in1[31:24], in2[31:24], c[2]);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  149
LLM generates return in:  53.015102  seconds
Running getPromptScore: 
adder_32
output_files/2329780_adder_32/synth_script.sh
Running bash in x seconds:  0.903009

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.1
Backpropogation: incorporating estimates.
Current runs:  140.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.00427157 -0.00372805  0.08507708  0.00608206  0.00240719  0.0020987
  0.01163791  0.00115827  0.00103093  0.00089157]  taking action:  2
Leaf selection - depth:  1
Leaf selection - action scores:  [7.1633017e-01 1.9587594e-01 2.2362547e-03 1.6205554e-04 3.9204057e-05
 3.1116535e-05 2.2572160e-05 1.8075214e-05 1.7328872e-05 1.5851474e-05]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.8047309  0.03192066 0.02415075 0.01953088 0.01216472 0.01035854
 0.00767576 0.0034938  0.00235694 0.00222812]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.8639987  0.1928941  0.04387365 0.0393901  0.00898098 0.00615683
 0.00357222 0.00339538 0.002916   0.00283937]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.6435292  1.0691909  0.0632325  0.03254732 0.00433702 0.00338599
 0.00251331 0.00191226 0.00184935 0.00145741]  taking action:  1
Adding child.
Leaf selection - depth:  5
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  16
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin); 
  wire c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42,c43,c44,c45,c46,c47,c48,c49,c50,c51,c52,c53,c54,c55,c56,c57,c58,c59,c60,c61,c62,c63;
  adder_8 a1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
  adder_8 a3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
  adder_8 a4(sum[31:24], c4, in1[31:24], in2[31:24], c3);
  adder_8 a5(sum[39:32], c5, in1[39:32], in2[39:32], c4);
  adder_8 a6(sum[47:40], c6, in1[47:40], in2[47:40], c5);
  adder_8 a7(sum[55:48], c7, in1[55:48], in2[55:48], c6);
  adder_8 a8(sum[63:56], cout, in1[63:56], in2[63:56], c7);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 failed\n'
Tokens:  461
LLM generates return in:  202.535341  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  141.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.00473003 -0.00338726  0.05864279  0.00610359  0.00241571  0.00210613
  0.01194459  0.00116237  0.00103457  0.00089472]  taking action:  2
Leaf selection - depth:  1
Leaf selection - action scores:  [6.2276268e-01 2.1157020e-01 2.4154314e-03 1.7504000e-04 4.2345222e-05
 3.3609700e-05 2.4380719e-05 1.9523464e-05 1.8717321e-05 1.7121551e-05]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.6795041  0.03496733 0.02645582 0.02139501 0.01332578 0.01134721
 0.00840838 0.00382726 0.0025819  0.00244079]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.6935832  0.21566215 0.04905223 0.04403947 0.01004105 0.00688354
 0.00399387 0.00379615 0.00326019 0.00317451]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.73534846 0.5672976  0.07301461 0.03758241 0.00500796 0.0039098
 0.00290212 0.00220809 0.00213544 0.00168287]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [1.3416507  0.23437986 0.13887925 0.13521777 0.02886034 0.00863535
 0.00669512 0.00654636 0.0061168  0.00467544]  taking action:  0
Adding child.
Leaf selection - depth:  6
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  25
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin); 
  wire [31:0] c;
  adder_8 a1(sum[7:0], c[0], in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c[1], in1[15:8], in2[15:8], c[0]);
  adder_8 a3(sum[23:16], c[2], in1[23:16], in2[23:16], c[1]);
  adder_8 a4(sum[31:24], cout, in1[31:24], in2[31:24], c[2]);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  148
LLM generates return in:  52.661023  seconds
Running getPromptScore: 
adder_32
output_files/2329780_adder_32/synth_script.sh
Running bash in x seconds:  0.894829

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.1
Backpropogation: incorporating estimates.
Current runs:  142.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.00518688 -0.00304767  0.06381705  0.00612505  0.0024242   0.00211353
  0.0122502   0.00116646  0.00103821  0.00089787]  taking action:  2
Leaf selection - depth:  1
Leaf selection - action scores:  [5.8197916e-01 2.2617806e-01 2.5822048e-03 1.8712562e-04 4.5268946e-05
 3.5930279e-05 2.6064085e-05 2.0871461e-05 2.0009658e-05 1.8303706e-05]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.62561953 0.03776904 0.02857555 0.02310925 0.01439349 0.01225639
 0.00908208 0.00413391 0.00278877 0.00263635]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.62591696 0.23624605 0.05373403 0.04824282 0.01099941 0.00754054
 0.00437506 0.00415847 0.00357136 0.0034775 ]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.5774952  0.64015967 0.08163281 0.04201841 0.00559907 0.00437129
 0.00324466 0.00246872 0.0023875  0.00188151]  taking action:  1
Leaf selection - depth:  5
Leaf selection - action scores:  [1.8037353  0.03693264 0.03420483 0.02258302 0.01226984 0.00437067
 0.00416417 0.00389948 0.00277015 0.0024726 ]  taking action:  0
Adding child.
Leaf selection - depth:  6
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  11
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin); 
  wire c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42,c43,c44,c45,c46,c47,c48,c49,c50,c51,c52,c53,c54,c55,c56,c57,c58,c59,c60,c61,c62,c63;
  adder_8 a1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
  adder_8 a3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
  adder_8 a4(sum[31:24], c4, in1[31:24], in2[31:24], c3);
  adder_8 a5(sum[39:32], c5, in1[39:32], in2[39:32], c4);
  adder_8 a6(sum[47:40], c6, in1[47:40], in2[47:40], c5);
  adder_8 a7(sum[55:48], c7, in1[55:48], in2[55:48], c6);
  adder_8 a8(sum[63:56], cout, in1[63:56], in2[63:56], c7);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 failed\n'
Tokens:  460
LLM generates return in:  202.209778  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  143.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.00564213 -0.00270927  0.04561924  0.00614643  0.00243266  0.00212091
  0.01255474  0.00117053  0.00104184  0.000901  ]  taking action:  2
Leaf selection - depth:  1
Leaf selection - action scores:  [5.2458882e-01 2.3989806e-01 2.7388416e-03 1.9847669e-04 4.8014965e-05
 3.8109814e-05 2.7645136e-05 2.2137525e-05 2.1223446e-05 1.9414012e-05]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.55602556 0.0403768  0.03054855 0.02470483 0.01538728 0.01310263
 0.00970916 0.00441934 0.00298132 0.00281838]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.5440522  0.2551749  0.05803939 0.0521082  0.01188073 0.00814471
 0.00472561 0.00449166 0.0038575  0.00375613]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.6262513  0.43735468 0.08942426 0.04602886 0.00613348 0.00478851
 0.00355435 0.00270435 0.00261537 0.00206109]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [0.8715899  0.28705552 0.17009166 0.16560727 0.03534655 0.0105761
 0.00819981 0.00801763 0.00749152 0.00572622]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [1.9508984e+00 6.7035184e-04 1.5837557e-05 4.5422985e-06 4.0454943e-06
 3.2358364e-06 3.2171038e-06 2.6305459e-06 2.0371297e-06 1.7366760e-06]  taking action:  0
Adding child.
Leaf selection - depth:  7
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  15
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin); 
  wire [31:0] c;
  adder_8 a1(sum[7:0], c[0], in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c[1], in1[15:8], in2[15:8], c[0]);
  adder_8 a3(sum[23:16], c[2], in1[23:16], in2[23:16], c[1]);
  adder_8 a4(sum[31:24], cout, in1[31:24], in2[31:24], c[2]);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  147
LLM generates return in:  52.376585  seconds
Running getPromptScore: 
adder_32
output_files/2329780_adder_32/synth_script.sh
Running bash in x seconds:  0.906301

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.1
Backpropogation: incorporating estimates.
Current runs:  144.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.00609581 -0.00237204  0.05106098  0.00616773  0.00244109  0.00212826
  0.01285822  0.00117458  0.00104545  0.00090412]  taking action:  2
Leaf selection - depth:  1
Leaf selection - action scores:  [5.0083268e-01 2.5287476e-01 2.8869926e-03 2.0921280e-04 5.0612220e-05
 4.0171271e-05 2.9140532e-05 2.3335002e-05 2.2371478e-05 2.0464166e-05]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.52701837 0.04282606 0.03240163 0.02620343 0.01632068 0.01389744
 0.01029811 0.00468742 0.00316217 0.00298934]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.51182765 0.27279344 0.06204672 0.05570601 0.01270103 0.00870707
 0.00505189 0.00480179 0.00412385 0.00401548]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.52831537 0.47773862 0.09658924 0.04971685 0.00662491 0.00517218
 0.00383914 0.00292103 0.00282492 0.00222623]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [0.69912684 0.33146316 0.19640492 0.1912268  0.04081468 0.01221223
 0.00946832 0.00925796 0.00865046 0.00661207]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [1.2446764e+00 8.2100998e-04 1.9396966e-05 5.5631567e-06 4.9546984e-06
 3.9630741e-06 3.9401311e-06 3.2217476e-06 2.4949641e-06 2.1269850e-06]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [1.9498856e+00 9.2318049e-04 4.9898832e-04 8.3125706e-05 5.2307267e-05
 4.0742845e-05 2.8569668e-05 1.5837850e-05 1.2387625e-05 9.5408450e-06]  taking action:  0
Adding child.
Leaf selection - depth:  8
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  60
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin); 
  wire [31:0] c;
  adder_8 a1(sum[7:0], c[0], in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c[1], in1[15:8], in2[15:8], c[0]);
  adder_8 a3(sum[23:16], c[2], in1[23:16], in2[23:16], c[1]);
  adder_8 a4(sum[31:24], cout, in1[31:24], in2[31:24], c[2]);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  146
LLM generates return in:  52.000623  seconds
Running getPromptScore: 
adder_32
output_files/2329780_adder_32/synth_script.sh
Running bash in x seconds:  0.895523

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.1
Backpropogation: incorporating estimates.
Current runs:  145.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.00654792 -0.00203597  0.05551331  0.00618896  0.0024495   0.00213559
  0.01316066  0.00117863  0.00104905  0.00090724]  taking action:  2
Leaf selection - depth:  1
Leaf selection - action scores:  [4.8079759e-01 2.6521730e-01 3.0279036e-03 2.1942426e-04 5.3082545e-05
 4.2131989e-05 3.0562849e-05 2.4473957e-05 2.3463404e-05 2.1463000e-05]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.50310904 0.04514263 0.03415432 0.02762084 0.01720351 0.01464919
 0.01085517 0.00494097 0.00333322 0.00315104]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.48599926 0.28934112 0.06581048 0.05908515 0.01347148 0.00923524
 0.00535834 0.00509307 0.004374   0.00425905]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.4676916  0.5153271  0.10325825 0.05314955 0.00708233 0.00552929
 0.00410421 0.00312271 0.00301997 0.00237994]  taking action:  1
Leaf selection - depth:  5
Leaf selection - action scores:  [1.0545578  0.04523306 0.04189219 0.02765843 0.01502742 0.00535296
 0.00510004 0.00477587 0.00339273 0.0030283 ]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [1.9131972e+00 3.2411981e-02 2.5679616e-03 7.3762174e-04 6.9678557e-04
 4.1855624e-04 2.7486472e-04 1.8766039e-04 8.4238047e-05 6.8293542e-05]  taking action:  0
Adding child.
Leaf selection - depth:  7
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  66
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin); 
  wire c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42,c43,c44,c45,c46,c47,c48,c49,c50,c51,c52,c53,c54,c55,c56,c57,c58,c59,c60,c61,c62,c63;
  adder_8 a1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
  adder_8 a3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
  adder_8 a4(sum[31:24], c4, in1[31:24], in2[31:24], c3);
  adder_8 a5(sum[39:32], c5, in1[39:32], in2[39:32], c4);
  adder_8 a6(sum[47:40], c6, in1[47:40], in2[47:40], c5);
  adder_8 a7(sum[55:48], c7, in1[55:48], in2[55:48], c6);
  adder_8 a8(sum[63:56], cout, in1[63:56], in2[63:56], c7);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 failed\n'
Tokens:  459
LLM generates return in:  201.944505  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  146.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.00699849 -0.00170105  0.0425569   0.00621012  0.00245787  0.00214289
  0.01346206  0.00118266  0.00105263  0.00091034]  taking action:  2
Leaf selection - depth:  1
Leaf selection - action scores:  [4.4541219e-01 2.7701044e-01 3.1625421e-03 2.2918115e-04 5.5442910e-05
 4.4005428e-05 3.1921856e-05 2.5562214e-05 2.4506726e-05 2.2417373e-05]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.46294636 0.047346   0.03582135 0.02896898 0.01804319 0.0153642
 0.01138499 0.00518214 0.00349591 0.00330484]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.4424531  0.30499235 0.06937034 0.06228121 0.01420018 0.0097348
 0.00564818 0.00536856 0.0046106  0.00448944]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.49120903 0.3879732  0.10952191 0.05637361 0.00751194 0.0058647
 0.00435317 0.00331214 0.00320316 0.00252431]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [0.605334   0.37058708 0.21958737 0.21379806 0.0456322  0.01365369
 0.01058591 0.01035071 0.0096715  0.00739252]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [9.8632896e-01 9.4802061e-04 2.2397686e-05 6.4237802e-06 5.7211928e-06
 4.5761635e-06 4.5496718e-06 3.7201535e-06 2.8809363e-06 2.4560306e-06]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [1.2440561e+00 1.1306606e-03 6.1113335e-04 1.0180778e-04 6.4063053e-05
 4.9899591e-05 3.4990553e-05 1.9397325e-05 1.5171680e-05 1.1685101e-05]  taking action:  0
Leaf selection - depth:  8
Leaf selection - action scores:  [1.9340689e+00 1.6518170e-02 5.2842760e-04 2.9661448e-04 7.2028524e-05
 2.5330346e-05 2.2370499e-05 1.7698007e-05 1.2186083e-05 8.6714736e-06]  taking action:  0
Adding child.
Leaf selection - depth:  9
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  269
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin); 
  wire [31:0] c;
  adder_8 a1(sum[7:0], c[0], in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c[1], in1[15:8], in2[15:8], c[0]);
  adder_8 a3(sum[23:16], c[2], in1[23:16], in2[23:16], c[1]);
  adder_8 a4(sum[31:24], cout, in1[31:24], in2[31:24], c[2]);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  145
LLM generates return in:  51.753596  seconds
Running getPromptScore: 
adder_32
output_files/2329780_adder_32/synth_script.sh
Running bash in x seconds:  0.906959

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.1
Backpropogation: incorporating estimates.
Current runs:  147.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.00744753 -0.00136726  0.04697839  0.00623121  0.00246622  0.00215016
  0.01376245  0.00118667  0.00105621  0.00091343]  taking action:  2
Leaf selection - depth:  1
Leaf selection - action scores:  [4.3193859e-01 2.8832158e-01 3.2916781e-03 2.3853930e-04 5.7706809e-05
 4.5802299e-05 3.3225318e-05 2.6605996e-05 2.5507408e-05 2.3332741e-05]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.44745246 0.04945128 0.03741418 0.03025711 0.0188455  0.01604738
 0.01189124 0.00541256 0.00365136 0.00345179]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.4266677  0.3198787  0.07275623 0.06532109 0.01489328 0.01020994
 0.00592386 0.0056306  0.00483564 0.00470856]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.4445437  0.41301656 0.11544623 0.059423   0.00791828 0.00618193
 0.00458865 0.0034913  0.00337643 0.00266086]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [0.5447614  0.4059578  0.24054591 0.23420404 0.04998757 0.01495687
 0.01159628 0.01133863 0.0105946  0.0080981 ]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [8.4616023e-01 1.0599192e-03 2.5041374e-05 7.1820041e-06 6.3964881e-06
 5.1163065e-06 5.0866875e-06 4.1592580e-06 3.2209846e-06 2.7459257e-06]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [9.85851526e-01 1.30557432e-03 7.05675979e-04 1.17557494e-04
 7.39736424e-05 5.76190832e-05 4.04036109e-05 2.23981006e-05
 1.75187470e-05 1.34927923e-05]  taking action:  0
Leaf selection - depth:  8
Leaf selection - action scores:  [1.2343705e+00 2.0230543e-02 6.4718904e-04 3.6327707e-04 8.8216562e-05
 3.1023214e-05 2.7398155e-05 2.1675543e-05 1.4924843e-05 1.0620343e-05]  taking action:  0
Leaf selection - depth:  9
Leaf selection - action scores:  [0.3552956  0.32610348 0.24690159 0.20849971 0.11993361 0.11006419
 0.06022456 0.0569649  0.03639688 0.03285851]  taking action:  0
Adding child.
Leaf selection - depth:  10
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  26
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin); 
  wire [31:0] c;
  adder_8 a1(sum[7:0], c[0], in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c[1], in1[15:8], in2[15:8], c[0]);
  adder_8 a3(sum[23:16], c[2], in1[23:16], in2[23:16], c[1]);
  adder_8 a4(sum[31:24], cout, in1[31:24], in2[31:24], c[2]);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  144
LLM generates return in:  51.403161  seconds
Running getPromptScore: 
adder_32
output_files/2329780_adder_32/synth_script.sh
Running bash in x seconds:  0.940102

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.1
Backpropogation: incorporating estimates.
Current runs:  148.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.00789505 -0.0010346   0.05076823  0.00625222  0.00247454  0.00215742
  0.01406181  0.00119068  0.00105977  0.00091651]  taking action:  2
Leaf selection - depth:  1
Leaf selection - action scores:  [4.2000401e-01 2.9920542e-01 3.4159357e-03 2.4754391e-04 5.9885184e-05
 4.7531288e-05 3.4479541e-05 2.7610346e-05 2.6470289e-05 2.4213527e-05]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.43388525 0.05147052 0.03894192 0.0314926  0.01961502 0.01670264
 0.01237679 0.00563358 0.00380046 0.00359274]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.41300535 0.3341024  0.0759914  0.06822565 0.01555552 0.01066393
 0.00618728 0.00588097 0.00505066 0.00491793]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.4104348  0.43683618 0.12108103 0.06232338 0.00830477 0.00648367
 0.00481261 0.0036617  0.00354123 0.00279073]  taking action:  1
Leaf selection - depth:  5
Leaf selection - action scores:  [0.78362226 0.05223063 0.04837294 0.03193721 0.01735217 0.00618107
 0.00588902 0.00551469 0.00391758 0.00349678]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [1.1215893e+00 3.9696407e-02 3.1450978e-03 9.0339850e-04 8.5338455e-04
 5.1262463e-04 3.3663918e-04 2.2983611e-04 1.0317011e-04 8.3642175e-05]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [1.4957943e+00 4.2228493e-01 2.9002039e-02 1.9537329e-03 2.6819200e-04
 1.7126319e-04 1.0142984e-04 9.8257420e-05 8.1376274e-05 7.5037147e-05]  taking action:  0
Adding child.
Leaf selection - depth:  8
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  17
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin); 
  wire c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42,c43,c44,c45,c46,c47,c48,c49,c50,c51,c52,c53,c54,c55,c56,c57,c58,c59,c60,c61,c62,c63;
  adder_8 a1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
  adder_8 a3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
  adder_8 a4(sum[31:24], c4, in1[31:24], in2[31:24], c3);
  adder_8 a5(sum[39:32], c5, in1[39:32], in2[39:32], c4);
  adder_8 a6(sum[47:40], c6, in1[47:40], in2[47:40], c5);
  adder_8 a7(sum[55:48], c7, in1[55:48], in2[55:48], c6);
  adder_8 a8(sum[63:56], cout, in1[63:56], in2[63:56], c7);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 failed\n'
Tokens:  458
LLM generates return in:  201.678807  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  149.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.00834108 -0.00070306  0.04071942  0.00627317  0.00248283  0.00216464
  0.01436018  0.00119466  0.00106332  0.00091958]  taking action:  2
Leaf selection - depth:  1
Leaf selection - action scores:  [3.9504516e-01 3.0970708e-01 3.5358295e-03 2.5623231e-04 6.1987055e-05
 4.9199560e-05 3.5689718e-05 2.8579423e-05 2.7399352e-05 2.5063384e-05]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.40648407 0.05341348 0.04041193 0.03268141 0.02035546 0.01733315
 0.01284401 0.00584624 0.00394392 0.00372836]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.3843527  0.3477448  0.07909436 0.07101151 0.0161907  0.01109937
 0.00643992 0.0061211  0.00525689 0.00511875]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.4248738  0.34767634 0.12646501 0.06509464 0.00867405 0.00677197
 0.00502661 0.00382453 0.00369869 0.00291482]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [0.5016664  0.43848455 0.2598193  0.2529693  0.05399275 0.01615526
 0.01252541 0.01224712 0.01144348 0.00874695]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [7.5581098e-01 1.1610833e-03 2.7431452e-05 7.8674911e-06 7.0070014e-06
 5.6046329e-06 5.5721866e-06 4.5562388e-06 3.5284120e-06 3.0080109e-06]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [8.4575987e-01 1.4596764e-03 7.8896974e-04 1.3143328e-04 8.2705046e-05
 6.4420092e-05 4.5172608e-05 2.5041838e-05 1.9586554e-05 1.5085399e-05]  taking action:  0
Leaf selection - depth:  8
Leaf selection - action scores:  [9.78395522e-01 2.33602189e-02 7.47309532e-04 4.19476215e-04
 1.01863712e-04 3.58225188e-05 3.16366641e-05 2.50287612e-05
 1.72337241e-05 1.22633155e-05]  taking action:  0
Leaf selection - depth:  9
Leaf selection - action scores:  [0.26757324 0.39939356 0.30239147 0.25535896 0.14688808 0.13480057
 0.07375972 0.06976747 0.04457689 0.0402433 ]  taking action:  1
Adding child.
Leaf selection - depth:  10
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  26
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin); 
  wire [31:0] carry;
  adder_8 A1(sum[7:0], carry[0], in1[7:0], in2[7:0], cin);
  adder_8 A2(sum[15:8], carry[1], in1[15:8], in2[15:8], carry[0]);
  adder_8 A3(sum[23:16], carry[2], in1[23:16], in2[23:16], carry[1]);
  adder_8 A4(sum[31:24], carry[3], in1[31:24], in2[31:24], carry[2]);
  adder_8 A5(sum[39:32], carry[4], in1[39:32], in2[39:32], carry[3]);
  adder_8 A6(sum[47:40], carry[5], in1[47:40], in2[47:40], carry[4]);
  adder_8 A7(sum[55:48], carry[6], in1[55:48], in2[55:48], carry[5]);
  adder_8 A8(sum[63:56], cout, in1[63:56], in2[63:56], carry[6]);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 failed\n'
Tokens:  288
LLM generates return in:  114.162046  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  150.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.00878562 -0.00037262  0.0319267   0.00629405  0.00249109  0.00217185
  0.01465755  0.00119864  0.00106686  0.00092264]  taking action:  2
Leaf selection - depth:  1
Leaf selection - action scores:  [3.7304097e-01 3.1986409e-01 3.6517889e-03 2.6463560e-04 6.4019958e-05
 5.0813087e-05 3.6860183e-05 2.9516701e-05 2.8297929e-05 2.5885351e-05]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.38255173 0.05528821 0.04183033 0.03382848 0.02106991 0.01794152
 0.01329481 0.00605143 0.00408234 0.00385922]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.35961652 0.3608718  0.08208009 0.07369212 0.01680188 0.01151836
 0.00668302 0.00635217 0.00545533 0.00531197]  taking action:  1
Adding child.
Leaf selection - depth:  4
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  62
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin); 
  adder_8 A1(sum[7:0], cout, in1[7:0], in2[7:0], cin);
  adder_8 A2(sum[15:8], cout, in1[15:8], in2[15:8], cout);
  adder_8 A3(sum[23:16], cout, in1[23:16], in2[23:16], cout);
  adder_8 A4(sum[31:24], cout, in1[31:24], in2[31:24], cout);
  adder_8 A5(sum[39:32], cout, in1[39:32], in2[39:32], cout);
  adder_8 A6(sum[47:40], cout, in1[47:40], in2[47:40], cout);
  adder_8 A7(sum[55:48], cout, in1[55:48], in2[55:48], cout);
  adder_8 A8(sum[63:56], cout, in1[63:56], in2[63:56], cout);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 failed\n'
Tokens:  256
LLM generates return in:  98.307201  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  151.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 9.22868584e-03 -4.32730626e-05  2.41684071e-02  6.31485315e-03
  2.49932266e-03  2.17902709e-03  1.49539407e-02  1.20260221e-03
  1.07038391e-03  9.25690886e-04]  taking action:  2
Leaf selection - depth:  1
Leaf selection - action scores:  [3.5346979e-01 3.2970834e-01 3.7641779e-03 2.7278010e-04 6.5990258e-05
 5.2376930e-05 3.7994607e-05 3.0425119e-05 2.9168838e-05 2.6682008e-05]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.3614353  0.05710142 0.04320218 0.0349379  0.02176091 0.01852992
 0.01373082 0.00624989 0.00421623 0.00398579]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.3716985  0.1367689  0.08496097 0.0762786  0.0173916  0.01192264
 0.00691758 0.00657512 0.00564681 0.00549842]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.37138236 0.36513966 0.13162896 0.06775265 0.00902823 0.00704849
 0.00523186 0.00398069 0.00384972 0.00303384]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [0.44047162 0.46875972 0.2777585  0.27043554 0.05772068 0.0172707
 0.01339023 0.01309273 0.01223359 0.00935088]  taking action:  1
Adding child.
Leaf selection - depth:  6
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  25
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin); 
  wire [63:0] carry;
  adder_8 A1(sum[7:0], carry[7:0], in1[7:0], in2[7:0], cin);
  adder_8 A2(sum[15:8], carry[15:8], in1[15:8], in2[15:8], carry[7:0]);
  adder_8 A3(sum[23:16], carry[23:16], in1[23:16], in2[23:16], carry[15:8]);
  adder_8 A4(sum[31:24], carry[31:24], in1[31:24], in2[31:24], carry[23:16]);
  adder_8 A5(sum[39:32], carry[39:32], in1[39:32], in2[39:32], carry[31:24]);
  adder_8 A6(sum[47:40], carry[47:40], in1[47:40], in2[47:40], carry[39:32]);
  adder_8 A7(sum[55:48], carry[55:48], in1[55:48], in2[55:48], carry[47:40]);
  adder_8 A8(sum[63:56], carry[63:56], in1[63:56], in2[63:56], carry[55:48]);
  adder_8 A9(sum[71:64], carry[71:64], in1[71:64], in2[71:64], carry[63:56]);
  adder_8 A10(sum[79:72], carry[79:72], in1[79:72], in2[79:72], carry[71:64]);
  adder_8 A11(sum[87:80], carry[87:80], in1[87:80], in2[87:80], carry[79:72]);
  adder_8 A12(sum[95:88], carry[95:88], in1[95:88], in2[95:88], carry[87:80]);
  adder_8 A13(sum[103:96], carry[103:96], in1[103:96], in2[103:96], carry[95:88]);
  adder_8 A14(sum[111:104], carry[111:104], in1[111:104], in2[111:104], carry[103:96]);
  adder_8 A15(sum[119:112], carry[119:112], in1[119:112], in2[119:112], carry[111:104]);
  adder_8 A16(sum[127:120], carry[127:120], in1[127:120], in2[127:120], carry[119:112]);
  adder_8 A17(sum[135:128], carry[135:128], in1[135:128], in2[135:128], carry[127:120]);
  adder_8 A18(sum[143:136], carry[143:136], in1[143:136], in2[143:136], carry[135:128]);
  adder_8 A19(sum[151:144], carry[151:144], in1[151:144], in2[151:144], carry[143:136]);
  adder_8 A20(sum[159:152], carry[159:152], in1[159:152], in2[159:152], carry[151:144]);
  adder_8 A21(sum[167:160], carry[167:160], in1[167:160], in2[167:160], carry[159:152]);
  adder_8 A22(sum[175:168], carry[175:168], in1[175:168], in2[175:168], carry[167:160]);
  adder_8 A23(sum[183:176], carry[183:176], in1[183:176], in2[183:176], carry[175:168]);
  adder_8 A24(sum[191:184], carry[191:184], in1[191:184], in2[191:184], carry[183:176]);
  adder_8 A25(sum[199:192], carry[199:192], in1[199:192], in2[199:
Path:  output_files/2329780_adder_32/2329780_simulation
Verilog compilation failed, error:  2
Compilation output:  b'output_files/2329780_adder_32/2329780_adder_32.v:61: syntax error\nI give up.\n'
Tokens:  993
LLM generates return in:  600.167237  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  152.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.0096703   0.00028499 -0.03272786  0.00633559  0.00250753  0.00218618
  0.01524936  0.00120655  0.0010739   0.00092873]  taking action:  6
Leaf selection - depth:  1
Leaf selection - action scores:  [1.7223465e-01 1.6583873e-01 7.5889309e-03 4.3183201e-04 3.9303754e-04
 3.4123476e-04 2.8333848e-04 2.0028502e-04 1.8571306e-04 1.7198990e-04]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.16867216 0.08860572 0.05901828 0.0391139  0.0382437  0.02422734
 0.01487272 0.01040241 0.0074624  0.00582175]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.16254064 0.14045703 0.10398225 0.07692219 0.01915059 0.01809817
 0.00811413 0.00682531 0.00652277 0.00593982]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.13463587 0.21985053 0.145521   0.09235246 0.01025459 0.00950263
 0.00670468 0.00577852 0.00472524 0.00456249]  taking action:  1
Leaf selection - depth:  5
Leaf selection - action scores:  [0.38937318 0.08103783 0.07330436 0.05062771 0.02765431 0.01009378
 0.00993862 0.00828659 0.00613528 0.00549305]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [4.5855272e-01 8.0088884e-02 5.3758640e-03 1.5334454e-03 1.5159965e-03
 1.1245407e-03 6.8461773e-04 4.1861020e-04 1.9897385e-04 1.7102051e-04]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [4.7997552e-01 3.4491602e-01 5.3405795e-02 3.2860069e-03 5.2037823e-04
 3.5524904e-04 2.0146419e-04 1.5953065e-04 1.4133526e-04 1.4119191e-04]  taking action:  0
Leaf selection - depth:  8
Leaf selection - action scores:  [6.9406134e-01 5.9121042e-03 2.6387568e-03 2.1415888e-04 1.8581198e-04
 1.5220008e-04 9.7601267e-05 6.4314423e-05 3.7403959e-05 1.5711585e-05]  taking action:  0
Leaf selection - depth:  9
Leaf selection - action scores:  [8.4146333e-01 3.3171713e-02 7.7621138e-04 6.9808849e-04 4.1483942e-04
 5.4029540e-05 5.1431201e-05 4.7376667e-05 3.2323860e-05 3.1361644e-05]  taking action:  0
Leaf selection - depth:  10
Leaf selection - action scores:  [1.1287696e+00 2.7670909e-02 1.8934733e-03 1.5304596e-03 2.3333239e-04
 1.7169183e-04 1.5808309e-04 5.6650799e-05 5.4335673e-05 5.2727464e-05]  taking action:  0
Leaf selection - depth:  11
Leaf selection - action scores:  [1.9452198e+00 2.6853695e-03 2.1290723e-03 4.7128779e-04 2.3301799e-04
 1.4359984e-04 1.0919250e-04 9.6774624e-05 9.2515060e-05 7.0667455e-05]  taking action:  0
Adding child.
Leaf selection - depth:  12
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  11
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);   
  wire c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42,c43,c44,c45,c46,c47,c48,c49,c50,c51,c52,c53,c54,c55,c56,c57,c58,c59,c60,c61,c62,c63;
  adder_8 a1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
  adder_8 a3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
  adder_8 a4(sum[31:24], c4, in1[31:24], in2[31:24], c3);
  adder_8 a5(sum[39:32], c5, in1[39:32], in2[39:32], c4);
  adder_8 a6(sum[47:40], c6, in1[47:40], in2[47:40], c5);
  adder_8 a7(sum[55:48], c7, in1[55:48], in2[55:48], c6);
  adder_8 a8(sum[63:56], cout, in1[63:56], in2[63:56], c7);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 failed\n'
Tokens:  454
LLM generates return in:  200.327822  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  153.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.01011048  0.00061219 -0.03272588  0.00635626  0.00251571  0.00219332
  0.01155954  0.00121049  0.0010774   0.00093176]  taking action:  6
Leaf selection - depth:  1
Leaf selection - action scores:  [0.16659546 0.16788913 0.00772326 0.00043948 0.00039999 0.00034727
 0.00028835 0.00020383 0.000189   0.00017503]  taking action:  1
Leaf selection - depth:  2
Leaf selection - action scores:  [1.7666103  0.08222426 0.03609942 0.02953191 0.00814845 0.00313734
 0.00277474 0.00256287 0.00238011 0.00186309]  taking action:  0
Adding child.
Leaf selection - depth:  3
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  21809
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);   

  wire [31:0] c;
  adder_8 a1(sum[7:0], c[0], in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c[1], in1[15:8], in2[15:8], c[0]);
  adder_8 a3(sum[23:16], c[2], in1[23:16], in2[23:16], c[1]);
  adder_8 a4(sum[31:24], cout, in1[31:24], in2[31:24], c[2]);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  151
LLM generates return in:  53.611795  seconds
Running getPromptScore: 
adder_32
output_files/2329780_adder_32/synth_script.sh
Running bash in x seconds:  0.916308

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.1
Backpropogation: incorporating estimates.
Current runs:  154.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.01054922  0.00093832 -0.03272391  0.00637687  0.00252387  0.00220043
  0.01478148  0.00121441  0.0010809   0.00093478]  taking action:  6
Leaf selection - depth:  1
Leaf selection - action scores:  [0.17096302 0.14660299 0.00785529 0.00044699 0.00040683 0.00035321
 0.00029328 0.00020731 0.00019223 0.00017803]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.16318652 0.0902936  0.06014254 0.03985899 0.03897221 0.02468885
 0.01515603 0.01060057 0.00760455 0.00593265]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.15618521 0.14455888 0.1060415  0.07844555 0.01952984 0.01845659
 0.00827482 0.00696047 0.00665195 0.00605745]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.14042789 0.19411045 0.14879155 0.09442805 0.01048505 0.0097162
 0.00685537 0.00590839 0.00483144 0.00466503]  taking action:  1
Leaf selection - depth:  5
Leaf selection - action scores:  [0.35792756 0.08542138 0.07726958 0.05336629 0.02915021 0.01063978
 0.01047623 0.00873484 0.00646715 0.00579018]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [4.1762200e-01 8.4947079e-02 5.7019647e-03 1.6264644e-03 1.6079571e-03
 1.1927554e-03 7.2614674e-04 4.4400315e-04 2.1104363e-04 1.8139463e-04]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [4.1553247e-01 3.7218300e-01 5.7093196e-02 3.5128889e-03 5.5630773e-04
 3.7977719e-04 2.1537428e-04 1.7054545e-04 1.5109374e-04 1.5094050e-04]  taking action:  0
Leaf selection - depth:  8
Leaf selection - action scores:  [5.93971550e-01 6.47638598e-03 2.89061316e-03 2.34599298e-04
 2.03546821e-04 1.66726837e-04 1.06916836e-04 7.04529157e-05
 4.09739841e-05 1.72111795e-05]  taking action:  0
Leaf selection - depth:  9
Leaf selection - action scores:  [6.8649012e-01 3.7087105e-02 8.6783071e-04 7.8048668e-04 4.6380458e-04
 6.0406859e-05 5.7501828e-05 5.2968724e-05 3.6139172e-05 3.5063385e-05]  taking action:  0
Leaf selection - depth:  10
Leaf selection - action scores:  [8.4075063e-01 3.1951614e-02 2.1863948e-03 1.7672225e-03 2.6942903e-04
 1.9825264e-04 1.8253861e-04 6.5414708e-05 6.2741427e-05 6.0884428e-05]  taking action:  0
Leaf selection - depth:  11
Leaf selection - action scores:  [1.14119899e+00 3.28889256e-03 2.60757026e-03 5.77207305e-04
 2.85387592e-04 1.75873167e-04 1.33732960e-04 1.18524222e-04
 1.13307346e-04 8.65495967e-05]  taking action:  0
Leaf selection - depth:  12
Leaf selection - action scores:  [1.8376929e+00 1.1282242e-01 2.9045768e-04 2.6089951e-04 2.1130381e-04
 5.6266137e-05 2.2221360e-05 2.2080416e-05 2.0489713e-05 1.2738377e-05]  taking action:  0
Adding child.
Leaf selection - depth:  13
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  66
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);   
  wire c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42,c43,c44,c45,c46,c47,c48,c49,c50,c51,c52,c53,c54,c55,c56,c57,c58,c59,c60,c61,c62,c63;
  adder_8 a1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
  adder_8 a3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
  adder_8 a4(sum[31:24], c4, in1[31:24], in2[31:24], c3);
  adder_8 a5(sum[39:32], c5, in1[39:32], in2[39:32], c4);
  adder_8 a6(sum[47:40], c6, in1[47:40], in2[47:40], c5);
  adder_8 a7(sum[55:48], c7, in1[55:48], in2[55:48], c6);
  adder_8 a8(sum[63:56], cout, in1[63:56], in2[63:56], c7);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 failed\n'
Tokens:  453
LLM generates return in:  199.97665  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  155.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.01098656  0.00126341 -0.03272195  0.0063974   0.00253199  0.00220751
  0.0113431   0.00121832  0.00108438  0.00093779]  taking action:  6
Leaf selection - depth:  1
Leaf selection - action scores:  [0.16542773 0.14792433 0.00798514 0.00045438 0.00041356 0.00035905
 0.00029813 0.00021074 0.00019541 0.00018097]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.15802155 0.09195051 0.06124616 0.04059041 0.03968736 0.0251419
 0.01543415 0.0107951  0.0077441  0.00604152]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.15026703 0.14858258 0.10806152 0.07993989 0.01990187 0.01880817
 0.00843245 0.00709307 0.00677866 0.00617284]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.1460953  0.17292821 0.15199174 0.09645899 0.01071056 0.00992517
 0.00700281 0.00603546 0.00493535 0.00476537]  taking action:  1
Leaf selection - depth:  5
Leaf selection - action scores:  [0.33176255 0.0895907  0.08104102 0.05597104 0.030573   0.0111591
 0.01098756 0.00916117 0.00678281 0.00607279]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [3.8439590e-01 8.9542091e-02 6.0103983e-03 1.7144441e-03 1.6949356e-03
 1.2572746e-03 7.6542591e-04 4.6802041e-04 2.2245952e-04 1.9120672e-04]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [3.6782318e-01 3.9779267e-01 6.0556479e-02 3.7259813e-03 5.9005339e-04
 4.0281450e-04 2.2843892e-04 1.8089075e-04 1.6025911e-04 1.6009658e-04]  taking action:  1
Leaf selection - depth:  8
Leaf selection - action scores:  [1.9406612e+00 6.8775280e-03 1.2596878e-03 4.3118148e-04 3.2777039e-04
 3.0904153e-04 2.7499933e-04 1.9494871e-04 1.2305113e-04 8.3084786e-05]  taking action:  0
Adding child.
Leaf selection - depth:  9
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  11
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);   
  wire c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15, c16, c17, c18, c19, c20, c21, c22, c23, c24, c25, c26, c27, c28, c29, c30, c31, c32, c33, c34, c35, c36, c37, c38, c39, c40, c41, c42, c43, c44, c45, c46, c47, c48, c49, c50, c51, c52, c53, c54, c55, c56, c57, c58, c59, c60, c61, c62, c63;
  adder_8 a1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
  adder_8 a3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
  adder_8 a4(sum[31:24], c4, in1[31:24], in2[31:24], c3);
  adder_8 a5(sum[39:32], c5, in1[39:32], in2[39:32], c4);
  adder_8 a6(sum[47:40], c6, in1[47:40], in2[47:40], c5);
  adder_8 a7(sum[55:48], c7, in1[55:48], in2[55:48], c6);
  adder_8 a8(sum[63:56], cout, in1[63:56], in2[63:56], c7);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 failed\n'
Tokens:  457
LLM generates return in:  201.22537  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  156.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.01142249  0.00158745 -0.03271999  0.00641788  0.0025401   0.00221458
  0.0081188   0.00122222  0.00108785  0.00094079]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [ 0.01720378  0.02331942 -0.02192691  0.02517319 -0.0611546   0.02468633
  0.02428841  0.0110373   0.00770927  0.00567424]  taking action:  3
Leaf selection - depth:  2
Leaf selection - action scores:  [0.34164754 0.35117796 0.21429768 0.03787011 0.02695101 0.01253539
 0.01123884 0.00837746 0.00527973 0.0048131 ]  taking action:  1
Adding child.
Leaf selection - depth:  3
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  62
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
   adder_8 a1(sum[7:0], cout, in1[7:0], in2[7:0], cin);
   adder_8 a2(sum[15:8], cout, in1[15:8], in2[15:8], cout);
   adder_8 a3(sum[23:16], cout, in1[23:16], in2[23:16], cout);
   adder_8 a4(sum[31:24], cout, in1[31:24], in2[31:24], cout);
   adder_8 a5(sum[39:32], cout, in1[39:32], in2[39:32], cout);
   adder_8 a6(sum[47:40], cout, in1[47:40], in2[47:40], cout);
   adder_8 a7(sum[55:48], cout, in1[55:48], in2[55:48], cout);
   adder_8 a8(sum[63:56], cout, in1[63:56], in2[63:56], cout);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 failed\n'
Tokens:  256
LLM generates return in:  98.131746  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  157.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.0107815   0.00191046 -0.03271804  0.00643828  0.00254817  0.00222162
  0.00837315  0.00122611  0.00109131  0.00094378]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [ 0.01805437  0.02367448 -0.02179096  0.01684524 -0.06114258  0.02480588
  0.02440603  0.01109075  0.00774661  0.00570171]  taking action:  5
Adding child.
Leaf selection - depth:  2
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  198
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
 
  wire [31:0] c;
  adder_8 a1(sum[7:0], c[0], in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c[1], in1[15:8], in2[15:8], c[0]);
  adder_8 a3(sum[23:16], c[2], in1[23:16], in2[23:16], c[1]);
  adder_8 a4(sum[31:24], cout, in1[31:24], in2[31:24], c[2]);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  153
LLM generates return in:  54.34041  seconds
Running getPromptScore: 
adder_32
output_files/2329780_adder_32/synth_script.sh
Running bash in x seconds:  0.907707

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.1
Backpropogation: incorporating estimates.
Current runs:  158.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.01205612  0.00223246 -0.0327161   0.00645862  0.00255623  0.00222864
  0.0086267   0.00122998  0.00109475  0.00094677]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [ 0.01890087  0.02402784 -0.02165567  0.01686208 -0.06113062  0.06246243
  0.02452308  0.01114394  0.00778376  0.00572906]  taking action:  5
Leaf selection - depth:  2
Leaf selection - action scores:  [1.8717567e+00 5.3937111e-02 2.2248846e-02 1.5356682e-03 5.4486311e-04
 3.4180531e-04 1.4365689e-04 1.3006666e-04 1.2834261e-04 1.0764329e-04]  taking action:  0
Adding child.
Leaf selection - depth:  3
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  50286
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
 
  wire [31:0] c;
  adder_8 a1(sum[7:0], c[0], in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c[1], in1[15:8], in2[15:8], c[0]);
  adder_8 a3(sum[23:16], c[2], in1[23:16], in2[23:16], c[1]);
  adder_8 a4(sum[31:24], cout, in1[31:24], in2[31:24], c[2]);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  152
LLM generates return in:  53.97734  seconds
Running getPromptScore: 
adder_32
output_files/2329780_adder_32/synth_script.sh
Running bash in x seconds:  0.900253

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.1
Backpropogation: incorporating estimates.
Current runs:  159.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.01330538  0.00255344 -0.03271416  0.0064789   0.00256425  0.00223563
  0.00887945  0.00123384  0.00109819  0.00094974]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [ 0.01974337  0.02437952 -0.02152102  0.01687885 -0.06111871  0.07501443
  0.02463958  0.01119688  0.00782074  0.00575628]  taking action:  5
Leaf selection - depth:  2
Leaf selection - action scores:  [1.1962122e+00 6.6059202e-02 2.7249161e-02 1.8808017e-03 6.6731829e-04
 4.1862432e-04 1.7594303e-04 1.5929849e-04 1.5718695e-04 1.3183558e-04]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [1.7210726  0.05813608 0.04241887 0.01982785 0.0108396  0.00964101
 0.00892498 0.00477704 0.00382691 0.003767  ]  taking action:  0
Adding child.
Leaf selection - depth:  4
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  21809
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
 
  wire [31:0] c;
  adder_8 a1(sum[7:0], c[0], in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c[1], in1[15:8], in2[15:8], c[0]);
  adder_8 a3(sum[23:16], c[2], in1[23:16], in2[23:16], c[1]);
  adder_8 a4(sum[31:24], cout, in1[31:24], in2[31:24], c[2]);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  151
LLM generates return in:  53.674188  seconds
Running getPromptScore: 
adder_32
output_files/2329780_adder_32/synth_script.sh
Running bash in x seconds:  0.899614

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.1
Backpropogation: incorporating estimates.
Current runs:  160.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.01452999  0.00287342 -0.03271223  0.00649912  0.00257225  0.00224261
  0.00913142  0.00123769  0.00110162  0.0009527 ]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [ 0.02058189  0.02472954 -0.021387    0.01689553 -0.06110686  0.08129028
  0.02475553  0.01124957  0.00785754  0.00578337]  taking action:  5
Leaf selection - depth:  2
Leaf selection - action scores:  [9.4902122e-01 7.6278590e-02 3.1464621e-02 2.1717628e-03 7.7055278e-04
 4.8338572e-04 2.0316150e-04 1.8394204e-04 1.8150386e-04 1.5223060e-04]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [1.1039374  0.07120186 0.05195229 0.02428406 0.01327574 0.01180778
 0.01093083 0.00585065 0.00468698 0.00461361]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [1.5837759  0.13332908 0.02091551 0.01105459 0.0064     0.00437379
 0.0036743  0.00269606 0.00260073 0.00213765]  taking action:  0
Adding child.
Leaf selection - depth:  5
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  685
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
 
  wire [31:0] c;
  adder_8 a1(sum[7:0], c[0], in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c[1], in1[15:8], in2[15:8], c[0]);
  adder_8 a3(sum[23:16], c[2], in1[23:16], in2[23:16], c[1]);
  adder_8 a4(sum[31:24], cout, in1[31:24], in2[31:24], c[2]);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  150
LLM generates return in:  53.404082  seconds
Running getPromptScore: 
adder_32
output_files/2329780_adder_32/synth_script.sh
Running bash in x seconds:  0.898546

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.1
Backpropogation: incorporating estimates.
Current runs:  161.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.01573065  0.00319241 -0.0327103   0.00651927  0.00258023  0.00224956
  0.0093826   0.00124153  0.00110503  0.00095566]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [ 0.02141652  0.02507793 -0.0212536   0.01691214 -0.06109507  0.08505568
  0.02487095  0.01130202  0.00789417  0.00581033]  taking action:  5
Leaf selection - depth:  2
Leaf selection - action scores:  [8.1487674e-01 8.5282058e-02 3.5178512e-02 2.4281044e-03 8.6150417e-04
 5.4044166e-04 2.2714146e-04 2.0565346e-04 2.0292748e-04 1.7019898e-04]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.877988   0.08221682 0.05998934 0.02804082 0.0153295  0.01363445
 0.01262183 0.00675575 0.00541206 0.00532734]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [1.0198606  0.1632941  0.02561617 0.01353905 0.00783837 0.00535678
 0.00450008 0.00330199 0.00318523 0.00261807]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [0.9215502  0.89190674 0.07030358 0.0324112  0.0029335  0.00215955
 0.00210377 0.00201946 0.00178078 0.0014978 ]  taking action:  0
Adding child.
Leaf selection - depth:  6
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  3132
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
 
  wire [31:0] c;
  adder_8 a1(sum[7:0], c[0], in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c[1], in1[15:8], in2[15:8], c[0]);
  adder_8 a3(sum[23:16], c[2], in1[23:16], in2[23:16], c[1]);
  adder_8 a4(sum[31:24], cout, in1[31:24], in2[31:24], c[2]);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  149
LLM generates return in:  53.113802  seconds
Running getPromptScore: 
adder_32
output_files/2329780_adder_32/synth_script.sh
Running bash in x seconds:  0.892715

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.1
Backpropogation: incorporating estimates.
Current runs:  162.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.01690803  0.00351041 -0.03270838  0.00653936  0.00258818  0.0022565
  0.00963301  0.00124536  0.00110844  0.0009586 ]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [ 0.02224725  0.02542472 -0.02112082  0.01692867 -0.06108334  0.08756587
  0.02498582  0.01135422  0.00793064  0.00583717]  taking action:  5
Leaf selection - depth:  2
Leaf selection - action scores:  [7.2839552e-01 9.3421809e-02 3.8536131e-02 2.6598552e-03 9.4373059e-04
 5.9202418e-04 2.4882102e-04 2.2528207e-04 2.2229590e-04 1.8644365e-04]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.75531363 0.0919212  0.06707012 0.03135058 0.0171389  0.01524378
 0.01411164 0.00755316 0.00605087 0.00595615]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.8132658  0.18855579 0.029579   0.01563355 0.00905097 0.00618547
 0.00519625 0.00381281 0.00367799 0.00302309]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [0.61433196 1.0923582  0.08610395 0.03969545 0.00359278 0.0026449
 0.00257659 0.00247333 0.002181   0.00183443]  taking action:  1
Adding child.
Leaf selection - depth:  6
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  16
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
 
  wire c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42,c43,c44,c45,c46,c47,c48,c49,c50,c51,c52,c53,c54,c55,c56,c57,c58,c59,c60,c61,c62,c63;
  
  adder_8 a1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
  adder_8 a3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
  adder_8 a4(sum[31:24], c4, in1[31:24], in2[31:24], c3);
  adder_8 a5(sum[39:32], c5, in1[39:32], in2[39:32], c4);
  adder_8 a6(sum[47:40], c6, in1[47:40], in2[47:40], c5);
  adder_8 a7(sum[55:48], c7, in1[55:48], in2[55:48], c6);
  adder_8 a8(sum[63:56], cout, in1[63:56], in2[63:56], c7);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 failed\n'
Tokens:  463
LLM generates return in:  203.964847  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  163.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.01624458  0.00382744 -0.03270647  0.00655939  0.00259611  0.00226341
  0.00988265  0.00124917  0.00111183  0.00096154]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [ 0.02307421  0.02576991 -0.02098865  0.01694512 -0.06107165  0.06078734
  0.02510018  0.01140619  0.00796693  0.00586388]  taking action:  5
Leaf selection - depth:  2
Leaf selection - action scores:  [6.33622706e-01 1.00907095e-01 4.16237824e-02 2.87297205e-03
 1.01934560e-03 6.39459176e-04 2.68757401e-04 2.43332455e-04
 2.40107038e-04 2.01382165e-04]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.63619703 0.10069463 0.07347164 0.03434284 0.01877473 0.01669872
 0.01545852 0.00827407 0.0066284  0.00652464]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.65104234 0.21081178 0.03307033 0.01747883 0.01011929 0.00691557
 0.00580958 0.00426285 0.00411212 0.00337992]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [0.7016344  0.5806733  0.09942428 0.04583636 0.00414859 0.00305407
 0.00297518 0.00285595 0.00251841 0.00211821]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [1.3634813  0.18732722 0.1452132  0.12742873 0.03706125 0.01212464
 0.00880752 0.00849827 0.0076922  0.00646642]  taking action:  0
Adding child.
Leaf selection - depth:  7
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  25
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
 
  wire [31:0] c;
  adder_8 a1(sum[7:0], c[0], in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c[1], in1[15:8], in2[15:8], c[0]);
  adder_8 a3(sum[23:16], c[2], in1[23:16], in2[23:16], c[1]);
  adder_8 a4(sum[31:24], cout, in1[31:24], in2[31:24], c[2]);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  148
LLM generates return in:  52.762801  seconds
Running getPromptScore: 
adder_32
output_files/2329780_adder_32/synth_script.sh
Running bash in x seconds:  0.902597

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.1
Backpropogation: incorporating estimates.
Current runs:  164.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.0173937   0.00414351 -0.03270456  0.00657936  0.00260401  0.0022703
  0.01013153  0.00125297  0.00111522  0.00096446]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [ 0.02389741  0.02611354 -0.02085708  0.0169615  -0.06106002  0.06570338
  0.02521401  0.01145791  0.00800306  0.00589047]  taking action:  5
Leaf selection - depth:  2
Leaf selection - action scores:  [5.9193045e-01 1.0787422e-01 4.4497691e-02 3.0713363e-03 1.0897262e-03
 6.8361062e-04 2.8731377e-04 2.6013333e-04 2.5668522e-04 2.1528658e-04]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.5866387  0.10876264 0.07935844 0.03709451 0.02027903 0.01803668
 0.01669711 0.00893702 0.00715949 0.00704741]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.5886361  0.23093273 0.03622673 0.0191471  0.01108513 0.00757563
 0.00636408 0.00466972 0.0045046  0.00370252]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [0.55236626 0.6551142  0.11115972 0.0512466  0.00463826 0.00341455
 0.00332636 0.00319305 0.00281566 0.00236823]  taking action:  1
Leaf selection - depth:  6
Leaf selection - action scores:  [1.8038827  0.03882892 0.03156407 0.02337996 0.01361371 0.00459563
 0.00423731 0.00378137 0.00282693 0.00221886]  taking action:  0
Adding child.
Leaf selection - depth:  7
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  11
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
 
  wire c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42,c43,c44,c45,c46,c47,c48,c49,c50,c51,c52,c53,c54,c55,c56,c57,c58,c59,c60,c61,c62,c63;
  
  adder_8 a1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
  adder_8 a3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
  adder_8 a4(sum[31:24], c4, in1[31:24], in2[31:24], c3);
  adder_8 a5(sum[39:32], c5, in1[39:32], in2[39:32], c4);
  adder_8 a6(sum[47:40], c6, in1[47:40], in2[47:40], c5);
  adder_8 a7(sum[55:48], c7, in1[55:48], in2[55:48], c6);
  adder_8 a8(sum[63:56], cout, in1[63:56], in2[63:56], c7);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 failed\n'
Tokens:  462
LLM generates return in:  203.498877  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  165.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.01673539  0.00445862 -0.03270266  0.00659926  0.00261189  0.00227717
  0.01037966  0.00125677  0.00111859  0.00096738]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [ 0.02471693  0.02645562 -0.0207261   0.01697781 -0.06104844  0.0473047
  0.02532733  0.01150941  0.00803903  0.00591695]  taking action:  5
Leaf selection - depth:  2
Leaf selection - action scores:  [5.3382444e-01 1.1441788e-01 4.7196928e-02 3.2576439e-03 1.1558292e-03
 7.2507857e-04 3.0474225e-04 2.7591307e-04 2.7225577e-04 2.2834589e-04]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.52030647 0.11627215 0.08483773 0.0396557  0.02167919 0.01928202
 0.01784997 0.00955407 0.00765381 0.007534  ]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.51049554 0.24943587 0.03912934 0.02068124 0.01197331 0.00818261
 0.00687399 0.00504387 0.00486553 0.00399918]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [0.5987239  0.44827592 0.12176937 0.05613784 0.00508096 0.00374045
 0.00364384 0.00349781 0.00308441 0.00259427]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [0.8849584  0.22942805 0.17784911 0.15606768 0.04539058 0.01484959
 0.01078697 0.01040821 0.00942099 0.00791972]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [1.9504968e+00 1.0426748e-03 2.9660097e-05 8.3804534e-06 6.6660009e-06
 4.8482730e-06 3.7003933e-06 3.5487374e-06 2.7694373e-06 2.4855872e-06]  taking action:  0
Adding child.
Leaf selection - depth:  8
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  15
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
 
  wire [31:0] c;
  adder_8 a1(sum[7:0], c[0], in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c[1], in1[15:8], in2[15:8], c[0]);
  adder_8 a3(sum[23:16], c[2], in1[23:16], in2[23:16], c[1]);
  adder_8 a4(sum[31:24], cout, in1[31:24], in2[31:24], c[2]);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  147
LLM generates return in:  52.436947  seconds
Running getPromptScore: 
adder_32
output_files/2329780_adder_32/synth_script.sh
Running bash in x seconds:  0.902535

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.1
Backpropogation: incorporating estimates.
Current runs:  166.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.01785748  0.00477278 -0.03270076  0.00661911  0.00261974  0.00228402
  0.01062705  0.00126055  0.00112196  0.00097029]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [ 0.02553278  0.02679618 -0.0205957   0.01699404 -0.06103691  0.05258569
  0.02544015  0.01156068  0.00807484  0.0059433 ]  taking action:  5
Leaf selection - depth:  2
Leaf selection - action scores:  [5.0948614e-01 1.2060704e-01 4.9749933e-02 3.4338583e-03 1.2183510e-03
 7.6429988e-04 3.2122654e-04 2.9083790e-04 2.8698277e-04 2.4069771e-04]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.49386823 0.12332524 0.08998401 0.04206122 0.02299425 0.02045167
 0.01893275 0.01013362 0.00811809 0.00799101]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.48107883 0.26665816 0.04183103 0.02210917 0.0128     0.00874758
 0.0073486  0.00539213 0.00520147 0.0042753 ]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [0.50601566 0.4895349  0.13152596 0.0606358  0.00548807 0.00404015
 0.0039358  0.00377807 0.00333154 0.00280213]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [0.70941794 0.26492068 0.20536247 0.18021144 0.05241252 0.01714682
 0.01245571 0.01201836 0.01087842 0.0091449 ]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [1.2444304e+00 1.2770107e-03 3.6326055e-05 1.0263917e-05 8.1641501e-06
 5.9378976e-06 4.5320376e-06 4.3462978e-06 3.3918543e-06 3.0442102e-06]  taking action:  0
Leaf selection - depth:  8
Leaf selection - action scores:  [1.9495919e+00 1.0468289e-03 6.2928186e-04 7.4784635e-05 5.7925929e-05
 4.9913568e-05 3.1792173e-05 2.3046443e-05 1.2164744e-05 1.1463960e-05]  taking action:  0
Adding child.
Leaf selection - depth:  9
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  60
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
 
  wire [31:0] c;
  adder_8 a1(sum[7:0], c[0], in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c[1], in1[15:8], in2[15:8], c[0]);
  adder_8 a3(sum[23:16], c[2], in1[23:16], in2[23:16], c[1]);
  adder_8 a4(sum[31:24], cout, in1[31:24], in2[31:24], c[2]);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  146
LLM generates return in:  52.078427  seconds
Running getPromptScore: 
adder_32
output_files/2329780_adder_32/synth_script.sh
Running bash in x seconds:  0.896317

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.1
Backpropogation: incorporating estimates.
Current runs:  167.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.01895875  0.005086   -0.03269887  0.0066389   0.00262758  0.00229084
  0.01087369  0.00126431  0.00112531  0.00097319]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [ 0.02634503  0.02713524 -0.02046588  0.01701021 -0.06102543  0.05690647
  0.02555247  0.01161172  0.00811049  0.00596954]  taking action:  5
Leaf selection - depth:  2
Leaf selection - action scores:  [4.8896590e-01 1.2649374e-01 5.2178171e-02 3.6014612e-03 1.2778173e-03
 8.0160453e-04 3.3690527e-04 3.0503341e-04 3.0099010e-04 2.5244590e-04]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.47204834 0.12999621 0.09485147 0.04433642 0.02423807 0.02155795
 0.01995687 0.01068178 0.00855722 0.00842327]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.45746198 0.2828337  0.0443685  0.02345032 0.01357645 0.00927821
 0.00779437 0.00571921 0.00551699 0.00453464]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [0.44862008 0.5279378  0.14060716 0.0648224  0.00586699 0.00431911
 0.00420755 0.00403892 0.00356157 0.00299561]  taking action:  1
Leaf selection - depth:  6
Leaf selection - action scores:  [1.0546482  0.04755552 0.03865793 0.02863448 0.01667332 0.00562847
 0.00518962 0.00463121 0.00346227 0.00271754]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [1.8954451e+00 4.7483776e-02 3.5536697e-03 1.1088160e-03 9.9803938e-04
 6.7071174e-04 4.9067329e-04 2.8219161e-04 1.3912701e-04 9.5702249e-05]  taking action:  0
Adding child.
Leaf selection - depth:  8
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  66
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
 
  wire c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42,c43,c44,c45,c46,c47,c48,c49,c50,c51,c52,c53,c54,c55,c56,c57,c58,c59,c60,c61,c62,c63;
  
  adder_8 a1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
  adder_8 a3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
  adder_8 a4(sum[31:24], c4, in1[31:24], in2[31:24], c3);
  adder_8 a5(sum[39:32], c5, in1[39:32], in2[39:32], c4);
  adder_8 a6(sum[47:40], c6, in1[47:40], in2[47:40], c5);
  adder_8 a7(sum[55:48], c7, in1[55:48], in2[55:48], c6);
  adder_8 a8(sum[63:56], cout, in1[63:56], in2[63:56], c7);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 failed\n'
Tokens:  461
LLM generates return in:  203.221555  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  168.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.01830062  0.0053983  -0.03269699  0.00665863  0.00263538  0.00229765
  0.0111196   0.00126807  0.00112865  0.00097608]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [ 0.02715373  0.02747281 -0.02033663  0.0170263  -0.06101401  0.0438404
  0.02566429  0.01166254  0.00814599  0.00599567]  taking action:  5
Leaf selection - depth:  2
Leaf selection - action scores:  [4.5316806e-01 1.3211840e-01 5.4498322e-02 3.7616035e-03 1.3346366e-03
 8.3724863e-04 3.5188606e-04 3.1859698e-04 3.1437390e-04 2.6367116e-04]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.4336273  0.13634118 0.09948107 0.04650044 0.02542111 0.02261017
 0.02093094 0.01120314 0.00897489 0.0088344 ]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.4157145  0.2981329  0.04676851 0.02471881 0.01431084 0.00978009
 0.00821599 0.00602858 0.00581542 0.00477993]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [0.47098064 0.39800495 0.14913641 0.06875453 0.00622288 0.0045811
 0.00446278 0.00428393 0.00377761 0.00317732]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [0.6139633  0.29619032 0.22960222 0.2014825  0.05859898 0.01917073
 0.01392591 0.01343694 0.01216244 0.01022431]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [9.8613966e-01 1.4745649e-03 4.1945714e-05 1.1851750e-05 9.4271481e-06
 6.8564937e-06 5.2331461e-06 5.0186723e-06 3.9165757e-06 3.5151511e-06]  taking action:  0
Leaf selection - depth:  8
Leaf selection - action scores:  [1.2438762e+00 1.2820984e-03 7.7070971e-04 9.1592105e-05 7.0944487e-05
 6.1131388e-05 3.8937302e-05 2.8226013e-05 1.4898708e-05 1.4040426e-05]  taking action:  0
Leaf selection - depth:  9
Leaf selection - action scores:  [1.9333906e+00 1.7419202e-02 3.0302248e-04 2.7260548e-04 6.9435053e-05
 3.4262350e-05 3.0340638e-05 2.2365382e-05 1.3319569e-05 1.2075257e-05]  taking action:  0
Adding child.
Leaf selection - depth:  10
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  269
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
 
  wire [31:0] c;
  adder_8 a1(sum[7:0], c[0], in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c[1], in1[15:8], in2[15:8], c[0]);
  adder_8 a3(sum[23:16], c[2], in1[23:16], in2[23:16], c[1]);
  adder_8 a4(sum[31:24], cout, in1[31:24], in2[31:24], c[2]);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  145
LLM generates return in:  51.809799  seconds
Running getPromptScore: 
adder_32
output_files/2329780_adder_32/synth_script.sh
Running bash in x seconds:  0.904859

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.1
Backpropogation: incorporating estimates.
Current runs:  169.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.01937686  0.00570966 -0.03269511  0.0066783   0.00264317  0.00230444
  0.01136478  0.00127182  0.00113199  0.00097897]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [ 0.02795893  0.02780892 -0.02020794  0.01704232 -0.06100263  0.04816907
  0.02577564  0.01171313  0.00818133  0.00602168]  taking action:  5
Leaf selection - depth:  2
Leaf selection - action scores:  [4.3933848e-01 1.3751319e-01 5.6723651e-02 3.9152009e-03 1.3891339e-03
 8.7143597e-04 3.6625462e-04 3.3160625e-04 3.2721073e-04 2.7443763e-04]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.4196136  0.14240372 0.10390458 0.04856812 0.02655148 0.02361556
 0.02186166 0.0117013  0.00937397 0.00922723]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.40142837 0.31268442 0.04905123 0.0259253  0.01500934 0.01025745
 0.008617   0.00632283 0.00609926 0.00501323]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [0.42677483 0.42359102 0.15720358 0.07247365 0.00655949 0.00482891
 0.00470418 0.00451565 0.00398195 0.00334919]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [0.55232376 0.32446024 0.2515166  0.22071302 0.06419197 0.02100048
 0.01525507 0.01471943 0.01332328 0.01120017]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [8.4600151e-01 1.6486136e-03 4.6896730e-05 1.3250659e-05 1.0539872e-05
 7.6657925e-06 5.8508354e-06 5.6110462e-06 4.3788650e-06 3.9300580e-06]  taking action:  0
Leaf selection - depth:  8
Leaf selection - action scores:  [9.8571306e-01 1.4804396e-03 8.8993891e-04 1.0576145e-04 8.1919636e-05
 7.0588438e-05 4.4960922e-05 3.2592590e-05 1.7203545e-05 1.6212487e-05]  taking action:  0
Leaf selection - depth:  9
Leaf selection - action scores:  [1.2339551e+00 2.1334078e-02 3.7112524e-04 3.3387216e-04 8.5040228e-05
 4.1962638e-05 3.7159542e-05 2.7391887e-05 1.6313075e-05 1.4789109e-05]  taking action:  0
Leaf selection - depth:  10
Leaf selection - action scores:  [0.41220978 0.267248   0.26351908 0.2171932  0.11849201 0.10553642
 0.08500721 0.0385955  0.03773007 0.02984136]  taking action:  0
Adding child.
Leaf selection - depth:  11
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  26
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
 
  wire [31:0] c;
  adder_8 a1(sum[7:0], c[0], in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c[1], in1[15:8], in2[15:8], c[0]);
  adder_8 a3(sum[23:16], c[2], in1[23:16], in2[23:16], c[1]);
  adder_8 a4(sum[31:24], cout, in1[31:24], in2[31:24], c[2]);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  144
LLM generates return in:  51.478067  seconds
Running getPromptScore: 
adder_32
output_files/2329780_adder_32/synth_script.sh
Running bash in x seconds:  0.908228

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.1
Backpropogation: incorporating estimates.
Current runs:  170.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.02043363  0.00602012 -0.03269323  0.00669791  0.00265093  0.00231121
  0.01160925  0.00127555  0.00113531  0.00098184]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [ 0.02876064  0.02814358 -0.0200798   0.01705827 -0.0609913   0.05187934
  0.0258865   0.01176351  0.00821652  0.00604758]  taking action:  5
Leaf selection - depth:  2
Leaf selection - action scores:  [4.2709249e-01 1.4270417e-01 5.8864910e-02 4.0629958e-03 1.4415722e-03
 9.0433180e-04 3.8008037e-04 3.4412404e-04 3.3956260e-04 2.8479737e-04]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.40732425 0.14821848 0.10814732 0.0505513  0.02763565 0.02457985
 0.02275433 0.0121791  0.00975673 0.009604  ]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.38904023 0.3265882  0.05123233 0.0270781  0.01567674 0.01071355
 0.00900016 0.00660398 0.00637047 0.00523615]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [0.394461   0.4479267  0.16487652 0.076011   0.00687966 0.0050646
 0.00493378 0.00473606 0.00417631 0.00351266]  taking action:  1
Leaf selection - depth:  6
Leaf selection - action scores:  [0.7836918  0.05491238 0.04463834 0.03306425 0.01925269 0.0064992
 0.00599246 0.00534767 0.00399789 0.00313794]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [1.1107184e+00 5.8155511e-02 4.3523386e-03 1.3580167e-03 1.2223436e-03
 8.2145078e-04 6.0094963e-04 3.4561273e-04 1.7039510e-04 1.1721084e-04]  taking action:  0
Leaf selection - depth:  8
Leaf selection - action scores:  [1.41280532e+00 5.04797697e-01 2.92762369e-02 1.74710318e-03
 3.75739008e-04 2.11760154e-04 1.13596376e-04 9.10970630e-05
 8.07987017e-05 7.75334047e-05]  taking action:  0
Adding child.
Leaf selection - depth:  9
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  17
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
 
  wire c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42,c43,c44,c45,c46,c47,c48,c49,c50,c51,c52,c53,c54,c55,c56,c57,c58,c59,c60,c61,c62,c63;
  
  adder_8 a1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
  adder_8 a3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
  adder_8 a4(sum[31:24], c4, in1[31:24], in2[31:24], c3);
  adder_8 a5(sum[39:32], c5, in1[39:32], in2[39:32], c4);
  adder_8 a6(sum[47:40], c6, in1[47:40], in2[47:40], c5);
  adder_8 a7(sum[55:48], c7, in1[55:48], in2[55:48], c6);
  adder_8 a8(sum[63:56], cout, in1[63:56], in2[63:56], c7);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 failed\n'
Tokens:  460
LLM generates return in:  202.956084  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  171.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.0197765   0.00632967 -0.03269136  0.00671747  0.00265867  0.00231796
  0.011853    0.00127928  0.00113863  0.00098471]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [ 0.02955894  0.02847682 -0.01995221  0.01707416 -0.06098002  0.04176152
  0.02599689  0.01181368  0.00825156  0.00607337]  taking action:  5
Leaf selection - depth:  2
Leaf selection - action scores:  [4.0185833e-01 1.4771286e-01 6.0930975e-02 4.2056004e-03 1.4921691e-03
 9.3607238e-04 3.9342057e-04 3.5620225e-04 3.5148070e-04 2.9479328e-04]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.38104075 0.15381359 0.11222977 0.05245956 0.02867887 0.02550771
 0.02361329 0.01263885 0.01012504 0.00996654]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.36148766 0.3399238  0.0533243  0.02818378 0.01631687 0.01115102
 0.00936767 0.00687364 0.00663059 0.00544996]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [0.40818968 0.3569433  0.1722079  0.0793909  0.00718557 0.0052898
 0.00515317 0.00494665 0.00436201 0.00366885]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [0.50847334 0.35045713 0.271669   0.23839732 0.06933524 0.02268312
 0.01647736 0.0158988  0.01439079 0.01209757]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [7.55671918e-01 1.80596567e-03 5.13727937e-05 1.45153699e-05
 1.15458515e-05 8.39745553e-06 6.40926874e-06 6.14659302e-06
 4.79680602e-06 4.30516320e-06]  taking action:  0
Leaf selection - depth:  8
Leaf selection - action scores:  [8.4564382e-01 1.6551818e-03 9.9498185e-04 1.1824489e-04 9.1588932e-05
 7.8920275e-05 5.0267838e-05 3.6439626e-05 1.9234149e-05 1.8126111e-05]  taking action:  0
Leaf selection - depth:  9
Leaf selection - action scores:  [9.7807574e-01 2.4634471e-02 4.2853848e-04 3.8552235e-04 9.8195989e-05
 4.8454280e-05 4.2908141e-05 3.1629424e-05 1.8836716e-05 1.7076991e-05]  taking action:  0
Leaf selection - depth:  10
Leaf selection - action scores:  [0.30242592 0.32731062 0.32274362 0.26600626 0.14512248 0.12925519
 0.10411215 0.04726964 0.04620971 0.03654806]  taking action:  1
Adding child.
Leaf selection - depth:  11
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  26
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
 
  wire [31:0] carry;
  adder_8 A1(sum[7:0], carry[0], in1[7:0], in2[7:0], cin);
  adder_8 A2(sum[15:8], carry[1], in1[15:8], in2[15:8], carry[0]);
  adder_8 A3(sum[23:16], carry[2], in1[23:16], in2[23:16], carry[1]);
  adder_8 A4(sum[31:24], carry[3], in1[31:24], in2[31:24], carry[2]);
  adder_8 A5(sum[39:32], carry[4], in1[39:32], in2[39:32], carry[3]);
  adder_8 A6(sum[47:40], carry[5], in1[47:40], in2[47:40], carry[4]);
  adder_8 A7(sum[55:48], carry[6], in1[55:48], in2[55:48], carry[5]);
  adder_8 A8(sum[63:56], cout, in1[63:56], in2[63:56], carry[6]);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 failed\n'
Tokens:  288
LLM generates return in:  114.257862  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  172.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.01912937  0.00663832 -0.0326895   0.00673697  0.00266639  0.00232468
  0.01209604  0.00128299  0.00114193  0.00098757]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [ 0.03035389  0.02880865 -0.01982515  0.01708997 -0.06096879  0.03290841
  0.02610682  0.01186363  0.00828645  0.00609905]  taking action:  5
Leaf selection - depth:  2
Leaf selection - action scores:  [3.7960851e-01 1.5255718e-01 6.2929243e-02 4.3435255e-03 1.5411056e-03
 9.6677145e-04 4.0632300e-04 3.6788409e-04 3.6300771e-04 3.0446119e-04]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.35809654 0.1592122  0.11616886 0.05430081 0.02968545 0.02640299
 0.02444207 0.01308245 0.01048041 0.01031635]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.3377136  0.35275558 0.05533724 0.02924768 0.01693281 0.01157196
 0.00972129 0.00713311 0.00688089 0.00565569]  taking action:  1
Adding child.
Leaf selection - depth:  5
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  62
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
 
  adder_8 a1(sum[7:0], cout, in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], cout, in1[15:8], in2[15:8], cout);
  adder_8 a3(sum[23:16], cout, in1[23:16], in2[23:16], cout);
  adder_8 a4(sum[31:24], cout, in1[31:24], in2[31:24], cout);
  adder_8 a5(sum[39:32], cout, in1[39:32], in2[39:32], cout);
  adder_8 a6(sum[47:40], cout, in1[47:40], in2[47:40], cout);
  adder_8 a7(sum[55:48], cout, in1[55:48], in2[55:48], cout);
  adder_8 a8(sum[63:56], cout, in1[63:56], in2[63:56], cout);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 failed\n'
Tokens:  256
LLM generates return in:  98.423018  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  173.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.01849199  0.00694608 -0.03268764  0.00675641  0.00267408  0.00233139
  0.01233838  0.00128669  0.00114523  0.00099042]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [ 0.03114548  0.02913909 -0.01969863  0.01710572 -0.06095761  0.02509681
  0.02621628  0.01191337  0.00832119  0.00612462]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [ 0.008864    0.02211557 -0.46071753 -0.01476538  0.0205675   0.01564018
  0.01511977  0.0106009   0.01054074  0.00623361]  taking action:  1
Leaf selection - depth:  3
Leaf selection - action scores:  [8.5223812e-01 1.2150741e-03 1.6571065e-04 1.3942317e-04 1.1795465e-04
 1.1701349e-04 9.7658114e-05 9.7111268e-05 8.3208921e-05 4.7862770e-05]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [1.1385963e+00 8.1048450e-03 1.2065083e-03 1.0999639e-03 7.3834002e-04
 3.8210294e-04 2.3065116e-04 1.9716301e-04 1.2721645e-04 9.5869167e-05]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [0.46611866 0.45691743 0.15600784 0.07963073 0.04554468 0.04320382
 0.04022671 0.03887092 0.0364704  0.03061781]  taking action:  0
Adding child.
Leaf selection - depth:  6
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  16
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
  adder_8 A1(sum[7:0], cout, in1[7:0], in2[7:0], cin);
  adder_8 A2(sum[15:8], cout, in1[15:8], in2[15:8], cout);
  adder_8 A3(sum[23:16], cout, in1[23:16], in2[23:16], cout);
  adder_8 A4(sum[31:24], cout, in1[31:24], in2[31:24], cout);
  adder_8 A5(sum[39:32], cout, in1[39:32], in2[39:32], cout);
  adder_8 A6(sum[47:40], cout, in1[47:40], in2[47:40], cout);
  adder_8 A7(sum[55:48], cout, in1[55:48], in2[55:48], cout);
  adder_8 A8(sum[63:56], cout, in1[63:56], in2[63:56], cout);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 failed\n'
Tokens:  253
LLM generates return in:  97.207795  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  174.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.01786415  0.00725295 -0.03268579  0.0067758   0.00268176  0.00233808
  0.01258003  0.00129038  0.00114852  0.00099326]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [ 0.03024232  0.02946815 -0.01957264  0.01712141 -0.06094647  0.02510333
  0.02632529  0.01196291  0.00835579  0.00615009]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [ 0.0098968  -0.00180468 -0.46046326 -0.01453732  0.02070062  0.01574141
  0.01521763  0.01066951  0.01060896  0.00627396]  taking action:  4
Adding child.
Leaf selection - depth:  3
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  570
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
  assign cin = 0;
  wire [31:0] in1_32, in2_32;
  wire [31:0] c;
  assign c[0] = 0;
  assign cin = c[31];
  assign in1_32 = {in1[31:0], c[31:1]};
  assign in2_32 = {in2[31:0], c[31:1]};
  adder_8 a1(sum[7:0], c[8], in1_32[7:0], in2_32[7:0], c[0]);
  adder_8 a2(sum[15:8], c[9], in1_32[15:8], in2_32[15:8], c[1]);
  adder_8 a3(sum[23:16], c[10], in1_32[23:16], in2_32[23:16], c[2]);
  adder_8 a4(sum[31:24], c[11], in1_32[31:24], in2_32[31:24], c[3]);
  adder_8 a5(sum[39:32], c[12], in1_32[39:32], in2_32[39:32], c[4]);
  adder_8 a6(sum[47:40], c[13], in1_32[47:40], in2_32[47:40], c[5]);
  adder_8 a7(sum[55:48], c[14], in1_32[55:48], in2_32[55:48], c[6]);
  adder_8 a8(sum[63:56], cout, in1_32[63:56], in2_32[63:56], c[7]);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 failed\n'
Tokens:  424
LLM generates return in:  182.005394  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  175.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.01724559  0.00755895 -0.03268394  0.00679513  0.00268941  0.00234475
  0.01282098  0.00129407  0.00115179  0.00099609]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [ 0.02935886  0.02979585 -0.01944717  0.01713703 -0.06093538  0.02510982
  0.02643384  0.01201224  0.00839025  0.00617545]  taking action:  1
Leaf selection - depth:  2
Leaf selection - action scores:  [1.5490884e+00 2.2412711e-01 5.1640313e-02 2.1051170e-02 1.0410793e-02
 4.1426760e-03 2.0111846e-03 1.7433927e-03 1.5815384e-03 1.5423109e-03]  taking action:  0
Adding child.
Leaf selection - depth:  3
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  685
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
    wire [31:0] carry;
    adder_8 A1(sum[7:0], carry[0], in1[7:0], in2[7:0], cin);
    adder_8 A2(sum[15:8], carry[1], in1[15:8], in2[15:8], carry[0]);
    adder_8 A3(sum[23:16], carry[2], in1[23:16], in2[23:16], carry[1]);
    adder_8 A4(sum[31:24], carry[3], in1[31:24], in2[31:24], carry[2]);
    adder_8 A5(sum[39:32], carry[4], in1[39:32], in2[39:32], carry[3]);
    adder_8 A6(sum[47:40], carry[5], in1[47:40], in2[47:40], carry[4]);
    adder_8 A7(sum[55:48], carry[6], in1[55:48], in2[55:48], carry[5]);
    adder_8 A8(sum[63:56], cout, in1[63:56], in2[63:56], carry[6]);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 failed\n'
Tokens:  294
LLM generates return in:  115.876112  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  176.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.01663612  0.00786409 -0.0326821   0.00681441  0.00269704  0.00235141
  0.01306126  0.00129774  0.00115506  0.00099892]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [ 0.03012091 -0.01325186 -0.01932221  0.01715259 -0.06092433  0.02511628
  0.02654196  0.01206137  0.00842456  0.00620071]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [ 0.01092303 -0.00130502 -0.46021062 -0.01431072 -0.03958355  0.015842
  0.01531487  0.01073769  0.01067675  0.00631405]  taking action:  5
Adding child.
Leaf selection - depth:  3
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  263
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
  adder_8 A1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
  adder_8 A2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
  adder_8 A3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
  adder_8 A4(sum[31:24], c4, in1[31:24], in2[31:24], c3);
  adder_8 A5(sum[39:32], c5, in1[39:32], in2[39:32], c4);
  adder_8 A6(sum[47:40], c6, in1[47:40], in2[47:40], c5);
  adder_8 A7(sum[55:48], c7, in1[55:48], in2[55:48], c6);
  adder_8 A8(sum[63:56], cout, in1[63:56], in2[63:56], c7);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 failed\n'
Tokens:  271
LLM generates return in:  105.104604  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  177.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.01603552  0.00816836 -0.03268026  0.00683363  0.00270465  0.00235804
  0.01330085  0.0013014   0.00115832  0.00100174]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [ 0.02924387 -0.01303517 -0.01919775  0.01716808 -0.06091333  0.02512272
  0.02664963  0.0121103   0.00845874  0.00622586]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [ 0.01194276 -0.00080851 -0.4599596  -0.01408555 -0.03951783 -0.04202903
  0.0154115   0.01080544  0.01074411  0.00635388]  taking action:  6
Adding child.
Leaf selection - depth:  3
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  685
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
  reg [31:0] c;
  adder_8 A1(sum[7:0], c[0], in1[7:0], in2[7:0], cin);
  adder_8 A2(sum[15:8], c[1], in1[15:8], in2[15:8], c[0]);
  adder_8 A3(sum[23:16], c[2], in1[23:16], in2[23:16], c[1]);
  adder_8 A4(sum[31:24], cout, in1[31:24], in2[31:24], c[2]);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Verilog compilation failed, error:  6
Compilation output:  b"output_files/2329780_adder_32/2329780_adder_32.v:37: error: reg c; cannot be driven by primitives or continuous assignment.\noutput_files/2329780_adder_32/2329780_adder_32.v:37: error: Output port expression must support continuous assignment.\noutput_files/2329780_adder_32/2329780_adder_32.v:37:      : Port 2 (cout) of adder_8 is connected to c['sd0]\noutput_files/2329780_adder_32/2329780_adder_32.v:38: error: reg c; cannot be driven by primitives or continuous assignment.\noutput_files/2329780_adder_32/2329780_adder_32.v:38: error: Output port expression must support continuous assignment.\noutput_files/2329780_adder_32/2329780_adder_32.v:38:      : Port 2 (cout) of adder_8 is connected to c['sd1]\noutput_files/2329780_adder_32/2329780_adder_32.v:39: error: reg c; cannot be driven by primitives or continuous assignment.\noutput_files/2329780_adder_32/2329780_adder_32.v:39: error: Output port expression must support continuous assignment.\noutput_files/2329780_adder_32/2329780_adder_32.v:39:      : Port 2 (cout) of adder_8 is connected to c['sd2]\nadders/ripple_carry/tb_ripplecarry_32.v:14: warning: Port 1 (sum) of adder_32 expects 64 bits, got 32.\nadders/ripple_carry/tb_ripplecarry_32.v:14:        : Padding 32 high bits of the port.\nadders/ripple_carry/tb_ripplecarry_32.v:14: warning: Port 3 (in1) of adder_32 expects 64 bits, got 32.\nadders/ripple_carry/tb_ripplecarry_32.v:14:        : Padding 32 high bits of the port.\nadders/ripple_carry/tb_ripplecarry_32.v:14: warning: Port 4 (in2) of adder_32 expects 64 bits, got 32.\nadders/ripple_carry/tb_ripplecarry_32.v:14:        : Padding 32 high bits of the port.\n6 error(s) during elaboration.\n"
Tokens:  150
LLM generates return in:  53.202121  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  178.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.00824357  0.00847178 -0.03267843  0.0068528   0.00271223  0.00236465
  0.01353977  0.00130505  0.00116157  0.00100455]  taking action:  6
Leaf selection - depth:  1
Leaf selection - action scores:  [0.16021019 0.14922455 0.00811291 0.00046165 0.00042017 0.0003648
 0.0003029  0.00021411 0.00019854 0.00018386]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.15314728 0.09357807 0.06233025 0.04130888 0.04038985 0.02558692
 0.01570734 0.01098617 0.00788117 0.00614846]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.1447385  0.15253246 0.11004446 0.08140679 0.02026707 0.01915331
 0.00858719 0.00722322 0.00690305 0.00628612]  taking action:  1
Leaf selection - depth:  4
Leaf selection - action scores:  [1.1438189e+00 8.9509465e-04 1.3506075e-04 1.2039343e-04 1.0026682e-04
 9.2815179e-05 9.1435497e-05 7.3784482e-05 5.5407680e-05 3.5261743e-05]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [1.9416454e+00 6.2400964e-03 1.0523597e-03 8.9690223e-04 4.7265229e-04
 2.2027378e-04 1.5636085e-04 1.4602370e-04 1.0729064e-04 6.3126841e-05]  taking action:  0
Adding child.
Leaf selection - depth:  6
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  257
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);   
  adder_8 a1(sum[7:0], cout, in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], cout, in1[15:8], in2[15:8], cout);
  adder_8 a3(sum[23:16], cout, in1[23:16], in2[23:16], cout);
  adder_8 a4(sum[31:24], cout, in1[31:24], in2[31:24], cout);
  adder_8 a5(sum[39:32], cout, in1[39:32], in2[39:32], cout);
  adder_8 a6(sum[47:40], cout, in1[47:40], in2[47:40], cout);
  adder_8 a7(sum[55:48], cout, in1[55:48], in2[55:48], cout);
  adder_8 a8(sum[63:56], cout, in1[63:56], in2[63:56], cout);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 failed\n'
Tokens:  254
LLM generates return in:  97.746974  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  179.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.00857898  0.00877435 -0.0326766   0.00687191  0.0027198   0.00237125
  0.01033021  0.00130869  0.00116481  0.00100735]  taking action:  6
Leaf selection - depth:  1
Leaf selection - action scores:  [0.15528148 0.15050459 0.0082387  0.00046881 0.00042669 0.00037045
 0.0003076  0.00021743 0.00020161 0.00018672]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.14853752 0.09517781 0.06339581 0.04201506 0.04108032 0.02602433
 0.01597586 0.01117398 0.0080159  0.00625356]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.14914128 0.0923093  0.11199231 0.08284774 0.02062581 0.01949233
 0.00873918 0.00735108 0.00702524 0.00639738]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.15164584 0.15517133 0.15512592 0.09844805 0.01093142 0.01012983
 0.00714721 0.00615992 0.00503712 0.00486363]  taking action:  1
Leaf selection - depth:  5
Leaf selection - action scores:  [0.30956057 0.09357443 0.08464458 0.05845984 0.03193245 0.0116553
 0.01147613 0.00956853 0.00708441 0.00634282]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [3.5674676e-01 9.3912542e-02 6.3037593e-03 1.7981243e-03 1.7776636e-03
 1.3186409e-03 8.0278551e-04 4.9086398e-04 2.3331752e-04 2.0053932e-04]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [3.9235622e-01 2.4800995e-01 6.3832134e-02 3.9275293e-03 6.2197092e-04
 4.2460379e-04 2.4079577e-04 1.9067561e-04 1.6892795e-04 1.6875661e-04]  taking action:  0
Leaf selection - depth:  8
Leaf selection - action scores:  [5.2331042e-01 6.9952966e-03 3.1222194e-03 2.5339623e-04 2.1985570e-04
 1.8008558e-04 1.1548339e-04 7.6097851e-05 4.4256962e-05 1.8590199e-05]  taking action:  0
Leaf selection - depth:  9
Leaf selection - action scores:  [5.8733654e-01 4.0626887e-02 9.5066091e-04 8.5498032e-04 5.0807244e-04
 6.6172397e-05 6.2990097e-05 5.8024329e-05 3.9588482e-05 3.8410013e-05]  taking action:  0
Leaf selection - depth:  10
Leaf selection - action scores:  [6.8589252e-01 3.5722986e-02 2.4444635e-03 1.9758148e-03 3.0123082e-04
 2.2165319e-04 2.0408437e-04 7.3135867e-05 7.0147049e-05 6.8070862e-05]  taking action:  0
Leaf selection - depth:  11
Leaf selection - action scores:  [8.5031867e-01 3.7976857e-03 3.0109629e-03 6.6650158e-04 3.2953720e-04
 2.0308084e-04 1.5442150e-04 1.3685998e-04 1.3083605e-04 9.9938865e-05]  taking action:  0
Leaf selection - depth:  12
Leaf selection - action scores:  [1.0753525e+00 1.3817869e-01 3.5573659e-04 3.1953535e-04 2.5879327e-04
 6.8911664e-05 2.7215498e-05 2.7042875e-05 2.5094670e-05 1.5601263e-05]  taking action:  0
Leaf selection - depth:  13
Leaf selection - action scores:  [1.9311620e+00 1.4968230e-02 1.7801056e-03 1.4096629e-03 5.9237937e-04
 2.5179554e-04 1.8239113e-04 8.1002916e-05 7.8540063e-05 7.6548211e-05]  taking action:  0
Adding child.
Leaf selection - depth:  14
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  19
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);   
  wire c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42,c43,c44,c45,c46,c47,c48,c49,c50,c51,c52,c53,c54,c55,c56,c57,c58,c59,c60,c61,c62,c63;
  adder_8 a1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
  adder_8 a3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
  adder_8 a4(sum[31:24], c4, in1[31:24], in2[31:24], c3);
  adder_8 a5(sum[39:32], c5, in1[39:32], in2[39:32], c4);
  adder_8 a6(sum[47:40], c6, in1[47:40], in2[47:40], c5);
  adder_8 a7(sum[55:48], c7, in1[55:48], in2[55:48], c6);
  adder_8 a8(sum[63:56], cout, in1[63:56], in2[63:56], c7);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 failed\n'
Tokens:  452
LLM generates return in:  199.799167  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  180.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.00891346  0.00907608 -0.03267478  0.00689098  0.00272734  0.00237783
  0.00730883  0.00131232  0.00116804  0.00101014]  taking action:  1
Leaf selection - depth:  1
Leaf selection - action scores:  [0.44824255 0.2271171  0.10651508 0.03391128 0.01256544 0.00868518
 0.00861404 0.00740636 0.00411105 0.00246272]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.41549402 0.2304269  0.03397922 0.0241913  0.01562027 0.00795229
 0.00708655 0.00660642 0.00546679 0.00531449]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.79888356 0.03482133 0.10307701 0.03566611 0.00548395 0.00320813
 0.00286198 0.00279502 0.00248416 0.00214824]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [1.4123201  0.19880688 0.12457544 0.09146594 0.04318008 0.01153537
 0.00916646 0.00859308 0.00723105 0.00398694]  taking action:  0
Adding child.
Leaf selection - depth:  5
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  25
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);

  wire [31:0] c;
  adder_8 a1(sum[7:0], c[0], in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c[1], in1[15:8], in2[15:8], c[0]);
  adder_8 a3(sum[23:16], c[2], in1[23:16], in2[23:16], c[1]);
  adder_8 a4(sum[31:24], cout, in1[31:24], in2[31:24], c[2]);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  148
LLM generates return in:  52.614256  seconds
Running getPromptScore: 
adder_32
output_files/2329780_adder_32/synth_script.sh
Running bash in x seconds:  0.907263

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.1
Backpropogation: incorporating estimates.
Current runs:  181.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.00924702  0.02232312 -0.03267296  0.00690999  0.00273487  0.00238439
  0.00753183  0.00131594  0.00117126  0.00101293]  taking action:  1
Leaf selection - depth:  1
Leaf selection - action scores:  [0.42947885 0.24531452 0.11504944 0.03662837 0.01357222 0.00938107
 0.00930423 0.00799979 0.00444044 0.00266004]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.3993919  0.25242    0.03722237 0.02650024 0.01711115 0.00871129
 0.00776293 0.00723697 0.00598857 0.00582173]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.62485147 0.09794843 0.1152436  0.03987592 0.00613124 0.0035868
 0.0031998  0.00312493 0.00277738 0.00240181]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.914866   0.24348772 0.15257314 0.11202245 0.05288458 0.01412788
 0.01122658 0.01052433 0.00885619 0.00488299]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [1.9507296e+00 7.9850876e-04 3.7008507e-05 9.3101098e-06 7.9237852e-06
 6.5799827e-06 4.0522796e-06 3.2559865e-06 3.1790935e-06 2.2717359e-06]  taking action:  0
Adding child.
Leaf selection - depth:  6
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  15
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);

  wire [31:0] c;
  adder_8 a1(sum[7:0], c[0], in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c[1], in1[15:8], in2[15:8], c[0]);
  adder_8 a3(sum[23:16], c[2], in1[23:16], in2[23:16], c[1]);
  adder_8 a4(sum[31:24], cout, in1[31:24], in2[31:24], c[2]);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  147
LLM generates return in:  52.250761  seconds
Running getPromptScore: 
adder_32
output_files/2329780_adder_32/synth_script.sh
Running bash in x seconds:  0.896908

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.1
Backpropogation: incorporating estimates.
Current runs:  182.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.00957965  0.03225779 -0.03267115  0.00692894  0.00274237  0.00239093
  0.00775422  0.00131955  0.00117447  0.00101571]  taking action:  1
Leaf selection - depth:  1
Leaf selection - action scores:  [0.4137457  0.26225224 0.12299302 0.03915738 0.01450932 0.01002879
 0.00994664 0.00855213 0.00474703 0.0028437 ]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.38550824 0.2726448  0.04020476 0.02862353 0.01848215 0.00940927
 0.00838492 0.00781683 0.0064684  0.00628819]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.5335956  0.1550197  0.12624304 0.04368189 0.00671644 0.00392914
 0.0035052  0.00342319 0.00304247 0.00263105]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.73244077 0.28115538 0.17617628 0.12935238 0.06106585 0.01631347
 0.01296334 0.01215245 0.01022625 0.00563839]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [1.2445730e+00 9.7796950e-04 4.5325982e-05 1.1402510e-05 9.7046159e-06
 8.0588006e-06 4.9630089e-06 3.9877527e-06 3.8935787e-06 2.7822969e-06]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [1.94941914e+00 1.11677265e-03 6.56401564e-04 1.18453805e-04
 7.19094678e-05 4.66708116e-05 3.50937735e-05 2.17322759e-05
 1.47974151e-05 1.20609093e-05]  taking action:  0
Adding child.
Leaf selection - depth:  7
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  60
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);

  wire [31:0] c;
  adder_8 a1(sum[7:0], c[0], in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c[1], in1[15:8], in2[15:8], c[0]);
  adder_8 a3(sum[23:16], c[2], in1[23:16], in2[23:16], c[1]);
  adder_8 a4(sum[31:24], cout, in1[31:24], in2[31:24], c[2]);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  146
LLM generates return in:  51.967446  seconds
Running getPromptScore: 
adder_32
output_files/2329780_adder_32/synth_script.sh
Running bash in x seconds:  0.904002

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.1
Backpropogation: incorporating estimates.
Current runs:  183.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.00991139  0.03998421 -0.03266935  0.00694785  0.00274985  0.00239745
  0.007976    0.00132315  0.00117768  0.00101848]  taking action:  1
Leaf selection - depth:  1
Leaf selection - action scores:  [0.4002794  0.2781605  0.1304538  0.04153267 0.01538945 0.01063713
 0.01055001 0.00907091 0.00503499 0.0030162 ]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.3734544  0.29146954 0.04298069 0.03059984 0.01975825 0.01005894
 0.00896385 0.00835654 0.00691501 0.00672236]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.47627193 0.20750213 0.13635807 0.04718183 0.00725458 0.00424396
 0.00378605 0.00369747 0.00328624 0.00284186]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.63326854 0.31434128 0.19697106 0.14462036 0.0682737  0.01823902
 0.01449345 0.01358685 0.01143329 0.00630391]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [9.8624945e-01 1.1292619e-03 5.2337931e-05 1.3166484e-05 1.1205924e-05
 9.3055005e-06 5.7307889e-06 4.6046603e-06 4.4959170e-06 3.2127195e-06]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [1.2437705e+00 1.3677616e-03 8.0392451e-04 1.4507570e-04 8.8070759e-05
 5.7159836e-05 4.2980919e-05 2.6616493e-05 1.8123059e-05 1.4771537e-05]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [1.9252260e+00 2.5495252e-02 3.4628130e-04 3.1437995e-04 7.3109164e-05
 3.0092200e-05 2.5913600e-05 1.8663157e-05 1.4373383e-05 1.2201092e-05]  taking action:  0
Adding child.
Leaf selection - depth:  8
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  269
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);

  wire [31:0] c;
  adder_8 a1(sum[7:0], c[0], in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c[1], in1[15:8], in2[15:8], c[0]);
  adder_8 a3(sum[23:16], c[2], in1[23:16], in2[23:16], c[1]);
  adder_8 a4(sum[31:24], cout, in1[31:24], in2[31:24], c[2]);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  145
LLM generates return in:  51.67183  seconds
Running getPromptScore: 
adder_32
output_files/2329780_adder_32/synth_script.sh
Running bash in x seconds:  0.912474

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.1
Backpropogation: incorporating estimates.
Current runs:  184.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.01024222  0.04616485 -0.03266754  0.0069667   0.00275732  0.00240396
  0.00819719  0.00132674  0.00118087  0.00102125]  taking action:  1
Leaf selection - depth:  1
Leaf selection - action scores:  [0.38856548 0.29320693 0.13751037 0.04377928 0.01622191 0.01121252
 0.01112068 0.00956158 0.00530734 0.00317935]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.3628859  0.30915013 0.0455879  0.03245603 0.02095679 0.01066911
 0.0095076  0.00886345 0.00733447 0.00713013]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.43636045 0.2563516  0.1457729  0.0504395  0.00775548 0.00453698
 0.00404746 0.00395276 0.00351314 0.00303807]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.569242   0.3443436  0.21577099 0.15842366 0.07479009 0.01997984
 0.01587678 0.01488365 0.01252455 0.00690559]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [8.46093535e-01 1.26255315e-03 5.85155867e-05 1.47205765e-05
 1.25286042e-05 1.04038654e-05 6.40721646e-06 5.14816657e-06
 5.02658804e-06 3.59192950e-06]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [9.8563159e-01 1.5793550e-03 9.2829199e-04 1.6751897e-04 1.0169535e-04
 6.6002489e-05 4.9630089e-05 3.0734078e-05 2.0926705e-05 1.7056702e-05]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [1.2289553e+00 3.1225178e-02 4.2410629e-04 3.8503524e-04 8.9540074e-05
 3.6855268e-05 3.1737549e-05 2.2857606e-05 1.7603728e-05 1.4943225e-05]  taking action:  0
Leaf selection - depth:  8
Leaf selection - action scores:  [0.3472353  0.31804237 0.25757524 0.23107311 0.145882   0.075
 0.0731833  0.04462186 0.03980546 0.03426089]  taking action:  0
Adding child.
Leaf selection - depth:  9
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  26
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);

  wire [31:0] c;
  adder_8 a1(sum[7:0], c[0], in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c[1], in1[15:8], in2[15:8], c[0]);
  adder_8 a3(sum[23:16], c[2], in1[23:16], in2[23:16], c[1]);
  adder_8 a4(sum[31:24], cout, in1[31:24], in2[31:24], c[2]);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  144
LLM generates return in:  51.351749  seconds
Running getPromptScore: 
adder_32
output_files/2329780_adder_32/synth_script.sh
Running bash in x seconds:  0.898977

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.1
Backpropogation: incorporating estimates.
Current runs:  185.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.01057216  0.0512213  -0.03266575  0.00698551  0.00276476  0.00241045
  0.00841777  0.00133032  0.00118406  0.001024  ]  taking action:  1
Leaf selection - depth:  1
Leaf selection - action scores:  [0.3782421  0.30751804 0.14422211 0.0459161  0.01701368 0.01175979
 0.01166347 0.01002826 0.00556639 0.00333454]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.35352886 0.32587284 0.04805387 0.03421167 0.0220904  0.01124623
 0.01002189 0.00934289 0.00773121 0.00751582]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.40666434 0.30223197 0.1546155  0.05349917 0.00822592 0.0048122
 0.00429298 0.00419254 0.00372625 0.00322236]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.5237015  0.3719336  0.23305932 0.17111711 0.08078253 0.0215807
 0.01714888 0.01607618 0.01352806 0.00745889]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [7.55752504e-01 1.38305768e-03 6.41006118e-05 1.61255830e-05
 1.37243978e-05 1.13968645e-05 7.01875388e-06 5.63953381e-06
 5.50635150e-06 3.93476193e-06]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [8.4557551e-01 1.7657726e-03 1.0378620e-03 1.8729191e-04 1.1369885e-04
 7.3793024e-05 5.5488123e-05 3.4361743e-05 2.3396766e-05 1.9069970e-05]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [9.7422683e-01 3.6055729e-02 4.8971572e-04 4.4460039e-04 1.0339197e-04
 4.2556796e-05 3.6647365e-05 2.6393689e-05 2.0327034e-05 1.7254950e-05]  taking action:  0
Leaf selection - depth:  8
Leaf selection - action scores:  [0.26263735 0.38952076 0.31546396 0.2830056  0.17866823 0.09185586
 0.08963086 0.0546504  0.04875154 0.04196085]  taking action:  1
Adding child.
Leaf selection - depth:  9
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  62
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);

  wire [31:0] cout_d;
  wire [63:0] in1_d, in2_d;
  wire [31:0] sum_d;
  
  adder_8 a1(sum_d[7:0], cout_d[0], in1_d[7:0], in2_d[7:0], cin);
  adder_8 a2(sum_d[15:8], cout_d[1], in1_d[15:8], in2_d[15:8], cout_d[0]);
  adder_8 a3(sum_d[23:16], cout_d[2], in1_d[23:16], in2_d[23:16], cout_d[1]);
  adder_8 a4(sum_d[31:24], cout_d[3], in1_d[31:24], in2_d[31:24], cout_d[2]);
  adder_8 a5(sum_d[39:32], cout_d[4], in1_d[39:32], in2_d[39:32], cout_d[3]);
  adder_8 a6(sum_d[47:40], cout_d[5], in1_d[47:40], in2_d[47:40], cout_d[4]);
  adder_8 a7(sum_d[55:48], cout_d[6], in1_d[55:48], in2_d[55:48], cout_d[5]);
  adder_8 a8(sum_d[63:56], cout_d[7], in1_d[63:56], in2_d[63:56], cout_d[6]);
  
  assign sum = sum_d[63:0];
  assign cout = cout_d[7];

endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Verilog compilation failed, error:  4
Compilation output:  b"output_files/2329780_adder_32/2329780_adder_32.v:45: warning: Part select sum_d[39:32] is out of range.\noutput_files/2329780_adder_32/2329780_adder_32.v:45: error: Output port expression must support continuous assignment.\noutput_files/2329780_adder_32/2329780_adder_32.v:45:      : Port 1 (sum) of adder_8 is connected to sum_d['sd39:'sd32]\noutput_files/2329780_adder_32/2329780_adder_32.v:46: warning: Part select sum_d[47:40] is out of range.\noutput_files/2329780_adder_32/2329780_adder_32.v:46: error: Output port expression must support continuous assignment.\noutput_files/2329780_adder_32/2329780_adder_32.v:46:      : Port 1 (sum) of adder_8 is connected to sum_d['sd47:'sd40]\noutput_files/2329780_adder_32/2329780_adder_32.v:47: warning: Part select sum_d[55:48] is out of range.\noutput_files/2329780_adder_32/2329780_adder_32.v:47: error: Output port expression must support continuous assignment.\noutput_files/2329780_adder_32/2329780_adder_32.v:47:      : Port 1 (sum) of adder_8 is connected to sum_d['sd55:'sd48]\noutput_files/2329780_adder_32/2329780_adder_32.v:48: warning: Part select sum_d[63:56] is out of range.\noutput_files/2329780_adder_32/2329780_adder_32.v:48: error: Output port expression must support continuous assignment.\noutput_files/2329780_adder_32/2329780_adder_32.v:48:      : Port 1 (sum) of adder_8 is connected to sum_d['sd63:'sd56]\nadders/ripple_carry/tb_ripplecarry_32.v:14: warning: Port 1 (sum) of adder_32 expects 64 bits, got 32.\nadders/ripple_carry/tb_ripplecarry_32.v:14:        : Padding 32 high bits of the port.\nadders/ripple_carry/tb_ripplecarry_32.v:14: warning: Port 3 (in1) of adder_32 expects 64 bits, got 32.\nadders/ripple_carry/tb_ripplecarry_32.v:14:        : Padding 32 high bits of the port.\nadders/ripple_carry/tb_ripplecarry_32.v:14: warning: Port 4 (in2) of adder_32 expects 64 bits, got 32.\nadders/ripple_carry/tb_ripplecarry_32.v:14:        : Padding 32 high bits of the port.\n4 error(s) during elaboration.\n"
Tokens:  431
LLM generates return in:  187.042084  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  186.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.01090121 -0.03623205 -0.03266395  0.00700426  0.00277218  0.00241692
  0.00863776  0.00133389  0.00118724  0.00102675]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [ 0.01727439 -0.01281934 -0.0190738   0.01718351 -0.06090237  0.02512913
  0.02675688  0.01215903  0.00849278  0.00625092]  taking action:  6
Adding child.
Leaf selection - depth:  2
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  21809
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
        wire [31:0] carry;
        adder_8 A1(sum[7:0], carry[0], in1[7:0], in2[7:0], cin);
        adder_8 A2(sum[15:8], carry[1], in1[15:8], in2[15:8], carry[0]);
        adder_8 A3(sum[23:16], carry[2], in1[23:16], in2[23:16], carry[1]);
        adder_8 A4(sum[31:24], carry[3], in1[31:24], in2[31:24], carry[2]);
        adder_8 A5(sum[39:32], carry[4], in1[39:32], in2[39:32], carry[3]);
        adder_8 A6(sum[47:40], carry[5], in1[47:40], in2[47:40], carry[4]);
        adder_8 A7(sum[55:48], carry[6], in1[55:48], in2[55:48], carry[5]);
        adder_8 A8(sum[63:56], cout, in1[63:56], in2[63:56], carry[6]);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 failed\n'
Tokens:  295
LLM generates return in:  116.132732  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  187.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.01034662 -0.03608403 -0.03266217  0.00702296  0.00277958  0.00242337
  0.00885717  0.00133745  0.00119041  0.00102949]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [ 0.01800869 -0.01260438 -0.01895034  0.01719888 -0.06089146  0.02513552
 -0.03656816  0.01220757  0.00852668  0.00627587]  taking action:  5
Leaf selection - depth:  2
Leaf selection - action scores:  [3.5981634e-01 1.5725234e-01 6.4865977e-02 4.4772034e-03 1.5885353e-03
 9.9652517e-04 4.1882816e-04 3.7920623e-04 3.7417977e-04 3.1383141e-04]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.33786187 0.16443364 0.11997867 0.05608163 0.03065901 0.02726889
 0.02524366 0.0135115  0.01082412 0.01065469]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.34902683 0.13256836 0.05727949 0.03027423 0.01752713 0.01197812
 0.01006249 0.00738347 0.0071224  0.00585419]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [0.35618767 0.374785   0.17923966 0.08263267 0.00747897 0.0055058
 0.00536359 0.00514864 0.00454012 0.00381866]  taking action:  1
Leaf selection - depth:  6
Leaf selection - action scores:  [0.6380473  0.06139391 0.04990718 0.03696696 0.02152516 0.00726632
 0.00669977 0.00597887 0.00446978 0.00350833]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [8.2685471e-01 6.7152195e-02 5.0256476e-03 1.5681025e-03 1.4114409e-03
 9.4852963e-04 6.9391681e-04 3.9907920e-04 1.9675530e-04 1.3534342e-04]  taking action:  0
Leaf selection - depth:  8
Leaf selection - action scores:  [8.1516308e-01 6.1824846e-01 3.5855919e-02 2.1397555e-03 4.6018444e-04
 2.5935218e-04 1.3912658e-04 1.1157066e-04 9.8957797e-05 9.4958647e-05]  taking action:  0
Leaf selection - depth:  9
Leaf selection - action scores:  [1.94462609e+00 4.26425086e-03 1.97052769e-03 1.32352943e-04
 1.28353335e-04 1.06454936e-04 8.14936429e-05 6.20567225e-05
 4.00894642e-05 1.60615018e-05]  taking action:  0
Adding child.
Leaf selection - depth:  10
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  11
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
 
  wire c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42,c43,c44,c45,c46,c47,c48,c49,c50,c51,c52,c53,c54,c55,c56,c57,c58,c59,c60,c61,c62,c63;
  
  adder_8 a1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
  adder_8 a3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
  adder_8 a4(sum[31:24], c4, in1[31:24], in2[31:24], c3);
  adder_8 a5(sum[39:32], c5, in1[39:32], in2[39:32], c4);
  adder_8 a6(sum[47:40], c6, in1[47:40], in2[47:40], c5);
  adder_8 a7(sum[55:48], c7, in1[55:48], in2[55:48], c6);
  adder_8 a8(sum[63:56], cout, in1[63:56], in2[63:56], c7);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 failed\n'
Tokens:  459
LLM generates return in:  202.634179  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  188.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.00979989 -0.0359364  -0.03266038  0.00704162  0.00278696  0.00242981
  0.00907599  0.00134101  0.00119357  0.00103223]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [ 0.01874009 -0.01239027 -0.01882737  0.01721419 -0.06088058  0.01818955
 -0.03651496  0.01225592  0.00856045  0.00630073]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [ 1.2956157e-02 -3.1509995e-04 -4.5971012e-01 -1.3861783e-02
 -3.9452523e-02 -4.1979361e-02 -4.9224624e-01  1.0872762e-02
  1.0811055e-02  6.3934736e-03]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [ 0.02448963  0.01720725 -0.34230947  0.0251172   0.01405454  0.00948825
  0.00670371  0.00658459  0.00542403  0.0046848 ]  taking action:  3
Leaf selection - depth:  4
Leaf selection - action scores:  [1.1354958  0.43438908 0.2574279  0.05543618 0.01467255 0.01141427
 0.0095841  0.00938683 0.00157993 0.00153322]  taking action:  0
Adding child.
Leaf selection - depth:  5
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  11
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
  wire cout1, cout2, cout3, cout4, cout5, cout6, cout7, cout8;
  adder_8 A1(sum[7:0], cout1, in1[7:0], in2[7:0], cin);
  adder_8 A2(sum[15:8], cout2, in1[15:8], in2[15:8], cout1);
  adder_8 A3(sum[23:16], cout3, in1[23:16], in2[23:16], cout2);
  adder_8 A4(sum[31:24], cout4, in1[31:24], in2[31:24], cout3);
  adder_8 A5(sum[39:32], cout5, in1[39:32], in2[39:32], cout4);
  adder_8 A6(sum[47:40], cout6, in1[47:40], in2[47:40], cout5);
  adder_8 A7(sum[55:48], cout7, in1[55:48], in2[55:48], cout6);
  adder_8 A8(sum[63:56], cout8, in1[63:56], in2[63:56], cout7);
  assign cout = cout8;
  assign sum = sum[63:0];
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 failed\n'
Tokens:  317
LLM generates return in:  127.14439  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  189.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.00926086 -0.03578916 -0.03265861  0.00706022  0.00279433  0.00243623
  0.00929424  0.00134455  0.00119673  0.00103495]  taking action:  6
Leaf selection - depth:  1
Leaf selection - action scores:  [0.15061627 0.15176538 0.00836259 0.00047586 0.00043311 0.00037602
 0.00031222 0.0002207  0.00020465 0.00018952]  taking action:  1
Leaf selection - depth:  2
Leaf selection - action scores:  [1.1318234  0.10070374 0.04421258 0.03616905 0.00997977 0.00384244
 0.00339835 0.00313886 0.00291502 0.00228181]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [1.5247521  0.19041461 0.02095495 0.02062842 0.00981    0.00492248
 0.00400147 0.00346681 0.00332085 0.00270412]  taking action:  0
Adding child.
Leaf selection - depth:  4
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  685
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);   

  wire [31:0] c;
  adder_8 a1(sum[7:0], c[0], in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c[1], in1[15:8], in2[15:8], c[0]);
  adder_8 a3(sum[23:16], c[2], in1[23:16], in2[23:16], c[1]);
  adder_8 a4(sum[31:24], cout, in1[31:24], in2[31:24], c[2]);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  150
LLM generates return in:  53.310734  seconds
Running getPromptScore: 
adder_32
output_files/2329780_adder_32/synth_script.sh
Running bash in x seconds:  0.892679

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.1
Backpropogation: incorporating estimates.
Current runs:  190.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.00957881 -0.03564231 -0.03265683  0.00707878  0.00280167  0.00244263
  0.01209728  0.00134808  0.00119987  0.00103767]  taking action:  6
Leaf selection - depth:  1
Leaf selection - action scores:  [0.15413381 0.13975582 0.00848468 0.0004828  0.00043943 0.00038151
 0.00031678 0.00022393 0.00020763 0.00019229]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.14416921 0.0967511  0.06444374 0.04270957 0.04175938 0.02645452
 0.01623994 0.01135869 0.0081484  0.00635694]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.14372    0.09516948 0.11390685 0.08426404 0.02097842 0.01982556
 0.00888858 0.00747675 0.00714534 0.00650675]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.1570864  0.1400551  0.15819801 0.10039771 0.01114791 0.01033045
 0.00728876 0.00628191 0.00513688 0.00495995]  taking action:  2
Adding child.
Leaf selection - depth:  5
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  3132
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);   
  wire[31:0] carry;
  adder_8 A1(sum[7:0], carry[0], in1[7:0], in2[7:0], cin);
  adder_8 A2(sum[15:8], carry[1], in1[15:8], in2[15:8], carry[0]);
  adder_8 A3(sum[23:16], carry[2], in1[23:16], in2[23:16], carry[1]);
  adder_8 A4(sum[31:24], carry[3], in1[31:24], in2[31:24], carry[2]);
  adder_8 A5(sum[39:32], carry[4], in1[39:32], in2[39:32], carry[3]);
  adder_8 A6(sum[47:40], carry[5], in1[47:40], in2[47:40], carry[4]);
  adder_8 A7(sum[55:48], carry[6], in1[55:48], in2[55:48], carry[5]);
  adder_8 A8(sum[63:56], carry[7], in1[63:56], in2[63:56], carry[6]);
  adder_8 A9(sum[71:64], cout, in1[71:64], in2[71:64], carry[7]);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Verilog compilation failed, error:  1
Compilation output:  b"output_files/2329780_adder_32/2329780_adder_32.v:45: warning: Part select sum[71:64] is out of range.\noutput_files/2329780_adder_32/2329780_adder_32.v:45: error: Output port expression must support continuous assignment.\noutput_files/2329780_adder_32/2329780_adder_32.v:45:      : Port 1 (sum) of adder_8 is connected to sum['sd71:'sd64]\nadders/ripple_carry/tb_ripplecarry_32.v:14: warning: Port 1 (sum) of adder_32 expects 64 bits, got 32.\nadders/ripple_carry/tb_ripplecarry_32.v:14:        : Padding 32 high bits of the port.\nadders/ripple_carry/tb_ripplecarry_32.v:14: warning: Port 3 (in1) of adder_32 expects 64 bits, got 32.\nadders/ripple_carry/tb_ripplecarry_32.v:14:        : Padding 32 high bits of the port.\nadders/ripple_carry/tb_ripplecarry_32.v:14: warning: Port 4 (in2) of adder_32 expects 64 bits, got 32.\nadders/ripple_carry/tb_ripplecarry_32.v:14:        : Padding 32 high bits of the port.\n1 error(s) during elaboration.\n"
Tokens:  329
LLM generates return in:  132.906025  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  191.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.00989593 -0.03549584 -0.03265507  0.00709728  0.002809    0.00244902
 -0.01581149  0.00135161  0.00120301  0.00104039]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [ 0.01801166 -0.012177   -0.01870488  0.01722944 -0.06086976  0.01819554
 -0.03646197  0.01230408  0.00859409  0.00632548]  taking action:  5
Leaf selection - depth:  2
Leaf selection - action scores:  [3.4207472e-01 1.6181132e-01 6.6746540e-02 4.6070046e-03 1.6345893e-03
 1.0254160e-03 4.3097063e-04 3.9020000e-04 3.8502782e-04 3.2292987e-04]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.3198591  0.16949432 0.12367119 0.05780762 0.03160258 0.02810813
 0.02602057 0.01392733 0.01115725 0.0109826 ]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.32711393 0.1385558  0.059158   0.03126709 0.01810194 0.01237094
 0.01039249 0.00762562 0.00735598 0.00604618]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [0.36727408 0.30996054 0.18600579 0.08575197 0.0077613  0.00571364
 0.00556606 0.00534299 0.00471151 0.00396281]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [0.44670895 0.37465444 0.2904264  0.25485745 0.0741225  0.02424927
 0.01761504 0.01699653 0.0153844  0.01293285]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [6.5817428e-01 1.9506660e-03 5.5488963e-05 1.5678392e-05 1.2470946e-05
 9.0702888e-06 6.9228017e-06 6.6390799e-06 5.1811430e-06 4.6501077e-06]  taking action:  0
Leaf selection - depth:  8
Leaf selection - action scores:  [7.15358436e-01 1.81316072e-03 1.08994811e-03 1.29530788e-04
 1.00330646e-04 8.64528265e-05 5.50656550e-05 3.99176097e-05
 2.10699545e-05 1.98561611e-05]  taking action:  0
Leaf selection - depth:  9
Leaf selection - action scores:  [7.8923970e-01 2.7542176e-02 4.7912059e-04 4.3102709e-04 1.0978645e-04
 5.4173528e-05 4.7972757e-05 3.5362773e-05 2.1060087e-05 1.9092657e-05]  taking action:  0
Leaf selection - depth:  10
Leaf selection - action scores:  [0.34147635 0.13897286 0.37267223 0.30715758 0.167573   0.14925103
 0.12021834 0.05458228 0.05335837 0.04220206]  taking action:  2
Adding child.
Leaf selection - depth:  11
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  62
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
 
  wire [31:0] cout_d;
  wire [63:0] in1_d, in2_d;
  
  adder_8 A1(in1_d[7:0], cout_d[0], in1[7:0], in2[7:0], cin);
  adder_8 A2(in1_d[15:8], cout_d[1], in1[15:8], in2[15:8], cout_d[0]);
  adder_8 A3(in1_d[23:16], cout_d[2], in1[23:16], in2[23:16], cout_d[1]);
  adder_8 A4(in1_d[31:24], cout_d[3], in1[31:24], in2[31:24], cout_d[2]);
  adder_8 A5(in1_d[39:32], cout_d[4], in1[39:32], in2[39:32], cout_d[3]);
  adder_8 A6(in1_d[47:40], cout_d[5], in1[47:40], in2[47:40], cout_d[4]);
  adder_8 A7(in1_d[55:48], cout_d[6], in1[55:48], in2[55:48], cout_d[5]);
  adder_8 A8(in1_d[63:56], cout_d[7], in1[63:56], in2[63:56], cout_d[6]);
  
  assign sum = in1_d + in2_d;
  assign cout = cout_d;
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 failed\n'
Tokens:  394
LLM generates return in:  167.857128  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  192.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.00935786 -0.03534975 -0.0326533   0.00711574  0.0028163   0.00245538
 -0.01560698  0.00135512  0.00120614  0.00104309]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [ 0.01872849 -0.01196457 -0.01858288  0.01724463 -0.06085897  0.01198037
 -0.03640919  0.01235205  0.00862759  0.00635014]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [ 1.23804659e-02  1.75267458e-04 -4.59462166e-01 -1.36393905e-02
 -3.93876135e-02 -4.19300050e-02 -4.92198527e-01  1.09396717e-02
  1.08775850e-02  6.43281825e-03]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [ 0.02539249  0.01883177 -0.34120288 -0.01623711  0.01415317  0.00955484
  0.00675076  0.0066308   0.00546209  0.00471768]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [ 0.11650481  0.01456164 -0.44082493  0.09096956  0.03342399  0.01446029
  0.01419749  0.01279177  0.00950063  0.00945389]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [0.12321072 0.11400109 0.00952714 0.00285522 0.00226725 0.0018482
 0.00108615 0.00059646 0.00028631 0.00024816]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [0.12430825 0.11878546 0.11387172 0.00603963 0.00094595 0.00057341
 0.00036217 0.00029789 0.00029532 0.00029232]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [1.5612365e-01 9.0506077e-03 4.7206092e-03 4.8350421e-04 3.2517948e-04
 2.3720860e-04 2.2038865e-04 1.1916501e-04 6.3539643e-05 3.4275494e-05]  taking action:  0
Leaf selection - depth:  8
Leaf selection - action scores:  [1.5797481e-01 8.7411717e-02 1.8176496e-03 1.7611351e-03 7.4196601e-04
 1.3586946e-04 1.2480072e-04 1.1417375e-04 7.8314297e-05 7.5487849e-05]  taking action:  0
Leaf selection - depth:  9
Leaf selection - action scores:  [1.6226697e-01 7.7938035e-02 5.2482015e-03 4.5993375e-03 5.8797450e-04
 4.2448551e-04 4.0332315e-04 1.5576325e-04 1.4256719e-04 1.4190632e-04]  taking action:  0
Leaf selection - depth:  10
Leaf selection - action scores:  [0.16893819 0.00901852 0.00716363 0.00155884 0.00078307 0.00047424
 0.00037266 0.00032319 0.00027847 0.00025869]  taking action:  0
Leaf selection - depth:  11
Leaf selection - action scores:  [1.6946526e-01 1.6452539e-01 1.0691779e-03 6.5809360e-04 4.9928180e-04
 1.9142411e-04 7.7748184e-05 6.7394882e-05 6.1552229e-05 4.0026527e-05]  taking action:  0
Leaf selection - depth:  12
Leaf selection - action scores:  [0.17203712 0.04337751 0.00476142 0.00330695 0.00126847 0.0006942
 0.0004945  0.00023273 0.00021817 0.00020093]  taking action:  0
Leaf selection - depth:  13
Leaf selection - action scores:  [1.7894508e-01 9.4875768e-03 3.7612496e-03 1.4972523e-03 6.6260458e-04
 6.0476921e-04 3.7879578e-04 3.4987211e-04 2.7495946e-04 1.3163140e-04]  taking action:  0
Leaf selection - depth:  14
Leaf selection - action scores:  [1.8260121e-01 7.0379362e-02 4.6366578e-04 1.6339154e-04 1.0067027e-04
 7.8283745e-05 6.9996648e-05 5.0146627e-05 4.0271818e-05 2.7491502e-05]  taking action:  0
Leaf selection - depth:  15
Leaf selection - action scores:  [1.9089010e-01 1.4121934e-02 1.4558038e-03 1.1595791e-03 6.4673880e-04
 1.9005584e-04 7.7886965e-05 7.1662565e-05 6.2635037e-05 4.9704387e-05]  taking action:  0
Leaf selection - depth:  16
Leaf selection - action scores:  [1.9802411e-01 3.6405385e-03 9.0873567e-04 2.9976293e-04 2.3243373e-04
 2.1064105e-04 1.9368628e-04 1.2402520e-04 1.1128748e-04 6.9459398e-05]  taking action:  0
Leaf selection - depth:  17
Leaf selection - action scores:  [2.0500135e-01 6.7927111e-03 3.7083638e-04 3.6264420e-04 2.9378355e-04
 5.2733198e-05 4.7875488e-05 4.6897225e-05 3.7348676e-05 3.2928423e-05]  taking action:  0
Leaf selection - depth:  18
Leaf selection - action scores:  [2.12343588e-01 1.09382570e-02 7.49326311e-04 6.82982907e-04
 3.23414250e-04 1.17637996e-04 5.81466811e-05 3.87985165e-05
 3.85021631e-05 3.51337330e-05]  taking action:  0
Leaf selection - depth:  19
Leaf selection - action scores:  [2.21004084e-01 2.92174611e-03 1.41945973e-04 1.30489687e-04
 1.18502605e-04 8.03494331e-05 7.49436440e-05 7.35375652e-05
 6.71944217e-05 6.52680901e-05]  taking action:  0
Leaf selection - depth:  20
Leaf selection - action scores:  [2.28088185e-01 3.73675711e-02 2.41777059e-04 1.02939535e-04
 2.54809729e-05 1.89231414e-05 1.08403146e-05 1.05283780e-05
 6.32937417e-06 4.76274045e-06]  taking action:  0
Leaf selection - depth:  21
Leaf selection - action scores:  [2.3919877e-01 7.6999273e-03 6.2978617e-04 4.9421546e-04 2.5914097e-04
 1.1857733e-04 3.0109408e-05 2.5332041e-05 2.4481018e-05 2.2802633e-05]  taking action:  0
Leaf selection - depth:  22
Leaf selection - action scores:  [2.5012800e-01 7.8790350e-04 5.4853247e-04 4.9784279e-04 4.4121910e-04
 6.0763545e-05 4.3643297e-05 3.5321314e-05 3.5077475e-05 3.4335299e-05]  taking action:  0
Leaf selection - depth:  23
Leaf selection - action scores:  [2.4561678e-01 2.5190204e-01 7.1293744e-04 3.0418049e-04 1.6864706e-04
 9.3538081e-05 8.2384744e-05 7.7631041e-05 2.6956493e-05 2.6455486e-05]  taking action:  1
Leaf selection - depth:  24
Leaf selection - action scores:  [1.9171016e+00 2.1874765e-02 4.1956268e-03 3.4777927e-03 2.8120744e-04
 1.1712905e-04 9.7969576e-05 4.4992892e-05 4.3619919e-05 4.0798990e-05]  taking action:  0
Adding child.
Leaf selection - depth:  25
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  50286
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  wire [31:0] in1_1, in1_2, in2_1, in2_2;
  wire [31:0] sum_1, sum_2;
  adder_8 A1(sum_1[7:0], c1, in1[7:0], in2[7:0], cin);
  adder_8 A2(sum_1[15:8], c2, in1[15:8], in2[15:8], c1);
  adder_8 A3(sum_1[23:16], c3, in1[23:16], in2[23:16], c2);
  adder_8 A4(sum_1[31:24], c4, in1[31:24], in2[31:24], c3);
  adder_8 A5(sum_2[7:0], c5, in1_1[7:0], in2_1[7:0], c4);
  adder_8 A6(sum_2[15:8], c6, in1_1[15:8], in2_1[15:8], c5);
  adder_8 A7(sum_2[23:16], c7, in1_1[23:16], in2_1[23:16], c6);
  adder_8 A8(sum_2[31:24], cout, in1_2[31:24], in2_2[31:24], c7);
  assign sum[63:32] = sum_1[63:32] + sum_2[63:32];
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 failed\n'
Tokens:  376
LLM generates return in:  161.257999  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  193.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.00882727 -0.03520404 -0.03265154  0.00713415  0.00282359  0.00246174
 -0.015403    0.00135863  0.00120926  0.00104579]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [ 0.01800348 -0.01175296 -0.01846134  0.01725976 -0.06084822  0.01198599
 -0.03635662  0.01239983  0.00866097  0.00637471]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [ 0.01181461  0.00066265 -0.45921573 -0.01341835 -0.0393231  -0.04188095
 -0.4921511   0.01100617  0.01094371  0.00647192]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [ 0.02371176  0.02044508 -0.34010392 -0.01588811  0.01425112  0.00962096
  0.00679748  0.00667669  0.00549989  0.00475033]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [ 0.11383534  0.01523069 -0.4402117   0.09191228  0.03377036  0.01461014
  0.01434461  0.01292433  0.00959909  0.00955186]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [0.12049028 0.11526081 0.00963242 0.00288677 0.0022923  0.00186863
 0.00109816 0.00060305 0.00028947 0.00025091]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [0.12049821 0.12111641 0.11515845 0.00610788 0.00095664 0.00057989
 0.00036626 0.00030126 0.00029865 0.00029562]  taking action:  1
Leaf selection - depth:  7
Leaf selection - action scores:  [4.6934104e-01 1.0971274e-02 2.2009152e-03 7.2065881e-04 5.8519904e-04
 4.8958295e-04 4.1374800e-04 2.9610549e-04 2.1892162e-04 1.4851226e-04]  taking action:  0
Leaf selection - depth:  8
Leaf selection - action scores:  [5.0094450e-01 1.3965920e-01 2.3633151e-03 1.0665226e-03 9.1179291e-04
 1.9507619e-04 1.8872987e-04 1.5080531e-04 8.7526809e-05 5.5336139e-05]  taking action:  0
Leaf selection - depth:  9
Leaf selection - action scores:  [5.6440330e-01 1.1597074e-01 3.8248636e-02 5.0324801e-04 4.3098646e-04
 3.9341289e-04 3.1271228e-04 1.9031897e-04 1.6787648e-04 1.3731503e-04]  taking action:  0
Leaf selection - depth:  10
Leaf selection - action scores:  [6.9266570e-01 5.5871396e-03 2.1347131e-03 2.0538731e-03 1.1228053e-03
 8.0297788e-04 6.0662837e-04 5.0701166e-04 3.1272802e-04 2.3353194e-04]  taking action:  0
Leaf selection - depth:  11
Leaf selection - action scores:  [6.9512081e-01 4.7199994e-01 8.8712474e-04 5.6764606e-04 4.5015643e-04
 1.3687996e-04 9.5462165e-05 3.8553131e-05 3.0323796e-05 2.3395616e-05]  taking action:  0
Leaf selection - depth:  12
Leaf selection - action scores:  [1.0996357e+00 5.2887600e-02 3.4112949e-02 1.0960154e-03 4.5622187e-04
 2.7988892e-04 1.8500799e-04 1.5066884e-04 1.2393019e-04 1.0255535e-04]  taking action:  0
Leaf selection - depth:  13
Leaf selection - action scores:  [1.9494680e+00 4.7961593e-04 4.3446210e-04 2.9008399e-04 1.5985407e-04
 1.4769654e-04 9.1185699e-05 7.8393779e-05 6.8855261e-05 4.7132875e-05]  taking action:  0
Adding child.
Leaf selection - depth:  14
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  11
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
  wire c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15, c16, c17, c18, c19, c20, c21, c22, c23, c24, c25, c26, c27, c28, c29, c30, c31, c32, c33, c34, c35, c36, c37, c38, c39, c40, c41, c42, c43, c44, c45, c46, c47, c48, c49, c50, c51, c52, c53, c54, c55, c56, c57, c58, c59, c60, c61, c62, c63;
  adder_8 a1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
  adder_8 a3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
  adder_8 a4(sum[31:24], c4, in1[31:24], in2[31:24], c3);
  adder_8 a5(sum[39:32], c5, in1[39:32], in2[39:32], c4);
  adder_8 a6(sum[47:40], c6, in1[47:40], in2[47:40], c5);
  adder_8 a7(sum[55:48], c7, in1[55:48], in2[55:48], c6);
  adder_8 a8(sum[63:56], cout, in1[63:56], in2[63:56], c7);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 failed\n'
Tokens:  451
LLM generates return in:  199.146465  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  194.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.00830398 -0.0350587  -0.03264979  0.00715251  0.00283086  0.00246807
 -0.01519955  0.00136213  0.00121237  0.00104848]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [ 0.01729302 -0.01154215 -0.01834027  0.01727484 -0.06083752  0.01199159
 -0.03630424  0.01244743  0.00869422  0.00639918]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [ 0.01125827  0.00114712 -0.4589708  -0.01319864 -0.03925898 -0.04183218
 -0.49210396  0.01107228  0.01100944  0.0065108 ]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [ 0.02209242  0.02204736 -0.33901244 -0.01554149  0.0143484   0.00968663
  0.00684388  0.00672226  0.00553744  0.00478276]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [ 0.11125924  0.01589295 -0.4396047   0.09284543  0.03411321  0.01475847
  0.01449025  0.01305554  0.00969654  0.00964883]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [0.11786441 0.1165069  0.00973655 0.00291798 0.00231708 0.00188883
 0.00111003 0.00060957 0.0002926  0.00025362]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [0.12272567 0.09859701 0.11643095 0.00617537 0.00096721 0.0005863
 0.00037031 0.00030458 0.00030195 0.00029889]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [1.5217569e-01 9.1754505e-03 4.7857244e-03 4.9017358e-04 3.2966497e-04
 2.4048061e-04 2.2342867e-04 1.2080875e-04 6.4416097e-05 3.4748282e-05]  taking action:  0
Leaf selection - depth:  8
Leaf selection - action scores:  [1.5387523e-01 8.8651657e-02 1.8434331e-03 1.7861169e-03 7.5249083e-04
 1.3779677e-04 1.2657102e-04 1.1579331e-04 7.9425190e-05 7.6558652e-05]  taking action:  0
Leaf selection - depth:  9
Leaf selection - action scores:  [1.5796897e-01 7.9075873e-02 5.3248215e-03 4.6664849e-03 5.9655850e-04
 4.3068270e-04 4.0921138e-04 1.5803729e-04 1.4464857e-04 1.4397805e-04]  taking action:  0
Leaf selection - depth:  10
Leaf selection - action scores:  [0.16439143 0.00915414 0.00727136 0.00158228 0.00079484 0.00048137
 0.00037826 0.00032805 0.00028266 0.00026258]  taking action:  0
Leaf selection - depth:  11
Leaf selection - action scores:  [1.6415381e-01 1.6591346e-01 1.0857553e-03 6.6829717e-04 5.0702301e-04
 1.9439211e-04 7.8953657e-05 6.8439826e-05 6.2506588e-05 4.0647130e-05]  taking action:  1
Leaf selection - depth:  12
Leaf selection - action scores:  [9.6661294e-01 2.7029280e-02 9.0512568e-03 5.4125921e-03 8.7847968e-04
 6.6386041e-04 5.6752673e-04 4.7253229e-04 3.8209651e-04 3.6456846e-04]  taking action:  0
Leaf selection - depth:  13
Leaf selection - action scores:  [1.2436167e+00 7.3614338e-04 3.7016318e-04 3.4121456e-04 1.7363565e-04
 1.4172649e-04 4.8827511e-05 3.8343875e-05 3.6611855e-05 3.3486118e-05]  taking action:  0
Leaf selection - depth:  14
Leaf selection - action scores:  [1.4116052  0.34327465 0.05698157 0.02074359 0.01944937 0.01828578
 0.01181263 0.00961591 0.00582097 0.00304864]  taking action:  0
Adding child.
Leaf selection - depth:  15
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  62
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
  wire c1,c2,c3;
  adder_8 A1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
  adder_8 A2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
  adder_8 A3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
  adder_8 A4(sum[31:24], cout, in1[31:24], in2[31:24], c3);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  134
LLM generates return in:  47.871266  seconds
Running getPromptScore: 
adder_32
output_files/2329780_adder_32/synth_script.sh
Running bash in x seconds:  0.905912

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.1
Backpropogation: incorporating estimates.
Current runs:  195.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.00930299 -0.03491374 -0.03264804  0.00717083  0.00283811  0.00247439
 -0.01499662  0.00136561  0.00121547  0.00105117]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [ 0.01894967 -0.01133215 -0.01821966  0.01728985 -0.06082686  0.01199718
 -0.03625207  0.01249485  0.00872734  0.00642356]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [ 0.01337786  0.00162871 -0.4587273  -0.01298023 -0.03919523 -0.04178371
 -0.49205709  0.01113799  0.01107478  0.00654943]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [ 0.02445248  0.02363883 -0.33792835 -0.01519721  0.01444502  0.00975187
  0.00688996  0.00676753  0.00557473  0.00481496]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [ 0.1129379   0.01654861 -0.43900374  0.09376928  0.03445265  0.01490532
  0.01463443  0.01318545  0.00979303  0.00974484]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [0.11958316 0.11773982 0.00983959 0.00294886 0.00234161 0.00190882
 0.00112178 0.00061603 0.0002957  0.0002563 ]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [0.12427302 0.10062394 0.1176897  0.00624213 0.00097767 0.00059263
 0.00037431 0.00030788 0.00030522 0.00030212]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [1.5380514e-01 9.2986161e-03 4.8499652e-03 4.9675338e-04 3.3409017e-04
 2.4370868e-04 2.2642783e-04 1.2243041e-04 6.5280772e-05 3.5214722e-05]  taking action:  0
Leaf selection - depth:  8
Leaf selection - action scores:  [1.5551512e-01 8.9874499e-02 1.8688611e-03 1.8107543e-03 7.6287059e-04
 1.3969753e-04 1.2831693e-04 1.1739055e-04 8.0520767e-05 7.7614692e-05]  taking action:  0
Leaf selection - depth:  9
Leaf selection - action scores:  [1.5958378e-01 8.0197565e-02 5.4003545e-03 4.7326791e-03 6.0502073e-04
 4.3679195e-04 4.1501605e-04 1.6027906e-04 1.4670042e-04 1.4602039e-04]  taking action:  0
Leaf selection - depth:  10
Leaf selection - action scores:  [0.16594337 0.00928779 0.00737752 0.00160538 0.00080645 0.0004884
 0.00038379 0.00033284 0.00028679 0.00026641]  taking action:  0
Leaf selection - depth:  11
Leaf selection - action scores:  [1.6807443e-01 1.5382454e-01 1.1020834e-03 6.7834737e-04 5.1464787e-04
 1.9731547e-04 8.0140999e-05 6.9469053e-05 6.3446591e-05 4.1258398e-05]  taking action:  0
Leaf selection - depth:  12
Leaf selection - action scores:  [0.16690151 0.04414532 0.00484569 0.00336549 0.00129093 0.00070648
 0.00050325 0.00023684 0.00022203 0.00020448]  taking action:  0
Leaf selection - depth:  13
Leaf selection - action scores:  [1.7347494e-01 9.6616754e-03 3.8302690e-03 1.5247271e-03 6.7476352e-04
 6.1586685e-04 3.8574674e-04 3.5629229e-04 2.8000501e-04 1.3404686e-04]  taking action:  0
Leaf selection - depth:  14
Leaf selection - action scores:  [1.76834986e-01 7.17200488e-02 4.72498301e-04 1.66504047e-04
 1.02587976e-04 7.97750035e-05 7.13300396e-05 5.11018879e-05
 4.10389694e-05 2.80151962e-05]  taking action:  0
Leaf selection - depth:  15
Leaf selection - action scores:  [1.8470562e-01 1.4401603e-02 1.4846344e-03 1.1825433e-03 6.5954676e-04
 1.9381969e-04 7.9429432e-05 7.3081763e-05 6.3875457e-05 5.0688726e-05]  taking action:  0
Leaf selection - depth:  16
Leaf selection - action scores:  [1.9140995e-01 3.7156092e-03 9.2747452e-04 3.0594430e-04 2.3722669e-04
 2.1498464e-04 1.9768025e-04 1.2658269e-04 1.1358231e-04 7.0891700e-05]  taking action:  0
Leaf selection - depth:  17
Leaf selection - action scores:  [1.9792159e-01 6.9388077e-03 3.7881226e-04 3.7044389e-04 3.0010217e-04
 5.3867374e-05 4.8905185e-05 4.7905880e-05 3.8151964e-05 3.3636639e-05]  taking action:  0
Leaf selection - depth:  18
Leaf selection - action scores:  [2.0474476e-01 1.1184092e-02 7.6616724e-04 6.9833273e-04 3.3068290e-04
 1.2028188e-04 5.9453512e-05 3.9670504e-05 3.9367489e-05 3.5923356e-05]  taking action:  0
Leaf selection - depth:  19
Leaf selection - action scores:  [2.12800458e-01 2.99050240e-03 1.45286322e-04 1.33560447e-04
 1.21291276e-04 8.22402653e-05 7.67072634e-05 7.52680935e-05
 6.87756765e-05 6.68040157e-05]  taking action:  0
Leaf selection - depth:  20
Leaf selection - action scores:  [2.1925734e-01 3.8290370e-02 2.4774778e-04 1.0548164e-04 2.6110229e-05
 1.9390453e-05 1.1108017e-05 1.0788378e-05 6.4856790e-06 4.8803572e-06]  taking action:  0
Leaf selection - depth:  21
Leaf selection - action scores:  [2.29557469e-01 7.89995864e-03 6.46146946e-04 5.07054385e-04
 2.65873008e-04 1.21657766e-04 3.08915987e-05 2.59901244e-05
 2.51169913e-05 2.33950050e-05]  taking action:  0
Leaf selection - depth:  22
Leaf selection - action scores:  [2.3958555e-01 8.0949394e-04 5.6356355e-04 5.1148486e-04 4.5330956e-04
 6.2428611e-05 4.4839227e-05 3.6289202e-05 3.6038680e-05 3.5276167e-05]  taking action:  0
Leaf selection - depth:  23
Leaf selection - action scores:  [2.5544345e-01 1.4043644e-01 7.3360658e-04 3.1299912e-04 1.7353639e-04
 9.6249896e-05 8.4773201e-05 7.9881684e-05 2.7738004e-05 2.7222472e-05]  taking action:  0
Leaf selection - depth:  24
Leaf selection - action scores:  [2.8123417e-01 6.9992416e-02 2.8645607e-02 2.6505878e-03 1.8831800e-03
 7.1161310e-04 4.1683836e-04 3.2367944e-04 2.0772578e-04 1.7187995e-04]  taking action:  0
Leaf selection - depth:  25
Leaf selection - action scores:  [3.0390644e-01 6.0923165e-03 4.5528146e-03 7.8481209e-04 1.8330650e-04
 1.3752926e-04 1.0237085e-04 8.1461003e-05 7.2872579e-05 7.1899507e-05]  taking action:  0
Leaf selection - depth:  26
Leaf selection - action scores:  [3.1143928e-01 2.7576405e-01 2.7549497e-03 1.2847531e-03 5.1820080e-04
 1.5154319e-04 9.3717390e-05 4.7289912e-05 3.9303395e-05 3.3020227e-05]  taking action:  0
Leaf selection - depth:  27
Leaf selection - action scores:  [4.6725172e-01 1.6755212e-02 1.0600406e-02 1.5411787e-03 1.1434035e-03
 3.0540625e-04 2.1179742e-04 1.4840202e-04 1.1480052e-04 8.3546322e-05]  taking action:  0
Leaf selection - depth:  28
Leaf selection - action scores:  [5.2357697e-01 6.6836509e-03 8.1529748e-04 3.4507125e-04 3.4059340e-04
 1.5481834e-04 1.4486694e-04 1.4231121e-04 1.0191418e-04 8.1000537e-05]  taking action:  0
Leaf selection - depth:  29
Leaf selection - action scores:  [4.9047935e-01 5.2620518e-01 7.7035418e-04 3.0263403e-04 1.3530295e-04
 9.3889073e-05 6.5232845e-05 6.1033759e-05 6.0911887e-05 8.7364433e-06]  taking action:  1
Adding child.
Leaf selection - depth:  30
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  198
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7,c8,c9;
  wire [31:0] in1_1, in1_2, in2_1, in2_2;
  wire [31:0] sum_1, sum_2;
  adder_8 A1(sum_1[7:0], c1, in1[7:0], in2[7:0], cin);
  adder_8 A2(sum_1[15:8], c2, in1[15:8], in2[15:8], c1);
  adder_8 A3(sum_1[23:16], c3, in1[23:16], in2[23:16], c2);
  adder_8 A4(sum_1[31:24], c4, in1[31:24], in2[31:24], c3);
  adder_8 A5(sum_2[7:0], c5, in1_1[7:0], in2_1[7:0], c4);
  adder_8 A6(sum_2[15:8], c6, in1_1[15:8], in2_1[15:8], c5);
  adder_8 A7(sum_2[23:16], c7, in1_1[23:16], in2_1[23:16], c6);
  adder_8 A8(sum_2[31:24], c8, in1_1[31:24], in2_1[31:24], c7);
  adder_8 A9(sum_3[7:0], c9, in1_2[7:0], in2_2[7:0], c8);
  adder_8 A10(sum_3[15:8], cout, in1_2[15:8], in2_2[15:8], c9);
  adder_8 A11(sum_3[23:16], cout, in1_2[23:16], in2_2[23:16], c9);
  adder_8 A12(sum_3[31:24], cout, in1_2[31:24], in2_2[31:24], c9);
  adder_4 A13(sum_4, cout, in1_1[7:0], in2_1[7:0], in1_2[7:0], in2_2[7:0]);
  adder_4 A14(sum_5, cout, in1_1[15:8], in2_1[15:8], in1_2[15:8], in2_2[15:8]);
  adder_4 A15(sum_6, cout, in1_1[23:16], in2_1[23:16], in1_2[23:16], in2_2[23:16]);
  adder_4 A16(sum_7, cout, in1_1[31:24], in2_1[31:24], in1_2[31:24], in2_2[31:24]);
  adder_4 A17(sum_8, cout, sum_1[7:0], sum_2[7:0], sum_3[7:0], sum_4[7:0]);
  adder_4 A18(sum_9, cout, sum_1[15:8], sum_2[15:8], sum_3[15:8], sum_4[15:8]);
  adder_4 A19(sum_10, cout, sum_1[23:16], sum_2[23:16], sum_3[23:16], sum_4[23:16]);
  adder_4 A20(sum_11, cout, sum_1[31:24], sum_2[31:24], sum_3[31:24], sum_4[31:24]);
  adder_4 A21(sum_12, cout, sum_2[7:0], sum_3[7:0], sum_4[7:0], sum_5[7:0]);
  adder_4 A22(sum_13, cout, sum_2[15:8], sum_3[15:8], sum_4[15
Path:  output_files/2329780_adder_32/2329780_simulation
Verilog compilation failed, error:  2
Compilation output:  b'output_files/2329780_adder_32/2329780_adder_32.v:60: syntax error\nI give up.\n'
Tokens:  969
LLM generates return in:  592.205251  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  196.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.00201554 -0.03476915 -0.03264629  0.0071891   0.00284534  0.0024807
 -0.0147942   0.00136909  0.00121857  0.00105385]  taking action:  3
Adding child.
Leaf selection - depth:  1
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  198
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);  
  wire [31:0] c;
  adder_8 a1(sum[7:0], c[0], in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c[1], in1[15:8], in2[15:8], c[0]);
  adder_8 a3(sum[23:16], c[2], in1[23:16], in2[23:16], c[1]);
  adder_8 a4(sum[31:24], cout, in1[31:24], in2[31:24], c[2]);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  153
LLM generates return in:  54.210079  seconds
Running getPromptScore: 
adder_32
output_files/2329780_adder_32/synth_script.sh
Running bash in x seconds:  0.916786

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.1
Backpropogation: incorporating estimates.
Current runs:  197.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.00231606 -0.03462492 -0.03264455  0.05360366  0.00285255  0.00248699
 -0.0145923   0.00137256  0.00122166  0.00105652]  taking action:  3
Leaf selection - depth:  1
Leaf selection - action scores:  [1.7797035e+00 5.6258406e-02 1.2091264e-03 1.5812322e-04 6.6568013e-05
 6.4966953e-05 5.5143468e-05 5.2117655e-05 3.1324063e-05 3.0778490e-05]  taking action:  0
Adding child.
Leaf selection - depth:  2
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  50286
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);  
  wire [31:0] c;
  adder_8 a1(sum[7:0], c[0], in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c[1], in1[15:8], in2[15:8], c[0]);
  adder_8 a3(sum[23:16], c[2], in1[23:16], in2[23:16], c[1]);
  adder_8 a4(sum[31:24], cout, in1[31:24], in2[31:24], c[2]);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  152
LLM generates return in:  53.890208  seconds
Running getPromptScore: 
adder_32
output_files/2329780_adder_32/synth_script.sh
Running bash in x seconds:  0.904879

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.1
Backpropogation: incorporating estimates.
Current runs:  198.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.00261583 -0.03448106 -0.03264281  0.06907517  0.00285974  0.00249326
 -0.01439091  0.00137603  0.00122474  0.00105918]  taking action:  3
Leaf selection - depth:  1
Leaf selection - action scores:  [1.1398413e+00 6.8902194e-02 1.4808715e-03 1.9366060e-04 8.1528837e-05
 7.9567944e-05 6.7536683e-05 6.3830834e-05 3.8363985e-05 3.7695798e-05]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [1.8515441e+00 1.9108415e-02 1.3965622e-02 1.2728559e-02 9.8112840e-03
 6.2844343e-03 2.8930723e-03 2.1743458e-03 1.9514814e-03 1.1533599e-03]  taking action:  0
Adding child.
Leaf selection - depth:  3
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  21809
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);  
  wire [31:0] c;
  adder_8 a1(sum[7:0], c[0], in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c[1], in1[15:8], in2[15:8], c[0]);
  adder_8 a3(sum[23:16], c[2], in1[23:16], in2[23:16], c[1]);
  adder_8 a4(sum[31:24], cout, in1[31:24], in2[31:24], c[2]);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  151
LLM generates return in:  53.597097  seconds
Running getPromptScore: 
adder_32
output_files/2329780_adder_32/synth_script.sh
Running bash in x seconds:  0.912655

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.1
Backpropogation: incorporating estimates.
Current runs:  199.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.00291484 -0.03433755 -0.03264108  0.07681091  0.00286692  0.00249952
 -0.01419002  0.00137948  0.00122781  0.00106184]  taking action:  3
Leaf selection - depth:  1
Leaf selection - action scores:  [9.0562689e-01 7.9561397e-02 1.7099630e-03 2.2361999e-04 9.4141389e-05
 9.1877140e-05 7.7984638e-05 7.3705494e-05 4.4298915e-05 4.3527358e-05]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [1.1838346  0.02340293 0.01710432 0.01558924 0.01201632 0.00769683
 0.00354328 0.00266302 0.00239007 0.00141257]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [1.6633035  0.16054448 0.0441962  0.02396452 0.00531532 0.00531268
 0.00260084 0.00198031 0.00182582 0.00173061]  taking action:  0
Adding child.
Leaf selection - depth:  4
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  685
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);  
  wire [31:0] c;
  adder_8 a1(sum[7:0], c[0], in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c[1], in1[15:8], in2[15:8], c[0]);
  adder_8 a3(sum[23:16], c[2], in1[23:16], in2[23:16], c[1]);
  adder_8 a4(sum[31:24], cout, in1[31:24], in2[31:24], c[2]);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  150
LLM generates return in:  53.286682  seconds
Running getPromptScore: 
adder_32
output_files/2329780_adder_32/synth_script.sh
Running bash in x seconds:  0.904691

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.1
Backpropogation: incorporating estimates.
Current runs:  200.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.00321311 -0.03419441 -0.03263935  0.08145234  0.00287408  0.00250576
 -0.01398964  0.00138292  0.00123088  0.00106449]  taking action:  3
Leaf selection - depth:  1
Leaf selection - action scores:  [7.78489530e-01 8.89523476e-02 1.91179663e-03 2.50014738e-04
 1.05253268e-04 1.02721766e-04 8.71894736e-05 8.24052477e-05
 4.95276909e-05 4.86650642e-05]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.93949294 0.02702338 0.01975037 0.0180009  0.01387525 0.00888753
 0.00409142 0.00307499 0.00275981 0.0016311 ]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [1.0685612  0.19662605 0.05412908 0.02935043 0.00650991 0.00650668
 0.00318536 0.00242538 0.00223616 0.00211955]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.95921445 0.89084166 0.04482285 0.02524252 0.00384096 0.0024796
 0.00213387 0.00159717 0.00154631 0.00130248]  taking action:  0
Adding child.
Leaf selection - depth:  5
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  3132
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);  
  wire [31:0] c;
  adder_8 a1(sum[7:0], c[0], in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c[1], in1[15:8], in2[15:8], c[0]);
  adder_8 a3(sum[23:16], c[2], in1[23:16], in2[23:16], c[1]);
  adder_8 a4(sum[31:24], cout, in1[31:24], in2[31:24], c[2]);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  149
LLM generates return in:  52.987992  seconds
Running getPromptScore: 
adder_32
output_files/2329780_adder_32/synth_script.sh
Running bash in x seconds:  0.912383

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.1
Backpropogation: incorporating estimates.
Current runs:  201.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.00351064 -0.03405162 -0.03263763  0.08454663  0.00288122  0.00251198
 -0.01378975  0.00138636  0.00123394  0.00106714]  taking action:  3
Leaf selection - depth:  1
Leaf selection - action scores:  [6.96507335e-01 9.74424109e-02 2.09426833e-03 2.73877435e-04
 1.15299175e-04 1.12526053e-04 9.55112846e-05 9.02704196e-05
 5.42548660e-05 5.33099083e-05]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.80688703 0.03021305 0.02208159 0.02012562 0.015513   0.00993656
 0.00457435 0.00343794 0.00308556 0.00182362]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.85075545 0.2270442  0.06250287 0.03389095 0.007517   0.00751327
 0.00367814 0.00280058 0.0025821  0.00244745]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.6373965  1.0910538  0.05489656 0.03091565 0.00470419 0.00303688
 0.00261345 0.00195613 0.00189383 0.00159521]  taking action:  1
Adding child.
Leaf selection - depth:  5
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  16
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);  
  wire c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42,c43,c44,c45,c46,c47,c48,c49,c50,c51,c52,c53,c54,c55,c56,c57,c58,c59,c60,c61,c62,c63;
  adder_8 a1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
  adder_8 a3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
  adder_8 a4(sum[31:24], c4, in1[31:24], in2[31:24], c3);
  adder_8 a5(sum[39:32], c5, in1[39:32], in2[39:32], c4);
  adder_8 a6(sum[47:40], c6, in1[47:40], in2[47:40], c5);
  adder_8 a7(sum[55:48], c7, in1[55:48], in2[55:48], c6);
  adder_8 a8(sum[63:56], cout, in1[63:56], in2[63:56], c7);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 failed\n'
Tokens:  461
LLM generates return in:  202.51863  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  202.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.00380743 -0.03390919 -0.03263591  0.05818539  0.00288834  0.00251819
 -0.01359035  0.00138979  0.00123699  0.00106977]  taking action:  3
Leaf selection - depth:  1
Leaf selection - action scores:  [6.04920089e-01 1.05249844e-01 2.26206845e-03 2.95821461e-04
 1.24537357e-04 1.21542034e-04 1.03163984e-04 9.75032017e-05
 5.86019560e-05 5.75812846e-05]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.6813937  0.03309674 0.02418916 0.02204651 0.01699364 0.01088496
 0.00501095 0.00376608 0.00338006 0.00199768]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.68247837 0.25384313 0.06988033 0.03789124 0.00840426 0.00840009
 0.00411228 0.00313115 0.00288687 0.00273633]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.728267   0.5799202  0.06338909 0.03569832 0.00543193 0.00350669
 0.00301775 0.00225874 0.00218681 0.00184198]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [1.377418   0.21620688 0.13392775 0.12163226 0.03179194 0.00893776
 0.00659602 0.006372   0.0061834  0.00399636]  taking action:  0
Adding child.
Leaf selection - depth:  6
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  25
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);  
  wire [31:0] c;
  adder_8 a1(sum[7:0], c[0], in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c[1], in1[15:8], in2[15:8], c[0]);
  adder_8 a3(sum[23:16], c[2], in1[23:16], in2[23:16], c[1]);
  adder_8 a4(sum[31:24], cout, in1[31:24], in2[31:24], c[2]);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  148
LLM generates return in:  52.691137  seconds
Running getPromptScore: 
adder_32
output_files/2329780_adder_32/synth_script.sh
Running bash in x seconds:  0.894705

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.1
Backpropogation: incorporating estimates.
Current runs:  203.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.00410349 -0.0337671  -0.03263419  0.06341446  0.00289545  0.00252439
 -0.01339145  0.00139321  0.00124003  0.00107241]  taking action:  3
Leaf selection - depth:  1
Leaf selection - action scores:  [5.65629542e-01 1.12516813e-01 2.41825287e-03 3.16246442e-04
 1.33136025e-04 1.29933906e-04 1.10286936e-04 1.04235311e-04
 6.26481269e-05 6.15569807e-05]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.62732035 0.03574857 0.02612729 0.02381295 0.01835523 0.0117571
 0.00541244 0.00406783 0.00365089 0.00215774]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.61618525 0.2780712  0.07655007 0.04150777 0.0092064  0.00920184
 0.00450478 0.00343    0.00316241 0.0029975 ]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.57221705 0.65427214 0.07087115 0.03991193 0.00607308 0.0039206
 0.00337395 0.00252535 0.00244493 0.0020594 ]  taking action:  1
Leaf selection - depth:  5
Leaf selection - action scores:  [1.8081967  0.03544246 0.03336886 0.021549   0.01237719 0.00449315
 0.00440592 0.00388249 0.00256253 0.0025598 ]  taking action:  0
Adding child.
Leaf selection - depth:  6
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  11
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);  
  wire c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42,c43,c44,c45,c46,c47,c48,c49,c50,c51,c52,c53,c54,c55,c56,c57,c58,c59,c60,c61,c62,c63;
  adder_8 a1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
  adder_8 a3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
  adder_8 a4(sum[31:24], c4, in1[31:24], in2[31:24], c3);
  adder_8 a5(sum[39:32], c5, in1[39:32], in2[39:32], c4);
  adder_8 a6(sum[47:40], c6, in1[47:40], in2[47:40], c5);
  adder_8 a7(sum[55:48], c7, in1[55:48], in2[55:48], c6);
  adder_8 a8(sum[63:56], cout, in1[63:56], in2[63:56], c7);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 failed\n'
Tokens:  460
LLM generates return in:  202.106298  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  204.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.00439883 -0.03362536 -0.03263248  0.04525929  0.00290253  0.00253057
 -0.01319303  0.00139662  0.00124307  0.00107503]  taking action:  3
Leaf selection - depth:  1
Leaf selection - action scores:  [5.09415150e-01 1.19342096e-01 2.56494433e-03 3.35429999e-04
 1.41212076e-04 1.37815703e-04 1.16976960e-04 1.10558234e-04
 6.64483669e-05 6.52910312e-05]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.55758405 0.03821683 0.02793124 0.02545712 0.01962257 0.01256887
 0.00578614 0.00434869 0.00390296 0.00230672]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.5352927  0.30035123 0.08268353 0.04483352 0.00994405 0.00993912
 0.00486572 0.00370482 0.00341579 0.00323767]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.62046933 0.44766098 0.07763546 0.04372133 0.00665273 0.0042948
 0.00369597 0.00276638 0.00267828 0.00225596]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [0.8934929  0.26479825 0.16402733 0.14896849 0.03893702 0.01094647
 0.00807844 0.00780407 0.00757309 0.00489452]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [1.9507768e+00 7.8830717e-04 1.7145834e-05 4.8806842e-06 4.8093443e-06
 3.4224561e-06 3.2027363e-06 2.7410556e-06 2.1959395e-06 1.8703287e-06]  taking action:  0
Adding child.
Leaf selection - depth:  7
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  15
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);  
  wire [31:0] c;
  adder_8 a1(sum[7:0], c[0], in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c[1], in1[15:8], in2[15:8], c[0]);
  adder_8 a3(sum[23:16], c[2], in1[23:16], in2[23:16], c[1]);
  adder_8 a4(sum[31:24], cout, in1[31:24], in2[31:24], c[2]);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  147
LLM generates return in:  52.335548  seconds
Running getPromptScore: 
adder_32
output_files/2329780_adder_32/synth_script.sh
Running bash in x seconds:  0.892903

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.1
Backpropogation: incorporating estimates.
Current runs:  205.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.00469344 -0.03348397 -0.03263077  0.05073515  0.00290961  0.00253673
 -0.0129951   0.00140002  0.0012461   0.00107765]  taking action:  3
Leaf selection - depth:  1
Leaf selection - action scores:  [4.8661533e-01 1.2579761e-01 2.7036888e-03 3.5357426e-04 1.4885059e-04
 1.4527052e-04 1.2330455e-04 1.1653861e-04 7.0042734e-05 6.8822796e-05]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.5284648  0.04053507 0.02962556 0.02700135 0.02081288 0.0133313
 0.00613713 0.00461248 0.00413972 0.00244665]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.503801   0.32108897 0.08839241 0.04792904 0.01063064 0.01062537
 0.00520167 0.00396062 0.00365163 0.00346122]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.52363145 0.48887074 0.08385588 0.04722444 0.00718577 0.00463892
 0.00399211 0.00298803 0.00289288 0.00243672]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [0.71598774 0.30576268 0.18940243 0.17201398 0.0449606  0.0126399
 0.00932818 0.00901137 0.00874465 0.0056517 ]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [1.2446020e+00 9.6547516e-04 2.0999272e-05 5.9775934e-06 5.8902197e-06
 4.1916355e-06 3.9225351e-06 3.3570939e-06 2.6894656e-06 2.2906756e-06]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [1.9497753e+00 1.0565000e-03 4.7337281e-04 8.9314039e-05 5.0926894e-05
 3.9103645e-05 2.7532589e-05 1.6509213e-05 1.1786907e-05 9.4156430e-06]  taking action:  0
Adding child.
Leaf selection - depth:  8
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  60
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);  
  wire [31:0] c;
  adder_8 a1(sum[7:0], c[0], in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c[1], in1[15:8], in2[15:8], c[0]);
  adder_8 a3(sum[23:16], c[2], in1[23:16], in2[23:16], c[1]);
  adder_8 a4(sum[31:24], cout, in1[31:24], in2[31:24], c[2]);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  146
LLM generates return in:  51.99199  seconds
Running getPromptScore: 
adder_32
output_files/2329780_adder_32/synth_script.sh
Running bash in x seconds:  0.903848

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.1
Backpropogation: incorporating estimates.
Current runs:  206.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.00498735 -0.03334292 -0.03262907  0.0552154   0.00291666  0.00254288
 -0.01279765  0.00140341  0.00124912  0.00108026]  taking action:  3
Leaf selection - depth:  1
Leaf selection - action scores:  [4.6737748e-01 1.3193767e-01 2.8356530e-03 3.7083184e-04 1.5611584e-04
 1.5236101e-04 1.2932290e-04 1.2222675e-04 7.3461444e-05 7.2181960e-05]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.5044643  0.04272771 0.03122808 0.02846192 0.0219387  0.01405242
 0.00646911 0.00486198 0.00436364 0.00257899]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.47854993 0.34056628 0.0937543  0.05083643 0.01127549 0.0112699
 0.00551721 0.00420087 0.00387314 0.00367118]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.46368575 0.52722776 0.08964571 0.05048505 0.00768191 0.00495921
 0.00426774 0.00319434 0.00309262 0.00260496]  taking action:  1
Leaf selection - depth:  5
Leaf selection - action scores:  [1.0572898  0.04340797 0.04086834 0.02639202 0.0151589  0.00550296
 0.00539613 0.00475506 0.00313845 0.0031351 ]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [1.9080857e+00 3.7303779e-02 2.5426056e-03 7.4841123e-04 7.2898564e-04
 5.1292509e-04 3.1635130e-04 2.0220665e-04 8.4862695e-05 7.2037968e-05]  taking action:  0
Adding child.
Leaf selection - depth:  7
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  66
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);  
  wire c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42,c43,c44,c45,c46,c47,c48,c49,c50,c51,c52,c53,c54,c55,c56,c57,c58,c59,c60,c61,c62,c63;
  adder_8 a1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
  adder_8 a3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
  adder_8 a4(sum[31:24], c4, in1[31:24], in2[31:24], c3);
  adder_8 a5(sum[39:32], c5, in1[39:32], in2[39:32], c4);
  adder_8 a6(sum[47:40], c6, in1[47:40], in2[47:40], c5);
  adder_8 a7(sum[55:48], c7, in1[55:48], in2[55:48], c6);
  adder_8 a8(sum[63:56], cout, in1[63:56], in2[63:56], c7);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 failed\n'
Tokens:  459
LLM generates return in:  201.856153  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  207.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.00528054 -0.03320221 -0.03262737  0.04228226  0.0029237   0.00254902
 -0.01260067  0.0014068   0.00125213  0.00108287]  taking action:  3
Leaf selection - depth:  1
Leaf selection - action scores:  [4.3266958e-01 1.3780439e-01 2.9617429e-03 3.8732120e-04 1.6305767e-04
 1.5913589e-04 1.3507337e-04 1.2766167e-04 7.6727971e-05 7.5391596e-05]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.46422562 0.0448132  0.03275229 0.02985112 0.0230095  0.01473831
 0.00678486 0.00509929 0.00457663 0.00270487]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.4354733  0.35898837 0.09882572 0.0535863  0.01188541 0.01187952
 0.00581565 0.00442811 0.00408265 0.00386976]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.48696017 0.39744014 0.09508363 0.05354748 0.0081479  0.00526004
 0.00452662 0.00338811 0.00328021 0.00276298]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [0.61947227 0.34185308 0.21175836 0.19231749 0.05026748 0.01413183
 0.01042923 0.01007502 0.00977682 0.0063188 ]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [9.8627168e-01 1.1148347e-03 2.4247871e-05 6.9023299e-06 6.8014397e-06
 4.8400839e-06 4.5293532e-06 3.8764379e-06 3.1055272e-06 2.6450441e-06]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [1.24398863e+00 1.29394303e-03 5.79760934e-04 1.09386914e-04
 6.23724554e-05 4.78919901e-05 3.37203965e-05 2.02195752e-05
 1.44359537e-05 1.15317607e-05]  taking action:  0
Leaf selection - depth:  8
Leaf selection - action scores:  [1.9339767e+00 1.6571531e-02 5.6437281e-04 2.9682444e-04 7.3307936e-05
 2.6768823e-05 2.2905324e-05 1.7228353e-05 1.2827958e-05 8.7240132e-06]  taking action:  0
Adding child.
Leaf selection - depth:  9
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  269
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);  
  wire [31:0] c;
  adder_8 a1(sum[7:0], c[0], in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c[1], in1[15:8], in2[15:8], c[0]);
  adder_8 a3(sum[23:16], c[2], in1[23:16], in2[23:16], c[1]);
  adder_8 a4(sum[31:24], cout, in1[31:24], in2[31:24], c[2]);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  145
LLM generates return in:  51.723091  seconds
Running getPromptScore: 
adder_32
output_files/2329780_adder_32/synth_script.sh
Running bash in x seconds:  0.900158

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.1
Backpropogation: incorporating estimates.
Current runs:  208.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.00557303 -0.03306184 -0.03262567  0.04672345  0.00293072  0.00255514
 -0.01240417  0.00141018  0.00125514  0.00108547]  taking action:  3
Leaf selection - depth:  1
Leaf selection - action scores:  [4.1978097e-01 1.4343135e-01 3.0826796e-03 4.0313668e-04 1.6971580e-04
 1.6563387e-04 1.4058882e-04 1.3287447e-04 7.9861005e-05 7.8470061e-05]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.4486671  0.04680587 0.03420865 0.03117848 0.02403264 0.01539366
 0.00708655 0.00532604 0.00478013 0.00282514]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.42007926 0.37651023 0.10364929 0.05620179 0.01246553 0.01245935
 0.0060995  0.00464424 0.00428192 0.00405864]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.44081146 0.42299563 0.10022695 0.056444   0.00858864 0.00554456
 0.00477148 0.00357138 0.00345765 0.00291243]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [0.55715156 0.3744813  0.23196965 0.21067324 0.05506526 0.01548065
 0.01142464 0.01103663 0.01070997 0.00692189]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [8.4611219e-01 1.2464230e-03 2.7109943e-05 7.7170389e-06 7.6042406e-06
 5.4113780e-06 5.0639705e-06 4.3339892e-06 3.4720849e-06 2.9572493e-06]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [9.8579955e-01 1.4941166e-03 6.6945027e-04 1.2630913e-04 7.2021503e-05
 5.5300905e-05 3.8936960e-05 2.3347553e-05 1.6669203e-05 1.3315729e-05]  taking action:  0
Leaf selection - depth:  8
Leaf selection - action scores:  [1.2343140e+00 2.0295899e-02 6.9121271e-04 3.6353420e-04 8.9783520e-05
 3.2784978e-05 2.8053180e-05 2.1100337e-05 1.5710975e-05 1.0684691e-05]  taking action:  0
Leaf selection - depth:  9
Leaf selection - action scores:  [0.3820659  0.31043792 0.26719648 0.19332486 0.11438445 0.11380427
 0.05968228 0.05373549 0.03543925 0.03260355]  taking action:  0
Adding child.
Leaf selection - depth:  10
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  26
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);  
  wire [31:0] c;
  adder_8 a1(sum[7:0], c[0], in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c[1], in1[15:8], in2[15:8], c[0]);
  adder_8 a3(sum[23:16], c[2], in1[23:16], in2[23:16], c[1]);
  adder_8 a4(sum[31:24], cout, in1[31:24], in2[31:24], c[2]);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  144
LLM generates return in:  51.380182  seconds
Running getPromptScore: 
adder_32
output_files/2329780_adder_32/synth_script.sh
Running bash in x seconds:  0.897714

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.1
Backpropogation: incorporating estimates.
Current runs:  209.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.00586482 -0.03292181 -0.03262398  0.05053018  0.00293772  0.00256124
 -0.01220813  0.00141355  0.00125814  0.00108806]  taking action:  3
Leaf selection - depth:  1
Leaf selection - action scores:  [4.0835789e-01 1.4884575e-01 3.1990476e-03 4.1835470e-04 1.7612240e-04
 1.7188638e-04 1.4589590e-04 1.3789034e-04 8.2875675e-05 8.1432227e-05]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.43504417 0.04871709 0.03560549 0.03245158 0.02501396 0.01602223
 0.00737592 0.00554352 0.00497532 0.0029405 ]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.40674955 0.3932521  0.10825815 0.05870085 0.01301982 0.01301337
 0.00637072 0.00485075 0.00447232 0.00423911]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.4070796  0.44730228 0.10511892 0.05919897 0.00900784 0.00581519
 0.00500437 0.0037457  0.00362641 0.00305459]  taking action:  1
Leaf selection - depth:  5
Leaf selection - action scores:  [0.7857255  0.05012321 0.04719069 0.03047488 0.01750399 0.00635427
 0.00623092 0.00549067 0.00362397 0.0036201 ]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [1.11845911e+00 4.56876121e-02 3.11404304e-03 9.16612800e-04
 8.92821408e-04 6.28202339e-04 3.87449632e-04 2.47651566e-04
 1.03935155e-04 8.82281311e-05]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [1.48331904e+00 4.34890151e-01 2.90767588e-02 1.79361564e-03
 2.83233181e-04 1.75917157e-04 1.08309156e-04 8.90199735e-05
 7.84089643e-05 7.33169582e-05]  taking action:  0
Adding child.
Leaf selection - depth:  8
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  17
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);  
  wire c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42,c43,c44,c45,c46,c47,c48,c49,c50,c51,c52,c53,c54,c55,c56,c57,c58,c59,c60,c61,c62,c63;
  adder_8 a1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
  adder_8 a3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
  adder_8 a4(sum[31:24], c4, in1[31:24], in2[31:24], c3);
  adder_8 a5(sum[39:32], c5, in1[39:32], in2[39:32], c4);
  adder_8 a6(sum[47:40], c6, in1[47:40], in2[47:40], c5);
  adder_8 a7(sum[55:48], c7, in1[55:48], in2[55:48], c6);
  adder_8 a8(sum[63:56], cout, in1[63:56], in2[63:56], c7);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 failed\n'
Tokens:  458
LLM generates return in:  201.548465  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  210.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.00615592 -0.0327821  -0.0326223   0.04049601  0.0029447   0.00256733
 -0.01201256  0.00141691  0.00126113  0.00109065]  taking action:  3
Leaf selection - depth:  1
Leaf selection - action scores:  [3.8385135e-01 1.5406999e-01 3.3113291e-03 4.3303828e-04 1.8230401e-04
 1.7791933e-04 1.5101660e-04 1.4273007e-04 8.5784479e-05 8.4290368e-05]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.40759423 0.05055611 0.03694956 0.0336766  0.02595822 0.01662705
 0.00765435 0.00575278 0.00516313 0.0030515 ]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.37838405 0.40930974 0.11267865 0.06109779 0.01355146 0.01354474
 0.00663086 0.00504882 0.00465494 0.0044122 ]  taking action:  1
Adding child.
Leaf selection - depth:  4
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  62
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);  
  adder_8 a1(sum[7:0], cout, in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], cout, in1[15:8], in2[15:8], cout);
  adder_8 a3(sum[23:16], cout, in1[23:16], in2[23:16], cout);
  adder_8 a4(sum[31:24], cout, in1[31:24], in2[31:24], cout);
  adder_8 a5(sum[39:32], cout, in1[39:32], in2[39:32], cout);
  adder_8 a6(sum[47:40], cout, in1[47:40], in2[47:40], cout);
  adder_8 a7(sum[55:48], cout, in1[55:48], in2[55:48], cout);
  adder_8 a8(sum[63:56], cout, in1[63:56], in2[63:56], cout);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 failed\n'
Tokens:  256
LLM generates return in:  98.235987  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  211.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.00644633 -0.03264273 -0.03262061  0.03171611  0.00295167  0.00257341
 -0.01181746  0.00142026  0.00126411  0.00109323]  taking action:  3
Leaf selection - depth:  1
Leaf selection - action scores:  [3.6225078e-01 1.5912279e-01 3.4199259e-03 4.4723999e-04 1.8828278e-04
 1.8375428e-04 1.5596928e-04 1.4741099e-04 8.8597830e-05 8.7054716e-05]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.38361877 0.05233055 0.03824643 0.0348586  0.02686931 0.01721063
 0.00792301 0.00595469 0.00534435 0.00315861]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.39172393 0.1623804  0.11693215 0.06340417 0.01406301 0.01405604
 0.00688117 0.00523941 0.00483066 0.00457876]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.42136943 0.35642153 0.10979313 0.0618313  0.00940838 0.00607377
 0.00522689 0.00391225 0.00378767 0.00319041]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [0.5128189  0.40448603 0.25055587 0.22755313 0.05947728 0.01672101
 0.01234003 0.01192092 0.01156809 0.0074765 ]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [7.5576890e-01 1.3653880e-03 2.9697454e-05 8.4535932e-06 8.3300283e-06
 5.9278677e-06 5.5473020e-06 4.7476474e-06 3.8034784e-06 3.2395042e-06]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [8.4571630e-01 1.6704731e-03 7.4846810e-04 1.4121790e-04 8.0522484e-05
 6.1828287e-05 4.3532844e-05 2.6103357e-05 1.8636736e-05 1.4887438e-05]  taking action:  0
Leaf selection - depth:  8
Leaf selection - action scores:  [9.78351951e-01 2.34356839e-02 7.98143679e-04 4.19773132e-04
 1.03673076e-04 3.78568329e-05 3.23930217e-05 2.43645700e-05
 1.81414707e-05 1.23376176e-05]  taking action:  0
Leaf selection - depth:  9
Leaf selection - action scores:  [0.28396663 0.38020724 0.32724753 0.23677364 0.14009178 0.1393812
 0.07309557 0.06581227 0.04340404 0.03993103]  taking action:  1
Adding child.
Leaf selection - depth:  10
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  26
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);  
  wire [31:0] carry;
  adder_8 A1(sum[7:0], carry[0], in1[7:0], in2[7:0], cin);
  adder_8 A2(sum[15:8], carry[1], in1[15:8], in2[15:8], carry[0]);
  adder_8 A3(sum[23:16], carry[2], in1[23:16], in2[23:16], carry[1]);
  adder_8 A4(sum[31:24], carry[3], in1[31:24], in2[31:24], carry[2]);
  adder_8 A5(sum[39:32], carry[4], in1[39:32], in2[39:32], carry[3]);
  adder_8 A6(sum[47:40], carry[5], in1[47:40], in2[47:40], carry[4]);
  adder_8 A7(sum[55:48], carry[6], in1[55:48], in2[55:48], carry[5]);
  adder_8 A8(sum[63:56], cout, in1[63:56], in2[63:56], carry[6]);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 failed\n'
Tokens:  288
LLM generates return in:  114.082123  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  212.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.00673605 -0.03250369 -0.03261893  0.02396914  0.00295863  0.00257947
 -0.01162281  0.00142361  0.00126709  0.00109581]  taking action:  3
Leaf selection - depth:  1
Leaf selection - action scores:  [3.4304267e-01 1.6402003e-01 3.5251789e-03 4.6100441e-04 1.9407744e-04
 1.8940958e-04 1.6076946e-04 1.5194777e-04 9.1324553e-05 8.9733941e-05]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.36246383 0.05404676 0.03950074 0.0360018  0.0277505  0.01777506
 0.00818284 0.00614998 0.00551962 0.00326219]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.36578032 0.1698346  0.12103628 0.06562955 0.0145566  0.01454938
 0.00712269 0.00542331 0.00500021 0.00473947]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.36819082 0.3742419  0.1142763  0.06435606 0.00979255 0.00632178
 0.00544032 0.004072   0.00394233 0.00332068]  taking action:  1
Leaf selection - depth:  5
Leaf selection - action scores:  [0.6397525  0.05603945 0.05276079 0.03407195 0.01957005 0.00710429
 0.00696638 0.00613876 0.00405172 0.00404739]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [8.32813501e-01 5.27555123e-02 3.59578710e-03 1.05841330e-03
 1.03094138e-03 7.25385558e-04 4.47388273e-04 2.85963382e-04
 1.20013974e-04 1.01877064e-04]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [8.5834372e-01 5.3262949e-01 3.5611611e-02 2.1967215e-03 3.4688838e-04
 2.1545363e-04 1.3265108e-04 1.0902676e-04 9.6030977e-05 8.9794565e-05]  taking action:  0
Leaf selection - depth:  8
Leaf selection - action scores:  [1.94566584e+00 3.74423107e-03 1.59865874e-03 1.35288181e-04
 1.13087546e-04 9.32478142e-05 6.39392674e-05 3.89391498e-05
 2.24121122e-05 9.69397752e-06]  taking action:  0
Adding child.
Leaf selection - depth:  9
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  11
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);  
  wire c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42,c43,c44,c45,c46,c47,c48,c49,c50,c51,c52,c53,c54,c55,c56,c57,c58,c59,c60,c61,c62,c63;
  adder_8 a1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
  adder_8 a3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
  adder_8 a4(sum[31:24], c4, in1[31:24], in2[31:24], c3);
  adder_8 a5(sum[39:32], c5, in1[39:32], in2[39:32], c4);
  adder_8 a6(sum[47:40], c6, in1[47:40], in2[47:40], c5);
  adder_8 a7(sum[55:48], c7, in1[55:48], in2[55:48], c6);
  adder_8 a8(sum[63:56], cout, in1[63:56], in2[63:56], c7);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 failed\n'
Tokens:  457
LLM generates return in:  201.111373  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  213.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.0070251  -0.03236497 -0.03261726  0.01708294  0.00296556  0.00258552
 -0.01142862  0.00142694  0.00127006  0.00109838]  taking action:  3
Leaf selection - depth:  1
Leaf selection - action scores:  [3.2583001e-01 1.6877522e-01 3.6273792e-03 4.7436965e-04 1.9970404e-04
 1.9490084e-04 1.6543041e-04 1.5635297e-04 9.3972187e-05 9.2335467e-05]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.34363326 0.05571012 0.04071643 0.03710981 0.02860456 0.01832212
 0.00843468 0.00633925 0.0056895  0.00336259]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.34318092 0.1770442  0.12500574 0.0677819  0.01503399 0.01502654
 0.00735628 0.00560117 0.00516419 0.0048949 ]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.37973034 0.30949092 0.11859012 0.06678543 0.01016221 0.00656042
 0.00564569 0.00422572 0.00409115 0.00344604]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [0.45069087 0.43241376 0.2678555  0.24326453 0.06358389 0.01787551
 0.01319204 0.012744   0.0123668  0.00799272]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [6.5826154e-01 1.4747877e-03 3.2076918e-05 9.1309248e-06 8.9974592e-06
 6.4028291e-06 5.9917711e-06 5.1280454e-06 4.1082267e-06 3.4990646e-06]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [7.1542197e-01 1.8299116e-03 8.1990572e-04 1.5469645e-04 8.8207962e-05
 6.7729496e-05 4.7687841e-05 2.8594795e-05 2.0415520e-05 1.6308371e-05]  taking action:  0
Leaf selection - depth:  8
Leaf selection - action scores:  [7.8947133e-01 2.6201891e-02 8.9235173e-04 4.6932060e-04 1.1591002e-04
 4.2325224e-05 3.6216497e-05 2.7240418e-05 2.0282781e-05 1.3793876e-05]  taking action:  0
Leaf selection - depth:  9
Leaf selection - action scores:  [0.3201614  0.16951276 0.37787288 0.27340263 0.16176404 0.16094354
 0.08440349 0.07599346 0.05011866 0.04610838]  taking action:  2
Adding child.
Leaf selection - depth:  10
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  62
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);  
  wire [31:0] cout_temp;
  adder_8 A1(sum[7:0], cout_temp[0], in1[7:0], in2[7:0], cin);
  adder_8 A2(sum[15:8], cout_temp[1], in1[15:8], in2[15:8], cout_temp[0]);
  adder_8 A3(sum[23:16], cout_temp[2], in1[23:16], in2[23:16], cout_temp[1]);
  adder_8 A4(sum[31:24], cout_temp[3], in1[31:24], in2[31:24], cout_temp[2]);
  adder_8 A5(sum[39:32], cout_temp[4], in1[39:32], in2[39:32], cout_temp[3]);
  adder_8 A6(sum[47:40], cout_temp[5], in1[47:40], in2[47:40], cout_temp[4]);
  adder_8 A7(sum[55:48], cout_temp[6], in1[55:48], in2[55:48], cout_temp[5]);
  adder_8 A8(sum[63:56], cout_temp[7], in1[63:56], in2[63:56], cout_temp[6]);
  assign cout = cout_temp[7];
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 failed\n'
Tokens:  334
LLM generates return in:  136.242083  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  214.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.00731347 -0.03222658 -0.03261559  0.0109216   0.00297249  0.00259155
 -0.01123489  0.00143027  0.00127303  0.00110094]  taking action:  3
Leaf selection - depth:  1
Leaf selection - action scores:  [3.1030083e-01 1.7340006e-01 3.7267781e-03 4.8736850e-04 2.0517640e-04
 2.0024160e-04 1.6996359e-04 1.6063740e-04 9.6547250e-05 9.4865682e-05]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.32674307 0.05732524 0.04189686 0.03818568 0.02943385 0.0188533
 0.00867922 0.00652304 0.00585444 0.00346008]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.32328808 0.1840318  0.12885296 0.06986799 0.01549669 0.015489
 0.00758268 0.00577355 0.00532313 0.00504555]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.3363241  0.32327837 0.12275244 0.0691295  0.01051889 0.00679068
 0.00584384 0.00437403 0.00423474 0.00356699]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [0.4027431  0.45864403 0.28410366 0.25802097 0.0674409  0.01895984
 0.01399228 0.01351705 0.01311698 0.00847755]  taking action:  1
Adding child.
Leaf selection - depth:  6
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  25
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);  
  wire [63:0] c;
  adder_8 a1(sum[7:0], c[0], in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c[1], in1[15:8], in2[15:8], c[0]);
  adder_8 a3(sum[23:16], c[2], in1[23:16], in2[23:16], c[1]);
  adder_8 a4(sum[31:24], c[3], in1[31:24], in2[31:24], c[2]);
  adder_8 a5(sum[39:32], c[4], in1[39:32], in2[39:32], c[3]);
  adder_8 a6(sum[47:40], c[5], in1[47:40], in2[47:40], c[4]);
  adder_8 a7(sum[55:48], c[6], in1[55:48], in2[55:48], c[5]);
  adder_8 a8(sum[63:56], cout, in1[63:56], in2[63:56], c[6]);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 failed\n'
Tokens:  292
LLM generates return in:  115.33878  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  215.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.00760117 -0.0320885  -0.03261392  0.00537639  0.00297939  0.00259757
 -0.0110416   0.0014336   0.00127598  0.0011035 ]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [ 0.0077745  -0.01112295 -0.01809951  0.01730481 -0.06081624  0.01200274
 -0.03620009  0.01254209  0.00876033  0.00644784]  taking action:  3
Leaf selection - depth:  2
Leaf selection - action scores:  [0.3530988  0.13175187 0.22181919 0.03919929 0.02789695 0.01297537
 0.0116333  0.0086715  0.00546504 0.00498203]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.3735459  0.36961228 0.11181033 0.0391237  0.01104457 0.01064446
 0.00703596 0.0050051  0.00386902 0.00336002]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.4226521  0.47726622 0.21066236 0.14058    0.08591779 0.01932858
 0.01556446 0.01346581 0.01218922 0.00558355]  taking action:  1
Adding child.
Leaf selection - depth:  5
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  25
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
   wire [63:0] carry;
   adder_8 A1(sum[7:0], carry[7:0], in1[7:0], in2[7:0], cin);
   adder_8 A2(sum[15:8], carry[15:8], in1[15:8], in2[15:8], carry[7:0]);
   adder_8 A3(sum[23:16], carry[23:16], in1[23:16], in2[23:16], carry[15:8]);
   adder_8 A4(sum[31:24], carry[31:24], in1[31:24], in2[31:24], carry[23:16]);
   adder_8 A5(sum[39:32], carry[39:32], in1[39:32], in2[39:32], carry[31:24]);
   adder_8 A6(sum[47:40], carry[47:40], in1[47:40], in2[47:40], carry[39:32]);
   adder_8 A7(sum[55:48], carry[55:48], in1[55:48], in2[55:48], carry[47:40]);
   adder_8 A8(sum[63:56], cout, in1[63:56], in2[63:56], carry[55:48]);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 failed\n'
Tokens:  320
LLM generates return in:  128.558267  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  216.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.00708307 -0.03195075 -0.03261226  0.00537726  0.00298628  0.00260358
 -0.01084876  0.00143691  0.00127893  0.00110605]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [ 0.00844507 -0.01091453 -0.0179798   0.00998723 -0.06080566  0.01200828
 -0.03614831  0.01258915  0.00879321  0.00647204]  taking action:  7
Adding child.
Leaf selection - depth:  2
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  21809
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
      wire [31:0] carry;
      adder_8 A1(sum[7:0], carry[0], in1[7:0], in2[7:0], cin);
      adder_8 A2(sum[15:8], carry[1], in1[15:8], in2[15:8], carry[0]);
      adder_8 A3(sum[23:16], carry[2], in1[23:16], in2[23:16], carry[1]);
      adder_8 A4(sum[31:24], carry[3], in1[31:24], in2[31:24], carry[2]);
      adder_8 A5(sum[39:32], carry[4], in1[39:32], in2[39:32], carry[3]);
      adder_8 A6(sum[47:40], carry[5], in1[47:40], in2[47:40], carry[4]);
      adder_8 A7(sum[55:48], carry[6], in1[55:48], in2[55:48], carry[5]);
      adder_8 A8(sum[63:56], cout, in1[63:56], in2[63:56], carry[6]);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 failed\n'
Tokens:  295
LLM generates return in:  116.143465  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  217.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.00657199 -0.03181331 -0.0326106   0.00537813  0.00299315  0.00260957
 -0.01065637  0.00144022  0.00128188  0.00110859]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [ 0.00911313 -0.01070688 -0.01786055  0.01000115 -0.06079511  0.0120138
 -0.03609672 -0.04368198  0.00882595  0.00649614]  taking action:  5
Leaf selection - depth:  2
Leaf selection - action scores:  [0.32606345 0.16624534 0.06857555 0.00473325 0.00167938 0.00105351
 0.00044278 0.00040089 0.00039558 0.00033178]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.3037187  0.17440823 0.1272566  0.05948355 0.03251879 0.02892303
 0.02677495 0.01433111 0.01148072 0.011301  ]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.3078307  0.14435886 0.06097867 0.03222938 0.01865905 0.01275168
 0.01071234 0.00786031 0.00758237 0.00623226]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [0.32486323 0.3237645  0.19253428 0.08876172 0.00803371 0.00591418
 0.00576142 0.00553052 0.00487687 0.0041019 ]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [0.39904755 0.397381   0.3080437  0.27031714 0.07861878 0.02572023
 0.01868357 0.01802754 0.01631762 0.01371735]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [5.8585620e-01 2.0853495e-03 5.9320195e-05 1.6760907e-05 1.3332002e-05
 9.6965459e-06 7.4007867e-06 7.0974747e-06 5.5388746e-06 4.9711743e-06]  taking action:  0
Leaf selection - depth:  8
Leaf selection - action scores:  [6.2455875e-01 1.9584375e-03 1.1772785e-03 1.3990924e-04 1.0836949e-04
 9.3379735e-05 5.9477708e-05 4.3115946e-05 2.2758151e-05 2.1447106e-05]  taking action:  0
Leaf selection - depth:  9
Leaf selection - action scores:  [6.6974610e-01 3.0170942e-02 5.2485027e-04 4.7216652e-04 1.2026503e-04
 5.9344129e-05 5.2551524e-05 3.8737977e-05 2.3070170e-05 2.0914957e-05]  taking action:  0
Leaf selection - depth:  10
Leaf selection - action scores:  [0.37588045 0.16127808 0.15833011 0.34341258 0.1873523  0.16686772
 0.13440819 0.06102484 0.05965647 0.04718333]  taking action:  0
Leaf selection - depth:  11
Leaf selection - action scores:  [0.7077134  0.35615128 0.29801288 0.10557451 0.07455005 0.06940062
 0.06170429 0.05710328 0.02281973 0.02199052]  taking action:  0
Adding child.
Leaf selection - depth:  12
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  198
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
 
  wire [31:0] c;
  adder_8 a1(sum[7:0], c[0], in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c[1], in1[15:8], in2[15:8], c[0]);
  adder_8 a3(sum[23:16], c[2], in1[23:16], in2[23:16], c[1]);
  adder_8 a4(sum[31:24], cout, in1[31:24], in2[31:24], c[2]);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  143
LLM generates return in:  51.195535  seconds
Running getPromptScore: 
adder_32
output_files/2329780_adder_32/synth_script.sh
Running bash in x seconds:  0.899982

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.1
Backpropogation: incorporating estimates.
Current runs:  218.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.00753838 -0.03167619 -0.03260894  0.005379    0.00300001  0.00261555
 -0.01046441  0.00144352  0.00128481  0.00111113]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [ 0.00977874 -0.01050001 -0.01774173  0.01001502 -0.06078461  0.01641833
 -0.03604532 -0.04365863  0.00885858  0.00652016]  taking action:  5
Leaf selection - depth:  2
Leaf selection - action scores:  [0.32205337 0.17056412 0.07035702 0.00485621 0.00172301 0.00108088
 0.00045428 0.00041131 0.00040585 0.0003404 ]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.30026123 0.17918742 0.13074374 0.06111354 0.03340988 0.02971559
 0.02750865 0.01472381 0.01179532 0.01161067]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.30320796 0.14999363 0.06274654 0.03316376 0.01920001 0.01312137
 0.0110229  0.00808819 0.0078022  0.00641295]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [0.31065378 0.33711553 0.19884856 0.09167271 0.00829718 0.00610814
 0.00595037 0.0057119  0.00503681 0.00423643]  taking action:  1
Leaf selection - depth:  6
Leaf selection - action scores:  [0.5448833  0.06725366 0.05467057 0.04049528 0.02357963 0.00795986
 0.00733924 0.00654953 0.00489639 0.00384318]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [6.7424041e-01 7.5078435e-02 5.6188446e-03 1.7531919e-03 1.5780388e-03
 1.0604884e-03 7.7582255e-04 4.4618410e-04 2.1997911e-04 1.5131853e-04]  taking action:  0
Leaf selection - depth:  8
Leaf selection - action scores:  [5.99336147e-01 7.13891804e-01 4.14028503e-02 2.47077690e-03
 5.31375234e-04 2.99474079e-04 1.60649535e-04 1.28830696e-04
 1.14266615e-04 1.09648790e-04]  taking action:  1
Adding child.
Leaf selection - depth:  9
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  17
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
 
  wire c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15, c16, c17, c18, c19, c20, c21, c22, c23, c24, c25, c26, c27, c28, c29, c30, c31, c32, c33, c34, c35, c36, c37, c38, c39, c40, c41, c42, c43, c44, c45, c46, c47, c48, c49, c50, c51, c52, c53, c54, c55, c56, c57, c58, c59, c60, c61, c62, c63;
  
  adder_8 a1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
  adder_8 a3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
  adder_8 a4(sum[31:24], c4, in1[31:24], in2[31:24], c3);
  adder_8 a5(sum[39:32], c5, in1[39:32], in2[39:32], c4);
  adder_8 a6(sum[47:40], c6, in1[47:40], in2[47:40], c5);
  adder_8 a7(sum[55:48], c7, in1[55:48], in2[55:48], c6);
  adder_8 a8(sum[63:56], cout, in1[63:56], in2[63:56], c7);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 failed\n'
Tokens:  460
LLM generates return in:  202.894331  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  219.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.00703017 -0.03153939 -0.03260729  0.00537986  0.00300685  0.00262151
 -0.0102729   0.00144681  0.00128774  0.00111367]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [ 0.0104419  -0.01029389 -0.01762335  0.01002883 -0.06077414  0.01087956
 -0.03599411 -0.04363535  0.00889109  0.00654409]  taking action:  5
Leaf selection - depth:  2
Leaf selection - action scores:  [0.30825925 0.17477621 0.0720945  0.00497613 0.00176556 0.00110758
 0.0004655  0.00042146 0.00041588 0.0003488 ]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.28644785 0.1838424  0.13414024 0.06270117 0.03427781 0.03048755
 0.02822327 0.01510631 0.01210174 0.0119123 ]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.28714854 0.15547392 0.06446594 0.03407252 0.01972613 0.01348093
 0.01132496 0.00830983 0.008016   0.00658868]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [0.31867576 0.2857618  0.2049684  0.09449407 0.00855253 0.00629612
 0.0061335  0.00588769 0.00519183 0.00436681]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [0.3832041  0.41887638 0.32470655 0.2849393  0.08287147 0.02711151
 0.01969421 0.0190027  0.01720029 0.01445936]  taking action:  1
Adding child.
Leaf selection - depth:  7
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  25
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
 
  wire [63:0] c;
  adder_8 a1(sum[7:0], c[0], in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c[1], in1[15:8], in2[15:8], c[0]);
  adder_8 a3(sum[23:16], c[2], in1[23:16], in2[23:16], c[1]);
  adder_8 a4(sum[31:24], c[3], in1[31:24], in2[31:24], c[2]);
  adder_8 a5(sum[39:32], c[4], in1[39:32], in2[39:32], c[3]);
  adder_8 a6(sum[47:40], c[5], in1[47:40], in2[47:40], c[4]);
  adder_8 a7(sum[55:48], c[6], in1[55:48], in2[55:48], c[5]);
  adder_8 a8(sum[63:56], cout, in1[63:56], in2[63:56], c[6]);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 failed\n'
Tokens:  292
LLM generates return in:  115.552985  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  220.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.0065287  -0.03140289 -0.03260564  0.00538072  0.00301368  0.00262747
 -0.01008181  0.00145009  0.00129067  0.0011162 ]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [ 0.01110262 -0.01008853 -0.01750541  0.0100426  -0.06076372  0.00584429
 -0.03594309 -0.04361217  0.00892348  0.00656793]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [ 0.00096256  0.00210747 -0.45848522 -0.01276311 -0.03913186 -0.04173552
 -0.4920105   0.01120332  0.01113973  0.00658785]  taking action:  7
Adding child.
Leaf selection - depth:  3
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  685
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
  input [31:0] in1, in2;
  wire [31:0] in1, in2;
  wire cin;
  wire [31:0] in1, in2;
  wire cin;
  wire [31:0] in1, in2;
  wire cin;
  wire [31:0] in1, in2;
  wire cin;
  wire [31:0] in1, in2;
  wire cin;
  wire [31:0] in1, in2;
  wire cin;
  wire [31:0] in1, in2;
  wire cin;
  wire [31:0] in1, in2;
  wire cin;
  wire [31:0] in1, in2;
  wire cin;
  wire [31:0] in1, in2;
  wire cin;
  wire [31:0] in1, in2;
  wire cin;
  wire [31:0] in1, in2;
  wire cin;
  wire [31:0] in1, in2;
  wire cin;
  wire [31:0] in1, in2;
  wire cin;
  wire [31:0] in1, in2;
  wire cin;
  wire [31:0] in1, in2;
  wire cin;
  wire [31:0] in1, in2;
  wire cin;
  wire [31:0] in1, in2;
  wire cin;
  wire [31:0] in1, in2;
  wire cin;
  wire [31:0] in1, in2;
  wire cin;
  wire [31:0] in1, in2;
  wire cin;
  wire [31:0] in1, in2;
  wire cin;
  wire [31:0] in1, in2;
  wire cin;
  wire [31:0] in1, in2;
  wire cin;
  wire [31:0] in1, in2;
  wire cin;
  wire [31:0] in1, in2;
  wire cin;
  wire [31:0] in1, in2;
  wire cin;
  wire [31:0] in1, in2;
  wire cin;
  wire [31:0] in1, in2;
  wire cin;
  wire [31:0] in1, in2;
  wire cin;
  wire [31:0] in1, in2;
  wire cin;
  wire [31:0] in1, in2;
  wire cin;
  wire [31:0] in1, in2;
  wire cin;
  wire [31:0] in1, in2;
  wire cin;
  wire [31:0] in1, in2;
  wire cin;
  wire [31:0] in1, in2;
  wire cin;
  wire [31:0] in1, in2;
  wire cin;
  wire [31:0] in1, in2;
  wire cin;
  wire [31:0] in1, in2;
  wire cin;
  wire [31:0] in1, in2;
  wire cin;
  wire [31:0] in1, in2;
  wire cin;
  wire [31:0] in1, in2;
  wire cin;
  wire [31:0] in1, in2;
  wire cin;
  wire [31:0] in1, in2;
  wire cin;
  wire [31:0] in1, in2;
  wire cin;
  wire [31:0] in1, in2;
  wire cin;
  wire [31:0] in1, in2;
  wire cin;
  wire [31:0] in1, in2;
  wire cin;
  wire [31:0] in1, in2;
  wire cin;
  wire [31:
Path:  output_files/2329780_adder_32/2329780_simulation
Verilog compilation failed, error:  148
Compilation output:  b"output_files/2329780_adder_32/2329780_adder_32.v:36: error: port in1 already has a port declaration.\noutput_files/2329780_adder_32/2329780_adder_32.v:34: error: Port ``in1'' has already been declared a port.\noutput_files/2329780_adder_32/2329780_adder_32.v:36: error: port in2 already has a port declaration.\noutput_files/2329780_adder_32/2329780_adder_32.v:34: error: Port ``in2'' has already been declared a port.\noutput_files/2329780_adder_32/2329780_adder_32.v:39: error: duplicate declaration for net or variable 'in1' in 'adder_32'.\noutput_files/2329780_adder_32/2329780_adder_32.v:39: error: duplicate declaration for net or variable 'in2' in 'adder_32'.\noutput_files/2329780_adder_32/2329780_adder_32.v:40: error: duplicate declaration for net or variable 'cin' in 'adder_32'.\noutput_files/2329780_adder_32/2329780_adder_32.v:41: error: duplicate declaration for net or variable 'in1' in 'adder_32'.\noutput_files/2329780_adder_32/2329780_adder_32.v:41: error: duplicate declaration for net or variable 'in2' in 'adder_32'.\noutput_files/2329780_adder_32/2329780_adder_32.v:42: error: duplicate declaration for net or variable 'cin' in 'adder_32'.\noutput_files/2329780_adder_32/2329780_adder_32.v:43: error: duplicate declaration for net or variable 'in1' in 'adder_32'.\noutput_files/2329780_adder_32/2329780_adder_32.v:43: error: duplicate declaration for net or variable 'in2' in 'adder_32'.\noutput_files/2329780_adder_32/2329780_adder_32.v:44: error: duplicate declaration for net or variable 'cin' in 'adder_32'.\noutput_files/2329780_adder_32/2329780_adder_32.v:45: error: duplicate declaration for net or variable 'in1' in 'adder_32'.\noutput_files/2329780_adder_32/2329780_adder_32.v:45: error: duplicate declaration for net or variable 'in2' in 'adder_32'.\noutput_files/2329780_adder_32/2329780_adder_32.v:46: error: duplicate declaration for net or variable 'cin' in 'adder_32'.\noutput_files/2329780_adder_32/2329780_adder_32.v:47: error: duplicate declaration for net or variable 'in1' in 'adder_32'.\noutput_files/2329780_adder_32/2329780_adder_32.v:47: error: duplicate declaration for net or variable 'in2' in 'adder_32'.\noutput_files/2329780_adder_32/2329780_adder_32.v:48: error: duplicate declaration for net or variable 'cin' in 'adder_32'.\noutput_files/2329780_adder_32/2329780_adder_32.v:49: error: duplicate declaration for net or variable 'in1' in 'adder_32'.\noutput_files/2329780_adder_32/2329780_adder_32.v:49: error: duplicate declaration for net or variable 'in2' in 'adder_32'.\noutput_files/2329780_adder_32/2329780_adder_32.v:50: error: duplicate declaration for net or variable 'cin' in 'adder_32'.\noutput_files/2329780_adder_32/2329780_adder_32.v:51: error: duplicate declaration for net or variable 'in1' in 'adder_32'.\noutput_files/2329780_adder_32/2329780_adder_32.v:51: error: duplicate declaration for net or variable 'in2' in 'adder_32'.\noutput_files/2329780_adder_32/2329780_adder_32.v:52: error: duplicate declaration for net or variable 'cin' in 'adder_32'.\noutput_files/2329780_adder_32/2329780_adder_32.v:53: error: duplicate declaration for net or variable 'in1' in 'adder_32'.\noutput_files/2329780_adder_32/2329780_adder_32.v:53: error: duplicate declaration for net or variable 'in2' in 'adder_32'.\noutput_files/2329780_adder_32/2329780_adder_32.v:54: error: duplicate declaration for net or variable 'cin' in 'adder_32'.\noutput_files/2329780_adder_32/2329780_adder_32.v:55: error: duplicate declaration for net or variable 'in1' in 'adder_32'.\noutput_files/2329780_adder_32/2329780_adder_32.v:55: error: duplicate declaration for net or variable 'in2' in 'adder_32'.\noutput_files/2329780_adder_32/2329780_adder_32.v:56: error: duplicate declaration for net or variable 'cin' in 'adder_32'.\noutput_files/2329780_adder_32/2329780_adder_32.v:57: error: duplicate declaration for net or variable 'in1' in 'adder_32'.\noutput_files/2329780_adder_32/2329780_adder_32.v:57: error: duplicate declaration for net or variable 'in2' in 'adder_32'.\noutput_files/2329780_adder_32/2329780_adder_32.v:58: error: duplicate declaration for net or variable 'cin' in 'adder_32'.\noutput_files/2329780_adder_32/2329780_adder_32.v:59: error: duplicate declaration for net or variable 'in1' in 'adder_32'.\noutput_files/2329780_adder_32/2329780_adder_32.v:59: error: duplicate declaration for net or variable 'in2' in 'adder_32'.\noutput_files/2329780_adder_32/2329780_adder_32.v:60: error: duplicate declaration for net or variable 'cin' in 'adder_32'.\noutput_files/2329780_adder_32/2329780_adder_32.v:61: error: duplicate declaration for net or variable 'in1' in 'adder_32'.\noutput_files/2329780_adder_32/2329780_adder_32.v:61: error: duplicate declaration for net or variable 'in2' in 'adder_32'.\noutput_files/2329780_adder_32/2329780_adder_32.v:62: error: duplicate declaration for net or variable 'cin' in 'adder_32'.\noutput_files/2329780_adder_32/2329780_adder_32.v:63: error: duplicate declaration for net or variable 'in1' in 'adder_32'.\noutput_files/2329780_adder_32/2329780_adder_32.v:63: error: duplicate declaration for net or variable 'in2' in 'adder_32'.\noutput_files/2329780_adder_32/2329780_adder_32.v:64: error: duplicate declaration for net or variable 'cin' in 'adder_32'.\noutput_files/2329780_adder_32/2329780_adder_32.v:65: error: duplicate declaration for net or variable 'in1' in 'adder_32'.\noutput_files/2329780_adder_32/2329780_adder_32.v:65: error: duplicate declaration for net or variable 'in2' in 'adder_32'.\noutput_files/2329780_adder_32/2329780_adder_32.v:66: error: duplicate declaration for net or variable 'cin' in 'adder_32'.\noutput_files/2329780_adder_32/2329780_adder_32.v:67: error: duplicate declaration for net or variable 'in1' in 'adder_32'.\noutput_files/2329780_adder_32/2329780_adder_32.v:67: error: duplicate declaration for net or variable 'in2' in 'adder_32'.\noutput_files/2329780_adder_32/2329780_adder_32.v:68: error: duplicate declaration for net or variable 'cin' in 'adder_32'.\noutput_files/2329780_adder_32/2329780_adder_32.v:69: error: duplicate declaration for net or variable 'in1' in 'adder_32'.\noutput_files/2329780_adder_32/2329780_adder_32.v:69: error: duplicate declaration for net or variable 'in2' in 'adder_32'.\noutput_files/2329780_adder_32/2329780_adder_32.v:70: error: duplicate declaration for net or variable 'cin' in 'adder_32'.\noutput_files/2329780_adder_32/2329780_adder_32.v:71: error: duplicate declaration for net or variable 'in1' in 'adder_32'.\noutput_files/2329780_adder_32/2329780_adder_32.v:71: error: duplicate declaration for net or variable 'in2' in 'adder_32'.\noutput_files/2329780_adder_32/2329780_adder_32.v:72: error: duplicate declaration for net or variable 'cin' in 'adder_32'.\noutput_files/2329780_adder_32/2329780_adder_32.v:73: error: duplicate declaration for net or variable 'in1' in 'adder_32'.\noutput_files/2329780_adder_32/2329780_adder_32.v:73: error: duplicate declaration for net or variable 'in2' in 'adder_32'.\noutput_files/2329780_adder_32/2329780_adder_32.v:74: error: duplicate declaration for net or variable 'cin' in 'adder_32'.\noutput_files/2329780_adder_32/2329780_adder_32.v:75: error: duplicate declaration for net or variable 'in1' in 'adder_32'.\noutput_files/2329780_adder_32/2329780_adder_32.v:75: error: duplicate declaration for net or variable 'in2' in 'adder_32'.\noutput_files/2329780_adder_32/2329780_adder_32.v:76: error: duplicate declaration for net or variable 'cin' in 'adder_32'.\noutput_files/2329780_adder_32/2329780_adder_32.v:77: error: duplicate declaration for net or variable 'in1' in 'adder_32'.\noutput_files/2329780_adder_32/2329780_adder_32.v:77: error: duplicate declaration for net or variable 'in2' in 'adder_32'.\noutput_files/2329780_adder_32/2329780_adder_32.v:78: error: duplicate declaration for net or variable 'cin' in 'adder_32'.\noutput_files/2329780_adder_32/2329780_adder_32.v:79: error: duplicate declaration for net or variable 'in1' in 'adder_32'.\noutput_files/2329780_adder_32/2329780_adder_32.v:79: error: duplicate declaration for net or variable 'in2' in 'adder_32'.\noutput_files/2329780_adder_32/2329780_adder_32.v:80: error: duplicate declaration for net or variable 'cin' in 'adder_32'.\noutput_files/2329780_adder_32/2329780_adder_32.v:81: error: duplicate declaration for net or variable 'in1' in 'adder_32'.\noutput_files/2329780_adder_32/2329780_adder_32.v:81: error: duplicate declaration for net or variable 'in2' in 'adder_32'.\noutput_files/2329780_adder_32/2329780_adder_32.v:82: error: duplicate declaration for net or variable 'cin' in 'adder_32'.\noutput_files/2329780_adder_32/2329780_adder_32.v:83: error: duplicate declaration for net or variable 'in1' in 'adder_32'.\noutput_files/2329780_adder_32/2329780_adder_32.v:83: error: duplicate declaration for net or variable 'in2' in 'adder_32'.\noutput_files/2329780_adder_32/2329780_adder_32.v:84: error: duplicate declaration for net or variable 'cin' in 'adder_32'.\noutput_files/2329780_adder_32/2329780_adder_32.v:85: error: duplicate declaration for net or variable 'in1' in 'adder_32'.\noutput_files/2329780_adder_32/2329780_adder_32.v:85: error: duplicate declaration for net or variable 'in2' in 'adder_32'.\noutput_files/2329780_adder_32/2329780_adder_32.v:86: error: duplicate declaration for net or variable 'cin' in 'adder_32'.\noutput_files/2329780_adder_32/2329780_adder_32.v:87: error: duplicate declaration for net or variable 'in1' in 'adder_32'.\noutput_files/2329780_adder_32/2329780_adder_32.v:87: error: duplicate declaration for net or variable 'in2' in 'adder_32'.\noutput_files/2329780_adder_32/2329780_adder_32.v:88: error: duplicate declaration for net or variable 'cin' in 'adder_32'.\noutput_files/2329780_adder_32/2329780_adder_32.v:89: error: duplicate declaration for net or variable 'in1' in 'adder_32'.\noutput_files/2329780_adder_32/2329780_adder_32.v:89: error: duplicate declaration for net or variable 'in2' in 'adder_32'.\noutput_files/2329780_adder_32/2329780_adder_32.v:90: error: duplicate declaration for net or variable 'cin' in 'adder_32'.\noutput_files/2329780_adder_32/2329780_adder_32.v:91: error: duplicate declaration for net or variable 'in1' in 'adder_32'.\noutput_files/2329780_adder_32/2329780_adder_32.v:91: error: duplicate declaration for net or variable 'in2' in 'adder_32'.\noutput_files/2329780_adder_32/2329780_adder_32.v:92: error: duplicate declaration for net or variable 'cin' in 'adder_32'.\noutput_files/2329780_adder_32/2329780_adder_32.v:93: error: duplicate declaration for net or variable 'in1' in 'adder_32'.\noutput_files/2329780_adder_32/2329780_adder_32.v:93: error: duplicate declaration for net or variable 'in2' in 'adder_32'.\noutput_files/2329780_adder_32/2329780_adder_32.v:94: error: duplicate declaration for net or variable 'cin' in 'adder_32'.\noutput_files/2329780_adder_32/2329780_adder_32.v:95: error: duplicate declaration for net or variable 'in1' in 'adder_32'.\noutput_files/2329780_adder_32/2329780_adder_32.v:95: error: duplicate declaration for net or variable 'in2' in 'adder_32'.\noutput_files/2329780_adder_32/2329780_adder_32.v:96: error: duplicate declaration for net or variable 'cin' in 'adder_32'.\noutput_files/2329780_adder_32/2329780_adder_32.v:97: error: duplicate declaration for net or variable 'in1' in 'adder_32'.\noutput_files/2329780_adder_32/2329780_adder_32.v:97: error: duplicate declaration for net or variable 'in2' in 'adder_32'.\noutput_files/2329780_adder_32/2329780_adder_32.v:98: error: duplicate declaration for net or variable 'cin' in 'adder_32'.\noutput_files/2329780_adder_32/2329780_adder_32.v:99: error: duplicate declaration for net or variable 'in1' in 'adder_32'.\noutput_files/2329780_adder_32/2329780_adder_32.v:99: error: duplicate declaration for net or variable 'in2' in 'adder_32'.\noutput_files/2329780_adder_32/2329780_adder_32.v:100: error: duplicate declaration for net or variable 'cin' in 'adder_32'.\noutput_files/2329780_adder_32/2329780_adder_32.v:101: error: duplicate declaration for net or variable 'in1' in 'adder_32'.\noutput_files/2329780_adder_32/2329780_adder_32.v:101: error: duplicate declaration for net or variable 'in2' in 'adder_32'.\noutput_files/2329780_adder_32/2329780_adder_32.v:102: error: duplicate declaration for net or variable 'cin' in 'adder_32'.\noutput_files/2329780_adder_32/2329780_adder_32.v:103: error: duplicate declaration for net or variable 'in1' in 'adder_32'.\noutput_files/2329780_adder_32/2329780_adder_32.v:103: error: duplicate declaration for net or variable 'in2' in 'adder_32'.\noutput_files/2329780_adder_32/2329780_adder_32.v:104: error: duplicate declaration for net or variable 'cin' in 'adder_32'.\noutput_files/2329780_adder_32/2329780_adder_32.v:105: error: duplicate declaration for net or variable 'in1' in 'adder_32'.\noutput_files/2329780_adder_32/2329780_adder_32.v:105: error: duplicate declaration for net or variable 'in2' in 'adder_32'.\noutput_files/2329780_adder_32/2329780_adder_32.v:106: error: duplicate declaration for net or variable 'cin' in 'adder_32'.\noutput_files/2329780_adder_32/2329780_adder_32.v:107: error: duplicate declaration for net or variable 'in1' in 'adder_32'.\noutput_files/2329780_adder_32/2329780_adder_32.v:107: error: duplicate declaration for net or variable 'in2' in 'adder_32'.\noutput_files/2329780_adder_32/2329780_adder_32.v:108: error: duplicate declaration for net or variable 'cin' in 'adder_32'.\noutput_files/2329780_adder_32/2329780_adder_32.v:109: error: duplicate declaration for net or variable 'in1' in 'adder_32'.\noutput_files/2329780_adder_32/2329780_adder_32.v:109: error: duplicate declaration for net or variable 'in2' in 'adder_32'.\noutput_files/2329780_adder_32/2329780_adder_32.v:110: error: duplicate declaration for net or variable 'cin' in 'adder_32'.\noutput_files/2329780_adder_32/2329780_adder_32.v:111: error: duplicate declaration for net or variable 'in1' in 'adder_32'.\noutput_files/2329780_adder_32/2329780_adder_32.v:111: error: duplicate declaration for net or variable 'in2' in 'adder_32'.\noutput_files/2329780_adder_32/2329780_adder_32.v:112: error: duplicate declaration for net or variable 'cin' in 'adder_32'.\noutput_files/2329780_adder_32/2329780_adder_32.v:113: error: duplicate declaration for net or variable 'in1' in 'adder_32'.\noutput_files/2329780_adder_32/2329780_adder_32.v:113: error: duplicate declaration for net or variable 'in2' in 'adder_32'.\noutput_files/2329780_adder_32/2329780_adder_32.v:114: error: duplicate declaration for net or variable 'cin' in 'adder_32'.\noutput_files/2329780_adder_32/2329780_adder_32.v:115: error: duplicate declaration for net or variable 'in1' in 'adder_32'.\noutput_files/2329780_adder_32/2329780_adder_32.v:115: error: duplicate declaration for net or variable 'in2' in 'adder_32'.\noutput_files/2329780_adder_32/2329780_adder_32.v:116: error: duplicate declaration for net or variable 'cin' in 'adder_32'.\noutput_files/2329780_adder_32/2329780_adder_32.v:117: error: duplicate declaration for net or variable 'in1' in 'adder_32'.\noutput_files/2329780_adder_32/2329780_adder_32.v:117: error: duplicate declaration for net or variable 'in2' in 'adder_32'.\noutput_files/2329780_adder_32/2329780_adder_32.v:118: error: duplicate declaration for net or variable 'cin' in 'adder_32'.\noutput_files/2329780_adder_32/2329780_adder_32.v:119: error: duplicate declaration for net or variable 'in1' in 'adder_32'.\noutput_files/2329780_adder_32/2329780_adder_32.v:119: error: duplicate declaration for net or variable 'in2' in 'adder_32'.\noutput_files/2329780_adder_32/2329780_adder_32.v:120: error: duplicate declaration for net or variable 'cin' in 'adder_32'.\noutput_files/2329780_adder_32/2329780_adder_32.v:121: error: duplicate declaration for net or variable 'in1' in 'adder_32'.\noutput_files/2329780_adder_32/2329780_adder_32.v:121: error: duplicate declaration for net or variable 'in2' in 'adder_32'.\noutput_files/2329780_adder_32/2329780_adder_32.v:122: error: duplicate declaration for net or variable 'cin' in 'adder_32'.\noutput_files/2329780_adder_32/2329780_adder_32.v:123: error: duplicate declaration for net or variable 'in1' in 'adder_32'.\noutput_files/2329780_adder_32/2329780_adder_32.v:123: error: duplicate declaration for net or variable 'in2' in 'adder_32'.\noutput_files/2329780_adder_32/2329780_adder_32.v:124: error: duplicate declaration for net or variable 'cin' in 'adder_32'.\noutput_files/2329780_adder_32/2329780_adder_32.v:125: error: duplicate declaration for net or variable 'in1' in 'adder_32'.\noutput_files/2329780_adder_32/2329780_adder_32.v:125: error: duplicate declaration for net or variable 'in2' in 'adder_32'.\noutput_files/2329780_adder_32/2329780_adder_32.v:126: error: duplicate declaration for net or variable 'cin' in 'adder_32'.\noutput_files/2329780_adder_32/2329780_adder_32.v:127: error: duplicate declaration for net or variable 'in1' in 'adder_32'.\noutput_files/2329780_adder_32/2329780_adder_32.v:127: error: duplicate declaration for net or variable 'in2' in 'adder_32'.\noutput_files/2329780_adder_32/2329780_adder_32.v:128: error: duplicate declaration for net or variable 'cin' in 'adder_32'.\noutput_files/2329780_adder_32/2329780_adder_32.v:129: error: duplicate declaration for net or variable 'in1' in 'adder_32'.\noutput_files/2329780_adder_32/2329780_adder_32.v:129: error: duplicate declaration for net or variable 'in2' in 'adder_32'.\noutput_files/2329780_adder_32/2329780_adder_32.v:130: error: duplicate declaration for net or variable 'cin' in 'adder_32'.\noutput_files/2329780_adder_32/2329780_adder_32.v:131: error: duplicate declaration for net or variable 'in1' in 'adder_32'.\noutput_files/2329780_adder_32/2329780_adder_32.v:131: error: duplicate declaration for net or variable 'in2' in 'adder_32'.\noutput_files/2329780_adder_32/2329780_adder_32.v:132: error: duplicate declaration for net or variable 'cin' in 'adder_32'.\noutput_files/2329780_adder_32/2329780_adder_32.v:133: error: duplicate declaration for net or variable 'in1' in 'adder_32'.\noutput_files/2329780_adder_32/2329780_adder_32.v:133: error: duplicate declaration for net or variable 'in2' in 'adder_32'.\noutput_files/2329780_adder_32/2329780_adder_32.v:134: error: duplicate declaration for net or variable 'cin' in 'adder_32'.\noutput_files/2329780_adder_32/2329780_adder_32.v:135: syntax error\nI give up.\n"
Tokens:  996
LLM generates return in:  601.06453  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  221.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [-0.00044099 -0.0312667  -0.032604    0.00538158  0.00302049  0.0026334
 -0.00989116  0.00145337  0.00129358  0.00111872]  taking action:  3
Leaf selection - depth:  1
Leaf selection - action scores:  [2.9620612e-01 1.7790470e-01 3.8235933e-03 5.0002948e-04 2.1050654e-04
 2.0544353e-04 1.7437895e-04 1.6481050e-04 9.9055382e-05 9.7330128e-05]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.31149125 0.05889609 0.04304494 0.03923206 0.03024041 0.01936993
 0.00891705 0.00670178 0.00601487 0.00355489]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.30561942 0.19081673 0.13258861 0.07189357 0.01594596 0.01593805
 0.00780251 0.00594093 0.00547745 0.00519183]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.3013068  0.33661345 0.12677817 0.07139663 0.01086386 0.00701338
 0.0060355  0.00451748 0.00437362 0.00368397]  taking action:  1
Leaf selection - depth:  5
Leaf selection - action scores:  [0.5463777  0.06138814 0.05779656 0.03732395 0.02143792 0.00778236
 0.00763128 0.00672467 0.00443843 0.0044337 ]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [6.7923707e-01 5.8982451e-02 4.0202122e-03 1.1833420e-03 1.1526274e-03
 8.1100571e-04 5.0019531e-04 3.1971675e-04 1.3417970e-04 1.1390202e-04]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [6.3257664e-01 6.1502755e-01 4.1120745e-02 2.5365555e-03 4.0055218e-04
 2.4878443e-04 1.5317227e-04 1.2589326e-04 1.1088702e-04 1.0368583e-04]  taking action:  0
Leaf selection - depth:  8
Leaf selection - action scores:  [1.14147222e+00 4.58572805e-03 1.95794925e-03 1.65693520e-04
 1.38503397e-04 1.14204784e-04 7.83092983e-05 4.76905261e-05
 2.74491194e-05 1.18726502e-05]  taking action:  0
Leaf selection - depth:  9
Leaf selection - action scores:  [1.9281464e+00 2.1772195e-02 5.4759457e-04 4.6392975e-04 3.0700170e-04
 3.7816179e-05 3.7143360e-05 3.1728738e-05 2.1548325e-05 2.1539450e-05]  taking action:  0
Adding child.
Leaf selection - depth:  10
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  66
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);  
  wire c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42,c43,c44,c45,c46,c47,c48,c49,c50,c51,c52,c53,c54,c55,c56,c57,c58,c59,c60,c61,c62,c63;
  adder_8 a1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
  adder_8 a3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
  adder_8 a4(sum[31:24], c4, in1[31:24], in2[31:24], c3);
  adder_8 a5(sum[39:32], c5, in1[39:32], in2[39:32], c4);
  adder_8 a6(sum[47:40], c6, in1[47:40], in2[47:40], c5);
  adder_8 a7(sum[55:48], c7, in1[55:48], in2[55:48], c6);
  adder_8 a8(sum[63:56], cout, in1[63:56], in2[63:56], c7);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 failed\n'
Tokens:  456
LLM generates return in:  200.919766  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  222.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [-0.00017007 -0.03113081 -0.03260236  0.00036423  0.00302728  0.00263933
 -0.00970094  0.00145664  0.00129649  0.00112123]  taking action:  4
Adding child.
Leaf selection - depth:  1
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  50257
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin
Path:  output_files/2329780_adder_32/2329780_simulation
Verilog compilation failed, error:  2
Compilation output:  b'output_files/2329780_adder_32/2329780_adder_32.v:35: syntax error\nI give up.\n'
Tokens:  998
LLM generates return in:  598.485437  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  223.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 1.00236665e-04 -3.09952356e-02 -3.26007198e-02  3.65045589e-04
 -4.98482969e-01  2.64523857e-03 -9.51114711e-03  1.45990372e-03
  1.29939679e-03  1.12374611e-03]  taking action:  5
Adding child.
Leaf selection - depth:  1
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  198
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);    
  wire [31:0] c;
  adder_8 a1(sum[7:0], c[0], in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c[1], in1[15:8], in2[15:8], c[0]);
  adder_8 a3(sum[23:16], c[2], in1[23:16], in2[23:16], c[1]);
  adder_8 a4(sum[31:24], cout, in1[31:24], in2[31:24], c[2]);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  153
LLM generates return in:  54.195778  seconds
Running getPromptScore: 
adder_32
output_files/2329780_adder_32/synth_script.sh
Running bash in x seconds:  0.89701

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.1
Backpropogation: incorporating estimates.
Current runs:  224.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 3.69943989e-04 -3.08599591e-02 -3.25990863e-02  3.65859513e-04
 -4.98479586e-01  5.13255690e-02 -9.32177500e-03  1.46315880e-03
  1.30229400e-03  1.12625168e-03]  taking action:  5
Leaf selection - depth:  1
Leaf selection - action scores:  [1.7946310e+00 5.8440965e-02 1.3283080e-03 2.8372946e-04 2.2931404e-04
 1.2627069e-04 9.7859222e-05 9.0538815e-05 7.0947724e-05 6.4151704e-05]  taking action:  0
Adding child.
Leaf selection - depth:  2
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  50286
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);    
  wire [31:0] c;
  adder_8 a1(sum[7:0], c[0], in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c[1], in1[15:8], in2[15:8], c[0]);
  adder_8 a3(sum[23:16], c[2], in1[23:16], in2[23:16], c[1]);
  adder_8 a4(sum[31:24], cout, in1[31:24], in2[31:24], c[2]);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  152
LLM generates return in:  53.851658  seconds
Running getPromptScore: 
adder_32
output_files/2329780_adder_32/synth_script.sh
Running bash in x seconds:  0.896193

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.1
Backpropogation: incorporating estimates.
Current runs:  225.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 6.39052627e-04 -3.07249829e-02 -3.25974564e-02  3.66671632e-04
 -4.98476211e-01  6.75523440e-02 -9.13282326e-03  1.46640666e-03
  1.30518478e-03  1.12875169e-03]  taking action:  5
Leaf selection - depth:  1
Leaf selection - action scores:  [1.1489825e+00 7.1575269e-02 1.6268386e-03 3.4749621e-04 2.8085121e-04
 1.5464939e-04 1.1985258e-04 1.1088695e-04 8.6892862e-05 7.8569465e-05]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [1.8433256e+00 2.9445445e-02 1.0224401e-02 1.0016932e-02 8.6153941e-03
 5.8300896e-03 3.4497103e-03 2.6231003e-03 2.0486005e-03 1.5223325e-03]  taking action:  0
Adding child.
Leaf selection - depth:  3
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  21809
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);    
  wire [31:0] c;
  adder_8 a1(sum[7:0], c[0], in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c[1], in1[15:8], in2[15:8], c[0]);
  adder_8 a3(sum[23:16], c[2], in1[23:16], in2[23:16], c[1]);
  adder_8 a4(sum[31:24], cout, in1[31:24], in2[31:24], c[2]);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  151
LLM generates return in:  53.588071  seconds
Running getPromptScore: 
adder_32
output_files/2329780_adder_32/synth_script.sh
Running bash in x seconds:  0.89012

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.1
Backpropogation: incorporating estimates.
Current runs:  226.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 9.07566548e-04 -3.05903050e-02 -3.25958302e-02  3.67481955e-04
 -4.98472844e-01  7.56657263e-02 -8.94428909e-03  1.46964734e-03
  1.30806917e-03  1.13124617e-03]  taking action:  5
Leaf selection - depth:  1
Leaf selection - action scores:  [9.1266376e-01 8.2648002e-02 1.8785113e-03 4.0125404e-04 3.2429901e-04
 1.7857373e-04 1.3839384e-04 1.2804123e-04 1.0033523e-04 9.0724207e-05]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [1.1788018  0.03606316 0.01252228 0.01226819 0.01055166 0.00714037
 0.00422502 0.00321263 0.00250901 0.00186447]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [1.6921799  0.14796937 0.02870411 0.02266078 0.00538668 0.0048218
 0.00220987 0.00207663 0.00195681 0.00177496]  taking action:  0
Adding child.
Leaf selection - depth:  4
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  685
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);    
  wire [31:0] c;
  adder_8 a1(sum[7:0], c[0], in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c[1], in1[15:8], in2[15:8], c[0]);
  adder_8 a3(sum[23:16], c[2], in1[23:16], in2[23:16], c[1]);
  adder_8 a4(sum[31:24], cout, in1[31:24], in2[31:24], c[2]);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  150
LLM generates return in:  53.284475  seconds
Running getPromptScore: 
adder_32
output_files/2329780_adder_32/synth_script.sh
Running bash in x seconds:  0.899754

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.1
Backpropogation: incorporating estimates.
Current runs:  227.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 1.17548968e-03 -3.04559234e-02 -3.25942075e-02  3.68290495e-04
 -4.98469484e-01  8.05337487e-02 -8.75616974e-03  1.47288089e-03
  1.31094721e-03  1.13373516e-03]  taking action:  5
Leaf selection - depth:  1
Leaf selection - action scores:  [7.8439015e-01 9.2403270e-02 2.1002393e-03 4.4861564e-04 3.6257730e-04
 1.9965148e-04 1.5472902e-04 1.4315442e-04 1.1217819e-04 1.0143274e-04]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.9356187  0.04164215 0.01445949 0.01416608 0.01218401 0.00824499
 0.00487863 0.00370962 0.00289716 0.0021529 ]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [1.0862442  0.18122472 0.03515521 0.02775368 0.00659731 0.00590547
 0.00270653 0.00254334 0.00239659 0.00217387]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.9862564  0.8606351  0.04852853 0.02666783 0.00283321 0.00265883
 0.00186315 0.00161198 0.00138511 0.00125612]  taking action:  0
Adding child.
Leaf selection - depth:  5
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  3132
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);    
  wire [31:0] c;
  adder_8 a1(sum[7:0], c[0], in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c[1], in1[15:8], in2[15:8], c[0]);
  adder_8 a3(sum[23:16], c[2], in1[23:16], in2[23:16], c[1]);
  adder_8 a4(sum[31:24], cout, in1[31:24], in2[31:24], c[2]);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  149
LLM generates return in:  52.988356  seconds
Running getPromptScore: 
adder_32
output_files/2329780_adder_32/synth_script.sh
Running bash in x seconds:  0.894727

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.1
Backpropogation: incorporating estimates.
Current runs:  228.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 1.44282590e-03 -3.03218362e-02 -3.25925884e-02  3.69097264e-04
 -4.98466131e-01  8.37791022e-02 -8.56846248e-03  1.47610736e-03
  1.31381895e-03  1.13621871e-03]  taking action:  5
Leaf selection - depth:  1
Leaf selection - action scores:  [7.01678336e-01 1.01222716e-01 2.30069691e-03 4.91433835e-04
 3.97183554e-04 2.18707239e-04 1.69497143e-04 1.56817827e-04
 1.22885060e-04 1.11114001e-04]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.8036384  0.04655734 0.0161662  0.01583816 0.01362213 0.00921818
 0.00545447 0.00414749 0.00323912 0.00240702]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.86436784 0.20926027 0.04059374 0.03204719 0.00761792 0.00681905
 0.00312523 0.0029368  0.00276734 0.00251017]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.65395623 1.0540584  0.05943507 0.03266129 0.00346996 0.00325639
 0.00228188 0.00197426 0.00169641 0.00153843]  taking action:  1
Adding child.
Leaf selection - depth:  5
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  16
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);    
  wire c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42,c43,c44,c45,c46,c47,c48,c49,c50,c51,c52,c53,c54,c55,c56,c57,c58,c59,c60,c61,c62,c63;
  adder_8 a1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
  adder_8 a3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
  adder_8 a4(sum[31:24], c4, in1[31:24], in2[31:24], c3);
  adder_8 a5(sum[39:32], c5, in1[39:32], in2[39:32], c4);
  adder_8 a6(sum[47:40], c6, in1[47:40], in2[47:40], c5);
  adder_8 a7(sum[55:48], c7, in1[55:48], in2[55:48], c6);
  adder_8 a8(sum[63:56], cout, in1[63:56], in2[63:56], c7);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 failed\n'
Tokens:  461
LLM generates return in:  202.469759  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  229.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 1.70957905e-03 -3.01880414e-02 -3.25909728e-02  3.69902274e-04
 -4.98462786e-01  5.75257763e-02 -8.38116461e-03  1.47932679e-03
  1.31668442e-03  1.13869683e-03]  taking action:  5
Leaf selection - depth:  1
Leaf selection - action scores:  [6.0957456e-01 1.0933303e-01 2.4850368e-03 5.3080922e-04 4.2900728e-04
 2.3623083e-04 1.8307785e-04 1.6938262e-04 1.3273103e-04 1.2001684e-04]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.6785467  0.051001   0.01770918 0.01734983 0.0149223  0.01009801
 0.00597507 0.00454334 0.00354828 0.00263676]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.6938928  0.23396009 0.04538518 0.03582984 0.00851709 0.00762393
 0.00349411 0.00328344 0.00309398 0.00280645]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.7473886  0.5585609  0.0686297  0.03771401 0.00400677 0.00376015
 0.00263489 0.00227968 0.00195885 0.00177642]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [1.3682634  0.19984114 0.14611994 0.13881724 0.02958545 0.00909951
 0.00619648 0.0060368  0.00571234 0.00422241]  taking action:  0
Adding child.
Leaf selection - depth:  6
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  25
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);    
  wire [31:0] c;
  adder_8 a1(sum[7:0], c[0], in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c[1], in1[15:8], in2[15:8], c[0]);
  adder_8 a3(sum[23:16], c[2], in1[23:16], in2[23:16], c[1]);
  adder_8 a4(sum[31:24], cout, in1[31:24], in2[31:24], c[2]);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  148
LLM generates return in:  52.663913  seconds
Running getPromptScore: 
adder_32
output_files/2329780_adder_32/synth_script.sh
Running bash in x seconds:  0.891528

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.1
Backpropogation: incorporating estimates.
Current runs:  230.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 1.97575293e-03 -3.00545372e-02 -3.25893607e-02  3.70705536e-04
 -4.98459447e-01  6.28357816e-02 -8.19427348e-03  1.48253923e-03
  1.31954368e-03  1.14116957e-03]  taking action:  5
Leaf selection - depth:  1
Leaf selection - action scores:  [5.6989455e-01 1.1688193e-01 2.6566160e-03 5.6745892e-04 4.5862808e-04
 2.5254139e-04 1.9571844e-04 1.8107763e-04 1.4189545e-04 1.2830341e-04]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.62475777 0.05508738 0.0191281  0.01873996 0.01611793 0.0109071
 0.00645382 0.00490737 0.00383258 0.00284802]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.6261883  0.25629044 0.04971697 0.03924963 0.00933    0.0083516
 0.00382761 0.00359683 0.00338929 0.00307432]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.5864694  0.6303917  0.07673033 0.04216554 0.0044797  0.00420398
 0.0029459  0.00254876 0.00219006 0.0019861 ]  taking action:  1
Leaf selection - depth:  5
Leaf selection - action scores:  [1.803664   0.03485879 0.03441484 0.0242863  0.01235559 0.00466257
 0.00431402 0.00343704 0.00282695 0.00272086]  taking action:  0
Adding child.
Leaf selection - depth:  6
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  11
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);    
  wire c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42,c43,c44,c45,c46,c47,c48,c49,c50,c51,c52,c53,c54,c55,c56,c57,c58,c59,c60,c61,c62,c63;
  adder_8 a1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
  adder_8 a3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
  adder_8 a4(sum[31:24], c4, in1[31:24], in2[31:24], c3);
  adder_8 a5(sum[39:32], c5, in1[39:32], in2[39:32], c4);
  adder_8 a6(sum[47:40], c6, in1[47:40], in2[47:40], c5);
  adder_8 a7(sum[55:48], c7, in1[55:48], in2[55:48], c6);
  adder_8 a8(sum[63:56], cout, in1[63:56], in2[63:56], c7);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 failed\n'
Tokens:  460
LLM generates return in:  202.20771  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  231.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 2.24135129e-03 -2.99213216e-02 -3.25877521e-02  3.71507060e-04
 -4.98456116e-01  4.47435634e-02 -8.00778643e-03  1.48574473e-03
  1.32239675e-03  1.14363697e-03]  taking action:  5
Leaf selection - depth:  1
Leaf selection - action scores:  [5.1337337e-01 1.2397200e-01 2.8177667e-03 6.0188107e-04 4.8644849e-04
 2.6786057e-04 2.0759075e-04 1.9206182e-04 1.5050283e-04 1.3608630e-04]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.55523586 0.05889089 0.0204488  0.02003386 0.01723079 0.01166018
 0.00689942 0.0052462  0.0040972  0.00304467]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.54429644 0.27682534 0.05370047 0.04239444 0.01007756 0.00902076
 0.00413429 0.00388502 0.00366085 0.00332064]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.63608205 0.43022123 0.08405387 0.04619003 0.00490727 0.00460522
 0.00322707 0.00279203 0.00239909 0.00217566]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [0.88788676 0.24475442 0.17895964 0.17001571 0.03623463 0.01114458
 0.00758911 0.00739354 0.00699616 0.00517138]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [1.9507709e+00 7.8789587e-04 2.0089390e-05 5.5387145e-06 5.3384101e-06
 4.0682721e-06 3.4824729e-06 2.9159487e-06 2.2001332e-06 2.1722462e-06]  taking action:  0
Adding child.
Leaf selection - depth:  7
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  15
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);    
  wire [31:0] c;
  adder_8 a1(sum[7:0], c[0], in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c[1], in1[15:8], in2[15:8], c[0]);
  adder_8 a3(sum[23:16], c[2], in1[23:16], in2[23:16], c[1]);
  adder_8 a4(sum[31:24], cout, in1[31:24], in2[31:24], c[2]);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  147
LLM generates return in:  52.330963  seconds
Running getPromptScore: 
adder_32
output_files/2329780_adder_32/synth_script.sh
Running bash in x seconds:  0.897488

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.1
Backpropogation: incorporating estimates.
Current runs:  232.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 2.50637786e-03 -2.97883928e-02 -3.25861470e-02  3.72306860e-04
 -4.98452793e-01  5.02697864e-02 -7.82170087e-03  1.48894332e-03
  1.32524368e-03  1.14609905e-03]  taking action:  5
Leaf selection - depth:  1
Leaf selection - action scores:  [4.9032405e-01 1.3067797e-01 2.9701870e-03 6.3443836e-04 5.1276176e-04
 2.8234985e-04 2.1881987e-04 2.0245094e-04 1.5864392e-04 1.4344756e-04]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.5262855  0.06246322 0.02168923 0.02124912 0.01827601 0.01236749
 0.00731794 0.00556444 0.00434574 0.00322935]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.5120514  0.29593873 0.05740822 0.04532157 0.01077336 0.00964359
 0.00441974 0.00415326 0.00391361 0.00354991]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.5362792  0.47003365 0.09078857 0.04989094 0.00530046 0.00497421
 0.00348563 0.00301573 0.00259131 0.00234998]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [0.7116722  0.28261805 0.20664479 0.19631721 0.04184015 0.01286865
 0.00876315 0.00853732 0.00807847 0.00597139]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [1.2445983e+00 9.6497143e-04 2.4604378e-05 6.7835122e-06 6.5381901e-06
 4.9825958e-06 4.2651409e-06 3.5712933e-06 2.6946020e-06 2.6604475e-06]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [1.9497753e+00 1.0211864e-03 4.9277092e-04 9.1221642e-05 5.4540375e-05
 4.1658976e-05 3.0304453e-05 1.5942058e-05 1.2742740e-05 1.0471343e-05]  taking action:  0
Adding child.
Leaf selection - depth:  8
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  60
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);    
  wire [31:0] c;
  adder_8 a1(sum[7:0], c[0], in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c[1], in1[15:8], in2[15:8], c[0]);
  adder_8 a3(sum[23:16], c[2], in1[23:16], in2[23:16], c[1]);
  adder_8 a4(sum[31:24], cout, in1[31:24], in2[31:24], c[2]);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  146
LLM generates return in:  52.01149  seconds
Running getPromptScore: 
adder_32
output_files/2329780_adder_32/synth_script.sh
Running bash in x seconds:  0.893312

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.1
Backpropogation: incorporating estimates.
Current runs:  233.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 2.77083631e-03 -2.96557490e-02 -3.25845453e-02  3.73104944e-04
 -4.98449476e-01  5.47912438e-02 -7.63601420e-03  1.49213506e-03
  1.32808450e-03  1.14855586e-03]  taking action:  5
Leaf selection - depth:  1
Leaf selection - action scores:  [4.7087827e-01 1.3705622e-01 3.1151588e-03 6.6540460e-04 5.3778908e-04
 2.9613104e-04 2.2950023e-04 2.1233235e-04 1.6638717e-04 1.5044908e-04]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.5024224  0.06584202 0.02286245 0.02239854 0.0192646  0.01303648
 0.00771379 0.00586543 0.00458081 0.00340404]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.48620692 0.3138904  0.06089061 0.04807078 0.01142687 0.01022858
 0.00468784 0.0044052  0.00415101 0.00376525]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.47450256 0.5070901  0.09705706 0.05333566 0.00566643 0.00531766
 0.0037263  0.00322396 0.00277023 0.00251224]  taking action:  1
Leaf selection - depth:  5
Leaf selection - action scores:  [1.0545142  0.04269313 0.04214941 0.02974452 0.01513244 0.00571046
 0.00528357 0.00420949 0.00346229 0.00333236]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [1.9064876e+00 3.8508542e-02 2.7022394e-03 7.5515162e-04 7.3693844e-04
 5.5393676e-04 3.5132817e-04 2.1035821e-04 9.7176991e-05 8.3420389e-05]  taking action:  0
Adding child.
Leaf selection - depth:  7
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  66
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);    
  wire c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42,c43,c44,c45,c46,c47,c48,c49,c50,c51,c52,c53,c54,c55,c56,c57,c58,c59,c60,c61,c62,c63;
  adder_8 a1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
  adder_8 a3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
  adder_8 a4(sum[31:24], c4, in1[31:24], in2[31:24], c3);
  adder_8 a5(sum[39:32], c5, in1[39:32], in2[39:32], c4);
  adder_8 a6(sum[47:40], c6, in1[47:40], in2[47:40], c5);
  adder_8 a7(sum[55:48], c7, in1[55:48], in2[55:48], c6);
  adder_8 a8(sum[63:56], cout, in1[63:56], in2[63:56], c7);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 failed\n'
Tokens:  459
LLM generates return in:  201.857049  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  234.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 3.03473029e-03 -2.95233883e-02 -3.25829470e-02  3.73901325e-04
 -4.98446167e-01  4.18924521e-02 -7.45072388e-03  1.49531998e-03
  1.33091926e-03  1.15100742e-03]  taking action:  5
Leaf selection - depth:  1
Leaf selection - action scores:  [4.3599367e-01 1.4315054e-01 3.2536772e-03 6.9499243e-04 5.6170241e-04
 3.0929878e-04 2.3970516e-04 2.2177389e-04 1.7378572e-04 1.5713893e-04]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.46229818 0.06905569 0.02397835 0.02349179 0.02020489 0.01367277
 0.00809029 0.00615172 0.00480439 0.00357019]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.4426477  0.33086956 0.06418434 0.05067105 0.01204498 0.01078187
 0.00494142 0.00464349 0.00437555 0.00396892]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.4984331  0.38142067 0.10294455 0.05657101 0.00601015 0.00564023
 0.00395234 0.00341952 0.00293827 0.00266463]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [0.61585355 0.3159766  0.23103589 0.2194893  0.0467787  0.01438759
 0.0097975  0.00954502 0.00903201 0.00667622]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [9.8626882e-01 1.1142530e-03 2.8410688e-05 7.8329249e-06 7.5496514e-06
 5.7534057e-06 4.9249606e-06 4.1237740e-06 3.1114582e-06 3.0720200e-06]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [1.2439886e+00 1.2506928e-03 6.0351868e-04 1.1172324e-04 6.6798049e-05
 5.1021616e-05 3.7115224e-05 1.9524954e-05 1.5606605e-05 1.2824723e-05]  taking action:  0
Leaf selection - depth:  8
Leaf selection - action scores:  [1.9319192e+00 1.8675635e-02 5.3887762e-04 2.6879244e-04 7.5238728e-05
 2.8589226e-05 2.1860496e-05 1.8756784e-05 1.2945248e-05 9.1029087e-06]  taking action:  0
Adding child.
Leaf selection - depth:  9
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  269
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);    
  wire [31:0] c;
  adder_8 a1(sum[7:0], c[0], in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c[1], in1[15:8], in2[15:8], c[0]);
  adder_8 a3(sum[23:16], c[2], in1[23:16], in2[23:16], c[1]);
  adder_8 a4(sum[31:24], cout, in1[31:24], in2[31:24], c[2]);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  145
LLM generates return in:  51.719958  seconds
Running getPromptScore: 
adder_32
output_files/2329780_adder_32/synth_script.sh
Running bash in x seconds:  0.895697

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.1
Backpropogation: incorporating estimates.
Current runs:  235.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 3.29806337e-03 -2.93913089e-02 -3.25813521e-02  3.74696014e-04
 -4.98442864e-01  4.63627063e-02 -7.26582737e-03  1.49849813e-03
  1.33374800e-03  1.15345378e-03]  taking action:  5
Leaf selection - depth:  1
Leaf selection - action scores:  [4.2295241e-01 1.4899580e-01 3.3865343e-03 7.2337099e-04 5.8463839e-04
 3.2192835e-04 2.4949305e-04 2.3082960e-04 1.8088191e-04 1.6355539e-04]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.446837   0.07212632 0.02504456 0.02453637 0.02110332 0.01428074
 0.00845003 0.00642526 0.00501803 0.00372894]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.42685136 0.34701893 0.06731711 0.05314425 0.01263289 0.01130812
 0.00518261 0.00487013 0.00458912 0.00416264]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.4508894  0.40610963 0.10851309 0.05963108 0.00633526 0.00594532
 0.00416613 0.00360449 0.00309721 0.00280877]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [0.55398035 0.346135   0.25308713 0.24043849 0.05124351 0.01576081
 0.01073262 0.01045604 0.00989407 0.00731343]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [8.4610981e-01 1.2457727e-03 3.1764113e-05 8.7574763e-06 8.4407666e-06
 6.4325031e-06 5.5062733e-06 4.6105197e-06 3.4787161e-06 3.4346228e-06]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [9.8579955e-01 1.4441755e-03 6.9688330e-04 1.2900689e-04 7.7131735e-05
 5.8914684e-05 4.2856966e-05 2.2545475e-05 1.8020955e-05 1.4808715e-05]  taking action:  0
Leaf selection - depth:  8
Leaf selection - action scores:  [1.2330540e+00 2.2872888e-02 6.5998756e-04 3.2920219e-04 9.2148250e-05
 3.5014509e-05 2.6773532e-05 2.2972275e-05 1.5854626e-05 1.1148741e-05]  taking action:  0
Leaf selection - depth:  9
Leaf selection - action scores:  [0.37484398 0.31165287 0.2548109  0.20067744 0.10286478 0.10276124
 0.06629894 0.05281005 0.03647713 0.03455957]  taking action:  0
Adding child.
Leaf selection - depth:  10
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  26
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);    
  wire [31:0] c;
  adder_8 a1(sum[7:0], c[0], in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c[1], in1[15:8], in2[15:8], c[0]);
  adder_8 a3(sum[23:16], c[2], in1[23:16], in2[23:16], c[1]);
  adder_8 a4(sum[31:24], cout, in1[31:24], in2[31:24], c[2]);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  144
LLM generates return in:  51.390802  seconds
Running getPromptScore: 
adder_32
output_files/2329780_adder_32/synth_script.sh
Running bash in x seconds:  0.903655

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.1
Backpropogation: incorporating estimates.
Current runs:  236.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 3.56083914e-03 -2.92595090e-02 -3.25797606e-02  3.75489021e-04
 -4.98439568e-01  5.01943556e-02 -7.08132218e-03  1.50166956e-03
  1.33657075e-03  1.15589495e-03]  taking action:  5
Leaf selection - depth:  1
Leaf selection - action scores:  [4.1139591e-01 1.5462025e-01 3.5143725e-03 7.5067754e-04 6.0670788e-04
 3.3408083e-04 2.5891114e-04 2.3954318e-04 1.8771001e-04 1.6972944e-04]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.43329805 0.07507145 0.02606721 0.02553827 0.02196503 0.01486387
 0.00879507 0.00668762 0.00522293 0.0038812 ]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.41317973 0.36244944 0.07031042 0.05550736 0.01319462 0.01181094
 0.00541306 0.00508669 0.00479318 0.00434774]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.41613948 0.42959207 0.11380949 0.06254161 0.00664447 0.0062355
 0.00436947 0.00378042 0.00324838 0.00294586]  taking action:  1
Leaf selection - depth:  5
Leaf selection - action scores:  [0.78358865 0.04929778 0.04866994 0.03434602 0.01747344 0.00659388
 0.00610094 0.0048607  0.00399791 0.00384788]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [1.1174805e+00 4.7163140e-02 3.3095540e-03 9.2486804e-04 9.0256159e-04
 6.7843124e-04 4.3028739e-04 2.5763514e-04 1.1901702e-04 1.0216869e-04]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [1.5296975e+00 3.9016753e-01 2.7742786e-02 1.6384773e-03 2.5419949e-04
 1.7738945e-04 9.9769481e-05 8.2253682e-05 7.2755516e-05 7.1252551e-05]  taking action:  0
Adding child.
Leaf selection - depth:  8
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  17
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);    
  wire c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42,c43,c44,c45,c46,c47,c48,c49,c50,c51,c52,c53,c54,c55,c56,c57,c58,c59,c60,c61,c62,c63;
  adder_8 a1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
  adder_8 a3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
  adder_8 a4(sum[31:24], c4, in1[31:24], in2[31:24], c3);
  adder_8 a5(sum[39:32], c5, in1[39:32], in2[39:32], c4);
  adder_8 a6(sum[47:40], c6, in1[47:40], in2[47:40], c5);
  adder_8 a7(sum[55:48], c7, in1[55:48], in2[55:48], c6);
  adder_8 a8(sum[63:56], cout, in1[63:56], in2[63:56], c7);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 failed\n'
Tokens:  458
LLM generates return in:  201.534866  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  237.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 3.82306111e-03 -2.91279870e-02 -3.25781725e-02  3.76280356e-04
 -4.98436280e-01  4.01817795e-02 -6.89720584e-03  1.50483431e-03
  1.33938755e-03  1.15833098e-03]  taking action:  5
Leaf selection - depth:  1
Leaf selection - action scores:  [3.8677138e-01 1.6004717e-01 3.6377215e-03 7.7702512e-04 6.2800234e-04
 3.4580653e-04 2.6799852e-04 2.4795075e-04 1.9429834e-04 1.7568667e-04]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.4059216  0.07790532 0.02705122 0.02650231 0.02279419 0.01542497
 0.00912707 0.00694007 0.00542009 0.00402771]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.3845191  0.37724933 0.07318141 0.05777389 0.01373339 0.01229322
 0.00563409 0.00529439 0.0049889  0.00452527]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.43083212 0.34162337 0.11887013 0.06532258 0.00693993 0.00651277
 0.00456376 0.00394852 0.00339282 0.00307685]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [0.5099644  0.37386855 0.27336538 0.25970328 0.05534931 0.01702363
 0.01159255 0.01129382 0.01068682 0.00789941]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [7.5576681e-01 1.3646756e-03 3.4795845e-05 9.5933347e-06 9.2463970e-06
 7.0464539e-06 6.0318198e-06 5.0505710e-06 3.8107423e-06 3.7624407e-06]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [8.4571630e-01 1.6146373e-03 7.7913917e-04 1.4423407e-04 8.6235901e-05
 6.5868619e-05 4.7915546e-05 2.5206606e-05 2.0148040e-05 1.6556645e-05]  taking action:  0
Leaf selection - depth:  8
Leaf selection - action scores:  [9.77382064e-01 2.64113359e-02 7.62087991e-04 3.80129932e-04
 1.06403626e-04 4.04312705e-05 3.09154093e-05 2.65260987e-05
 1.83073462e-05 1.28734564e-05]  taking action:  0
Leaf selection - depth:  9
Leaf selection - action scores:  [0.27954414 0.38169527 0.31207836 0.24577866 0.12598312 0.12585631
 0.08119929 0.06467885 0.04467518 0.04232666]  taking action:  1
Adding child.
Leaf selection - depth:  10
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  26
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);    
  wire [31:0] carry;
  adder_8 A1(sum[7:0], carry[0], in1[7:0], in2[7:0], cin);
  adder_8 A2(sum[15:8], carry[1], in1[15:8], in2[15:8], carry[0]);
  adder_8 A3(sum[23:16], carry[2], in1[23:16], in2[23:16], carry[1]);
  adder_8 A4(sum[31:24], carry[3], in1[31:24], in2[31:24], carry[2]);
  adder_8 A5(sum[39:32], carry[4], in1[39:32], in2[39:32], carry[3]);
  adder_8 A6(sum[47:40], carry[5], in1[47:40], in2[47:40], carry[4]);
  adder_8 A7(sum[55:48], carry[6], in1[55:48], in2[55:48], carry[5]);
  adder_8 A8(sum[63:56], cout, in1[63:56], in2[63:56], carry[6]);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 failed\n'
Tokens:  288
LLM generates return in:  114.114851  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  238.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 4.08473278e-03 -2.89967409e-02 -3.25765877e-02  3.77070031e-04
 -4.98432998e-01  3.14207732e-02 -6.71347589e-03  1.50799241e-03
  1.34219844e-03  1.16076190e-03]  taking action:  5
Leaf selection - depth:  1
Leaf selection - action scores:  [3.6506552e-01 1.6529600e-01 3.7570226e-03 8.0250809e-04 6.4859801e-04
 3.5714745e-04 2.7678767e-04 2.5608245e-04 2.0067046e-04 1.8144841e-04]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.38201112 0.08063968 0.02800068 0.0274325  0.02359423 0.01596636
 0.00944742 0.00718366 0.00561032 0.00416908]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.35977593 0.3914901  0.07594392 0.05995479 0.01425181 0.01275728
 0.00584677 0.00549425 0.00517722 0.00469609]  taking action:  1
Adding child.
Leaf selection - depth:  4
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  62
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);    
  adder_8 a1(sum[7:0], cout, in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], cout, in1[15:8], in2[15:8], cout);
  adder_8 a3(sum[23:16], cout, in1[23:16], in2[23:16], cout);
  adder_8 a4(sum[31:24], cout, in1[31:24], in2[31:24], cout);
  adder_8 a5(sum[39:32], cout, in1[39:32], in2[39:32], cout);
  adder_8 a6(sum[47:40], cout, in1[47:40], in2[47:40], cout);
  adder_8 a7(sum[55:48], cout, in1[55:48], in2[55:48], cout);
  adder_8 a8(sum[63:56], cout, in1[63:56], in2[63:56], cout);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 failed\n'
Tokens:  256
LLM generates return in:  98.321802  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  239.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 4.34585758e-03 -2.88657691e-02 -3.25750062e-02  3.77858055e-04
 -4.98429723e-01  2.36904759e-02 -6.53012991e-03  1.51114391e-03
  1.34500346e-03  1.16318774e-03]  taking action:  5
Leaf selection - depth:  1
Leaf selection - action scores:  [3.4576270e-01 1.7038321e-01 3.8726500e-03 8.2720636e-04 6.6855951e-04
 3.6813915e-04 2.8530619e-04 2.6396374e-04 2.0684637e-04 1.8703274e-04]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.36091414 0.0832843  0.02891897 0.02833216 0.02436801 0.01648998
 0.00975725 0.00741925 0.00579432 0.00430581]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.37186348 0.1526154  0.07860944 0.06205911 0.01475203 0.01320503
 0.00605198 0.00568709 0.00535894 0.00486092]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.3768088  0.3588395  0.12372395 0.06798989 0.00722331 0.00677871
 0.00475012 0.00410975 0.00353136 0.00320249]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [0.44807523 0.39968228 0.29223987 0.27763447 0.05917091 0.01819902
 0.01239296 0.0120736  0.01142469 0.00844482]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [6.5825969e-01 1.4740182e-03 3.7583806e-05 1.0361986e-05 9.9872505e-06
 7.6110405e-06 6.5151103e-06 5.4552406e-06 4.1160724e-06 4.0639006e-06]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [7.1542197e-01 1.7687465e-03 8.5350423e-04 1.5800052e-04 9.4466697e-05
 7.2155461e-05 5.2488849e-05 2.7612454e-05 2.2071072e-05 1.8136896e-05]  taking action:  0
Leaf selection - depth:  8
Leaf selection - action scores:  [7.8865808e-01 2.9528771e-02 8.5204025e-04 4.2499814e-04 1.1896287e-04
 4.5203535e-05 3.4564480e-05 2.9657078e-05 2.0468235e-05 1.4392961e-05]  taking action:  0
Leaf selection - depth:  9
Leaf selection - action scores:  [0.3150547  0.17037186 0.36035702 0.28380075 0.14547276 0.14532635
 0.09376086 0.07468469 0.05158645 0.04887462]  taking action:  2
Adding child.
Leaf selection - depth:  10
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  62
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);    
  wire [31:0] cout_temp;
  adder_8 A1(sum[7:0], cout_temp[0], in1[7:0], in2[7:0], cin);
  adder_8 A2(sum[15:8], cout_temp[1], in1[15:8], in2[15:8], cout_temp[0]);
  adder_8 A3(sum[23:16], cout_temp[2], in1[23:16], in2[23:16], cout_temp[1]);
  adder_8 A4(sum[31:24], cout_temp[3], in1[31:24], in2[31:24], cout_temp[2]);
  adder_8 A5(sum[39:32], cout_temp[4], in1[39:32], in2[39:32], cout_temp[3]);
  adder_8 A6(sum[47:40], cout_temp[5], in1[47:40], in2[47:40], cout_temp[4]);
  adder_8 A7(sum[55:48], cout_temp[6], in1[55:48], in2[55:48], cout_temp[5]);
  adder_8 A8(sum[63:56], cout_temp[7], in1[63:56], in2[63:56], cout_temp[6]);
  assign cout = cout_temp[7];
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 failed\n'
Tokens:  334
LLM generates return in:  136.3667  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  240.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 4.60643893e-03 -2.87350699e-02 -3.25734280e-02  3.78644439e-04
 -4.98426455e-01  1.68190998e-02 -6.34716550e-03  1.51428886e-03
  1.34780263e-03  1.16560853e-03]  taking action:  5
Leaf selection - depth:  1
Leaf selection - action scores:  [3.2846427e-01 1.7532289e-01 3.9849239e-03 8.5118838e-04 6.8794208e-04
 3.7881205e-04 2.9357767e-04 2.7161645e-04 2.1284317e-04 1.9245510e-04]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.3421357  0.08584749 0.02980899 0.02920412 0.02511797 0.01699749
 0.01005755 0.00764759 0.00597264 0.00443832]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.34901482 0.15926027 0.08118748 0.06409437 0.01523583 0.0136381
 0.00625046 0.0058736  0.00553469 0.00502034]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.33437657 0.37540525 0.12839441 0.07055644 0.00749598 0.0070346
 0.00492943 0.00426489 0.00366467 0.00332338]  taking action:  1
Leaf selection - depth:  5
Leaf selection - action scores:  [0.63796073 0.05511659 0.05441464 0.03840001 0.0195359  0.00737218
 0.00682106 0.00543443 0.0044698  0.00430206]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [8.3206022e-01 5.4459304e-02 3.8215437e-03 1.0679456e-03 1.0421884e-03
 7.8338489e-04 4.9685308e-04 2.9749144e-04 1.3742902e-04 1.1797424e-04]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [8.8674462e-01 4.7785571e-01 3.3977836e-02 2.0067168e-03 3.1132952e-04
 2.1725681e-04 1.2219216e-04 1.0073978e-04 8.9106943e-05 8.7266199e-05]  taking action:  0
Leaf selection - depth:  8
Leaf selection - action scores:  [1.94607186e+00 3.40353046e-03 1.54274178e-03 1.32685993e-04
 1.13602364e-04 9.27032888e-05 5.74949445e-05 3.90424757e-05
 2.29708075e-05 9.78652224e-06]  taking action:  0
Adding child.
Leaf selection - depth:  9
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  11
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);    
  wire c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42,c43,c44,c45,c46,c47,c48,c49,c50,c51,c52,c53,c54,c55,c56,c57,c58,c59,c60,c61,c62,c63;
  adder_8 a1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
  adder_8 a3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
  adder_8 a4(sum[31:24], c4, in1[31:24], in2[31:24], c3);
  adder_8 a5(sum[39:32], c5, in1[39:32], in2[39:32], c4);
  adder_8 a6(sum[47:40], c6, in1[47:40], in2[47:40], c5);
  adder_8 a7(sum[55:48], c7, in1[55:48], in2[55:48], c6);
  adder_8 a8(sum[63:56], cout, in1[63:56], in2[63:56], c7);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 failed\n'
Tokens:  457
LLM generates return in:  201.216129  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  241.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 4.86648022e-03 -2.86046416e-02 -3.25718530e-02  3.79429194e-04
 -4.98423194e-01  1.06710260e-02 -6.16458030e-03  1.51742728e-03
  1.35059601e-03  1.16802430e-03]  taking action:  5
Leaf selection - depth:  1
Leaf selection - action scores:  [3.1285691e-01 1.8012714e-01 4.0941206e-03 8.7451295e-04 7.0679333e-04
 3.8919243e-04 3.0162238e-04 2.7905937e-04 2.1867557e-04 1.9772882e-04]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.32529277 0.08833633 0.0306732  0.0300508  0.02584618 0.01749027
 0.01034913 0.0078693  0.0061458  0.004567  ]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.32890064 0.16570055 0.08368614 0.06606697 0.01570473 0.01405783
 0.00644283 0.00605437 0.00570502 0.00517484]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.34455273 0.30949104 0.13290085 0.07303286 0.00775907 0.0072815
 0.00510244 0.00441458 0.00379329 0.00344002]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [0.40031558 0.42392707 0.3099672  0.29447582 0.06276022 0.01930298
 0.01314472 0.01280598 0.01211771 0.00895708]  taking action:  1
Adding child.
Leaf selection - depth:  6
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  25
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);    
  wire [63:0] carry;
  wire [31:0] in1_1, in2_1, in1_2, in2_2;
  wire [31:0] in1_3, in2_3, in1_4, in2_4;
  wire [31:0] in1_5, in2_5, in1_6, in2_6;
  wire [31:0] in1_7, in2_7, in1_8, in2_8;
  wire [31:0] in1_9, in2_9, in1_10, in2_10;
  wire [31:0] in1_11, in2_11, in1_12, in2_12;
  wire [31:0] in1_13, in2_13, in1_14, in2_14;
  wire [31:0] in1_15, in2_15, in1_16, in2_16;
  wire [31:0] in1_17, in2_17, in1_18, in2_18;
  wire [31:0] in1_19, in2_19, in1_20, in2_20;
  wire [31:0] in1_21, in2_21, in1_22, in2_22;
  wire [31:0] in1_23, in2_23, in1_24, in2_24;
  wire [31:0] in1_25, in2_25, in1_26, in2_26;
  wire [31:0] in1_27, in2_27, in1_28, in2_28;
  wire [31:0] in1_29, in2_29, in1_30, in2_30;
  wire [31:0] in1_31, in2_31, in1_32, in2_32;
  wire [31:0] in1_33, in2_33, in1_34, in2_34;
  wire [31:0] in1_35, in2_35, in1_36, in2_36;
  wire [31:0] in1_37, in2_37, in1_38, in2_38;
  wire [31:0] in1_39, in2_39, in1_40, in2_40;
  wire [31:0] in1_41, in2_41, in1_42, in2_42;
  wire [31:0] in1_43, in2_43, in1_44, in2_44;
  wire [31:0] in1_45, in2_45, in1_46, in2_46;
  wire [31:0] in1_47, in2_47, in1_48, in2_48;
  wire [31:0] in1_49, in2_49, in1_50, in2_50;
  wire [31:0] in1_51, in2_51, in1_52, in2_52;
  wire [31:0] in1_53, in2_53, in1_54, in2_54;
  wire [31:0] in1_55, in2_55, in1_56, in2_56;
  wire [31:0] in1_57, in2_57, in1_58, in2_58;
  wire [31:0] in1_59, in2_59, in1_60, in2_60;
  wire [31:0] in1_61, in2_61, in1_62, in2_62;
  wire [31:0] in1_63, in2_63, in1_64, in2_64;
  wire [31:0] in1_65, in2_65, in1_66, in2_66;
  wire [31:0] in1_67, in2_67, in1_68, in2_68;
  wire [31:0] in1_69, in2_69, in1_70, in2_70;
  wire [31:0] in
Path:  output_files/2329780_adder_32/2329780_simulation
Verilog compilation failed, error:  2
Compilation output:  b'output_files/2329780_adder_32/2329780_adder_32.v:72: syntax error\nI give up.\n'
Tokens:  993
LLM generates return in:  599.872131  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  242.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 5.12598479e-03 -2.84744825e-02 -3.25702813e-02  3.80212329e-04
 -4.98419940e-01 -3.98622420e-02 -5.98237195e-03  1.52055923e-03
  1.35338362e-03  1.17043508e-03]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [ 0.00013153 -0.0098839  -0.01738789  0.01005632 -0.06075333  0.00584899
 -0.03589225 -0.04358906  0.00895576  0.00659168]  taking action:  3
Leaf selection - depth:  2
Leaf selection - action scores:  [0.33101904 0.13771252 0.22909386 0.04048486 0.02881185 0.0134009
 0.01201483 0.00895588 0.00564427 0.00514542]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.33737227 0.38639593 0.11603105 0.04060058 0.01146149 0.01104627
 0.00730156 0.00519404 0.00401507 0.00348686]  taking action:  1
Leaf selection - depth:  4
Leaf selection - action scores:  [0.77004236 0.06823356 0.05429874 0.04276679 0.01436985 0.00767492
 0.00700291 0.00527298 0.00476959 0.00412897]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [1.1074926e+00 6.6946395e-02 3.4450125e-03 9.7858463e-04 9.2391478e-04
 6.2726845e-04 3.3369689e-04 2.9482594e-04 1.3337193e-04 1.1971811e-04]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [1.3490579e+00 5.6348336e-01 3.3882044e-02 2.0136333e-03 3.7305063e-04
 1.8902835e-04 1.2625191e-04 1.0103148e-04 9.7790544e-05 7.9724246e-05]  taking action:  0
Adding child.
Leaf selection - depth:  7
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  17
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
   wire c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42,c43,c44,c45,c46,c47,c48,c49,c50,c51,c52,c53,c54,c55,c56,c57,c58,c59,c60,c61,c62,c63;
  adder_8 a1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
  adder_8 a3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
  adder_8 a4(sum[31:24], c4, in1[31:24], in2[31:24], c3);
  adder_8 a5(sum[39:32], c5, in1[39:32], in2[39:32], c4);
  adder_8 a6(sum[47:40], c6, in1[47:40], in2[47:40], c5);
  adder_8 a7(sum[55:48], c7, in1[55:48], in2[55:48], c6);
  adder_8 a8(sum[63:56], cout, in1[63:56], in2[63:56], c7);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 failed\n'
Tokens:  458
LLM generates return in:  201.263172  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  243.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 4.63220885e-03 -2.83445909e-02 -3.25687129e-02  3.80993854e-04
 -4.98416692e-01 -3.98619589e-02 -5.80053813e-03  1.52368474e-03
  1.35616550e-03  1.17284091e-03]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [ 0.00077999 -0.00968001 -0.01727078  0.00359528 -0.06074297  0.00585367
 -0.03584159 -0.04356604  0.00898791  0.00661535]  taking action:  8
Adding child.
Leaf selection - depth:  2
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  21809
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
     wire [31:0] c;
     adder_8 a1(sum[7:0], c[0], in1[7:0], in2[7:0], cin);
     adder_8 a2(sum[15:8], c[1], in1[15:8], in2[15:8], c[0]);
     adder_8 a3(sum[23:16], c[2], in1[23:16], in2[23:16], c[1]);
     adder_8 a4(sum[31:24], cout, in1[31:24], in2[31:24], c[2]);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  151
LLM generates return in:  53.499232  seconds
Running getPromptScore: 
adder_32
output_files/2329780_adder_32/synth_script.sh
Running bash in x seconds:  0.896449

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.1
Backpropogation: incorporating estimates.
Current runs:  244.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 5.56335363e-03 -2.82149652e-02 -3.25671476e-02  3.81773779e-04
 -4.98413451e-01 -3.98616763e-02 -5.61907654e-03  1.52680385e-03
  1.35894169e-03  1.17524182e-03]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [ 0.00142612 -0.00947685 -0.0171541   0.0036081  -0.06073266  0.00585833
 -0.03579111 -0.04354311  0.05450998  0.00663893]  taking action:  8
Leaf selection - depth:  2
Leaf selection - action scores:  [1.2765635  0.27204812 0.09612066 0.016927   0.00837688 0.00352392
 0.00345359 0.0032517  0.00323708 0.00270076]  taking action:  0
Adding child.
Leaf selection - depth:  3
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  685
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
     wire [31:0] c;
     adder_8 a1(sum[7:0], c[0], in1[7:0], in2[7:0], cin);
     adder_8 a2(sum[15:8], c[1], in1[15:8], in2[15:8], c[0]);
     adder_8 a3(sum[23:16], c[2], in1[23:16], in2[23:16], c[1]);
     adder_8 a4(sum[31:24], cout, in1[31:24], in2[31:24], c[2]);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  150
LLM generates return in:  53.158016  seconds
Running getPromptScore: 
adder_32
output_files/2329780_adder_32/synth_script.sh
Running bash in x seconds:  0.897673

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.1
Backpropogation: incorporating estimates.
Current runs:  245.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 6.48086888e-03 -2.80856038e-02 -3.25655856e-02  3.82552114e-04
 -4.98410216e-01 -3.98613943e-02 -5.43798491e-03  1.52991661e-03
  1.36171222e-03  1.17763783e-03]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [ 0.00206995 -0.00927441 -0.01703783  0.00362087 -0.06072238  0.00586298
 -0.03574082 -0.04352025  0.06968396  0.00666243]  taking action:  8
Leaf selection - depth:  2
Leaf selection - action scores:  [0.83173233 0.33318955 0.11772328 0.02073126 0.01025954 0.0043159
 0.00422976 0.00398251 0.00396459 0.00330774]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [1.06536    0.7592988  0.06968883 0.02296219 0.00380734 0.00235016
 0.00234569 0.00208961 0.00191909 0.00189633]  taking action:  0
Adding child.
Leaf selection - depth:  4
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  3132
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
     wire [31:0] c;
     adder_8 a1(sum[7:0], c[0], in1[7:0], in2[7:0], cin);
     adder_8 a2(sum[15:8], c[1], in1[15:8], in2[15:8], c[0]);
     adder_8 a3(sum[23:16], c[2], in1[23:16], in2[23:16], c[1]);
     adder_8 a4(sum[31:24], cout, in1[31:24], in2[31:24], c[2]);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  149
LLM generates return in:  52.87602  seconds
Running getPromptScore: 
adder_32
output_files/2329780_adder_32/synth_script.sh
Running bash in x seconds:  0.900544

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.1
Backpropogation: incorporating estimates.
Current runs:  246.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 7.38504308e-03 -2.79565051e-02 -3.25640267e-02  3.83328869e-04
 -4.98406988e-01 -3.98611128e-02 -5.25726097e-03  1.53302304e-03
  1.36447712e-03  1.18002897e-03]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [ 0.00271153 -0.00907268 -0.01692197  0.00363359 -0.06071214  0.00586761
 -0.0356907  -0.04349748  0.07727093  0.00668585]  taking action:  8
Leaf selection - depth:  2
Leaf selection - action scores:  [0.66844445 0.38473415 0.13593513 0.02393839 0.0118467  0.00498358
 0.00488411 0.0045986  0.00457792 0.00381945]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.7023971  0.9299474  0.08535104 0.02812282 0.00466303 0.00287835
 0.00287287 0.00255924 0.00235039 0.00232251]  taking action:  1
Adding child.
Leaf selection - depth:  4
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  16
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
     wire c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42,c43,c44,c45,c46,c47,c48,c49,c50,c51,c52,c53,c54,c55,c56,c57,c58,c59,c60,c61,c62,c63;
     adder_8 a1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
     adder_8 a2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
     adder_8 a3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
     adder_8 a4(sum[31:24], c4, in1[31:24], in2[31:24], c3);
     adder_8 a5(sum[39:32], c5, in1[39:32], in2[39:32], c4);
     adder_8 a6(sum[47:40], c6, in1[47:40], in2[47:40], c5);
     adder_8 a7(sum[55:48], c7, in1[55:48], in2[55:48], c6);
     adder_8 a8(sum[63:56], cout, in1[63:56], in2[63:56], c7);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 failed\n'
Tokens:  461
LLM generates return in:  202.235496  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  247.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 6.88726205e-03 -2.78276674e-02 -3.25624710e-02  3.84104053e-04
 -4.98403767e-01 -3.98608320e-02 -5.07690251e-03  1.53612319e-03
  1.36723643e-03  1.18241528e-03]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [ 0.00335088 -0.00887165 -0.01680652  0.00364628 -0.06070193  0.00587223
 -0.03564075 -0.04347478  0.04182309  0.00670919]  taking action:  8
Leaf selection - depth:  2
Leaf selection - action scores:  [0.529606   0.43014583 0.15198009 0.02676393 0.01324501 0.00557181
 0.0054606  0.0051414  0.00511827 0.00427028]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.8033232  0.48690534 0.09855489 0.03247343 0.0053844  0.00332363
 0.00331731 0.00295516 0.002714   0.00268181]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [1.4431272  0.20228668 0.13063598 0.07049541 0.03595338 0.00974927
 0.00756746 0.00565941 0.00526321 0.00284633]  taking action:  0
Adding child.
Leaf selection - depth:  5
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  25
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
     wire [31:0] c;
     adder_8 a1(sum[7:0], c[0], in1[7:0], in2[7:0], cin);
     adder_8 a2(sum[15:8], c[1], in1[15:8], in2[15:8], c[0]);
     adder_8 a3(sum[23:16], c[2], in1[23:16], in2[23:16], c[1]);
     adder_8 a4(sum[31:24], cout, in1[31:24], in2[31:24], c[2]);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  148
LLM generates return in:  52.574996  seconds
Running getPromptScore: 
adder_32
output_files/2329780_adder_32/synth_script.sh
Running bash in x seconds:  0.892606

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.1
Backpropogation: incorporating estimates.
Current runs:  248.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 7.77516041e-03 -2.76990892e-02 -3.25609184e-02  3.84877676e-04
 -4.98400552e-01 -3.98605517e-02 -4.89690730e-03  1.53921710e-03
  1.36999018e-03  1.18479679e-03]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [ 0.00398803 -0.00867132 -0.01669146  0.00365892 -0.06069176  0.00587683
 -0.03559098 -0.04345216  0.0515245   0.00673244]  taking action:  8
Leaf selection - depth:  2
Leaf selection - action scores:  [0.48221457 0.47120115 0.16648585 0.02931842 0.01450919 0.00610361
 0.00598179 0.00563212 0.00560678 0.00467785]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.6281606  0.55027837 0.11018771 0.0363064  0.00601994 0.00371593
 0.00370886 0.00330397 0.00303435 0.00299835]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.9337313  0.24774958 0.15999575 0.08633889 0.04403372 0.01194037
 0.00926821 0.00693133 0.00644609 0.00348602]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [1.9510611e+00 4.9438985e-04 2.6072288e-05 5.6086446e-06 4.3227637e-06
 4.3097562e-06 3.5856390e-06 3.2769517e-06 1.9445165e-06 1.6013473e-06]  taking action:  0
Adding child.
Leaf selection - depth:  6
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  15
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
     wire [31:0] c;
     adder_8 a1(sum[7:0], c[0], in1[7:0], in2[7:0], cin);
     adder_8 a2(sum[15:8], c[1], in1[15:8], in2[15:8], c[0]);
     adder_8 a3(sum[23:16], c[2], in1[23:16], in2[23:16], c[1]);
     adder_8 a4(sum[31:24], cout, in1[31:24], in2[31:24], c[2]);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  147
LLM generates return in:  52.21185  seconds
Running getPromptScore: 
adder_32
output_files/2329780_adder_32/synth_script.sh
Running bash in x seconds:  0.898782

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.1
Backpropogation: incorporating estimates.
Current runs:  249.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 8.65041751e-03 -2.75707690e-02 -3.25593689e-02  3.85649747e-04
 -4.98397343e-01 -3.98602719e-02 -4.71727317e-03  1.54230480e-03
  1.37273840e-03  1.18717351e-03]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [ 0.00462292 -0.00847169 -0.0165768   0.00367151 -0.06068163  0.00588141
 -0.03554138 -0.04342962  0.05845407  0.00675562]  taking action:  8
Leaf selection - depth:  2
Leaf selection - action scores:  [0.44803864 0.5089554  0.17982528 0.03166752 0.01567171 0.00659265
 0.00646107 0.00608338 0.00605601 0.00505266]  taking action:  1
Adding child.
Leaf selection - depth:  3
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  62
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
     adder_8 A1(sum[7:0], cout, in1[7:0], in2[7:0], cin);
     adder_8 A2(sum[15:8], cout, in1[15:8], in2[15:8], cout);
     adder_8 A3(sum[23:16], cout, in1[23:16], in2[23:16], cout);
     adder_8 A4(sum[31:24], cout, in1[31:24], in2[31:24], cout);
     adder_8 A5(sum[39:32], cout, in1[39:32], in2[39:32], cout);
     adder_8 A6(sum[47:40], cout, in1[47:40], in2[47:40], cout);
     adder_8 A7(sum[55:48], cout, in1[55:48], in2[55:48], cout);
     adder_8 A8(sum[63:56], cout, in1[63:56], in2[63:56], cout);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 failed\n'
Tokens:  256
LLM generates return in:  98.156952  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  250.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 8.15272244e-03 -2.74427051e-02 -3.25578225e-02  3.86420275e-04
 -4.98394141e-01 -3.98599928e-02 -4.53799795e-03  1.54538633e-03
  1.37548114e-03  1.18954549e-03]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [ 0.0052557  -0.00827273 -0.01646253  0.00368406 -0.06067152  0.00588598
 -0.03549195 -0.04340716  0.03865124  0.00677872]  taking action:  8
Leaf selection - depth:  2
Leaf selection - action scores:  [0.47552118 0.22204812 0.19224131 0.033854   0.01675377 0.00704784
 0.00690717 0.00650341 0.00647415 0.00540152]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.53631437 0.607572   0.12070459 0.03977167 0.00659451 0.0040706
 0.00406285 0.00361932 0.00332396 0.00328453]  taking action:  1
Leaf selection - depth:  4
Leaf selection - action scores:  [1.7718152  0.04882644 0.03470895 0.03440221 0.01055599 0.00494768
 0.00469104 0.00453893 0.00360397 0.00341669]  taking action:  0
Adding child.
Leaf selection - depth:  5
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  11
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
     wire c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42,c43,c44,c45,c46,c47,c48,c49,c50,c51,c52,c53,c54,c55,c56,c57,c58,c59,c60,c61,c62,c63;
     adder_8 a1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
     adder_8 a2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
     adder_8 a3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
     adder_8 a4(sum[31:24], c4, in1[31:24], in2[31:24], c3);
     adder_8 a5(sum[39:32], c5, in1[39:32], in2[39:32], c4);
     adder_8 a6(sum[47:40], c6, in1[47:40], in2[47:40], c5);
     adder_8 a7(sum[55:48], c7, in1[55:48], in2[55:48], c6);
     adder_8 a8(sum[63:56], cout, in1[63:56], in2[63:56], c7);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 failed\n'
Tokens:  460
LLM generates return in:  201.953546  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  251.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 7.66128735e-03 -2.73148961e-02 -3.25562792e-02  3.87189269e-04
 -4.98390945e-01 -3.98597141e-02 -4.35907950e-03  1.54846173e-03
  1.37821842e-03  1.19191275e-03]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [ 0.00588633 -0.00807444 -0.01634865  0.00369657 -0.06066146  0.00589053
 -0.03544269 -0.04338477  0.02324902  0.00680173]  taking action:  8
Leaf selection - depth:  2
Leaf selection - action scores:  [0.4154286  0.23855059 0.20390269 0.03590759 0.01777005 0.00747536
 0.00732616 0.00689791 0.00686687 0.00572918]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.5732765  0.40683934 0.13037586 0.04295832 0.00712289 0.00439675
 0.00438838 0.00390931 0.00359029 0.0035477 ]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.7469633  0.28607655 0.18474716 0.09969556 0.05084576 0.01378755
 0.01070201 0.00800361 0.0074433  0.00402531]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [1.2447760e+00 6.0550147e-04 3.1931904e-05 6.8691588e-06 5.2942828e-06
 5.2783516e-06 4.3914929e-06 4.0134300e-06 2.3815367e-06 1.9612419e-06]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [1.9498723e+00 8.6217531e-04 5.4517947e-04 1.0631868e-04 5.7883019e-05
 3.6183043e-05 2.5394325e-05 1.8769226e-05 1.0523762e-05 9.3020080e-06]  taking action:  0
Adding child.
Leaf selection - depth:  7
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  60
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
     wire [31:0] c;
     adder_8 a1(sum[7:0], c[0], in1[7:0], in2[7:0], cin);
     adder_8 a2(sum[15:8], c[1], in1[15:8], in2[15:8], c[0]);
     adder_8 a3(sum[23:16], c[2], in1[23:16], in2[23:16], c[1]);
     adder_8 a4(sum[31:24], cout, in1[31:24], in2[31:24], c[2]);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  146
LLM generates return in:  51.969641  seconds
Running getPromptScore: 
adder_32
output_files/2329780_adder_32/synth_script.sh
Running bash in x seconds:  0.904362

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.1
Backpropogation: incorporating estimates.
Current runs:  252.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 8.51825430e-03 -2.71873404e-02 -3.25547389e-02  3.87956740e-04
 -4.98387756e-01 -3.98594361e-02 -4.18051569e-03  1.55153103e-03
  1.38095027e-03  1.19427531e-03]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [ 0.00651482 -0.00787682 -0.01623516  0.00370904 -0.06065142  0.00589507
 -0.03539359 -0.04336246  0.03092723  0.00682467]  taking action:  8
Leaf selection - depth:  2
Leaf selection - action scores:  [0.39431033 0.25415903 0.21493231 0.03784992 0.01873128 0.00787972
 0.00772245 0.00727103 0.00723832 0.00603908]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.506144   0.43953252 0.13937767 0.04592437 0.00761469 0.00470032
 0.00469138 0.00417923 0.00383818 0.00379265]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.64544606 0.3198433  0.20655361 0.11146303 0.05684729 0.01541495
 0.01196521 0.00894831 0.00832186 0.00450044]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [9.8640567e-01 6.9917284e-04 3.6871785e-05 7.9318206e-06 6.1133110e-06
 6.0949155e-06 5.0708591e-06 4.6343093e-06 2.7499616e-06 2.2646470e-06]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [1.2440480e+00 1.0559448e-03 6.6770578e-04 1.3021326e-04 7.0891932e-05
 4.4314995e-05 3.1101568e-05 2.2987513e-05 1.2888924e-05 1.1392587e-05]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [1.92818403e+00 2.25222744e-02 3.53904616e-04 3.26501438e-04
 9.70497131e-05 2.40351455e-05 2.04195385e-05 1.59584797e-05
 1.51996574e-05 1.12831085e-05]  taking action:  0
Adding child.
Leaf selection - depth:  8
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  269
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
     wire [31:0] c;
     adder_8 a1(sum[7:0], c[0], in1[7:0], in2[7:0], cin);
     adder_8 a2(sum[15:8], c[1], in1[15:8], in2[15:8], c[0]);
     adder_8 a3(sum[23:16], c[2], in1[23:16], in2[23:16], c[1]);
     adder_8 a4(sum[31:24], cout, in1[31:24], in2[31:24], c[2]);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  145
LLM generates return in:  51.613464  seconds
Running getPromptScore: 
adder_32
output_files/2329780_adder_32/synth_script.sh
Running bash in x seconds:  0.896716

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.1
Backpropogation: incorporating estimates.
Current runs:  253.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 9.36333939e-03 -2.70600366e-02 -3.25532017e-02  3.88722695e-04
 -4.98384573e-01 -3.98591586e-02 -4.00230443e-03  1.55459427e-03
  1.38367673e-03  1.19663321e-03]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [ 0.0071412  -0.00767988 -0.01612204  0.00372147 -0.06064142  0.00589959
 -0.03534466 -0.04334022  0.0372094   0.00684754]  taking action:  8
Leaf selection - depth:  2
Leaf selection - action scores:  [0.37708968 0.2690047  0.22542292 0.03969733 0.01964553 0.00826432
 0.00809938 0.00762592 0.00759161 0.00633384]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.45999497 0.4702387  0.14783233 0.04871015 0.0080766  0.00498544
 0.00497596 0.00443274 0.004071   0.00402271]  taking action:  1
Leaf selection - depth:  4
Leaf selection - action scores:  [1.0350108  0.05979993 0.04250962 0.04213393 0.0129284  0.00605965
 0.00574533 0.00555904 0.00441395 0.00418458]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [1.8915979e+00 5.2492294e-02 3.1352337e-03 8.6541113e-04 7.7287847e-04
 6.1757141e-04 3.2008643e-04 2.1129804e-04 1.1646928e-04 1.0722697e-04]  taking action:  0
Adding child.
Leaf selection - depth:  6
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  66
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
     wire c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42,c43,c44,c45,c46,c47,c48,c49,c50,c51,c52,c53,c54,c55,c56,c57,c58,c59,c60,c61,c62,c63;
     adder_8 a1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
     adder_8 a2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
     adder_8 a3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
     adder_8 a4(sum[31:24], c4, in1[31:24], in2[31:24], c3);
     adder_8 a5(sum[39:32], c5, in1[39:32], in2[39:32], c4);
     adder_8 a6(sum[47:40], c6, in1[47:40], in2[47:40], c5);
     adder_8 a7(sum[55:48], c7, in1[55:48], in2[55:48], c6);
     adder_8 a8(sum[63:56], cout, in1[63:56], in2[63:56], c7);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 failed\n'
Tokens:  459
LLM generates return in:  201.654702  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  254.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 8.87225620e-03 -2.69329831e-02 -3.25516675e-02  3.89487144e-04
 -4.98381396e-01 -3.98588816e-02 -3.82444364e-03  1.55765149e-03
  1.38639783e-03  1.19898647e-03]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [ 0.00776549 -0.00748358 -0.0160093   0.00373385 -0.06063146  0.00590409
 -0.03529589 -0.04331806  0.02577786  0.00687032]  taking action:  8
Leaf selection - depth:  2
Leaf selection - action scores:  [0.34269294 0.28318954 0.23544656 0.04146251 0.02051909 0.0086318
 0.00845953 0.00796502 0.00792918 0.00661548]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.48036954 0.3494609  0.15582897 0.05134501 0.00851348 0.00525512
 0.00524512 0.00467252 0.00429121 0.00424031]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.57991385 0.3503708  0.22626814 0.12210163 0.06227308 0.01688623
 0.01310723 0.00980238 0.00911615 0.00492998]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [8.4622461e-01 7.8169897e-04 4.1223906e-05 8.8680454e-06 6.8348891e-06
 6.8143222e-06 5.6693930e-06 5.1813154e-06 3.0745505e-06 2.5319523e-06]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [9.8584521e-01 1.2193000e-03 7.7100022e-04 1.5035731e-04 8.1858947e-05
 5.1170548e-05 3.5912999e-05 2.6543692e-05 1.4882847e-05 1.3155026e-05]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [1.2307668e+00 2.7584041e-02 4.3344288e-04 3.9988098e-04 1.1886114e-04
 2.9436922e-05 2.5008725e-05 1.9545067e-05 1.8615703e-05 1.3818930e-05]  taking action:  0
Leaf selection - depth:  8
Leaf selection - action scores:  [0.28966212 0.28518873 0.25960934 0.21991405 0.15500918 0.08859793
 0.06426872 0.06303745 0.04064146 0.03999947]  taking action:  0
Adding child.
Leaf selection - depth:  9
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  26
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
     wire [31:0] c;
     adder_8 a1(sum[7:0], c[0], in1[7:0], in2[7:0], cin);
     adder_8 a2(sum[15:8], c[1], in1[15:8], in2[15:8], c[0]);
     adder_8 a3(sum[23:16], c[2], in1[23:16], in2[23:16], c[1]);
     adder_8 a4(sum[31:24], cout, in1[31:24], in2[31:24], c[2]);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  144
LLM generates return in:  51.313809  seconds
Running getPromptScore: 
adder_32
output_files/2329780_adder_32/synth_script.sh
Running bash in x seconds:  0.897463

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.1
Backpropogation: incorporating estimates.
Current runs:  255.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 9.70297536e-03 -2.68061785e-02 -3.25501364e-02  3.90250096e-04
 -4.98378225e-01 -3.98586052e-02 -3.64693125e-03  1.56070272e-03
  1.38911360e-03  1.20133513e-03]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [ 0.00838773 -0.00728794 -0.01589694  0.00374619 -0.06062152  0.00590858
 -0.03524728 -0.04329597  0.03148963  0.00689304]  taking action:  8
Leaf selection - depth:  2
Leaf selection - action scores:  [0.3322374  0.29679465 0.24506053 0.04315555 0.02135695 0.00898427
 0.00880495 0.00829025 0.00825296 0.00688561]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.4426415  0.3701784  0.1634348  0.0538511  0.00892901 0.00551161
 0.00550113 0.00490058 0.00450066 0.00444728]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.53330725 0.37844372 0.24439754 0.13188483 0.06726262 0.01823921
 0.01415743 0.01058778 0.00984656 0.00532499]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [7.5586736e-01 8.5630832e-04 4.5158529e-05 9.7144566e-06 7.4872460e-06
 7.4647164e-06 6.2105087e-06 5.6758468e-06 3.3680014e-06 2.7736148e-06]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [8.4575468e-01 1.3632188e-03 8.6200441e-04 1.6810458e-04 9.1521084e-05
 5.7210407e-05 4.0151954e-05 2.9676748e-05 1.6639528e-05 1.4707766e-05]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [9.7562128e-01 3.1851307e-02 5.0049671e-04 4.6174275e-04 1.3724902e-04
 3.3990829e-05 2.8877588e-05 2.2568700e-05 2.1495562e-05 1.5956726e-05]  taking action:  0
Leaf selection - depth:  8
Leaf selection - action scores:  [0.22738111 0.34928343 0.31795523 0.2693386  0.18984671 0.10850986
 0.07871279 0.07720479 0.04977542 0.04898915]  taking action:  1
Adding child.
Leaf selection - depth:  9
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  62
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
     wire [31:0] cout_temp;
     adder_8 a1(sum[7:0], cout_temp[0], in1[7:0], in2[7:0], cin);
     adder_8 a2(sum[15:8], cout_temp[1], in1[15:8], in2[15:8], cout_temp[0]);
     adder_8 a3(sum[23:16], cout_temp[2], in1[23:16], in2[23:16], cout_temp[1]);
     adder_8 a4(sum[31:24], cout_temp[3], in1[31:24], in2[31:24], cout_temp[2]);
     adder_8 a5(sum[39:32], cout_temp[4], in1[39:32], in2[39:32], cout_temp[3]);
     adder_8 a6(sum[47:40], cout_temp[5], in1[47:40], in2[47:40], cout_temp[4]);
     adder_8 a7(sum[55:48], cout_temp[6], in1[55:48], in2[55:48], cout_temp[5]);
     adder_8 a8(sum[63:56], cout, in1[63:56], in2[63:56], cout_temp[6]);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 failed\n'
Tokens:  318
LLM generates return in:  128.233916  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  256.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 9.21519178e-03 -2.66796213e-02 -3.25486082e-02  3.91011558e-04
 -4.98375061e-01 -3.98583293e-02 -3.46976522e-03  1.56374800e-03
  1.39182407e-03  1.20367920e-03]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [ 0.0090079  -0.00709293 -0.01578494  0.0037585  -0.06061162  0.00591306
 -0.03519883 -0.04327396  0.02209971  0.00691567]  taking action:  8
Leaf selection - depth:  2
Leaf selection - action scores:  [0.3064558  0.3098858  0.25431132 0.04478462 0.02216315 0.00932341
 0.00913733 0.0086032  0.0085645  0.00714554]  taking action:  1
Leaf selection - depth:  3
Leaf selection - action scores:  [1.9476638e+00 1.2644454e-03 2.1099427e-04 2.0897889e-04 1.9695961e-04
 1.3018335e-04 1.1783719e-04 1.0864951e-04 8.9222085e-05 6.2280873e-05]  taking action:  0
Adding child.
Leaf selection - depth:  4
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  23
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
     adder_8 A1(sum[7:0], cout, in1[7:0], in2[7:0], cin);
     adder_8 A2(sum[15:8], cout, in1[15:8], in2[15:8], cout);
     adder_8 A3(sum[23:16], cout, in1[23:16], in2[23:16], cout);
     adder_8 A4(sum[31:24], cout, in1[31:24], in2[31:24], cout);
     adder_8 A5(sum[39:32], cout, in1[39:32], in2[39:32], cout);
     adder_8 A6(sum[47:40], cout, in1[47:40], in2[47:40], cout);
     adder_8 A7(sum[55:48], cout, in1[55:48], in2[55:48], cout);
     adder_8 A8(sum[63:56], cout, in1[63:56], in2[63:56], cout);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 failed\n'
Tokens:  255
LLM generates return in:  97.792601  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  257.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 8.73330358e-03 -2.65533101e-02 -3.25470829e-02  3.91771541e-04
 -4.98371903e-01 -3.98580539e-02 -3.29294355e-03  1.56678736e-03
  1.39452927e-03  1.20601871e-03]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [ 0.00962608 -0.00689856 -0.01567331  0.00377076 -0.06060175  0.00591752
 -0.03515054 -0.04325201  0.01396177  0.00693824]  taking action:  8
Leaf selection - depth:  2
Leaf selection - action scores:  [0.31633443 0.18167815 0.26323724 0.0463565  0.02294104 0.00965065
 0.00945804 0.00890516 0.0088651  0.00739634]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.38869855 0.3899737  0.17070208 0.05624564 0.00932605 0.00575669
 0.00574574 0.00511849 0.00470079 0.00464503]  taking action:  1
Leaf selection - depth:  4
Leaf selection - action scores:  [0.76857495 0.06905101 0.04908587 0.04865208 0.01492843 0.00699708
 0.00663414 0.00641902 0.00509679 0.00483193]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [1.1083624e+00 6.4289667e-02 3.8398614e-03 1.0599078e-03 9.4657898e-04
 7.5636746e-04 3.9202420e-04 2.5878620e-04 1.4264516e-04 1.3132569e-04]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [1.3741772e+00 5.3317016e-01 3.8103208e-02 2.5491358e-03 4.7809957e-04
 2.0487951e-04 1.8880289e-04 1.1643708e-04 9.2950439e-05 8.9830522e-05]  taking action:  0
Adding child.
Leaf selection - depth:  7
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  17
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
     wire c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42,c43,c44,c45,c46,c47,c48,c49,c50,c51,c52,c53,c54,c55,c56,c57,c58,c59,c60,c61,c62,c63;
     adder_8 a1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
     adder_8 a2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
     adder_8 a3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
     adder_8 a4(sum[31:24], c4, in1[31:24], in2[31:24], c3);
     adder_8 a5(sum[39:32], c5, in1[39:32], in2[39:32], c4);
     adder_8 a6(sum[47:40], c6, in1[47:40], in2[47:40], c5);
     adder_8 a7(sum[55:48], c7, in1[55:48], in2[55:48], c6);
     adder_8 a8(sum[63:56], cout, in1[63:56], in2[63:56], c7);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 failed\n'
Tokens:  458
LLM generates return in:  201.236307  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  258.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 8.25720014e-03 -2.64272435e-02 -3.25455607e-02  3.92530053e-04
 -4.98368750e-01 -3.98577791e-02 -3.11646422e-03  1.56982083e-03
  1.39722923e-03  1.20835370e-03]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [ 0.01024224 -0.00670483 -0.01556204  0.00378298 -0.06059192  0.00592197
 -0.0351024  -0.04323014  0.00684107  0.00696073]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [ 0.00187585  0.00258347 -0.45824456 -0.01254724 -0.03906886 -0.04168761
 -0.4919642  -0.49436587  0.01120431  0.00662604]  taking action:  8
Adding child.
Leaf selection - depth:  3
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  1312
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
  integer i;
  wire [31:0] carry;
  adder_8 A1(sum[7:0], carry[0], in1[7:0], in2[7:0], cin);
  adder_8 A2(sum[15:8], carry[1], in1[15:8], in2[15:8], carry[0]);
  adder_8 A3(sum[23:16], carry[2], in1[23:16], in2[23:16], carry[1]);
  adder_8 A4(sum[31:24], carry[3], in1[31:24], in2[31:24], carry[2]);
  adder_8 A5(sum[39:32], carry[4], in1[39:32], in2[39:32], carry[3]);
  adder_8 A6(sum[47:40], carry[5], in1[47:40], in2[47:40], carry[4]);
  adder_8 A7(sum[55:48], carry[6], in1[55:48], in2[55:48], carry[5]);
  adder_8 A8(sum[63:56], cout, in1[63:56], in2[63:56], carry[6]);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 failed\n'
Tokens:  299
LLM generates return in:  118.202469  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  259.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 7.78676656e-03 -2.63014200e-02 -3.25440413e-02  3.93287101e-04
 -4.98365604e-01 -3.98575048e-02 -2.94032526e-03  1.57284845e-03
  1.39992398e-03  1.21068418e-03]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [ 0.00959671 -0.00651171 -0.01545113  0.00379517 -0.06058211  0.0059264
 -0.03505442 -0.04320833  0.00684298  0.00698314]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [ 0.00278389  0.00305673 -0.45800525 -0.01233261 -0.03900621 -0.04163997
 -0.49191815 -0.4943336  -0.04436574  0.00666401]  taking action:  9
Adding child.
Leaf selection - depth:  3
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  378
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
  generate
  genvar i;
  for(i=0;i<32;i=i+1)
  begin: adder_loop
    wire [31:0] carry;
    adder_8 a8(sum[i*8+7:i*8], carry[7], in1[i*8+7:i*8], in2[i*8+7:i*8], cin);
    adder_8 a9(sum[i*8+31:i*8+8], cout, in1[i*8+31:i*8+8], in2[i*8+31:i*8+8], carry[7]);
  end
  endgenerate
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Verilog compilation failed, error:  49
Compilation output:  b"output_files/2329780_adder_32/2329780_adder_32.v:42: warning: Port 1 (sum) of adder_8 expects 8 bits, got 24.\noutput_files/2329780_adder_32/2329780_adder_32.v:42:        : Padding 16 high bits of the expression.\noutput_files/2329780_adder_32/2329780_adder_32.v:42: warning: Port 3 (in1) of adder_8 expects 8 bits, got 24.\noutput_files/2329780_adder_32/2329780_adder_32.v:42:        : Pruning 16 high bits of the expression.\noutput_files/2329780_adder_32/2329780_adder_32.v:42: warning: Port 4 (in2) of adder_8 expects 8 bits, got 24.\noutput_files/2329780_adder_32/2329780_adder_32.v:42:        : Pruning 16 high bits of the expression.\noutput_files/2329780_adder_32/2329780_adder_32.v:42: warning: Port 1 (sum) of adder_8 expects 8 bits, got 24.\noutput_files/2329780_adder_32/2329780_adder_32.v:42:        : Padding 16 high bits of the expression.\noutput_files/2329780_adder_32/2329780_adder_32.v:42: warning: Port 3 (in1) of adder_8 expects 8 bits, got 24.\noutput_files/2329780_adder_32/2329780_adder_32.v:42:        : Pruning 16 high bits of the expression.\noutput_files/2329780_adder_32/2329780_adder_32.v:42: warning: Port 4 (in2) of adder_8 expects 8 bits, got 24.\noutput_files/2329780_adder_32/2329780_adder_32.v:42:        : Pruning 16 high bits of the expression.\noutput_files/2329780_adder_32/2329780_adder_32.v:42: warning: Port 1 (sum) of adder_8 expects 8 bits, got 24.\noutput_files/2329780_adder_32/2329780_adder_32.v:42:        : Padding 16 high bits of the expression.\noutput_files/2329780_adder_32/2329780_adder_32.v:42: warning: Port 3 (in1) of adder_8 expects 8 bits, got 24.\noutput_files/2329780_adder_32/2329780_adder_32.v:42:        : Pruning 16 high bits of the expression.\noutput_files/2329780_adder_32/2329780_adder_32.v:42: warning: Port 4 (in2) of adder_8 expects 8 bits, got 24.\noutput_files/2329780_adder_32/2329780_adder_32.v:42:        : Pruning 16 high bits of the expression.\noutput_files/2329780_adder_32/2329780_adder_32.v:42: warning: Port 1 (sum) of adder_8 expects 8 bits, got 24.\noutput_files/2329780_adder_32/2329780_adder_32.v:42:        : Padding 16 high bits of the expression.\noutput_files/2329780_adder_32/2329780_adder_32.v:42: warning: Port 3 (in1) of adder_8 expects 8 bits, got 24.\noutput_files/2329780_adder_32/2329780_adder_32.v:42:        : Pruning 16 high bits of the expression.\noutput_files/2329780_adder_32/2329780_adder_32.v:42: warning: Port 4 (in2) of adder_8 expects 8 bits, got 24.\noutput_files/2329780_adder_32/2329780_adder_32.v:42:        : Pruning 16 high bits of the expression.\noutput_files/2329780_adder_32/2329780_adder_32.v:42: warning: Port 1 (sum) of adder_8 expects 8 bits, got 24.\noutput_files/2329780_adder_32/2329780_adder_32.v:42:        : Padding 16 high bits of the expression.\noutput_files/2329780_adder_32/2329780_adder_32.v:42: warning: Port 3 (in1) of adder_8 expects 8 bits, got 24.\noutput_files/2329780_adder_32/2329780_adder_32.v:42:        : Pruning 16 high bits of the expression.\noutput_files/2329780_adder_32/2329780_adder_32.v:42: warning: Port 4 (in2) of adder_8 expects 8 bits, got 24.\noutput_files/2329780_adder_32/2329780_adder_32.v:42:        : Pruning 16 high bits of the expression.\noutput_files/2329780_adder_32/2329780_adder_32.v:42: warning: Part select sum[71:48] is out of range.\noutput_files/2329780_adder_32/2329780_adder_32.v:42: warning: Port 1 (sum) of adder_8 expects 8 bits, got 24.\noutput_files/2329780_adder_32/2329780_adder_32.v:42:        : Padding 16 high bits of the expression.\noutput_files/2329780_adder_32/2329780_adder_32.v:42: warning: Port 3 (in1) of adder_8 expects 8 bits, got 24.\noutput_files/2329780_adder_32/2329780_adder_32.v:42:        : Pruning 16 high bits of the expression.\noutput_files/2329780_adder_32/2329780_adder_32.v:42: warning: Port 4 (in2) of adder_8 expects 8 bits, got 24.\noutput_files/2329780_adder_32/2329780_adder_32.v:42:        : Pruning 16 high bits of the expression.\noutput_files/2329780_adder_32/2329780_adder_32.v:42: warning: Part select sum[79:56] is out of range.\noutput_files/2329780_adder_32/2329780_adder_32.v:42: warning: Port 1 (sum) of adder_8 expects 8 bits, got 24.\noutput_files/2329780_adder_32/2329780_adder_32.v:42:        : Padding 16 high bits of the expression.\noutput_files/2329780_adder_32/2329780_adder_32.v:42: warning: Port 3 (in1) of adder_8 expects 8 bits, got 24.\noutput_files/2329780_adder_32/2329780_adder_32.v:42:        : Pruning 16 high bits of the expression.\noutput_files/2329780_adder_32/2329780_adder_32.v:42: warning: Port 4 (in2) of adder_8 expects 8 bits, got 24.\noutput_files/2329780_adder_32/2329780_adder_32.v:42:        : Pruning 16 high bits of the expression.\noutput_files/2329780_adder_32/2329780_adder_32.v:42: warning: Part select sum[87:64] is out of range.\noutput_files/2329780_adder_32/2329780_adder_32.v:42: error: Output port expression must support continuous assignment.\noutput_files/2329780_adder_32/2329780_adder_32.v:42:      : Port 1 (sum) of adder_8 is connected to sum[((i)*('sd8))+('sd31):((i)*('sd8))+('sd8)]\noutput_files/2329780_adder_32/2329780_adder_32.v:42: warning: Port 3 (in1) of adder_8 expects 8 bits, got 24.\noutput_files/2329780_adder_32/2329780_adder_32.v:42:        : Pruning 16 high bits of the expression.\noutput_files/2329780_adder_32/2329780_adder_32.v:42: warning: Port 4 (in2) of adder_8 expects 8 bits, got 24.\noutput_files/2329780_adder_32/2329780_adder_32.v:42:        : Pruning 16 high bits of the expression.\noutput_files/2329780_adder_32/2329780_adder_32.v:41: warning: Part select sum[71:64] is out of range.\noutput_files/2329780_adder_32/2329780_adder_32.v:41: error: Output port expression must support continuous assignment.\noutput_files/2329780_adder_32/2329780_adder_32.v:41:      : Port 1 (sum) of adder_8 is connected to sum[((i)*('sd8))+('sd7):(i)*('sd8)]\noutput_files/2329780_adder_32/2329780_adder_32.v:42: warning: Part select sum[95:72] is out of range.\noutput_files/2329780_adder_32/2329780_adder_32.v:42: error: Output port expression must support continuous assignment.\noutput_files/2329780_adder_32/2329780_adder_32.v:42:      : Port 1 (sum) of adder_8 is connected to sum[((i)*('sd8))+('sd31):((i)*('sd8))+('sd8)]\noutput_files/2329780_adder_32/2329780_adder_32.v:42: warning: Port 3 (in1) of adder_8 expects 8 bits, got 24.\noutput_files/2329780_adder_32/2329780_adder_32.v:42:        : Pruning 16 high bits of the expression.\noutput_files/2329780_adder_32/2329780_adder_32.v:42: warning: Port 4 (in2) of adder_8 expects 8 bits, got 24.\noutput_files/2329780_adder_32/2329780_adder_32.v:42:        : Pruning 16 high bits of the expression.\noutput_files/2329780_adder_32/2329780_adder_32.v:41: warning: Part select sum[79:72] is out of range.\noutput_files/2329780_adder_32/2329780_adder_32.v:41: error: Output port expression must support continuous assignment.\noutput_files/2329780_adder_32/2329780_adder_32.v:41:      : Port 1 (sum) of adder_8 is connected to sum[((i)*('sd8))+('sd7):(i)*('sd8)]\noutput_files/2329780_adder_32/2329780_adder_32.v:42: warning: Part select sum[103:80] is out of range.\noutput_files/2329780_adder_32/2329780_adder_32.v:42: error: Output port expression must support continuous assignment.\noutput_files/2329780_adder_32/2329780_adder_32.v:42:      : Port 1 (sum) of adder_8 is connected to sum[((i)*('sd8))+('sd31):((i)*('sd8))+('sd8)]\noutput_files/2329780_adder_32/2329780_adder_32.v:42: warning: Port 3 (in1) of adder_8 expects 8 bits, got 24.\noutput_files/2329780_adder_32/2329780_adder_32.v:42:        : Pruning 16 high bits of the expression.\noutput_files/2329780_adder_32/2329780_adder_32.v:42: warning: Port 4 (in2) of adder_8 expects 8 bits, got 24.\noutput_files/2329780_adder_32/2329780_adder_32.v:42:        : Pruning 16 high bits of the expression.\noutput_files/2329780_adder_32/2329780_adder_32.v:41: warning: Part select sum[87:80] is out of range.\noutput_files/2329780_adder_32/2329780_adder_32.v:41: error: Output port expression must support continuous assignment.\noutput_files/2329780_adder_32/2329780_adder_32.v:41:      : Port 1 (sum) of adder_8 is connected to sum[((i)*('sd8))+('sd7):(i)*('sd8)]\noutput_files/2329780_adder_32/2329780_adder_32.v:42: warning: Part select sum[111:88] is out of range.\noutput_files/2329780_adder_32/2329780_adder_32.v:42: error: Output port expression must support continuous assignment.\noutput_files/2329780_adder_32/2329780_adder_32.v:42:      : Port 1 (sum) of adder_8 is connected to sum[((i)*('sd8))+('sd31):((i)*('sd8))+('sd8)]\noutput_files/2329780_adder_32/2329780_adder_32.v:42: warning: Port 3 (in1) of adder_8 expects 8 bits, got 24.\noutput_files/2329780_adder_32/2329780_adder_32.v:42:        : Pruning 16 high bits of the expression.\noutput_files/2329780_adder_32/2329780_adder_32.v:42: warning: Port 4 (in2) of adder_8 expects 8 bits, got 24.\noutput_files/2329780_adder_32/2329780_adder_32.v:42:        : Pruning 16 high bits of the expression.\noutput_files/2329780_adder_32/2329780_adder_32.v:41: warning: Part select sum[95:88] is out of range.\noutput_files/2329780_adder_32/2329780_adder_32.v:41: error: Output port expression must support continuous assignment.\noutput_files/2329780_adder_32/2329780_adder_32.v:41:      : Port 1 (sum) of adder_8 is connected to sum[((i)*('sd8))+('sd7):(i)*('sd8)]\noutput_files/2329780_adder_32/2329780_adder_32.v:42: warning: Part select sum[119:96] is out of range.\noutput_files/2329780_adder_32/2329780_adder_32.v:42: error: Output port expression must support continuous assignment.\noutput_files/2329780_adder_32/2329780_adder_32.v:42:      : Port 1 (sum) of adder_8 is connected to sum[((i)*('sd8))+('sd31):((i)*('sd8))+('sd8)]\noutput_files/2329780_adder_32/2329780_adder_32.v:42: warning: Port 3 (in1) of adder_8 expects 8 bits, got 24.\noutput_files/2329780_adder_32/2329780_adder_32.v:42:        : Pruning 16 high bits of the expression.\noutput_files/2329780_adder_32/2329780_adder_32.v:42: warning: Port 4 (in2) of adder_8 expects 8 bits, got 24.\noutput_files/2329780_adder_32/2329780_adder_32.v:42:        : Pruning 16 high bits of the expression.\noutput_files/2329780_adder_32/2329780_adder_32.v:41: warning: Part select sum[103:96] is out of range.\noutput_files/2329780_adder_32/2329780_adder_32.v:41: error: Output port expression must support continuous assignment.\noutput_files/2329780_adder_32/2329780_adder_32.v:41:      : Port 1 (sum) of adder_8 is connected to sum[((i)*('sd8))+('sd7):(i)*('sd8)]\noutput_files/2329780_adder_32/2329780_adder_32.v:42: warning: Part select sum[127:104] is out of range.\noutput_files/2329780_adder_32/2329780_adder_32.v:42: error: Output port expression must support continuous assignment.\noutput_files/2329780_adder_32/2329780_adder_32.v:42:      : Port 1 (sum) of adder_8 is connected to sum[((i)*('sd8))+('sd31):((i)*('sd8))+('sd8)]\noutput_files/2329780_adder_32/2329780_adder_32.v:42: warning: Port 3 (in1) of adder_8 expects 8 bits, got 24.\noutput_files/2329780_adder_32/2329780_adder_32.v:42:        : Pruning 16 high bits of the expression.\noutput_files/2329780_adder_32/2329780_adder_32.v:42: warning: Port 4 (in2) of adder_8 expects 8 bits, got 24.\noutput_files/2329780_adder_32/2329780_adder_32.v:42:        : Pruning 16 high bits of the expression.\noutput_files/2329780_adder_32/2329780_adder_32.v:41: warning: Part select sum[111:104] is out of range.\noutput_files/2329780_adder_32/2329780_adder_32.v:41: error: Output port expression must support continuous assignment.\noutput_files/2329780_adder_32/2329780_adder_32.v:41:      : Port 1 (sum) of adder_8 is connected to sum[((i)*('sd8))+('sd7):(i)*('sd8)]\noutput_files/2329780_adder_32/2329780_adder_32.v:42: warning: Part select sum[135:112] is out of range.\noutput_files/2329780_adder_32/2329780_adder_32.v:42: error: Output port expression must support continuous assignment.\noutput_files/2329780_adder_32/2329780_adder_32.v:42:      : Port 1 (sum) of adder_8 is connected to sum[((i)*('sd8))+('sd31):((i)*('sd8))+('sd8)]\noutput_files/2329780_adder_32/2329780_adder_32.v:42: warning: Port 3 (in1) of adder_8 expects 8 bits, got 24.\noutput_files/2329780_adder_32/2329780_adder_32.v:42:        : Pruning 16 high bits of the expression.\noutput_files/2329780_adder_32/2329780_adder_32.v:42: warning: Port 4 (in2) of adder_8 expects 8 bits, got 24.\noutput_files/2329780_adder_32/2329780_adder_32.v:42:        : Pruning 16 high bits of the expression.\noutput_files/2329780_adder_32/2329780_adder_32.v:41: warning: Part select sum[119:112] is out of range.\noutput_files/2329780_adder_32/2329780_adder_32.v:41: error: Output port expression must support continuous assignment.\noutput_files/2329780_adder_32/2329780_adder_32.v:41:      : Port 1 (sum) of adder_8 is connected to sum[((i)*('sd8))+('sd7):(i)*('sd8)]\noutput_files/2329780_adder_32/2329780_adder_32.v:42: warning: Part select sum[143:120] is out of range.\noutput_files/2329780_adder_32/2329780_adder_32.v:42: error: Output port expression must support continuous assignment.\noutput_files/2329780_adder_32/2329780_adder_32.v:42:      : Port 1 (sum) of adder_8 is connected to sum[((i)*('sd8))+('sd31):((i)*('sd8))+('sd8)]\noutput_files/2329780_adder_32/2329780_adder_32.v:42: warning: Port 3 (in1) of adder_8 expects 8 bits, got 24.\noutput_files/2329780_adder_32/2329780_adder_32.v:42:        : Pruning 16 high bits of the expression.\noutput_files/2329780_adder_32/2329780_adder_32.v:42: warning: Port 4 (in2) of adder_8 expects 8 bits, got 24.\noutput_files/2329780_adder_32/2329780_adder_32.v:42:        : Pruning 16 high bits of the expression.\noutput_files/2329780_adder_32/2329780_adder_32.v:41: warning: Part select sum[127:120] is out of range.\noutput_files/2329780_adder_32/2329780_adder_32.v:41: error: Output port expression must support continuous assignment.\noutput_files/2329780_adder_32/2329780_adder_32.v:41:      : Port 1 (sum) of adder_8 is connected to sum[((i)*('sd8))+('sd7):(i)*('sd8)]\noutput_files/2329780_adder_32/2329780_adder_32.v:42: warning: Part select sum[151:128] is out of range.\noutput_files/2329780_adder_32/2329780_adder_32.v:42: error: Output port expression must support continuous assignment.\noutput_files/2329780_adder_32/2329780_adder_32.v:42:      : Port 1 (sum) of adder_8 is connected to sum[((i)*('sd8))+('sd31):((i)*('sd8))+('sd8)]\noutput_files/2329780_adder_32/2329780_adder_32.v:42: warning: Port 3 (in1) of adder_8 expects 8 bits, got 24.\noutput_files/2329780_adder_32/2329780_adder_32.v:42:        : Pruning 16 high bits of the expression.\noutput_files/2329780_adder_32/2329780_adder_32.v:42: warning: Port 4 (in2) of adder_8 expects 8 bits, got 24.\noutput_files/2329780_adder_32/2329780_adder_32.v:42:        : Pruning 16 high bits of the expression.\noutput_files/2329780_adder_32/2329780_adder_32.v:41: warning: Part select sum[135:128] is out of range.\noutput_files/2329780_adder_32/2329780_adder_32.v:41: error: Output port expression must support continuous assignment.\noutput_files/2329780_adder_32/2329780_adder_32.v:41:      : Port 1 (sum) of adder_8 is connected to sum[((i)*('sd8))+('sd7):(i)*('sd8)]\noutput_files/2329780_adder_32/2329780_adder_32.v:42: warning: Part select sum[159:136] is out of range.\noutput_files/2329780_adder_32/2329780_adder_32.v:42: error: Output port expression must support continuous assignment.\noutput_files/2329780_adder_32/2329780_adder_32.v:42:      : Port 1 (sum) of adder_8 is connected to sum[((i)*('sd8))+('sd31):((i)*('sd8))+('sd8)]\noutput_files/2329780_adder_32/2329780_adder_32.v:42: warning: Port 3 (in1) of adder_8 expects 8 bits, got 24.\noutput_files/2329780_adder_32/2329780_adder_32.v:42:        : Pruning 16 high bits of the expression.\noutput_files/2329780_adder_32/2329780_adder_32.v:42: warning: Port 4 (in2) of adder_8 expects 8 bits, got 24.\noutput_files/2329780_adder_32/2329780_adder_32.v:42:        : Pruning 16 high bits of the expression.\noutput_files/2329780_adder_32/2329780_adder_32.v:41: warning: Part select sum[143:136] is out of range.\noutput_files/2329780_adder_32/2329780_adder_32.v:41: error: Output port expression must support continuous assignment.\noutput_files/2329780_adder_32/2329780_adder_32.v:41:      : Port 1 (sum) of adder_8 is connected to sum[((i)*('sd8))+('sd7):(i)*('sd8)]\noutput_files/2329780_adder_32/2329780_adder_32.v:42: warning: Part select sum[167:144] is out of range.\noutput_files/2329780_adder_32/2329780_adder_32.v:42: error: Output port expression must support continuous assignment.\noutput_files/2329780_adder_32/2329780_adder_32.v:42:      : Port 1 (sum) of adder_8 is connected to sum[((i)*('sd8))+('sd31):((i)*('sd8))+('sd8)]\noutput_files/2329780_adder_32/2329780_adder_32.v:42: warning: Port 3 (in1) of adder_8 expects 8 bits, got 24.\noutput_files/2329780_adder_32/2329780_adder_32.v:42:        : Pruning 16 high bits of the expression.\noutput_files/2329780_adder_32/2329780_adder_32.v:42: warning: Port 4 (in2) of adder_8 expects 8 bits, got 24.\noutput_files/2329780_adder_32/2329780_adder_32.v:42:        : Pruning 16 high bits of the expression.\noutput_files/2329780_adder_32/2329780_adder_32.v:41: warning: Part select sum[151:144] is out of range.\noutput_files/2329780_adder_32/2329780_adder_32.v:41: error: Output port expression must support continuous assignment.\noutput_files/2329780_adder_32/2329780_adder_32.v:41:      : Port 1 (sum) of adder_8 is connected to sum[((i)*('sd8))+('sd7):(i)*('sd8)]\noutput_files/2329780_adder_32/2329780_adder_32.v:42: warning: Part select sum[175:152] is out of range.\noutput_files/2329780_adder_32/2329780_adder_32.v:42: error: Output port expression must support continuous assignment.\noutput_files/2329780_adder_32/2329780_adder_32.v:42:      : Port 1 (sum) of adder_8 is connected to sum[((i)*('sd8))+('sd31):((i)*('sd8))+('sd8)]\noutput_files/2329780_adder_32/2329780_adder_32.v:42: warning: Port 3 (in1) of adder_8 expects 8 bits, got 24.\noutput_files/2329780_adder_32/2329780_adder_32.v:42:        : Pruning 16 high bits of the expression.\noutput_files/2329780_adder_32/2329780_adder_32.v:42: warning: Port 4 (in2) of adder_8 expects 8 bits, got 24.\noutput_files/2329780_adder_32/2329780_adder_32.v:42:        : Pruning 16 high bits of the expression.\noutput_files/2329780_adder_32/2329780_adder_32.v:41: warning: Part select sum[159:152] is out of range.\noutput_files/2329780_adder_32/2329780_adder_32.v:41: error: Output port expression must support continuous assignment.\noutput_files/2329780_adder_32/2329780_adder_32.v:41:      : Port 1 (sum) of adder_8 is connected to sum[((i)*('sd8))+('sd7):(i)*('sd8)]\noutput_files/2329780_adder_32/2329780_adder_32.v:42: warning: Part select sum[183:160] is out of range.\noutput_files/2329780_adder_32/2329780_adder_32.v:42: error: Output port expression must support continuous assignment.\noutput_files/2329780_adder_32/2329780_adder_32.v:42:      : Port 1 (sum) of adder_8 is connected to sum[((i)*('sd8))+('sd31):((i)*('sd8))+('sd8)]\noutput_files/2329780_adder_32/2329780_adder_32.v:42: warning: Port 3 (in1) of adder_8 expects 8 bits, got 24.\noutput_files/2329780_adder_32/2329780_adder_32.v:42:        : Pruning 16 high bits of the expression.\noutput_files/2329780_adder_32/2329780_adder_32.v:42: warning: Port 4 (in2) of adder_8 expects 8 bits, got 24.\noutput_files/2329780_adder_32/2329780_adder_32.v:42:        : Pruning 16 high bits of the expression.\noutput_files/2329780_adder_32/2329780_adder_32.v:41: warning: Part select sum[167:160] is out of range.\noutput_files/2329780_adder_32/2329780_adder_32.v:41: error: Output port expression must support continuous assignment.\noutput_files/2329780_adder_32/2329780_adder_32.v:41:      : Port 1 (sum) of adder_8 is connected to sum[((i)*('sd8))+('sd7):(i)*('sd8)]\noutput_files/2329780_adder_32/2329780_adder_32.v:42: warning: Part select sum[191:168] is out of range.\noutput_files/2329780_adder_32/2329780_adder_32.v:42: error: Output port expression must support continuous assignment.\noutput_files/2329780_adder_32/2329780_adder_32.v:42:      : Port 1 (sum) of adder_8 is connected to sum[((i)*('sd8))+('sd31):((i)*('sd8))+('sd8)]\noutput_files/2329780_adder_32/2329780_adder_32.v:42: warning: Port 3 (in1) of adder_8 expects 8 bits, got 24.\noutput_files/2329780_adder_32/2329780_adder_32.v:42:        : Pruning 16 high bits of the expression.\noutput_files/2329780_adder_32/2329780_adder_32.v:42: warning: Port 4 (in2) of adder_8 expects 8 bits, got 24.\noutput_files/2329780_adder_32/2329780_adder_32.v:42:        : Pruning 16 high bits of the expression.\noutput_files/2329780_adder_32/2329780_adder_32.v:41: warning: Part select sum[175:168] is out of range.\noutput_files/2329780_adder_32/2329780_adder_32.v:41: error: Output port expression must support continuous assignment.\noutput_files/2329780_adder_32/2329780_adder_32.v:41:      : Port 1 (sum) of adder_8 is connected to sum[((i)*('sd8))+('sd7):(i)*('sd8)]\noutput_files/2329780_adder_32/2329780_adder_32.v:42: warning: Part select sum[199:176] is out of range.\noutput_files/2329780_adder_32/2329780_adder_32.v:42: error: Output port expression must support continuous assignment.\noutput_files/2329780_adder_32/2329780_adder_32.v:42:      : Port 1 (sum) of adder_8 is connected to sum[((i)*('sd8))+('sd31):((i)*('sd8))+('sd8)]\noutput_files/2329780_adder_32/2329780_adder_32.v:42: warning: Port 3 (in1) of adder_8 expects 8 bits, got 24.\noutput_files/2329780_adder_32/2329780_adder_32.v:42:        : Pruning 16 high bits of the expression.\noutput_files/2329780_adder_32/2329780_adder_32.v:42: warning: Port 4 (in2) of adder_8 expects 8 bits, got 24.\noutput_files/2329780_adder_32/2329780_adder_32.v:42:        : Pruning 16 high bits of the expression.\noutput_files/2329780_adder_32/2329780_adder_32.v:41: warning: Part select sum[183:176] is out of range.\noutput_files/2329780_adder_32/2329780_adder_32.v:41: error: Output port expression must support continuous assignment.\noutput_files/2329780_adder_32/2329780_adder_32.v:41:      : Port 1 (sum) of adder_8 is connected to sum[((i)*('sd8))+('sd7):(i)*('sd8)]\noutput_files/2329780_adder_32/2329780_adder_32.v:42: warning: Part select sum[207:184] is out of range.\noutput_files/2329780_adder_32/2329780_adder_32.v:42: error: Output port expression must support continuous assignment.\noutput_files/2329780_adder_32/2329780_adder_32.v:42:      : Port 1 (sum) of adder_8 is connected to sum[((i)*('sd8))+('sd31):((i)*('sd8))+('sd8)]\noutput_files/2329780_adder_32/2329780_adder_32.v:42: warning: Port 3 (in1) of adder_8 expects 8 bits, got 24.\noutput_files/2329780_adder_32/2329780_adder_32.v:42:        : Pruning 16 high bits of the expression.\noutput_files/2329780_adder_32/2329780_adder_32.v:42: warning: Port 4 (in2) of adder_8 expects 8 bits, got 24.\noutput_files/2329780_adder_32/2329780_adder_32.v:42:        : Pruning 16 high bits of the expression.\noutput_files/2329780_adder_32/2329780_adder_32.v:41: warning: Part select sum[191:184] is out of range.\noutput_files/2329780_adder_32/2329780_adder_32.v:41: error: Output port expression must support continuous assignment.\noutput_files/2329780_adder_32/2329780_adder_32.v:41:      : Port 1 (sum) of adder_8 is connected to sum[((i)*('sd8))+('sd7):(i)*('sd8)]\noutput_files/2329780_adder_32/2329780_adder_32.v:42: warning: Part select sum[215:192] is out of range.\noutput_files/2329780_adder_32/2329780_adder_32.v:42: error: Output port expression must support continuous assignment.\noutput_files/2329780_adder_32/2329780_adder_32.v:42:      : Port 1 (sum) of adder_8 is connected to sum[((i)*('sd8))+('sd31):((i)*('sd8))+('sd8)]\noutput_files/2329780_adder_32/2329780_adder_32.v:42: warning: Port 3 (in1) of adder_8 expects 8 bits, got 24.\noutput_files/2329780_adder_32/2329780_adder_32.v:42:        : Pruning 16 high bits of the expression.\noutput_files/2329780_adder_32/2329780_adder_32.v:42: warning: Port 4 (in2) of adder_8 expects 8 bits, got 24.\noutput_files/2329780_adder_32/2329780_adder_32.v:42:        : Pruning 16 high bits of the expression.\noutput_files/2329780_adder_32/2329780_adder_32.v:41: warning: Part select sum[199:192] is out of range.\noutput_files/2329780_adder_32/2329780_adder_32.v:41: error: Output port expression must support continuous assignment.\noutput_files/2329780_adder_32/2329780_adder_32.v:41:      : Port 1 (sum) of adder_8 is connected to sum[((i)*('sd8))+('sd7):(i)*('sd8)]\noutput_files/2329780_adder_32/2329780_adder_32.v:42: warning: Part select sum[223:200] is out of range.\noutput_files/2329780_adder_32/2329780_adder_32.v:42: error: Output port expression must support continuous assignment.\noutput_files/2329780_adder_32/2329780_adder_32.v:42:      : Port 1 (sum) of adder_8 is connected to sum[((i)*('sd8))+('sd31):((i)*('sd8))+('sd8)]\noutput_files/2329780_adder_32/2329780_adder_32.v:42: warning: Port 3 (in1) of adder_8 expects 8 bits, got 24.\noutput_files/2329780_adder_32/2329780_adder_32.v:42:        : Pruning 16 high bits of the expression.\noutput_files/2329780_adder_32/2329780_adder_32.v:42: warning: Port 4 (in2) of adder_8 expects 8 bits, got 24.\noutput_files/2329780_adder_32/2329780_adder_32.v:42:        : Pruning 16 high bits of the expression.\noutput_files/2329780_adder_32/2329780_adder_32.v:41: warning: Part select sum[207:200] is out of range.\noutput_files/2329780_adder_32/2329780_adder_32.v:41: error: Output port expression must support continuous assignment.\noutput_files/2329780_adder_32/2329780_adder_32.v:41:      : Port 1 (sum) of adder_8 is connected to sum[((i)*('sd8))+('sd7):(i)*('sd8)]\noutput_files/2329780_adder_32/2329780_adder_32.v:42: warning: Part select sum[231:208] is out of range.\noutput_files/2329780_adder_32/2329780_adder_32.v:42: error: Output port expression must support continuous assignment.\noutput_files/2329780_adder_32/2329780_adder_32.v:42:      : Port 1 (sum) of adder_8 is connected to sum[((i)*('sd8))+('sd31):((i)*('sd8))+('sd8)]\noutput_files/2329780_adder_32/2329780_adder_32.v:42: warning: Port 3 (in1) of adder_8 expects 8 bits, got 24.\noutput_files/2329780_adder_32/2329780_adder_32.v:42:        : Pruning 16 high bits of the expression.\noutput_files/2329780_adder_32/2329780_adder_32.v:42: warning: Port 4 (in2) of adder_8 expects 8 bits, got 24.\noutput_files/2329780_adder_32/2329780_adder_32.v:42:        : Pruning 16 high bits of the expression.\noutput_files/2329780_adder_32/2329780_adder_32.v:41: warning: Part select sum[215:208] is out of range.\noutput_files/2329780_adder_32/2329780_adder_32.v:41: error: Output port expression must support continuous assignment.\noutput_files/2329780_adder_32/2329780_adder_32.v:41:      : Port 1 (sum) of adder_8 is connected to sum[((i)*('sd8))+('sd7):(i)*('sd8)]\noutput_files/2329780_adder_32/2329780_adder_32.v:42: warning: Part select sum[239:216] is out of range.\noutput_files/2329780_adder_32/2329780_adder_32.v:42: error: Output port expression must support continuous assignment.\noutput_files/2329780_adder_32/2329780_adder_32.v:42:      : Port 1 (sum) of adder_8 is connected to sum[((i)*('sd8))+('sd31):((i)*('sd8))+('sd8)]\noutput_files/2329780_adder_32/2329780_adder_32.v:42: warning: Port 3 (in1) of adder_8 expects 8 bits, got 24.\noutput_files/2329780_adder_32/2329780_adder_32.v:42:        : Pruning 16 high bits of the expression.\noutput_files/2329780_adder_32/2329780_adder_32.v:42: warning: Port 4 (in2) of adder_8 expects 8 bits, got 24.\noutput_files/2329780_adder_32/2329780_adder_32.v:42:        : Pruning 16 high bits of the expression.\noutput_files/2329780_adder_32/2329780_adder_32.v:41: warning: Part select sum[223:216] is out of range.\noutput_files/2329780_adder_32/2329780_adder_32.v:41: error: Output port expression must support continuous assignment.\noutput_files/2329780_adder_32/2329780_adder_32.v:41:      : Port 1 (sum) of adder_8 is connected to sum[((i)*('sd8))+('sd7):(i)*('sd8)]\noutput_files/2329780_adder_32/2329780_adder_32.v:42: warning: Part select sum[247:224] is out of range.\noutput_files/2329780_adder_32/2329780_adder_32.v:42: error: Output port expression must support continuous assignment.\noutput_files/2329780_adder_32/2329780_adder_32.v:42:      : Port 1 (sum) of adder_8 is connected to sum[((i)*('sd8))+('sd31):((i)*('sd8))+('sd8)]\noutput_files/2329780_adder_32/2329780_adder_32.v:42: warning: Port 3 (in1) of adder_8 expects 8 bits, got 24.\noutput_files/2329780_adder_32/2329780_adder_32.v:42:        : Pruning 16 high bits of the expression.\noutput_files/2329780_adder_32/2329780_adder_32.v:42: warning: Port 4 (in2) of adder_8 expects 8 bits, got 24.\noutput_files/2329780_adder_32/2329780_adder_32.v:42:        : Pruning 16 high bits of the expression.\noutput_files/2329780_adder_32/2329780_adder_32.v:41: warning: Part select sum[231:224] is out of range.\noutput_files/2329780_adder_32/2329780_adder_32.v:41: error: Output port expression must support continuous assignment.\noutput_files/2329780_adder_32/2329780_adder_32.v:41:      : Port 1 (sum) of adder_8 is connected to sum[((i)*('sd8))+('sd7):(i)*('sd8)]\noutput_files/2329780_adder_32/2329780_adder_32.v:42: warning: Part select sum[255:232] is out of range.\noutput_files/2329780_adder_32/2329780_adder_32.v:42: error: Output port expression must support continuous assignment.\noutput_files/2329780_adder_32/2329780_adder_32.v:42:      : Port 1 (sum) of adder_8 is connected to sum[((i)*('sd8))+('sd31):((i)*('sd8))+('sd8)]\noutput_files/2329780_adder_32/2329780_adder_32.v:42: warning: Port 3 (in1) of adder_8 expects 8 bits, got 24.\noutput_files/2329780_adder_32/2329780_adder_32.v:42:        : Pruning 16 high bits of the expression.\noutput_files/2329780_adder_32/2329780_adder_32.v:42: warning: Port 4 (in2) of adder_8 expects 8 bits, got 24.\noutput_files/2329780_adder_32/2329780_adder_32.v:42:        : Pruning 16 high bits of the expression.\noutput_files/2329780_adder_32/2329780_adder_32.v:41: warning: Part select sum[239:232] is out of range.\noutput_files/2329780_adder_32/2329780_adder_32.v:41: error: Output port expression must support continuous assignment.\noutput_files/2329780_adder_32/2329780_adder_32.v:41:      : Port 1 (sum) of adder_8 is connected to sum[((i)*('sd8))+('sd7):(i)*('sd8)]\noutput_files/2329780_adder_32/2329780_adder_32.v:42: warning: Part select sum[263:240] is out of range.\noutput_files/2329780_adder_32/2329780_adder_32.v:42: error: Output port expression must support continuous assignment.\noutput_files/2329780_adder_32/2329780_adder_32.v:42:      : Port 1 (sum) of adder_8 is connected to sum[((i)*('sd8))+('sd31):((i)*('sd8))+('sd8)]\noutput_files/2329780_adder_32/2329780_adder_32.v:42: warning: Port 3 (in1) of adder_8 expects 8 bits, got 24.\noutput_files/2329780_adder_32/2329780_adder_32.v:42:        : Pruning 16 high bits of the expression.\noutput_files/2329780_adder_32/2329780_adder_32.v:42: warning: Port 4 (in2) of adder_8 expects 8 bits, got 24.\noutput_files/2329780_adder_32/2329780_adder_32.v:42:        : Pruning 16 high bits of the expression.\noutput_files/2329780_adder_32/2329780_adder_32.v:41: warning: Part select sum[247:240] is out of range.\noutput_files/2329780_adder_32/2329780_adder_32.v:41: error: Output port expression must support continuous assignment.\noutput_files/2329780_adder_32/2329780_adder_32.v:41:      : Port 1 (sum) of adder_8 is connected to sum[((i)*('sd8))+('sd7):(i)*('sd8)]\noutput_files/2329780_adder_32/2329780_adder_32.v:42: warning: Part select sum[271:248] is out of range.\noutput_files/2329780_adder_32/2329780_adder_32.v:42: error: Output port expression must support continuous assignment.\noutput_files/2329780_adder_32/2329780_adder_32.v:42:      : Port 1 (sum) of adder_8 is connected to sum[((i)*('sd8))+('sd31):((i)*('sd8))+('sd8)]\noutput_files/2329780_adder_32/2329780_adder_32.v:42: warning: Port 3 (in1) of adder_8 expects 8 bits, got 24.\noutput_files/2329780_adder_32/2329780_adder_32.v:42:        : Pruning 16 high bits of the expression.\noutput_files/2329780_adder_32/2329780_adder_32.v:42: warning: Port 4 (in2) of adder_8 expects 8 bits, got 24.\noutput_files/2329780_adder_32/2329780_adder_32.v:42:        : Pruning 16 high bits of the expression.\noutput_files/2329780_adder_32/2329780_adder_32.v:41: warning: Part select sum[255:248] is out of range.\noutput_files/2329780_adder_32/2329780_adder_32.v:41: error: Output port expression must support continuous assignment.\noutput_files/2329780_adder_32/2329780_adder_32.v:41:      : Port 1 (sum) of adder_8 is connected to sum[((i)*('sd8))+('sd7):(i)*('sd8)]\noutput_files/2329780_adder_32/2329780_adder_32.v:42: warning: Part select sum[279:256] is out of range.\noutput_files/2329780_adder_32/2329780_adder_32.v:42: error: Output port expression must support continuous assignment.\noutput_files/2329780_adder_32/2329780_adder_32.v:42:      : Port 1 (sum) of adder_8 is connected to sum[((i)*('sd8))+('sd31):((i)*('sd8))+('sd8)]\noutput_files/2329780_adder_32/2329780_adder_32.v:42: warning: Port 3 (in1) of adder_8 expects 8 bits, got 24.\noutput_files/2329780_adder_32/2329780_adder_32.v:42:        : Pruning 16 high bits of the expression.\noutput_files/2329780_adder_32/2329780_adder_32.v:42: warning: Port 4 (in2) of adder_8 expects 8 bits, got 24.\noutput_files/2329780_adder_32/2329780_adder_32.v:42:        : Pruning 16 high bits of the expression.\nadders/ripple_carry/tb_ripplecarry_32.v:14: warning: Port 1 (sum) of adder_32 expects 64 bits, got 32.\nadders/ripple_carry/tb_ripplecarry_32.v:14:        : Padding 32 high bits of the port.\nadders/ripple_carry/tb_ripplecarry_32.v:14: warning: Port 3 (in1) of adder_32 expects 64 bits, got 32.\nadders/ripple_carry/tb_ripplecarry_32.v:14:        : Padding 32 high bits of the port.\nadders/ripple_carry/tb_ripplecarry_32.v:14: warning: Port 4 (in2) of adder_32 expects 64 bits, got 32.\nadders/ripple_carry/tb_ripplecarry_32.v:14:        : Padding 32 high bits of the port.\n49 error(s) during elaboration.\n"
Tokens:  164
LLM generates return in:  58.795278  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  260.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 1.58941432e-03 -2.61758382e-02 -3.25425249e-02  3.94042695e-04
 -4.98362464e-01 -3.98572310e-02 -2.76452470e-03  1.57587026e-03
  1.40261356e-03  1.21301019e-03]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [-0.00114863 -0.00631921 -0.01534057  0.00380731 -0.06057234  0.00593082
 -0.0350066  -0.0431866   0.00684487  0.00700549]  taking action:  9
Adding child.
Leaf selection - depth:  2
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  21412
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 failed\n'
Tokens:  0
LLM generates return in:  0.121897  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  261.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 1.16628728e-03 -2.60504968e-02 -3.25410114e-02  3.94796843e-04
 -4.98359330e-01 -3.98569578e-02 -2.58906060e-03  1.57888628e-03
  1.40529799e-03  1.21533174e-03]  taking action:  7
Adding child.
Leaf selection - depth:  1
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  198
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);                      
  wire c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42,c43,c44,c45,c46,c47,c48,c49,c50,c51,c52,c53,c54,c55,c56,c57,c58,c59,c60,c61,c62,c63;
  adder_8 a1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
  adder_8 a3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
  adder_8 a4(sum[31:24], c4, in1[31:24], in2[31:24], c3);
  adder_8 a5(sum[39:32], c5, in1[39:32], in2[39:32], c4);
  adder_8 a6(sum[47:40], c6, in1[47:40], in2[47:40], c5);
  adder_8 a7(sum[55:48], c7, in1[55:48], in2[55:48], c6);
  adder_8 a8(sum[63:56], cout, in1[63:56], in2[63:56], c7);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 failed\n'
Tokens:  465
LLM generates return in:  203.789821  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  262.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 1.38571622e-03 -2.59253944e-02 -3.25395008e-02  3.95549553e-04
 -4.98356202e-01 -3.98566851e-02 -2.41393104e-03 -4.92090525e-02
  1.40797730e-03  1.21764886e-03]  taking action:  8
Adding child.
Leaf selection - depth:  1
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  198
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);                    
  wire c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42,c43,c44,c45,c46,c47,c48,c49,c50,c51,c52,c53,c54,c55,c56,c57,c58,c59,c60,c61,c62,c63;
  adder_8 a1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
  adder_8 a3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
  adder_8 a4(sum[31:24], c4, in1[31:24], in2[31:24], c3);
  adder_8 a5(sum[39:32], c5, in1[39:32], in2[39:32], c4);
  adder_8 a6(sum[47:40], c6, in1[47:40], in2[47:40], c5);
  adder_8 a7(sum[55:48], c7, in1[55:48], in2[55:48], c6);
  adder_8 a8(sum[63:56], cout, in1[63:56], in2[63:56], c7);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 failed\n'
Tokens:  465
LLM generates return in:  203.722704  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  263.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 1.60472839e-03 -2.58005295e-02 -3.25379930e-02  3.96300833e-04
 -4.98353080e-01 -3.98564129e-02 -2.23913411e-03 -4.92075502e-02
 -4.92946750e-02  1.21996159e-03]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [-0.00055207 -0.00612733 -0.01523037  0.00381942 -0.0605626   0.00593523
 -0.03495892 -0.04316493  0.00684677 -0.04648612]  taking action:  8
Leaf selection - depth:  2
Leaf selection - action scores:  [0.29312822 0.18982276 0.27187026 0.04787678 0.0236934  0.00996715
 0.00976822 0.00919721 0.00915583 0.0076389 ]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.4020182  0.30716795 0.17767236 0.05854232 0.00970686 0.00599176
 0.00598036 0.00532749 0.00489273 0.0048347 ]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.4694649  0.40457335 0.26127195 0.14099082 0.07190676 0.01949854
 0.01513493 0.01131882 0.01052642 0.00569265]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [6.5835023e-01 9.2491874e-04 4.8776787e-05 1.0492813e-05 8.0871505e-06
 8.0628151e-06 6.7081164e-06 6.1306155e-06 3.6378574e-06 2.9958464e-06]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [7.1545559e-01 1.4933314e-03 9.4427855e-04 1.8414935e-04 1.0025632e-04
 6.2670864e-05 4.3984259e-05 3.2509251e-05 1.8227691e-05 1.6111551e-05]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [7.8718162e-01 3.5610840e-02 5.5957231e-04 5.1624409e-04 1.5344907e-04
 3.8002901e-05 3.2286123e-05 2.5232572e-05 2.4032768e-05 1.7840161e-05]  taking action:  0
Leaf selection - depth:  8
Leaf selection - action scores:  [0.25482205 0.15165888 0.36714306 0.3110054  0.21921608 0.1252964
 0.09088971 0.08914841 0.0574757  0.0565678 ]  taking action:  2
Adding child.
Leaf selection - depth:  9
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  26
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
     wire [31:0] carry;
     adder_8 A1(sum[7:0], carry[0], in1[7:0], in2[7:0], cin);
     adder_8 A2(sum[15:8], carry[1], in1[15:8], in2[15:8], carry[0]);
     adder_8 A3(sum[23:16], carry[2], in1[23:16], in2[23:16], carry[1]);
     adder_8 A4(sum[31:24], carry[3], in1[31:24], in2[31:24], carry[2]);
     adder_8 A5(sum[39:32], carry[4], in1[39:32], in2[39:32], carry[3]);
     adder_8 A6(sum[47:40], carry[5], in1[47:40], in2[47:40], carry[4]);
     adder_8 A7(sum[55:48], carry[6], in1[55:48], in2[55:48], carry[5]);
     adder_8 A8(sum[63:56], cout, in1[63:56], in2[63:56], carry[6]);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 failed\n'
Tokens:  288
LLM generates return in:  113.945164  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  264.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 1.18292168e-03 -2.56759010e-02 -3.25364881e-02  3.97050692e-04
 -4.98349964e-01 -3.98561412e-02 -2.06466793e-03 -4.92060508e-02
 -4.92933404e-02  1.22226994e-03]  taking action:  9
Adding child.
Leaf selection - depth:  1
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  198
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);	
  wire [31:0] c;
  adder_8 a1(sum[7:0], c[0], in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c[1], in1[15:8], in2[15:8], c[0]);
  adder_8 a3(sum[23:16], c[2], in1[23:16], in2[23:16], c[1]);
  adder_8 a4(sum[31:24], cout, in1[31:24], in2[31:24], c[2]);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  153
LLM generates return in:  54.260676  seconds
Running getPromptScore: 
adder_32
output_files/2329780_adder_32/synth_script.sh
Running bash in x seconds:  0.902955

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.1
Backpropogation: incorporating estimates.
Current runs:  265.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 1.39973515e-03 -2.55515073e-02 -3.25349860e-02  3.97799138e-04
 -4.98346853e-01 -3.98558700e-02 -1.89053061e-03 -4.92045541e-02
 -4.92920083e-02  5.06122877e-02]  taking action:  9
Leaf selection - depth:  1
Leaf selection - action scores:  [1.5393918  0.16484477 0.09209356 0.05361248 0.01614523 0.01316007
 0.00459743 0.00329711 0.00267055 0.00200149]  taking action:  0
Adding child.
Leaf selection - depth:  2
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  50286
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);	
  wire [31:0] c;
  adder_8 a1(sum[7:0], c[0], in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c[1], in1[15:8], in2[15:8], c[0]);
  adder_8 a3(sum[23:16], c[2], in1[23:16], in2[23:16], c[1]);
  adder_8 a4(sum[31:24], cout, in1[31:24], in2[31:24], c[2]);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  152
LLM generates return in:  53.8916  seconds
Running getPromptScore: 
adder_32
output_files/2329780_adder_32/synth_script.sh
Running bash in x seconds:  0.912924

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.1
Backpropogation: incorporating estimates.
Current runs:  266.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 1.61614145e-03 -2.54273473e-02 -3.25334868e-02  3.98546178e-04
 -4.98343749e-01 -3.98555993e-02 -1.71672032e-03 -4.92030604e-02
 -4.92906788e-02  6.70756280e-02]  taking action:  9
Leaf selection - depth:  1
Leaf selection - action scores:  [0.9926811  0.20189278 0.11279112 0.06566161 0.01977379 0.01611773
 0.00563068 0.00403812 0.00327075 0.00245132]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [1.7559435e+00 1.1220663e-01 1.6103227e-02 1.1759909e-02 7.9127792e-03
 7.5334511e-03 4.0950850e-03 3.6054179e-03 1.8333367e-03 1.3463523e-03]  taking action:  0
Adding child.
Leaf selection - depth:  3
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  21809
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);	
  wire [31:0] c;
  adder_8 a1(sum[7:0], c[0], in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c[1], in1[15:8], in2[15:8], c[0]);
  adder_8 a3(sum[23:16], c[2], in1[23:16], in2[23:16], c[1]);
  adder_8 a4(sum[31:24], cout, in1[31:24], in2[31:24], c[2]);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  151
LLM generates return in:  53.594211  seconds
Running getPromptScore: 
adder_32
output_files/2329780_adder_32/synth_script.sh
Running bash in x seconds:  0.901338

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.1
Backpropogation: incorporating estimates.
Current runs:  267.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 1.83214287e-03 -2.53034196e-02 -3.25319904e-02  3.99291820e-04
 -4.98340650e-01 -3.98553292e-02 -1.54323521e-03 -4.92015693e-02
 -4.92893517e-02  7.53072952e-02]  taking action:  9
Leaf selection - depth:  1
Leaf selection - action scores:  [0.7923429  0.2331257  0.13023996 0.07581949 0.0228328  0.01861115
 0.00650175 0.00466282 0.00377673 0.00283054]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [1.1252915  0.1374245  0.01972234 0.01440289 0.00969114 0.00922656
 0.00501543 0.00441572 0.00224537 0.00164894]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [1.7060856e+00 1.4303404e-01 2.5183428e-02 1.9676646e-02 5.3239516e-03
 5.0840471e-03 3.8189469e-03 1.9912603e-03 1.8274924e-03 1.5212700e-03]  taking action:  0
Adding child.
Leaf selection - depth:  4
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  685
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);	
  wire [31:0] c;
  adder_8 a1(sum[7:0], c[0], in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c[1], in1[15:8], in2[15:8], c[0]);
  adder_8 a3(sum[23:16], c[2], in1[23:16], in2[23:16], c[1]);
  adder_8 a4(sum[31:24], cout, in1[31:24], in2[31:24], c[2]);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  150
LLM generates return in:  53.281466  seconds
Running getPromptScore: 
adder_32
output_files/2329780_adder_32/synth_script.sh
Running bash in x seconds:  0.896746

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.1
Backpropogation: incorporating estimates.
Current runs:  268.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 2.04774169e-03 -2.51797228e-02 -3.25304967e-02  4.00036072e-04
 -4.98337557e-01 -3.98550595e-02 -1.37007346e-03 -4.92000811e-02
 -4.92880271e-02  8.02462902e-02]  taking action:  9
Leaf selection - depth:  1
Leaf selection - action scores:  [0.68349797 0.26064244 0.1456127  0.08476876 0.02552785 0.0208079
 0.00726918 0.00521319 0.00422251 0.00316464]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.8944264  0.15868413 0.0227734  0.01663102 0.01119036 0.01065391
 0.00579132 0.00509883 0.00259273 0.00190403]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [1.0947597  0.17518021 0.03084327 0.02409887 0.00652048 0.00622666
 0.00467724 0.00243879 0.00223821 0.00186317]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.94415987 0.90342563 0.04748075 0.02503129 0.0036005  0.00311083
 0.00196665 0.00164224 0.00140358 0.00126072]  taking action:  0
Adding child.
Leaf selection - depth:  5
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  3132
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);	
  wire [31:0] c;
  adder_8 a1(sum[7:0], c[0], in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c[1], in1[15:8], in2[15:8], c[0]);
  adder_8 a3(sum[23:16], c[2], in1[23:16], in2[23:16], c[1]);
  adder_8 a4(sum[31:24], cout, in1[31:24], in2[31:24], c[2]);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  149
LLM generates return in:  52.987084  seconds
Running getPromptScore: 
adder_32
output_files/2329780_adder_32/synth_script.sh
Running bash in x seconds:  0.89761

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.1
Backpropogation: incorporating estimates.
Current runs:  269.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 2.26294013e-03 -2.50562558e-02 -3.25290058e-02  4.00778942e-04
 -4.98334470e-01 -3.98547904e-02 -1.19723328e-03 -4.91985957e-02
 -4.92867049e-02  8.35389603e-02]  taking action:  9
Leaf selection - depth:  1
Leaf selection - action scores:  [0.6132609  0.28551948 0.15951073 0.09285954 0.02796436 0.02279391
 0.00796299 0.00571077 0.00462553 0.00346669]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.7690976  0.17741425 0.02546144 0.01859405 0.0125112  0.01191143
 0.0064749  0.00570067 0.00289876 0.00212877]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.8709231  0.20228069 0.03561474 0.02782698 0.0075292  0.00718993
 0.00540081 0.00281607 0.00258446 0.0021514 ]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.62817746 1.1064659  0.0581518  0.03065694 0.0044097  0.00380998
 0.00240864 0.00201132 0.00171902 0.00154406]  taking action:  1
Adding child.
Leaf selection - depth:  5
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  16
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);	
  wire c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42,c43,c44,c45,c46,c47,c48,c49,c50,c51,c52,c53,c54,c55,c56,c57,c58,c59,c60,c61,c62,c63;
  adder_8 a1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
  adder_8 a3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
  adder_8 a4(sum[31:24], c4, in1[31:24], in2[31:24], c3);
  adder_8 a5(sum[39:32], c5, in1[39:32], in2[39:32], c4);
  adder_8 a6(sum[47:40], c6, in1[47:40], in2[47:40], c5);
  adder_8 a7(sum[55:48], c7, in1[55:48], in2[55:48], c6);
  adder_8 a8(sum[63:56], cout, in1[63:56], in2[63:56], c7);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 failed\n'
Tokens:  461
LLM generates return in:  202.488885  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  270.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 2.47774042e-03 -2.49330171e-02 -3.25275177e-02  4.01520438e-04
 -4.98331389e-01 -3.98545217e-02 -1.02471288e-03 -4.91971130e-02
 -4.92853852e-02  5.73194331e-02]  taking action:  9
Leaf selection - depth:  1
Leaf selection - action scores:  [0.52998966 0.3083963  0.17229128 0.10029976 0.03020496 0.02462024
 0.00860101 0.00616833 0.00499615 0.00374445]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.64827675 0.19434758 0.0278916  0.02036876 0.01370533 0.01304832
 0.00709289 0.00624477 0.00317543 0.00233195]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.69938946 0.22615667 0.0398185  0.03111151 0.00841791 0.00803858
 0.00603828 0.00314846 0.00288952 0.00240534]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.71762186 0.5888184  0.06714791 0.03539959 0.00509188 0.00439938
 0.00278126 0.00232247 0.00198496 0.00178293]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [1.3374342  0.20465046 0.1683139  0.13882461 0.02796438 0.00965878
 0.00686312 0.00659245 0.00611752 0.00521848]  taking action:  0
Adding child.
Leaf selection - depth:  6
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  25
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);	
  wire [31:0] c;
  adder_8 a1(sum[7:0], c[0], in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c[1], in1[15:8], in2[15:8], c[0]);
  adder_8 a3(sum[23:16], c[2], in1[23:16], in2[23:16], c[1]);
  adder_8 a4(sum[31:24], cout, in1[31:24], in2[31:24], c[2]);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  148
LLM generates return in:  52.67128  seconds
Running getPromptScore: 
adder_32
output_files/2329780_adder_32/synth_script.sh
Running bash in x seconds:  0.903393

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.1
Backpropogation: incorporating estimates.
Current runs:  271.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 2.69214477e-03 -2.48100057e-02 -3.25260323e-02  4.02260567e-04
 -4.98328313e-01 -3.98542536e-02 -8.52510483e-04 -4.91956330e-02
 -4.92840680e-02  6.26547885e-02]  taking action:  9
Leaf selection - depth:  1
Leaf selection - action scores:  [0.49696907 0.32968953 0.18418713 0.10722496 0.03229046 0.02632014
 0.00919487 0.00659423 0.0053411  0.00400299]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.59751165 0.2099194  0.03012638 0.02200078 0.01480345 0.0140938
 0.0076612  0.00674512 0.00342986 0.00251879]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.63100535 0.24774222 0.04361898 0.03408095 0.00922135 0.00880583
 0.00661461 0.00344896 0.00316531 0.00263492]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.5642826  0.66422063 0.07507364 0.03957794 0.0056929  0.00491866
 0.00310954 0.0025966  0.00221925 0.00199338]  taking action:  1
Leaf selection - depth:  5
Leaf selection - action scores:  [1.8017367  0.04036028 0.03460741 0.02201964 0.01130231 0.00443736
 0.00422325 0.00393653 0.00295219 0.00229592]  taking action:  0
Adding child.
Leaf selection - depth:  6
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  11
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);	
  wire c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42,c43,c44,c45,c46,c47,c48,c49,c50,c51,c52,c53,c54,c55,c56,c57,c58,c59,c60,c61,c62,c63;
  adder_8 a1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
  adder_8 a3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
  adder_8 a4(sum[31:24], c4, in1[31:24], in2[31:24], c3);
  adder_8 a5(sum[39:32], c5, in1[39:32], in2[39:32], c4);
  adder_8 a6(sum[47:40], c6, in1[47:40], in2[47:40], c5);
  adder_8 a7(sum[55:48], c7, in1[55:48], in2[55:48], c6);
  adder_8 a8(sum[63:56], cout, in1[63:56], in2[63:56], c7);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 failed\n'
Tokens:  460
LLM generates return in:  202.171461  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  272.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 2.90615535e-03 -2.46872202e-02 -3.25245497e-02  4.02999337e-04
 -4.98325243e-01 -3.98539859e-02 -6.80624350e-04 -4.91941557e-02
 -4.92827531e-02  4.45822880e-02]  taking action:  9
Leaf selection - depth:  1
Leaf selection - action scores:  [0.44569284 0.34968853 0.19535995 0.11372924 0.03424921 0.02791673
 0.00975263 0.00699423 0.0056651  0.00424581]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.53026956 0.22441326 0.03220645 0.02351982 0.01582556 0.0150669
 0.00819017 0.00721084 0.00366667 0.0026927 ]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.54863226 0.2675922  0.04711388 0.03681163 0.0099602  0.00951138
 0.0071446  0.00372531 0.00341892 0.00284604]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.6117776  0.45492637 0.08223906 0.04335546 0.00623626 0.00538812
 0.00340633 0.00284444 0.00243106 0.00218364]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [0.8690078  0.25064462 0.20614159 0.17002474 0.03424923 0.01182954
 0.00840557 0.00807406 0.0074924  0.0063913 ]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [1.9509485e+00 6.1408896e-04 1.9574367e-05 5.2479495e-06 4.6732525e-06
 3.2577680e-06 3.1974514e-06 2.8094214e-06 2.0749935e-06 1.9712834e-06]  taking action:  0
Adding child.
Leaf selection - depth:  7
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  15
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);	
  wire [31:0] c;
  adder_8 a1(sum[7:0], c[0], in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c[1], in1[15:8], in2[15:8], c[0]);
  adder_8 a3(sum[23:16], c[2], in1[23:16], in2[23:16], c[1]);
  adder_8 a4(sum[31:24], cout, in1[31:24], in2[31:24], c[2]);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  147
LLM generates return in:  52.382034  seconds
Running getPromptScore: 
adder_32
output_files/2329780_adder_32/synth_script.sh
Running bash in x seconds:  0.910717

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.1
Backpropogation: incorporating estimates.
Current runs:  273.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 3.11977433e-03 -2.45646593e-02 -3.25230697e-02  4.03736755e-04
 -4.98322178e-01 -3.98537187e-02 -5.09052739e-04 -4.91926812e-02
 -4.92814407e-02  5.01242860e-02]  taking action:  9
Leaf selection - depth:  1
Leaf selection - action scores:  [0.4269094  0.3686041  0.20592746 0.11988115 0.03610183 0.02942681
 0.01028017 0.00737257 0.00597154 0.00447548]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.5031148  0.2380262  0.0341601  0.02494653 0.01678554 0.01598086
 0.00868699 0.00764825 0.00388909 0.00285604]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.5160245  0.28606808 0.05036686 0.03935329 0.0106479  0.01016809
 0.00763789 0.00398252 0.00365498 0.00304254]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.51659036 0.49671823 0.08882834 0.04682925 0.00673593 0.00581984
 0.00367926 0.00307234 0.00262585 0.0023586 ]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [0.69713914 0.28941947 0.2380318  0.19632764 0.03954761 0.01365957
 0.00970591 0.00932313 0.00865147 0.00738004]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [1.2447070e+00 7.5210229e-04 2.3973605e-05 6.4273995e-06 5.7235425e-06
 3.9899346e-06 3.9160623e-06 3.4408245e-06 2.5413378e-06 2.4143192e-06]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [1.94970238e+00 1.00064115e-03 5.48051088e-04 1.09704954e-04
 5.85937341e-05 4.46291888e-05 3.41821178e-05 1.75120113e-05
 1.34825614e-05 1.13485185e-05]  taking action:  0
Adding child.
Leaf selection - depth:  8
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  60
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);	
  wire [31:0] c;
  adder_8 a1(sum[7:0], c[0], in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c[1], in1[15:8], in2[15:8], c[0]);
  adder_8 a3(sum[23:16], c[2], in1[23:16], in2[23:16], c[1]);
  adder_8 a4(sum[31:24], cout, in1[31:24], in2[31:24], c[2]);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  146
LLM generates return in:  52.001518  seconds
Running getPromptScore: 
adder_32
output_files/2329780_adder_32/synth_script.sh
Running bash in x seconds:  0.896588

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.1
Backpropogation: incorporating estimates.
Current runs:  274.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 3.33300385e-03 -2.44423219e-02 -3.25215925e-02  4.04472828e-04
 -4.98319119e-01 -3.98534520e-02 -3.37793930e-04 -4.91912093e-02
 -4.92801307e-02  5.46586510e-02]  taking action:  9
Leaf selection - depth:  1
Leaf selection - action scores:  [0.41101938 0.38659525 0.21597856 0.1257324  0.03786393 0.03086311
 0.01078194 0.00773242 0.006263   0.00469392]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.48071215 0.25090164 0.03600791 0.02629596 0.01769351 0.01684531
 0.00915689 0.00806196 0.00409947 0.00301054]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.4898942  0.30342102 0.05342212 0.04174047 0.01129381 0.01078489
 0.00810121 0.0042241  0.0038767  0.0032271 ]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.45766395 0.5356171  0.09496149 0.05006257 0.00720101 0.00622167
 0.00393329 0.00328447 0.00280715 0.00252145]  taking action:  1
Leaf selection - depth:  5
Leaf selection - action scores:  [1.053334   0.04943104 0.04238525 0.02696844 0.01384245 0.00543463
 0.00517241 0.00482125 0.00361568 0.00281192]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [1.9131658e+00 3.2269575e-02 2.6385412e-03 6.6807005e-04 6.4880634e-04
 5.3621992e-04 2.7578237e-04 1.8791662e-04 9.4942792e-05 8.5512947e-05]  taking action:  0
Adding child.
Leaf selection - depth:  7
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  66
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);	
  wire c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42,c43,c44,c45,c46,c47,c48,c49,c50,c51,c52,c53,c54,c55,c56,c57,c58,c59,c60,c61,c62,c63;
  adder_8 a1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
  adder_8 a3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
  adder_8 a4(sum[31:24], c4, in1[31:24], in2[31:24], c3);
  adder_8 a5(sum[39:32], c5, in1[39:32], in2[39:32], c4);
  adder_8 a6(sum[47:40], c6, in1[47:40], in2[47:40], c5);
  adder_8 a7(sum[55:48], c7, in1[55:48], in2[55:48], c6);
  adder_8 a8(sum[63:56], cout, in1[63:56], in2[63:56], c7);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 failed\n'
Tokens:  459
LLM generates return in:  201.876065  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  275.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 3.54584603e-03 -2.43202068e-02 -3.25201179e-02  4.05207565e-04
 -4.98316066e-01 -3.98531858e-02 -1.66846219e-04 -4.91897401e-02
 -4.92788230e-02  4.17706162e-02]  taking action:  9
Leaf selection - depth:  1
Leaf selection - action scores:  [0.37915674 0.40378556 0.22558224 0.13132322 0.03954758 0.03223546
 0.01126137 0.00807624 0.00654149 0.00490264]  taking action:  1
Adding child.
Leaf selection - depth:  2
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  198
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);	 
  wire [31:0] c;
  adder_8 a1(sum[7:0], c[0], in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c[1], in1[15:8], in2[15:8], c[0]);
  adder_8 a3(sum[23:16], c[2], in1[23:16], in2[23:16], c[1]);
  adder_8 a4(sum[31:24], cout, in1[31:24], in2[31:24], c[2]);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  153
LLM generates return in:  54.319856  seconds
Running getPromptScore: 
adder_32
output_files/2329780_adder_32/synth_script.sh
Running bash in x seconds:  0.92255

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.1
Backpropogation: incorporating estimates.
Current runs:  276.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 3.75830297e-03 -2.41983126e-02 -3.25186460e-02  4.05940971e-04
 -4.98313018e-01 -3.98529201e-02  3.79208413e-06 -4.91882736e-02
 -4.92775177e-02  4.62499731e-02]  taking action:  9
Leaf selection - depth:  1
Leaf selection - action scores:  [0.39315403 0.26013666 0.23479344 0.13668554 0.04116242 0.03355173
 0.0117212  0.00840602 0.0068086  0.00510283]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.4418053  0.2631479  0.03776541 0.02757943 0.01855711 0.01766751
 0.00960383 0.00845545 0.00429956 0.00315748]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.44610256 0.31983384 0.05631186 0.04399832 0.01190472 0.01136827
 0.00853943 0.00445259 0.0040864  0.00340166]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.48057306 0.40411377 0.10072187 0.05309938 0.00763782 0.00659908
 0.00417189 0.00348371 0.00297743 0.0026744 ]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [0.6036672  0.32358077 0.26612765 0.21950097 0.04421557 0.01527187
 0.01085154 0.01042357 0.00967264 0.00825114]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [9.8635256e-01 8.6845289e-04 2.7682334e-05 7.4217214e-06 6.6089774e-06
 4.6071796e-06 4.5218790e-06 3.9731217e-06 2.9344840e-06 2.7878157e-06]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [1.2439439e+00 1.2255302e-03 6.7122281e-04 1.3436058e-04 7.1762377e-05
 5.4659369e-05 4.1864372e-05 2.1447746e-05 1.6512698e-05 1.3899041e-05]  taking action:  0
Leaf selection - depth:  8
Leaf selection - action scores:  [1.9323941e+00 1.8084582e-02 6.4238976e-04 2.7657623e-04 8.0938422e-05
 2.5198107e-05 2.3671433e-05 1.9230794e-05 1.2935742e-05 9.1010843e-06]  taking action:  0
Adding child.
Leaf selection - depth:  9
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  269
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);	
  wire [31:0] c;
  adder_8 a1(sum[7:0], c[0], in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c[1], in1[15:8], in2[15:8], c[0]);
  adder_8 a3(sum[23:16], c[2], in1[23:16], in2[23:16], c[1]);
  adder_8 a4(sum[31:24], cout, in1[31:24], in2[31:24], c[2]);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  145
LLM generates return in:  51.705083  seconds
Running getPromptScore: 
adder_32
output_files/2329780_adder_32/synth_script.sh
Running bash in x seconds:  0.902576

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.1
Backpropogation: incorporating estimates.
Current runs:  277.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 3.97037677e-03 -2.40766383e-02 -3.25171768e-02  4.06673055e-04
 -4.98309976e-01 -3.98526548e-02  1.74122653e-04 -4.91868097e-02
 -4.92762147e-02  5.00894253e-02]  taking action:  9
Leaf selection - depth:  1
Leaf selection - action scores:  [0.3810706  0.26806912 0.24365665 0.14184527 0.04271626 0.03481828
 0.01216367 0.00872334 0.00706562 0.00529546]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.4273787  0.274849   0.03944469 0.02880578 0.01938227 0.01845311
 0.01003087 0.00883143 0.00449074 0.00329788]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.43011254 0.33544457 0.05906038 0.04614583 0.01248577 0.01192315
 0.00895622 0.00466992 0.00428585 0.00356769]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.43520093 0.4300303  0.10617017 0.05597166 0.00805097 0.00695604
 0.00439756 0.00367215 0.00313849 0.00281906]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [0.54330075 0.35446498 0.29152822 0.24045126 0.04843573 0.01672949
 0.01188727 0.01141845 0.01059585 0.00903867]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [8.4618002e-01 9.7095984e-04 3.0949788e-05 8.2977367e-06 7.3890610e-06
 5.1509833e-06 5.0556141e-06 4.4420849e-06 3.2808528e-06 3.1168724e-06]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [9.8576510e-01 1.4151203e-03 7.7506131e-04 1.5514623e-04 8.2864055e-05
 6.3115200e-05 4.8340811e-05 2.4765724e-05 1.9067222e-05 1.6049229e-05]  taking action:  0
Leaf selection - depth:  8
Leaf selection - action scores:  [1.2333449e+00 2.2149000e-02 7.8676356e-04 3.3873535e-04 9.9128920e-05
 3.0861254e-05 2.8991466e-05 2.3552819e-05 1.5842985e-05 1.1146507e-05]  taking action:  0
Leaf selection - depth:  9
Leaf selection - action scores:  [0.3556186  0.3213194  0.23991556 0.21438111 0.10178447 0.09608459
 0.06419159 0.05689405 0.03808089 0.03552998]  taking action:  0
Adding child.
Leaf selection - depth:  10
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  26
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);	
  wire [31:0] c;
  adder_8 a1(sum[7:0], c[0], in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c[1], in1[15:8], in2[15:8], c[0]);
  adder_8 a3(sum[23:16], c[2], in1[23:16], in2[23:16], c[1]);
  adder_8 a4(sum[31:24], cout, in1[31:24], in2[31:24], c[2]);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  144
LLM generates return in:  51.425359  seconds
Running getPromptScore: 
adder_32
output_files/2329780_adder_32/synth_script.sh
Running bash in x seconds:  0.891101

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.1
Backpropogation: incorporating estimates.
Current runs:  278.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 4.18206947e-03 -2.39551826e-02 -3.25157102e-02  4.07403824e-04
 -4.98306939e-01 -3.98523901e-02  3.44147145e-04 -4.91853484e-02
 -4.92749141e-02  5.34169477e-02]  taking action:  9
Leaf selection - depth:  1
Leaf selection - action scores:  [0.370446   0.27572298 0.25220862 0.14682382 0.04421553 0.03604034
 0.01259059 0.00902952 0.00731361 0.00548132]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.41473293 0.2860719  0.04105533 0.029982   0.02017371 0.01920661
 0.01044046 0.00919205 0.00467411 0.00343254]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.41627628 0.35036042 0.06168655 0.04819775 0.01304096 0.01245332
 0.00935447 0.00487757 0.00447642 0.00372634]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.4020359  0.45468026 0.11135223 0.05870358 0.00844393 0.00729555
 0.0046122  0.00385139 0.00329168 0.00295666]  taking action:  1
Leaf selection - depth:  5
Leaf selection - action scores:  [0.78268015 0.05707805 0.04894227 0.03114047 0.01598389 0.00627537
 0.00597258 0.0055671  0.00417503 0.00324693]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [1.12157011e+00 3.95219959e-02 3.23153986e-03 8.18215369e-04
 7.94622232e-04 6.56732591e-04 3.37763049e-04 2.30149933e-04
 1.16280695e-04 1.04731545e-04]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [1.5232888e+00 3.9434138e-01 2.9745433e-02 1.8030432e-03 2.3804473e-04
 1.7669211e-04 9.7187840e-05 8.8845685e-05 7.6091208e-05 7.2130810e-05]  taking action:  0
Adding child.
Leaf selection - depth:  8
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  17
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);	
  wire c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42,c43,c44,c45,c46,c47,c48,c49,c50,c51,c52,c53,c54,c55,c56,c57,c58,c59,c60,c61,c62,c63;
  adder_8 a1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
  adder_8 a3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
  adder_8 a4(sum[31:24], c4, in1[31:24], in2[31:24], c3);
  adder_8 a5(sum[39:32], c5, in1[39:32], in2[39:32], c4);
  adder_8 a6(sum[47:40], c6, in1[47:40], in2[47:40], c5);
  adder_8 a7(sum[55:48], c7, in1[55:48], in2[55:48], c6);
  adder_8 a8(sum[63:56], cout, in1[63:56], in2[63:56], c7);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 failed\n'
Tokens:  458
LLM generates return in:  201.560335  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  279.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 4.39338314e-03 -2.38339444e-02 -3.25142462e-02  4.08133283e-04
 -4.98303907e-01 -3.98521258e-02  5.13867207e-04 -4.91838898e-02
 -4.92736159e-02  4.38285271e-02]  taking action:  9
Leaf selection - depth:  1
Leaf selection - action scores:  [0.3467184  0.2831257  0.26047993 0.15163898 0.04566561 0.0372223
 0.01300351 0.00932564 0.00755346 0.00566108]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.38813767 0.29687083 0.04260513 0.03111379 0.02093524 0.01993164
 0.01083458 0.00953904 0.00485055 0.00356211]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.3874735  0.3646667  0.06420539 0.0501658  0.01357347 0.01296183
 0.00973644 0.00507674 0.00465921 0.00387849]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.4161014  0.36258638 0.1163036  0.06131388 0.0088194  0.00761996
 0.00481728 0.00402264 0.00343804 0.00308813]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [0.5003517  0.38286597 0.31488648 0.25971708 0.05231657 0.01806992
 0.01283972 0.01233334 0.01144482 0.00976287]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [7.5582832e-01 1.0636332e-03 3.3903794e-05 9.0897147e-06 8.0943109e-06
 5.6426193e-06 5.5381479e-06 4.8660604e-06 3.5939943e-06 3.4143627e-06]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [8.4568745e-01 1.5821526e-03 8.6654484e-04 1.7345876e-04 9.2644827e-05
 7.0564944e-05 5.4046668e-05 2.7688920e-05 2.1317801e-05 1.7943583e-05]  taking action:  0
Leaf selection - depth:  8
Leaf selection - action scores:  [9.7760606e-01 2.5575461e-02 9.0847624e-04 3.9113787e-04 1.1446421e-04
 3.5635505e-05 3.3476459e-05 2.7196451e-05 1.8293902e-05 1.2870877e-05]  taking action:  0
Leaf selection - depth:  9
Leaf selection - action scores:  [0.26777104 0.39353427 0.29383534 0.26256216 0.12466001 0.1176791
 0.07861833 0.06968069 0.04663938 0.04351516]  taking action:  1
Adding child.
Leaf selection - depth:  10
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  26
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);	
  wire [31:0] carry;
  adder_8 A1(sum[7:0], carry[0], in1[7:0], in2[7:0], cin);
  adder_8 A2(sum[15:8], carry[1], in1[15:8], in2[15:8], carry[0]);
  adder_8 A3(sum[23:16], carry[2], in1[23:16], in2[23:16], carry[1]);
  adder_8 A4(sum[31:24], carry[3], in1[31:24], in2[31:24], carry[2]);
  adder_8 A5(sum[39:32], carry[4], in1[39:32], in2[39:32], carry[3]);
  adder_8 A6(sum[47:40], carry[5], in1[47:40], in2[47:40], carry[4]);
  adder_8 A7(sum[55:48], carry[6], in1[55:48], in2[55:48], carry[5]);
  adder_8 A8(sum[63:56], cout, in1[63:56], in2[63:56], carry[6]);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 failed\n'
Tokens:  288
LLM generates return in:  114.010864  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  280.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 4.60431980e-03 -2.37129225e-02 -3.25127849e-02  4.08861442e-04
 -4.98300881e-01 -3.98518620e-02  6.83284467e-04 -4.91824337e-02
 -4.92723199e-02  3.53681562e-02]  taking action:  9
Leaf selection - depth:  1
Leaf selection - action scores:  [0.32587063 0.29030046 0.26849657 0.15630588 0.04707103 0.03836787
 0.01340371 0.00961265 0.00778593 0.00583531]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.3649178  0.30729052 0.0441005  0.03220584 0.02167004 0.02063121
 0.01121485 0.00987384 0.0050208  0.00368714]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.362606   0.37843248 0.06662908 0.05205951 0.01408585 0.01345112
 0.01010398 0.00526838 0.00483509 0.0040249 ]  taking action:  1
Adding child.
Leaf selection - depth:  4
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  62
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);	
  adder_8 a1(sum[7:0], cout, in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], cout, in1[15:8], in2[15:8], cout);
  adder_8 a3(sum[23:16], cout, in1[23:16], in2[23:16], cout);
  adder_8 a4(sum[31:24], cout, in1[31:24], in2[31:24], cout);
  adder_8 a5(sum[39:32], cout, in1[39:32], in2[39:32], cout);
  adder_8 a6(sum[47:40], cout, in1[47:40], in2[47:40], cout);
  adder_8 a7(sum[55:48], cout, in1[55:48], in2[55:48], cout);
  adder_8 a8(sum[63:56], cout, in1[63:56], in2[63:56], cout);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 failed\n'
Tokens:  256
LLM generates return in:  98.274161  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  281.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 4.81488146e-03 -2.35921157e-02 -3.25113261e-02  4.09588306e-04
 -4.98297861e-01 -3.98515986e-02  8.52400540e-04 -4.91809803e-02
 -4.92710262e-02  2.78478261e-02]  taking action:  9
Leaf selection - depth:  1
Leaf selection - action scores:  [0.30738595 0.29726714 0.2762807  0.16083743 0.04843569 0.03948022
 0.0137923  0.00989134 0.00801166 0.00600448]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.3444372  0.31736827 0.0455468  0.03326204 0.02238072 0.02130782
 0.01158265 0.01019766 0.00518546 0.00380806]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.37479287 0.14585744 0.06896766 0.05388672 0.01458024 0.01392324
 0.01045862 0.00545329 0.00500479 0.00416617]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.3633931  0.3806585  0.12105262 0.06381751 0.00917952 0.0079311
 0.00501399 0.0041869  0.00357843 0.00321422]  taking action:  1
Leaf selection - depth:  5
Leaf selection - action scores:  [0.6371989  0.0638152  0.05471912 0.0348161  0.01787053 0.00701608
 0.00667755 0.00622421 0.00466782 0.00363017]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [8.35208356e-01 4.56360690e-02 3.73146078e-03 9.44793690e-04
 9.17550642e-04 7.58329406e-04 3.90015135e-04 2.65754235e-04
 1.34269372e-04 1.20933575e-04]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [8.8282007e-01 4.8296759e-01 3.6430568e-02 2.2082680e-03 2.9154407e-04
 2.1640275e-04 1.1903031e-04 1.0881330e-04 9.3192320e-05 8.8341840e-05]  taking action:  0
Leaf selection - depth:  8
Leaf selection - action scores:  [1.9458421e+00 3.5002164e-03 1.6109252e-03 1.5428473e-04 1.2161332e-04
 9.6107215e-05 6.8376263e-05 4.4464436e-05 2.5894155e-05 1.1287319e-05]  taking action:  0
Adding child.
Leaf selection - depth:  9
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  11
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);	
  wire c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42,c43,c44,c45,c46,c47,c48,c49,c50,c51,c52,c53,c54,c55,c56,c57,c58,c59,c60,c61,c62,c63;
  adder_8 a1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
  adder_8 a3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
  adder_8 a4(sum[31:24], c4, in1[31:24], in2[31:24], c3);
  adder_8 a5(sum[39:32], c5, in1[39:32], in2[39:32], c4);
  adder_8 a6(sum[47:40], c6, in1[47:40], in2[47:40], c5);
  adder_8 a7(sum[55:48], c7, in1[55:48], in2[55:48], c6);
  adder_8 a8(sum[63:56], cout, in1[63:56], in2[63:56], c7);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 failed\n'
Tokens:  457
LLM generates return in:  201.159633  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  282.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 5.02507011e-03 -2.34715230e-02 -3.25098700e-02  4.10313882e-04
 -4.98294845e-01 -3.98513357e-02  1.02121703e-03 -4.91795294e-02
 -4.92697349e-02  2.11191114e-02]  taking action:  9
Leaf selection - depth:  1
Leaf selection - action scores:  [0.2908661  0.30404285 0.28385144 0.16524476 0.04976294 0.04056207
 0.01417024 0.01016239 0.0082312  0.00616902]  taking action:  1
Leaf selection - depth:  2
Leaf selection - action scores:  [1.8029790e+00 9.8058753e-02 4.3746654e-02 3.8967137e-03 1.0673687e-03
 8.5047423e-04 2.9747820e-04 2.1922287e-04 1.8227259e-04 1.0080265e-04]  taking action:  0
Adding child.
Leaf selection - depth:  3
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  50286
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);	 
  wire [31:0] c;
  adder_8 a1(sum[7:0], c[0], in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c[1], in1[15:8], in2[15:8], c[0]);
  adder_8 a3(sum[23:16], c[2], in1[23:16], in2[23:16], c[1]);
  adder_8 a4(sum[31:24], cout, in1[31:24], in2[31:24], c[2]);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  152
LLM generates return in:  53.980717  seconds
Running getPromptScore: 
adder_32
output_files/2329780_adder_32/synth_script.sh
Running bash in x seconds:  0.897908

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.1
Backpropogation: incorporating estimates.
Current runs:  283.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 5.23488773e-03 -2.33511431e-02 -3.25084164e-02  4.11038178e-04
 -4.98291835e-01 -3.98510733e-02  1.18973551e-03 -4.91780811e-02
 -4.92684458e-02  2.50632668e-02]  taking action:  9
Leaf selection - depth:  1
Leaf selection - action scores:  [0.29811668 0.2404283  0.2912254  0.16953753 0.0510557  0.0416158
 0.01453836 0.01042639 0.00844503 0.00632928]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.32621318 0.3271357  0.04694857 0.03428573 0.02306952 0.02196359
 0.01193912 0.01051151 0.00534505 0.00392526]  taking action:  1
Adding child.
Leaf selection - depth:  3
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  21809
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);	
	wire [31:0] c;
	adder_8 a1(sum[7:0], c[0], in1[7:0], in2[7:0], cin);
	adder_8 a2(sum[15:8], c[1], in1[15:8], in2[15:8], c[0]);
	adder_8 a3(sum[23:16], c[2], in1[23:16], in2[23:16], c[1]);
	adder_8 a4(sum[31:24], cout, in1[31:24], in2[31:24], c[2]);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  151
LLM generates return in:  53.557228  seconds
Running getPromptScore: 
adder_32
output_files/2329780_adder_32/synth_script.sh
Running bash in x seconds:  0.90128

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.1
Backpropogation: incorporating estimates.
Current runs:  284.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 5.44433627e-03 -2.32309750e-02 -3.25069653e-02  4.11761199e-04
 -4.98288831e-01 -3.98508113e-02  1.35795757e-03 -4.91766353e-02
 -4.92671590e-02  2.86317903e-02]  taking action:  9
Leaf selection - depth:  1
Leaf selection - action scores:  [0.29378885 0.24471939 0.29841727 0.1737243  0.05231653 0.04264351
 0.01489739 0.01068387 0.00865358 0.00648558]  taking action:  2
Adding child.
Leaf selection - depth:  2
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  198
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);	  
  wire [31:0] c;
  adder_8 a1(sum[7:0], c[0], in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c[1], in1[15:8], in2[15:8], c[0]);
  adder_8 a3(sum[23:16], c[2], in1[23:16], in2[23:16], c[1]);
  adder_8 a4(sum[31:24], cout, in1[31:24], in2[31:24], c[2]);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  153
LLM generates return in:  54.334985  seconds
Running getPromptScore: 
adder_32
output_files/2329780_adder_32/synth_script.sh
Running bash in x seconds:  0.904467

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.1
Backpropogation: incorporating estimates.
Current runs:  285.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 5.65341769e-03 -2.31110175e-02 -3.25055168e-02  4.12482953e-04
 -4.98285831e-01 -3.98505498e-02  1.52588476e-03 -4.91751921e-02
 -4.92658744e-02  3.18759021e-02]  taking action:  9
Leaf selection - depth:  1
Leaf selection - action scores:  [0.30031028 0.24890941 0.2027199  0.17781247 0.05354767 0.04364702
 0.01524796 0.01093529 0.00885722 0.00663821]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.33548942 0.21830994 0.04830968 0.03527973 0.02373834 0.02260035
 0.01228525 0.01081625 0.00550001 0.00403906]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.3518242  0.15228069 0.07122949 0.05565396 0.01505841 0.01437986
 0.01080161 0.00563213 0.00516893 0.0043028 ]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.3747515  0.3150399  0.12562224 0.06622656 0.00952604 0.00823049
 0.00520326 0.00434495 0.00371351 0.00333556]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [0.4392669  0.40930092 0.3366278  0.27764922 0.05592877 0.01931755
 0.01372624 0.01318489 0.01223503 0.01043695]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [6.5831506e-01 1.1488552e-03 3.6620288e-05 9.8180153e-06 8.7428552e-06
 6.0947259e-06 5.9818835e-06 5.2559462e-06 3.8819576e-06 3.6879335e-06]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [7.1539670e-01 1.7331613e-03 9.4925234e-04 1.9001456e-04 1.0148732e-04
 7.7300021e-05 5.9205162e-05 3.0331692e-05 2.3352481e-05 1.9656210e-05]  taking action:  0
Leaf selection - depth:  8
Leaf selection - action scores:  [7.8884584e-01 2.8594235e-02 1.0157073e-03 4.3730543e-04 1.2797487e-04
 3.9841707e-05 3.7427821e-05 3.0406556e-05 2.0453204e-05 1.4390078e-05]  taking action:  0
Leaf selection - depth:  9
Leaf selection - action scores:  [0.30146033 0.17720713 0.33929184 0.30318066 0.14394496 0.13588412
 0.09078062 0.08046032 0.05385452 0.05024698]  taking action:  2
Adding child.
Leaf selection - depth:  10
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  62
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);	
  wire [31:0] cout_temp;
  adder_8 A1(sum[7:0], cout_temp[0], in1[7:0], in2[7:0], cin);
  adder_8 A2(sum[15:8], cout_temp[1], in1[15:8], in2[15:8], cout_temp[0]);
  adder_8 A3(sum[23:16], cout_temp[2], in1[23:16], in2[23:16], cout_temp[1]);
  adder_8 A4(sum[31:24], cout_temp[3], in1[31:24], in2[31:24], cout_temp[2]);
  adder_8 A5(sum[39:32], cout_temp[4], in1[39:32], in2[39:32], cout_temp[3]);
  adder_8 A6(sum[47:40], cout_temp[5], in1[47:40], in2[47:40], cout_temp[4]);
  adder_8 A7(sum[55:48], cout_temp[6], in1[55:48], in2[55:48], cout_temp[5]);
  adder_8 A8(sum[63:56], cout_temp[7], in1[63:56], in2[63:56], cout_temp[6]);
  assign cout = cout_temp[7];
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 failed\n'
Tokens:  334
LLM generates return in:  136.417846  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  286.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 5.86213390e-03 -2.29912695e-02 -3.25040708e-02  4.13203447e-04
 -4.98282837e-01 -3.98502888e-02  1.69351863e-03 -4.91737513e-02
 -4.92645921e-02  2.61422622e-02]  taking action:  9
Leaf selection - depth:  1
Leaf selection - action scores:  [0.28528062 0.25300527 0.20615223 0.18180875 0.05475114 0.04462798
 0.01559066 0.01118105 0.00905628 0.0067874 ]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.31836364 0.22292203 0.04963348 0.03624647 0.02438882 0.02321966
 0.0126219  0.01111264 0.00565072 0.00414974]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.3316034  0.15850616 0.07342168 0.05736679 0.01552185 0.01482242
 0.01113405 0.00580547 0.00532801 0.00443523]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.33174312 0.32902217 0.13003138 0.068551   0.00986039 0.00851937
 0.00538588 0.00449745 0.00384385 0.00345263]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [0.39214075 0.43412918 0.35704768 0.29449144 0.05932141 0.02048936
 0.01455887 0.01398469 0.01297721 0.01107006]  taking action:  1
Adding child.
Leaf selection - depth:  6
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  25
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);	
  wire [63:0] carry;
  wire [31:0] in1_32;
  wire [31:0] in2_32;
  wire [31:0] c;
  adder_8 a1(in1_32[7:0], c[0], in1[7:0], in2[7:0], cin);
  adder_8 a2(in1_32[15:8], c[1], in1[15:8], in2[15:8], c[0]);
  adder_8 a3(in1_32[23:16], c[2], in1[23:16], in2[23:16], c[1]);
  adder_8 a4(in1_32[31:24], c[3], in1[31:24], in2[31:24], c[2]);
  adder_8 a5(in1_32[39:32], c[4], in1[39:32], in2[39:32], c[3]);
  adder_8 a6(in1_32[47:40], c[5], in1[47:40], in2[47:40], c[4]);
  adder_8 a7(in1_32[55:48], c[6], in1[55:48], in2[55:48], c[5]);
  adder_8 a8(in1_32[63:56], c[7], in1[63:56], in2[63:56], c[6]);
  adder_8 a9(in1_32[71:64], carry[0], in1[71:64], in2[71:64], 1'b0);
  adder_8 a10(in1_32[79:72], carry[1], in1[79:72], in2[79:72], carry[0]);
  adder_8 a11(in1_32[87:80], carry[2], in1[87:80], in2[87:80], carry[1]);
  adder_8 a12(in1_32[95:88], carry[3], in1[95:88], in2[95:88], carry[2]);
  adder_8 a13(in1_32[103:96], carry[4], in1[103:96], in2[103:96], carry[3]);
  adder_8 a14(in1_32[111:104], carry[5], in1[111:104], in2[111:104], carry[4]);
  adder_8 a15(in1_32[119:112], carry[6], in1[119:112], in2[119:112], carry[5]);
  adder_8 a16(in1_32[127:120], carry[7], in1[127:120], in2[127:120], carry[6]);
  adder_8 a17(in1_32[135:128], carry[8], in1[135:128], in2[135:128], carry[7]);
  adder_8 a18(in1_32[143:136], carry[9], in1[143:136], in2[143:136], carry[8]);
  adder_8 a19(in1_32[151:144], carry[10], in1[151:144], in2[151:144], carry[9]);
  adder_8 a20(in1_32[159:152], carry[11], in1[159:152], in2[159:152], carry[10]);
  adder_8 a21(in1_32[167:160], carry[12], in1[167:160], in2[167:160], carry[11]);
  adder_8 a22(in1_32[175:168], carry[13], in1[175:168], in2[175:168], carry[12]);
  adder_8 a23(in1_32[183:176], carry[14], in1[183:176], in2[183:176], carry[13]);
  adder_8 a24(in1_32[191:184], carry[15], in1[191:184], in2[191:184], carry[14]);
  adder_8 a25(in1_32[199:192],
Path:  output_files/2329780_adder_32/2329780_simulation
Verilog compilation failed, error:  2
Compilation output:  b'output_files/2329780_adder_32/2329780_adder_32.v:64: syntax error\nI give up.\n'
Tokens:  993
LLM generates return in:  600.072125  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  287.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 6.07048680e-03 -2.28717300e-02 -3.25026274e-02  4.13922686e-04
 -4.98279848e-01 -3.98500282e-02  1.86086071e-03 -4.91723131e-02
 -4.92633120e-02 -1.66135737e-02]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [ 4.2587519e-05 -5.9360489e-03 -1.5120510e-02  3.8314844e-03
 -6.0552884e-02  5.9396196e-03 -3.4911402e-02 -4.3143339e-02
  5.6343677e-04 -4.6475016e-02]  taking action:  5
Leaf selection - depth:  2
Leaf selection - action scores:  [0.29561496 0.17888914 0.07379107 0.00509324 0.00180711 0.00113364
 0.00047646 0.00043138 0.00042566 0.00035701]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.2738456  0.18838242 0.13745284 0.06424958 0.0351243  0.03124044
 0.02892025 0.01547936 0.01240059 0.01220648]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.2726855  0.16081178 0.06614066 0.03495767 0.02023858 0.01383114
 0.01161916 0.0085257  0.00822424 0.00675984]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [0.2876955  0.29653147 0.21091074 0.09723359 0.00880049 0.00647866
 0.00631132 0.00605839 0.00534235 0.00449341]  taking action:  1
Leaf selection - depth:  6
Leaf selection - action scores:  [0.47912595 0.07264225 0.05905097 0.0437399  0.02546891 0.00859763
 0.00792728 0.0070743  0.00528871 0.00415111]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [5.7660145e-01 8.2244307e-02 6.1551360e-03 1.9205256e-03 1.7286548e-03
 1.1617068e-03 8.4987108e-04 4.8877019e-04 2.4097503e-04 1.6576116e-04]  taking action:  0
Leaf selection - depth:  8
Leaf selection - action scores:  [6.7794716e-01 3.4907761e-01 4.6289790e-02 2.7624124e-03 5.9409556e-04
 3.3482219e-04 1.7961163e-04 1.4403710e-04 1.2775396e-04 1.2259107e-04]  taking action:  0
Leaf selection - depth:  9
Leaf selection - action scores:  [1.1408355e+00 5.2226190e-03 2.4133937e-03 1.6209860e-04 1.5720008e-04
 1.3038014e-04 9.9808924e-05 7.6003656e-05 4.9099366e-05 1.9671243e-05]  taking action:  0
Leaf selection - depth:  10
Leaf selection - action scores:  [1.9296638e+00 1.9796014e-02 7.6142134e-04 5.7948875e-04 3.7766783e-04
 4.3207245e-05 3.9892238e-05 3.5563553e-05 2.8670675e-05 2.7912021e-05]  taking action:  0
Adding child.
Leaf selection - depth:  11
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  66
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
 
  wire c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42,c43,c44,c45,c46,c47,c48,c49,c50,c51,c52,c53,c54,c55,c56,c57,c58,c59,c60,c61,c62,c63;
  
  adder_8 a1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
  adder_8 a3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
  adder_8 a4(sum[31:24], c4, in1[31:24], in2[31:24], c3);
  adder_8 a5(sum[39:32], c5, in1[39:32], in2[39:32], c4);
  adder_8 a6(sum[47:40], c6, in1[47:40], in2[47:40], c5);
  adder_8 a7(sum[55:48], c7, in1[55:48], in2[55:48], c6);
  adder_8 a8(sum[63:56], cout, in1[63:56], in2[63:56], c7);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 failed\n'
Tokens:  458
LLM generates return in:  202.187969  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  288.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 5.61423845e-03 -2.27523979e-02 -3.25011864e-02  4.14640678e-04
 -4.98276864e-01 -3.98497680e-02  2.02791251e-03 -4.91708774e-02
 -4.92620341e-02 -1.66134816e-02]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [ 0.00063539 -0.00574537 -0.015011    0.00384351 -0.0605432   0.00133774
 -0.03486403 -0.04312181  0.00056521 -0.04646395]  taking action:  3
Leaf selection - depth:  2
Leaf selection - action scores:  [0.31158766 0.14348963 0.23614456 0.04173084 0.02969857 0.01381333
 0.0123846  0.00923151 0.00581798 0.00530378]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.34816054 0.30207217 0.12010355 0.0420256  0.01186377 0.01143398
 0.00755783 0.00537634 0.00415599 0.00360924]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.44348598 0.20154141 0.22205763 0.14818434 0.0905653  0.02037411
 0.01640638 0.01419421 0.01284857 0.00588558]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [5.8605212e-01 7.6256809e-04 4.6214678e-05 8.4927533e-06 8.3461091e-06
 6.3200728e-06 5.9535109e-06 5.1537490e-06 3.6722054e-06 3.5157852e-06]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [6.2470376e-01 1.4924865e-03 8.7732065e-04 1.6844281e-04 9.5091724e-05
 5.4580338e-05 3.9535924e-05 3.1873129e-05 1.8332687e-05 1.6338676e-05]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [6.6810185e-01 3.8506083e-02 5.3396757e-04 4.1966632e-04 1.2231497e-04
 3.9269686e-05 3.3111304e-05 2.2725297e-05 1.7875433e-05 1.6620663e-05]  taking action:  0
Leaf selection - depth:  8
Leaf selection - action scores:  [0.3179025  0.21015276 0.20311336 0.25430998 0.21093777 0.12282483
 0.07818816 0.07300835 0.05185606 0.04773078]  taking action:  0
Leaf selection - depth:  9
Leaf selection - action scores:  [0.82722664 0.37953466 0.1752715  0.1055849  0.07161723 0.05447635
 0.05222417 0.05138941 0.0238635  0.02270604]  taking action:  0
Adding child.
Leaf selection - depth:  10
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  198
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
   wire [31:0] c;
   adder_8 a1(sum[7:0], c[0], in1[7:0], in2[7:0], cin);
   adder_8 a2(sum[15:8], c[1], in1[15:8], in2[15:8], c[0]);
   adder_8 a3(sum[23:16], c[2], in1[23:16], in2[23:16], c[1]);
   adder_8 a4(sum[31:24], cout, in1[31:24], in2[31:24], c[2]);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  143
LLM generates return in:  51.036378  seconds
Running getPromptScore: 
adder_32
output_files/2329780_adder_32/synth_script.sh
Running bash in x seconds:  0.901707

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.1
Backpropogation: incorporating estimates.
Current runs:  289.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 6.40553940e-03 -2.26332720e-02 -3.24997480e-02  4.15357428e-04
 -4.98273886e-01 -3.98495083e-02  2.19467555e-03 -4.91694442e-02
 -4.92607585e-02 -1.66133896e-02]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [ 0.00122635 -0.00555529 -0.01490183  0.00919687 -0.06053355  0.00134191
 -0.0348168  -0.04310035  0.00056697 -0.04645292]  taking action:  3
Leaf selection - depth:  2
Leaf selection - action scores:  [0.30683222 0.1490992  0.24299075 0.04294068 0.03055958 0.0142138
 0.01274365 0.00949915 0.00598665 0.00545754]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.33508617 0.31460243 0.12404241 0.04340385 0.01225285 0.01180896
 0.00780569 0.00555266 0.00429229 0.00372761]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.42293486 0.21381886 0.23289603 0.15541705 0.09498569 0.02136855
 0.01720716 0.01488701 0.01347569 0.00617285]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [5.5488533e-01 8.0882554e-04 4.9018068e-05 9.0079247e-06 8.8523848e-06
 6.7034493e-06 6.3146517e-06 5.4663760e-06 3.8949620e-06 3.7290531e-06]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [5.8573055e-01 1.5955351e-03 9.3789527e-04 1.8007295e-04 1.0165732e-04
 5.8348836e-05 4.2265681e-05 3.4073808e-05 1.9598465e-05 1.7466780e-05]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [6.1802709e-01 4.1591328e-02 5.7675090e-04 4.5329146e-04 1.3211527e-04
 4.2416108e-05 3.5764300e-05 2.4546127e-05 1.9307676e-05 1.7952369e-05]  taking action:  0
Leaf selection - depth:  8
Leaf selection - action scores:  [0.262315   0.23498307 0.22727181 0.27858263 0.23107076 0.13454786
 0.08565084 0.07997664 0.05680546 0.05228645]  taking action:  3
Adding child.
Leaf selection - depth:  9
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  16
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
   wire [31:0] in1_1, in1_2, in2_1, in2_2;
   wire [31:0] c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15, c16, c17, c18, c19, c20, c21, c22, c23, c24, c25, c26, c27, c28, c29, c30, c31, c32, c33, c34, c35, c36, c37, c38, c39, c40, c41, c42, c43, c44, c45, c46, c47, c48, c49, c50, c51, c52, c53, c54, c55, c56, c57, c58, c59, c60, c61, c62, c63;
   wire [31:0] in1_3, in1_4, in2_3, in2_4;
   wire [31:0] c1_1, c1_2, c1_3, c1_4, c1_5, c1_6, c1_7, c1_8, c1_9, c1_10, c1_11, c1_12, c1_13, c1_14, c1_15, c1_16, c1_17, c1_18, c1_19, c1_20, c1_21, c1_22, c1_23, c1_24, c1_25, c1_26, c1_27, c1_28, c1_29, c1_30, c1_31, c1_32, c1_33, c1_34, c1_35, c1_36, c1_37, c1_38, c1_39, c1_40, c1_41, c1_42, c1_43, c1_44, c1_45, c1_46, c1_47, c1_48, c1_49, c1_50, c1_51, c1_52, c1_53, c1_54, c1_55, c1_56, c1_57, c1_58, c1_59, c1_60, c1_61, c1_62, c1_63;
   wire [31:0] in1_5, in1_6, in2_5, in2_6;
   wire [31:0] c2_1, c2_2, c2_3, c2_4, c2_5, c2_6, c2_7, c2_8, c2_9, c2_10, c2_11, c2_12, c2_13, c2_14, c2_15, c2_16, c2_17, c2_18, c2_19, c2_20, c2_21, c2_22, c2_23, c2_24, c2_25, c2_26, c2_27, c2_28, c2_29, c2_30, c2_31, c2_32, c2_33, c2_34, c2_35, c2_36, c2_37, c2_38, c2_39, c2_40, c2_41, c2_42, c2_43, c2_44, c2_45, c2_46, c2_47, c2_48, c2_49, c2_50, c2_51, c2_52, c2_53, c2_54, c2_55, c2_56, c2_57, c2_58, c2_59, c2_60, c2_61, c2_62, c2_63;
   wire [31:0] in1_7, in1_8, in2_7, in2_8;
   wire [31:0] c3_1, c3_2, c3_3, c3_4, c3_5, c3_6, c3_7, c3
Path:  output_files/2329780_adder_32/2329780_simulation
Verilog compilation failed, error:  3
Compilation output:  b"output_files/2329780_adder_32/2329780_adder_32.v:43: error: duplicate declaration for net or variable 'c3' in 'adder_32'.\noutput_files/2329780_adder_32/2329780_adder_32.v:43: syntax error\nI give up.\n"
Tokens:  990
LLM generates return in:  599.142054  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  290.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 3.96595622e-04 -2.25143513e-02 -3.24983120e-02  4.16072944e-04
 -4.98270912e-01 -3.98492491e-02  2.36115131e-03 -4.91680134e-02
 -4.92594850e-02 -1.66132979e-02]  taking action:  6
Leaf selection - depth:  1
Leaf selection - action scores:  [0.12142639 0.14067438 0.00860504 0.00048965 0.00044566 0.00038692
 0.00032128 0.0002271  0.00021058 0.00019502]  taking action:  1
Leaf selection - depth:  2
Leaf selection - action scores:  [0.8994547  0.11628266 0.05105229 0.04176442 0.01152365 0.00443687
 0.00392408 0.00362444 0.00336598 0.0026348 ]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.98371625 0.23320931 0.02566447 0.02526455 0.01201475 0.00602878
 0.00490078 0.00424595 0.00406719 0.00331185]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [1.0635097  0.7526468  0.05676269 0.03463552 0.0045786  0.00252952
 0.00250714 0.00240828 0.00206698 0.00193705]  taking action:  0
Adding child.
Leaf selection - depth:  5
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  3132
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);   

  wire [31:0] c;
  adder_8 a1(sum[7:0], c[0], in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c[1], in1[15:8], in2[15:8], c[0]);
  adder_8 a3(sum[23:16], c[2], in1[23:16], in2[23:16], c[1]);
  adder_8 a4(sum[31:24], cout, in1[31:24], in2[31:24], c[2]);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  149
LLM generates return in:  52.998756  seconds
Running getPromptScore: 
adder_32
output_files/2329780_adder_32/synth_script.sh
Running bash in x seconds:  0.890683

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.1
Backpropogation: incorporating estimates.
Current runs:  291.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 5.99682241e-04 -2.23956348e-02 -3.24968785e-02  4.16787232e-04
 -4.98267944e-01 -3.98489903e-02  5.16173467e-03 -4.91665851e-02
 -4.92582138e-02 -1.66132062e-02]  taking action:  6
Leaf selection - depth:  1
Leaf selection - action scores:  [0.12473935 0.13326421 0.00872373 0.00049641 0.00045181 0.00039226
 0.00032571 0.00023023 0.00021348 0.00019771]  taking action:  1
Leaf selection - depth:  2
Leaf selection - action scores:  [0.773314   0.13000795 0.05707819 0.04669404 0.01288383 0.00496057
 0.00438725 0.00405225 0.00376328 0.0029458 ]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.7854417  0.2692869  0.02963477 0.02917299 0.01387344 0.00696144
 0.00565894 0.0049028  0.00469638 0.0038242 ]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.701264   0.9218003  0.06951981 0.04241968 0.00560761 0.00309801
 0.00307061 0.00294953 0.00253153 0.00237239]  taking action:  1
Adding child.
Leaf selection - depth:  5
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  16
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);   

  wire c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42,c43,c44,c45,c46,c47,c48,c49,c50,c51,c52,c53,c54,c55,c56,c57,c58,c59,c60,c61,c62,c63;
  wire [63:0] in1_1,in1_2,in2_1,in2_2;
  wire [63:0] sum_1,sum_2;
  wire [63:0] out_1,out_2;
  
  adder_8 a1(sum_1,c1,in1[7:0],in2[7:0],1'b0);
  adder_8 a2(sum_2,c2,in1[15:8],in2[15:8],c1);
  adder_8 a3(sum_3,c3,in1[23:16],in2[23:16],c2);
  adder_8 a4(sum_4,c4,in1[31:24],in2[31:24],c3);
  adder_8 a5(sum_5,c5,in1[39:32],in2[39:32],c4);
  adder_8 a6(sum_6,c6,in1[47:40],in2[47:40],c5);
  adder_8 a7(sum_7,c7,in1[55:48],in2[55:48],c6);
  adder_8 a8(sum_8,c8,in1[63:56],in2[63:56],c7);
  
  adder_4 a9(sum_9,c9,in1[7:0],in2[7:0]);
  adder_4 a10(sum_10,c10,in1[15:8],in2[15:8]);
  adder_4 a11(sum_11,c11,in1[23:16],in2[23:16]);
  adder_4 a12(sum_12,c12,in1[31:24],in2[31:24]);
  adder_4 a13(sum_13,c13,in1[39:32],in2[39:32]);
  adder_4 a14(sum_14,c14,in1[47:40],in2[47:40]);
  adder_4 a15(sum_15,c15,in1[55:48],in2[55:48]);
  adder_4 a16(sum_16,c16,in1[63:56],in2[63:56]);
  
  adder_2 a17(sum_17,c17,in1[7:0],in2[7:0]);
  adder_2 a18(sum_18,c18,in1[15:8],in2[15:8]);
  adder_2 a19(sum_19,c19,in1[23:16],in2[23:16]);
  adder_2 a20(sum_20,c20,in1[31:24],in2[31:24]);
  adder_2 a21(sum_21,c21,in1[39:32],in2[39:32]);
  adder_2 a22(sum_22,c22,in1[47:40],in2[47:40]);
  adder_2 a23(sum_23,c23,in1[55:48],in2[55:48]);
  adder_2 a24(sum_24,c24,in1[63:56],in2[63:56]);
  
  adder_1 a25(sum_25,c25,in1
Path:  output_files/2329780_adder_32/2329780_simulation
Verilog compilation failed, error:  2
Compilation output:  b'output_files/2329780_adder_32/2329780_adder_32.v:69: syntax error\nI give up.\n'
Tokens:  994
LLM generates return in:  600.260711  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  292.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 8.02421406e-04 -2.22771214e-02 -3.24954474e-02  4.17500297e-04
 -4.98264981e-01 -3.98487319e-02 -2.11327219e-02 -4.91651593e-02
 -4.92569447e-02 -1.66131148e-02]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [ 0.00181548 -0.0053658  -0.01479299 -0.04390806 -0.06052393  0.00134607
 -0.03476972 -0.04307896  0.00056873 -0.04644192]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [ 0.00368683  0.00352731 -0.45776734 -0.01211919 -0.03894392 -0.04159261
 -0.49187234 -0.49430147 -0.04433382 -0.49664912]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [ 0.0055625   0.02521975 -0.33685148 -0.01485522  0.014541    0.00981666
  0.00693574  0.0068125   0.00561177  0.00484696]  taking action:  1
Leaf selection - depth:  4
Leaf selection - action scores:  [ 0.11529209 -0.08438933 -0.2991541   0.1334872   0.07802315  0.02425116
  0.01971801  0.01550923  0.01529607  0.01225207]  taking action:  3
Leaf selection - depth:  5
Leaf selection - action scores:  [1.9252264e+00 2.5119433e-02 3.3997776e-04 1.7743764e-04 1.6856399e-04
 7.5414660e-05 4.4426935e-05 3.6994283e-05 3.6256890e-05 2.5386813e-05]  taking action:  0
Adding child.
Leaf selection - depth:  6
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  15
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
  wire [7:0] c;
  adder_8 a1(sum[7:0], c[0], in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c[1], in1[15:8], in2[15:8], c[0]);
  adder_8 a3(sum[23:16], c[2], in1[23:16], in2[23:16], c[1]);
  adder_8 a4(sum[31:24], c[3], in1[31:24], in2[31:24], c[2]);
  adder_8 a5(sum[39:32], c[4], in1[39:32], in2[39:32], c[3]);
  adder_8 a6(sum[47:40], c[5], in1[47:40], in2[47:40], c[4]);
  adder_8 a7(sum[55:48], c[6], in1[55:48], in2[55:48], c[5]);
  adder_8 a8(sum[63:56], cout, in1[63:56], in2[63:56], c[6]);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 failed\n'
Tokens:  291
LLM generates return in:  114.945951  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  293.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 3.85151250e-04 -2.21588101e-02 -3.24940188e-02  4.18212147e-04
 -4.98262022e-01 -3.98484740e-02 -2.09758161e-02 -4.91637358e-02
 -4.92556777e-02 -1.66130235e-02]  taking action:  3
Leaf selection - depth:  1
Leaf selection - action scores:  [2.83344924e-01 1.82298079e-01 3.91801726e-03 5.12377825e-04
 2.15705018e-04 2.10516984e-04 1.78685266e-04 1.68880506e-04
 1.01501566e-04 9.97337047e-05]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.29763663 0.06042611 0.04416317 0.04025124 0.031026   0.01987313
 0.0091487  0.00687588 0.00617113 0.00364724]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.2898027  0.19741568 0.13622186 0.07386362 0.01638291 0.01637479
 0.00801632 0.00610373 0.00562755 0.00533409]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.30965665 0.2853182  0.13067995 0.07359397 0.01119821 0.00722923
 0.00622125 0.00465651 0.00450822 0.00379735]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [0.4225     0.19172662 0.29947156 0.271978   0.07108895 0.01998543
 0.01474915 0.01424822 0.01382651 0.00893613]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [5.8593625e-01 1.5766143e-03 3.4291668e-05 9.7613683e-06 9.6186886e-06
 6.8449121e-06 6.4054725e-06 5.4821112e-06 4.3918790e-06 3.7406573e-06]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [6.2461591e-01 1.9765305e-03 8.8559947e-04 1.6709128e-04 9.5275493e-05
 7.3156218e-05 5.1508759e-05 3.0885909e-05 2.2051283e-05 1.7615055e-05]  taking action:  0
Leaf selection - depth:  8
Leaf selection - action scores:  [6.6994917e-01 2.8702734e-02 9.7752234e-04 5.1411497e-04 1.2697307e-04
 4.6364959e-05 3.9673185e-05 2.9840381e-05 2.2218674e-05 1.5110434e-05]  taking action:  0
Leaf selection - depth:  9
Leaf selection - action scores:  [0.35204962 0.19542271 0.16123736 0.30567342 0.18085769 0.17994034
 0.09436597 0.08496328 0.05603436 0.05155073]  taking action:  0
Leaf selection - depth:  10
Leaf selection - action scores:  [0.88348436 0.27582043 0.21681213 0.10632203 0.0694169  0.05861277
 0.05255016 0.05067348 0.02414509 0.02355134]  taking action:  0
Adding child.
Leaf selection - depth:  11
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  198
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);  
  wire [31:0] c;
  adder_8 a1(sum[7:0], c[0], in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c[1], in1[15:8], in2[15:8], c[0]);
  adder_8 a3(sum[23:16], c[2], in1[23:16], in2[23:16], c[1]);
  adder_8 a4(sum[31:24], cout, in1[31:24], in2[31:24], c[2]);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  143
LLM generates return in:  51.137932  seconds
Running getPromptScore: 
adder_32
output_files/2329780_adder_32/synth_script.sh
Running bash in x seconds:  0.931321

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.1
Backpropogation: incorporating estimates.
Current runs:  294.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.00058596 -0.0220407  -0.03249259  0.00494534 -0.49825907 -0.03984822
 -0.02081918 -0.04916231 -0.04925441 -0.01661293]  taking action:  3
Leaf selection - depth:  1
Leaf selection - action scores:  [2.8107658e-01 1.8658802e-01 4.0102187e-03 5.2443537e-04 2.2078112e-04
 2.1547099e-04 1.8289019e-04 1.7285469e-04 1.0389016e-04 1.0208070e-04]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.29498443 0.06191834 0.04525379 0.04124524 0.03179219 0.0203639
 0.00937463 0.00704569 0.00632352 0.00373731]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.28665707 0.20384313 0.13976066 0.07578247 0.01680852 0.01680018
 0.00822457 0.00626229 0.00577374 0.00547267]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.29796758 0.296075   0.13446856 0.07572757 0.01152287 0.00743881
 0.00640161 0.00479151 0.00463892 0.00390744]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [0.40337017 0.20352505 0.31408843 0.28525296 0.07455872 0.0209609
 0.01546904 0.01494366 0.01450136 0.00937229]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [5.54777801e-01 1.67225196e-03 3.63718063e-05 1.03534949e-05
 1.02021595e-05 7.26012559e-06 6.79402956e-06 5.81465702e-06
 4.65829089e-06 3.96756604e-06]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [5.8565009e-01 2.1130000e-03 9.4674563e-04 1.7862808e-04 1.0185379e-04
 7.8207289e-05 5.5065178e-05 3.3018427e-05 2.3573813e-05 1.8831286e-05]  taking action:  0
Leaf selection - depth:  8
Leaf selection - action scores:  [6.1968982e-01 3.1002497e-02 1.0558449e-03 5.5530766e-04 1.3714659e-04
 5.0079881e-05 4.2851938e-05 3.2231299e-05 2.3998911e-05 1.6321135e-05]  taking action:  0
Leaf selection - depth:  9
Leaf selection - action scores:  [0.28725252 0.21884711 0.18139894 0.33484846 0.19811967 0.19711478
 0.10337274 0.09307261 0.06138257 0.056471  ]  taking action:  3
Adding child.
Leaf selection - depth:  10
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  62
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);  
  wire [31:0] sum_1;
  wire [31:0] sum_2;
  wire [31:0] sum_3;
  wire [31:0] sum_4;
  wire [31:0] sum_5;
  wire [31:0] sum_6;
  wire [31:0] sum_7;
  wire [31:0] sum_8;
  wire [31:0] sum_9;
  wire [31:0] sum_10;
  wire [31:0] sum_11;
  wire [31:0] sum_12;
  wire [31:0] sum_13;
  wire [31:0] sum_14;
  wire [31:0] sum_15;
  wire [31:0] sum_16;
  wire [31:0] sum_17;
  wire [31:0] sum_18;
  wire [31:0] sum_19;
  wire [31:0] sum_20;
  wire [31:0] sum_21;
  wire [31:0] sum_22;
  wire [31:0] sum_23;
  wire [31:0] sum_24;
  wire [31:0] sum_25;
  wire [31:0] sum_26;
  wire [31:0] sum_27;
  wire [31:0] sum_28;
  wire [31:0] sum_29;
  wire [31:0] sum_30;
  wire [31:0] sum_31;
  wire [31:0] sum_32;
  wire [31:0] sum_33;
  wire [31:0] sum_34;
  wire [31:0] sum_35;
  wire [31:0] sum_36;
  wire [31:0] sum_37;
  wire [31:0] sum_38;
  wire [31:0] sum_39;
  wire [31:0] sum_40;
  wire [31:0] sum_41;
  wire [31:0] sum_42;
  wire [31:0] sum_43;
  wire [31:0] sum_44;
  wire [31:0] sum_45;
  wire [31:0] sum_46;
  wire [31:0] sum_47;
  wire [31:0] sum_48;
  wire [31:0] sum_49;
  wire [31:0] sum_50;
  wire [31:0] sum_51;
  wire [31:0] sum_52;
  wire [31:0] sum_53;
  wire [31:0] sum_54;
  wire [31:0] sum_55;
  wire [31:0] sum_56;
  wire [31:0] sum_57;
  wire [31:0] sum_58;
  wire [31:0] sum_59;
  wire [31:0] sum_60;
  wire [31:0] sum_61;
  wire [31:0] sum_62;
  wire [31:0] sum_63;
  wire [31:0] sum_64;
  wire [31:0] sum_65;
  wire [31:0] sum_66;
  wire [31:0] sum_67;
  wire [31:0] sum_68;
  wire [31:0] sum_69;
  wire [31:0] sum_70;
  wire [31:0] sum_71;
  wire [31:0] sum_72;
  wire [31:0] sum_73;
  wire [31:0] sum_74;
  wire [31:0] sum_75;
  wire [31:0] sum_76;
  wire [31:0] sum_77;
  wire [31:0] sum_78;
  wire [31:0] sum_79;
  wire [31:0] sum_80;
  wire [31:0] sum_81;
  wire [31:0] sum_82;
  wire [31:0] sum_83;
  wire
Path:  output_files/2329780_adder_32/2329780_simulation
Verilog compilation failed, error:  2
Compilation output:  b'output_files/2329780_adder_32/2329780_adder_32.v:119: syntax error\nI give up.\n'
Tokens:  989
LLM generates return in:  598.600456  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  295.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [ 0.00078643 -0.02192279 -0.03249117 -0.03874729 -0.49825612 -0.03984796
 -0.0206628  -0.0491609  -0.04925315 -0.01661284]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [ 0.00126494 -0.00517689 -0.0146845  -0.04389739 -0.06051434  0.00135022
 -0.03472279 -0.04305763  0.00057048 -0.04643095]  taking action:  5
Leaf selection - depth:  2
Leaf selection - action scores:  [0.28397438 0.18290964 0.07544951 0.0052077  0.00184772 0.00115912
 0.00048716 0.00044108 0.00043523 0.00036504]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.26229292 0.19281554 0.14068747 0.06576154 0.03595087 0.03197561
 0.02960082 0.01584363 0.01269241 0.01249372]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.25958002 0.1660178  0.06777401 0.03582095 0.02073838 0.0141727
 0.0119061  0.00873624 0.00842734 0.00692677]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [0.2945826  0.25613016 0.2166902  0.09989803 0.00904164 0.00665619
 0.00648426 0.0062244  0.00548874 0.00461654]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [0.39973858 0.16966064 0.34055513 0.29884687 0.08691633 0.02843479
 0.02065547 0.0199302  0.01803982 0.01516511]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [5.5470359e-01 2.2118471e-03 6.2918567e-05 1.7777626e-05 1.4140723e-05
 1.0284740e-05 7.8497187e-06 7.5280086e-06 5.8748637e-06 5.2727264e-06]  taking action:  0
Leaf selection - depth:  8
Leaf selection - action scores:  [5.8559769e-01 2.0936579e-03 1.2585637e-03 1.4956927e-04 1.1585186e-04
 9.9827135e-05 6.3584346e-05 4.6092886e-05 2.4329487e-05 2.2927919e-05]  taking action:  0
Leaf selection - depth:  9
Leaf selection - action scores:  [6.1950713e-01 3.2588344e-02 5.6690315e-04 5.0999818e-04 1.2990109e-04
 6.4098989e-05 5.6762136e-05 4.1841799e-05 2.4918632e-05 2.2590737e-05]  taking action:  0
Leaf selection - depth:  10
Leaf selection - action scores:  [0.3046561  0.18144354 0.1782142  0.37618965 0.20523417 0.18279442
 0.1472368  0.06684937 0.06535039 0.05168675]  taking action:  3
Adding child.
Leaf selection - depth:  11
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  62
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
 
  wire [31:0] sum_1;
  wire [31:0] sum_2;
  wire [31:0] sum_3;
  wire [31:0] sum_4;
  wire [31:0] sum_5;
  wire [31:0] sum_6;
  wire [31:0] sum_7;
  wire [31:0] sum_8;
  wire [31:0] sum_9;
  wire [31:0] sum_10;
  wire [31:0] sum_11;
  wire [31:0] sum_12;
  wire [31:0] sum_13;
  wire [31:0] sum_14;
  wire [31:0] sum_15;
  wire [31:0] sum_16;
  wire [31:0] sum_17;
  wire [31:0] sum_18;
  wire [31:0] sum_19;
  wire [31:0] sum_20;
  wire [31:0] sum_21;
  wire [31:0] sum_22;
  wire [31:0] sum_23;
  wire [31:0] sum_24;
  wire [31:0] sum_25;
  wire [31:0] sum_26;
  wire [31:0] sum_27;
  wire [31:0] sum_28;
  wire [31:0] sum_29;
  wire [31:0] sum_30;
  wire [31:0] sum_31;
  wire [31:0] sum_32;
  wire [31:0] sum_33;
  wire [31:0] sum_34;
  wire [31:0] sum_35;
  wire [31:0] sum_36;
  wire [31:0] sum_37;
  wire [31:0] sum_38;
  wire [31:0] sum_39;
  wire [31:0] sum_40;
  wire [31:0] sum_41;
  wire [31:0] sum_42;
  wire [31:0] sum_43;
  wire [31:0] sum_44;
  wire [31:0] sum_45;
  wire [31:0] sum_46;
  wire [31:0] sum_47;
  wire [31:0] sum_48;
  wire [31:0] sum_49;
  wire [31:0] sum_50;
  wire [31:0] sum_51;
  wire [31:0] sum_52;
  wire [31:0] sum_53;
  wire [31:0] sum_54;
  wire [31:0] sum_55;
  wire [31:0] sum_56;
  wire [31:0] sum_57;
  wire [31:0] sum_58;
  wire [31:0] sum_59;
  wire [31:0] sum_60;
  wire [31:0] sum_61;
  wire [31:0] sum_62;
  wire [31:0] sum_63;
  wire [31:0] sum_64;
  wire [31:0] sum_65;
  wire [31:0] sum_66;
  wire [31:0] sum_67;
  wire [31:0] sum_68;
  wire [31:0] sum_69;
  wire [31:0] sum_70;
  wire [31:0] sum_71;
  wire [31:0] sum_72;
  wire [31:0] sum_73;
  wire [31:0] sum_74;
  wire [31:0] sum_75;
  wire [31:0] sum_76;
  wire [31:0] sum_77;
  wire [31:0] sum_78;
  wire [31:0] sum_79;
  wire [31:0] sum_80;
  wire [31:0] sum_81;
  wire [31:0] sum_82;
  wire [31:0] sum_83;
  
Path:  output_files/2329780_adder_32/2329780_simulation
Verilog compilation failed, error:  2
Compilation output:  b'output_files/2329780_adder_32/2329780_adder_32.v:120: syntax error\nI give up.\n'
Tokens:  988
LLM generates return in:  599.008687  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  296.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [-0.00511701 -0.02180508 -0.03248975 -0.03874665 -0.49825318 -0.0398477
 -0.02050669 -0.04915948 -0.04925189 -0.01661275]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [ 0.00184394 -0.00498856 -0.01457633 -0.04388677 -0.06050478 -0.04036875
 -0.03467599 -0.04303636  0.00057223 -0.04642002]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [ 0.00322643  0.00399525 -0.45753074 -0.01190697 -0.03888198 -0.04154551
 -0.49182683 -0.49426955 -0.04430208 -0.49663034]  taking action:  1
Leaf selection - depth:  3
Leaf selection - action scores:  [6.95525110e-01 1.35849416e-03 1.85270124e-04 1.55879825e-04
 1.31877299e-04 1.30825065e-04 1.09185086e-04 1.08573695e-04
 9.30304013e-05 5.35122017e-05]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [8.4831518e-01 9.3586687e-03 1.3931557e-03 1.2701289e-03 8.5256156e-04
 4.4121445e-04 2.6633302e-04 2.2766422e-04 1.4689690e-04 1.1070018e-04]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [0.23543821 0.5596073  0.19106981 0.09752733 0.05578061 0.05291365
 0.04926745 0.04760696 0.04466693 0.037499  ]  taking action:  1
Adding child.
Leaf selection - depth:  6
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  16
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
  adder_8 a1(sum[7:0], cout, in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], cout, in1[15:8], in2[15:8], cout);
  adder_8 a3(sum[23:16], cout, in1[23:16], in2[23:16], cout);
  adder_8 a4(sum[31:24], cout, in1[31:24], in2[31:24], cout);
  adder_8 a5(sum[39:32], cout, in1[39:32], in2[39:32], cout);
  adder_8 a6(sum[47:40], cout, in1[47:40], in2[47:40], cout);
  adder_8 a7(sum[55:48], cout, in1[55:48], in2[55:48], cout);
  adder_8 a8(sum[63:56], cout, in1[63:56], in2[63:56], cout);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 failed\n'
Tokens:  253
LLM generates return in:  97.351694  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  297.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [-0.00549469 -0.02168756 -0.03248833 -0.038746   -0.49825024 -0.03984745
 -0.02035085 -0.04915807 -0.04925063 -0.01661266]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [ 0.00129567 -0.0048008  -0.0144685  -0.04387616 -0.06049524 -0.04036479
 -0.03462934 -0.04301517  0.00057397 -0.04640912]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [ 0.00410771 -0.0129495  -0.45729545 -0.01169593 -0.03882039 -0.04149866
 -0.49178153 -0.4942378  -0.04427051 -0.49661168]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [ 0.00636821  0.02102712 -0.33578163 -0.01451547  0.01463635  0.00988104
  0.00698122  0.00685717  0.00564857  0.00487874]  taking action:  1
Leaf selection - depth:  4
Leaf selection - action scores:  [ 0.12146591 -0.07460895 -0.2944277   0.05853675  0.07985923  0.02482186
  0.02018203  0.01587421  0.01565602  0.01254039]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [1.9302121e-01 1.4166345e-03 5.2516571e-05 1.3069367e-05 1.0604506e-05
 9.4367388e-06 8.4998583e-06 5.8006249e-06 4.7900658e-06 4.4306275e-06]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [1.8771248e-01 2.2460914e-03 1.2628880e-03 2.4585149e-04 1.3645018e-04
 8.9202658e-05 7.5048003e-05 3.6759269e-05 3.0755022e-05 2.6831558e-05]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [1.7877655e-01 3.9232064e-02 1.3926427e-03 7.1937212e-04 1.7399612e-04
 6.2256673e-05 4.8277732e-05 3.9827326e-05 3.0848463e-05 2.2147551e-05]  taking action:  0
Leaf selection - depth:  8
Leaf selection - action scores:  [ 0.07908546  0.23207027  0.19310185 -0.2588488  -0.36335826  0.23425345
  0.15455912  0.13551524  0.08605383  0.07797541]  taking action:  5
Adding child.
Leaf selection - depth:  9
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  16
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
  wire [31:0] out1;
  wire [31:0] out2;
  wire [31:0] out3;
  wire [31:0] out4;
  wire [31:0] out5;
  wire [31:0] out6;
  wire [31:0] out7;
  wire [31:0] out8;
  wire [31:0] out9;
  wire [31:0] out10;
  wire [31:0] out11;
  wire [31:0] out12;
  wire [31:0] out13;
  wire [31:0] out14;
  wire [31:0] out15;
  wire [31:0] out16;
  wire [31:0] out17;
  wire [31:0] out18;
  wire [31:0] out19;
  wire [31:0] out20;
  wire [31:0] out21;
  wire [31:0] out22;
  wire [31:0] out23;
  wire [31:0] out24;
  wire [31:0] out25;
  wire [31:0] out26;
  wire [31:0] out27;
  wire [31:0] out28;
  wire [31:0] out29;
  wire [31:0] out30;
  wire [31:0] out31;
  wire [31:0] out32;
  wire [31:0] out33;
  wire [31:0] out34;
  wire [31:0] out35;
  wire [31:0] out36;
  wire [31:0] out37;
  wire [31:0] out38;
  wire [31:0] out39;
  wire [31:0] out40;
  wire [31:0] out41;
  wire [31:0] out42;
  wire [31:0] out43;
  wire [31:0] out44;
  wire [31:0] out45;
  wire [31:0] out46;
  wire [31:0] out47;
  wire [31:0] out48;
  wire [31:0] out49;
  wire [31:0] out50;
  wire [31:0] out51;
  wire [31:0] out52;
  wire [31:0] out53;
  wire [31:0] out54;
  wire [31:0] out55;
  wire [31:0] out56;
  wire [31:0] out57;
  wire [31:0] out58;
  wire [31:0] out59;
  wire [31:0] out60;
  wire [31:0] out61;
  wire [31:0] out62;
  wire [31:0] out63;
  wire [31:0] out64;
  wire [31:0] out65;
  wire [31:0] out66;
  wire [31:0] out67;
  wire [31:0] out68;
  wire [31:0] out69;
  wire [31:0] out70;
  wire [31:0] out71;
  wire [31:0] out72;
  wire [31:0] out73;
  wire [31:0] out74;
  wire [31:0] out75;
  wire [31:0] out76;
  wire [31:0] out77;
  wire [31:0] out78;
  wire [31:0] out79;
  wire [31:0] out80;
  wire [31:0] out81;
  wire [31:0] out82;
  wire [31:0] out83;
  wire [31:0] out84;
  wire [31:0] out85;
  wire [31:0] out86;
  wire [31:0] out87;
  wire [31:0] out88;
  wire [31:0] out89;
  wire [31:0] out90;
  wire [31:0] out91
Path:  output_files/2329780_adder_32/2329780_simulation
Verilog compilation failed, error:  2
Compilation output:  b'output_files/2329780_adder_32/2329780_adder_32.v:126: syntax error\nI give up.\n'
Tokens:  990
LLM generates return in:  599.201266  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  298.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [-0.01128982 -0.02157025 -0.03248691 -0.03874536 -0.49824731 -0.03984719
 -0.02019526 -0.04915665 -0.04924938 -0.01661257]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [-0.00902499 -0.00461361 -0.01436099 -0.0438656  -0.06048574 -0.04036086
 -0.03458284 -0.04299403  0.00057571 -0.04639826]  taking action:  8
Leaf selection - depth:  2
Leaf selection - action scores:  [0.272985   0.19771656 0.28023744 0.04935025 0.0244226  0.0102739
 0.01006885 0.00948026 0.00943762 0.007874  ]  taking action:  2
Adding child.
Leaf selection - depth:  3
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  50286
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
     
  wire [31:0] c;
  adder_8 a1(sum[7:0], c[0], in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c[1], in1[15:8], in2[15:8], c[0]);
  adder_8 a3(sum[23:16], c[2], in1[23:16], in2[23:16], c[1]);
  adder_8 a4(sum[31:24], cout, in1[31:24], in2[31:24], c[2]);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  152
LLM generates return in:  54.00613  seconds
Running getPromptScore: 
adder_32
output_files/2329780_adder_32/synth_script.sh
Running bash in x seconds:  0.905349

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.1
Backpropogation: incorporating estimates.
Current runs:  299.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [-0.01042907 -0.02145313 -0.0324855  -0.03874471 -0.49824438 -0.03984694
 -0.02003993 -0.04915525 -0.04924812 -0.01661248]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [-0.00846371 -0.00442698 -0.01425381 -0.04385506 -0.06047626 -0.04035693
 -0.03453647 -0.04297296  0.00610091 -0.04638743]  taking action:  8
Leaf selection - depth:  2
Leaf selection - action scores:  [0.2806922  0.20538145 0.19418097 0.05078099 0.02513065 0.01057176
 0.01036076 0.00975511 0.00971123 0.00810228]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.3576308  0.32178313 0.18437931 0.06075223 0.01007328 0.00621794
 0.00620611 0.0055286  0.00507743 0.00501721]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.42016685 0.42911482 0.27712074 0.14954334 0.07626864 0.02068132
 0.01605302 0.01200542 0.01116495 0.00603797]  taking action:  1
Adding child.
Leaf selection - depth:  5
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  25
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
     wire [63:0] c;
     assign c[0] = cin;
     adder_8 a1(sum[7:0], c[1], in1[7:0], in2[7:0], c[0]);
     adder_8 a2(sum[15:8], c[2], in1[15:8], in2[15:8], c[1]);
     adder_8 a3(sum[23:16], c[3], in1[23:16], in2[23:16], c[2]);
     adder_8 a4(sum[31:24], c[4], in1[31:24], in2[31:24], c[3]);
     adder_8 a5(sum[39:32], c[5], in1[39:32], in2[39:32], c[4]);
     adder_8 a6(sum[47:40], c[6], in1[47:40], in2[47:40], c[5]);
     adder_8 a7(sum[55:48], c[7], in1[55:48], in2[55:48], c[6]);
     adder_8 a8(sum[63:56], cout, in1[63:56], in2[63:56], c[7]);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 failed\n'
Tokens:  305
LLM generates return in:  121.422691  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  300.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [-0.01076935 -0.0213362  -0.03248409 -0.03874407 -0.49824145 -0.03984668
 -0.01988487 -0.04915384 -0.04924687 -0.01661239]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [-0.00790408 -0.00424092 -0.01414694 -0.04384456 -0.06046681 -0.04035301
 -0.03449024 -0.04295196  0.0005182  -0.04637662]  taking action:  8
Leaf selection - depth:  2
Leaf selection - action scores:  [0.26230887 0.21283624 0.19813187 0.05217252 0.02581929 0.01086145
 0.01064467 0.01002243 0.00997734 0.0083243 ]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.32176083 0.33588505 0.19085072 0.06288453 0.01042684 0.00643618
 0.00642394 0.00572264 0.00525564 0.0051933 ]  taking action:  1
Leaf selection - depth:  4
Leaf selection - action scores:  [0.6253714  0.07720137 0.05487967 0.05439467 0.01669049 0.00782298
 0.00741719 0.00717668 0.00569838 0.00540226]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [8.2504106e-01 7.4235313e-02 4.4338899e-03 1.2238761e-03 1.0930152e-03
 8.7337790e-04 4.5267056e-04 2.9882055e-04 1.6471243e-04 1.5164184e-04]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [7.9150826e-01 6.5299743e-01 4.6666708e-02 3.1220412e-03 5.8554998e-04
 2.5092514e-04 2.3123539e-04 1.4260571e-04 1.1384057e-04 1.1001948e-04]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [1.9457698e+00 3.3002158e-03 1.8565716e-03 1.5640394e-04 1.1319976e-04
 9.5016621e-05 7.5913536e-05 5.3116008e-05 2.8939767e-05 1.4516346e-05]  taking action:  0
Adding child.
Leaf selection - depth:  8
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  11
Getting rollout return of leaf.
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
     wire c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42,c43,c44,c45,c46,c47,c48,c49,c50,c51,c52,c53,c54,c55,c56,c57,c58,c59,c60,c61,c62,c63;
     adder_8 a1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
     adder_8 a2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
     adder_8 a3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
     adder_8 a4(sum[31:24], c4, in1[31:24], in2[31:24], c3);
     adder_8 a5(sum[39:32], c5, in1[39:32], in2[39:32], c4);
     adder_8 a6(sum[47:40], c6, in1[47:40], in2[47:40], c5);
     adder_8 a7(sum[55:48], c7, in1[55:48], in2[55:48], c6);
     adder_8 a8(sum[63:56], cout, in1[63:56], in2[63:56], c7);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 failed\n'
Tokens:  457
LLM generates return in:  200.91332  seconds
Running getPromptScore: 
Backpropogation: incorporating estimates.
Current runs:  301.0
----
 Tree depth: 0
 Node: action=None
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776]]
• Child Action scores:[-0.01110593 -0.02121947 -0.03248268 -0.03874343 -0.49823854 -0.03984643
 -0.01973006 -0.04915243 -0.04924562 -0.0166123 ]
• Child averaged monte carlo:-0.1019867549668874
• Child probablities:[8.14078629e-01 3.52502664e-02 6.38477213e-04 3.71161033e-04
 1.46899882e-04 1.28074229e-04 1.48039402e-01 7.06840001e-05
 6.29127535e-05 5.44082939e-05]
• Child visitation:[1 1 1 1 1 1 1 1 1 1]
• N=301.0,Q=-0.1019867549668874,M=-0.1019867549668874
----
 Tree depth: 1
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198]]
• Child Action scores:[-0.00734615 -0.0040554  -0.01404039 -0.04383409 -0.0604574  -0.04034911
 -0.03444415 -0.04293101 -0.00450625 -0.04636586]
• Child averaged monte carlo:-0.12662726182204026
• Child probablities:[9.6567219e-01 1.0470112e-02 4.0088748e-03 3.7431584e-03 1.9491984e-03
 1.7626209e-03 1.7342085e-03 7.8807032e-04 5.5044726e-04 4.0514421e-04]
• Child visitation:[1 1 1 1 1 1 1 1 1 1]
• N=168.0,Q=-0.12662726182204026,M=-0.12662726182204026
----
 Tree depth: 1
 Node: action=1
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   628]]
• Child Action scores:[0.2690457  0.32119212 0.15063508 0.0479578  0.01777021 0.0122827
 0.0121821  0.01047418 0.0058139  0.00348281]
• Child averaged monte carlo:-0.09166666865348816
• Child probablities:[8.7010515e-01 6.7188531e-02 3.1510580e-02 1.0032046e-02 3.7172593e-03
 2.5693560e-03 2.5483109e-03 2.1910402e-03 1.2161804e-03 7.2855089e-04]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=11.0,Q=-0.09166666865348816,M=-0.09166666865348816
----
 Tree depth: 1
 Node: action=2
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   220]]
• Child Action scores:[2.8298715e-01 3.3926708e-01 3.8733070e-03 2.8068843e-04 6.7903420e-05
 5.3895419e-05 3.9096125e-05 3.1307191e-05 3.0014486e-05 2.7455560e-05]
• Child averaged monte carlo:-0.03333333465788099
• Child probablities:[9.4123447e-01 5.7946391e-02 6.6155597e-04 4.7941230e-05 1.1597818e-05
 9.2052696e-06 6.6775692e-06 5.3472286e-06 5.1264365e-06 4.6893751e-06]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=17.0,Q=-0.03333333465788099,M=-0.03333333465788099
----
 Tree depth: 1
 Node: action=3
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776 50286]]
• Child Action scores:[2.28875831e-01 1.90781534e-01 4.10034740e-03 5.36221894e-04
 2.25743119e-04 2.20313639e-04 1.87000594e-04 1.76739559e-04
 1.06225067e-04 1.04374936e-04]
• Child averaged monte carlo:-0.03913043374600618
• Child probablities:[9.1191334e-01 2.8826594e-02 6.1955181e-04 8.1021739e-05 3.4109198e-05
 3.3288819e-05 2.8255305e-05 2.6704889e-05 1.6050331e-05 1.5770782e-05]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=22.0,Q=-0.03913043374600618,M=-0.03913043374600618
----
 Tree depth: 1
 Node: action=4
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776 50257]]
• Child Action scores:[0.2831008  0.13212879 0.12179335 0.09283309 0.09198426 0.0916863
 0.08451002 0.08406807 0.0792851  0.07461441]
• Child averaged monte carlo:-0.5
• Child probablities:[0.14505978 0.06770229 0.06240645 0.04756733 0.04713238 0.04697971
 0.04330261 0.04307617 0.04062539 0.03823214]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 1
 Node: action=5
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776 50284]]
• Child Action scores:[2.5132218e-01 1.8480654e-01 4.2004786e-03 8.9723128e-04 7.2515459e-04
 3.9930295e-04 3.0945803e-04 2.8630884e-04 2.2435638e-04 2.0286549e-04]
• Child averaged monte carlo:-0.03999999761581421
• Child probablities:[9.1956210e-01 2.9944928e-02 6.8062003e-04 1.4538190e-04 1.1749964e-04
 6.4700624e-05 5.0142695e-05 4.6391746e-05 3.6353344e-05 3.2871088e-05]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=19.0,Q=-0.03999999761581421,M=-0.03999999761581421
----
 Tree depth: 1
 Node: action=6
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776 50285]]
• Child Action scores:[ 0.1280078  -0.05501733  0.00884084  0.00050307  0.00045787  0.00039753
  0.00033008  0.00023332  0.00021635  0.00020036]
• Child averaged monte carlo:-0.11315788720783435
• Child probablities:[9.2821795e-01 3.1726755e-02 1.0392559e-03 5.9136652e-05 5.3823995e-05
 4.6729932e-05 3.8801405e-05 2.7427761e-05 2.5432224e-05 2.3552924e-05]
• Child visitation:[1 1 0 0 0 0 0 0 0 0]
• N=37.0,Q=-0.11315788720783435,M=-0.11315788720783435
----
 Tree depth: 1
 Node: action=7
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776 50266]]
• Child Action scores:[1.86440802e+00 4.40387763e-02 5.95951977e-04 5.45888324e-04
 1.82172953e-04 1.29186854e-04 1.02784805e-04 8.84466426e-05
 8.67200506e-05 8.40987777e-05]
• Child averaged monte carlo:-0.05000000074505806
• Child probablities:[9.5531559e-01 2.2565302e-02 3.0536353e-04 2.7971112e-04 9.3344730e-05
 6.6194858e-05 5.2666546e-05 4.5319724e-05 4.4435026e-05 4.3091895e-05]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.05000000074505806,M=-0.05000000074505806
----
 Tree depth: 1
 Node: action=8
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776 50268]]
• Child Action scores:[1.6058424e+00 3.6743756e-02 2.1316893e-03 2.9985924e-04 2.8239746e-04
 2.8224452e-04 2.6709121e-04 2.3436769e-04 2.2508160e-04 1.8647112e-04]
• Child averaged monte carlo:-0.05000000074505806
• Child probablities:[8.22827518e-01 1.88273620e-02 1.09226955e-03 1.53646732e-04
 1.44699385e-04 1.44621023e-04 1.36856528e-04 1.20089120e-04
 1.15330964e-04 9.55470969e-05]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.05000000074505806,M=-0.05000000074505806
----
 Tree depth: 1
 Node: action=9
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   197]]
• Child Action scores:[0.22663048 0.257013   0.20951073 0.18571907 0.05592872 0.04558783
 0.01592598 0.01142154 0.00925106 0.00693338]
• Child averaged monte carlo:-0.01666666567325592
• Child probablities:[0.7887785  0.08446583 0.04718839 0.02747083 0.00827275 0.00674317
 0.00235571 0.00168943 0.00136838 0.00102556]
• Child visitation:[1 1 1 0 0 0 0 0 0 0]
• N=23.0,Q=-0.01666666567325592,M=-0.01666666567325592
----
 Tree depth: 2
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198 50286]]
• Child Action scores:[-0.00790025 -0.01256383 -0.45706144 -0.01148604 -0.03875913 -0.04145208
 -0.4917365  -0.49420622 -0.04423911 -0.49659312]
• Child averaged monte carlo:-0.19565223610919455
• Child probablities:[9.3557870e-01 3.2079265e-02 6.4879041e-03 5.8193589e-03 1.6984665e-03
 1.2915682e-03 1.2485926e-03 8.7542366e-04 8.7045529e-04 5.1477243e-04]
• Child visitation:[1 1 1 1 1 1 1 1 1 1]
• N=91.0,Q=-0.19565223610919455,M=-0.19565223610919455
----
 Tree depth: 2
 Node: action=1
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198 50284]]
• Child Action scores:[0.898619   0.27449855 0.06324621 0.02578231 0.01275057 0.00507372
 0.00246319 0.00213521 0.00193698 0.00188894]
• Child averaged monte carlo:-0.06666666766007741
• Child probablities:[7.93747008e-01 1.14841886e-01 2.64603011e-02 1.07865399e-02
 5.33445086e-03 2.12269160e-03 1.03052333e-03 8.93307792e-04
 8.10374273e-04 7.90274295e-04]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=2.0,Q=-0.06666666766007741,M=-0.06666666766007741
----
 Tree depth: 2
 Node: action=2
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198   198]]
• Child Action scores:[0.925275   0.22125678 0.03014441 0.0277768  0.02636454 0.02571258
 0.02175914 0.019315   0.01565943 0.00545174]
• Child averaged monte carlo:-0.05000000074505806
• Child probablities:[0.4741074  0.11337113 0.01544588 0.01423273 0.01350909 0.01317503
 0.0111493  0.00989693 0.00802383 0.00279345]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.05000000074505806,M=-0.05000000074505806
----
 Tree depth: 2
 Node: action=3
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198 50285]]
• Child Action scores:[0.2377119  0.154555   0.24964927 0.04411735 0.03139699 0.01460329
 0.01309285 0.00975945 0.0061507  0.00560709]
• Child averaged monte carlo:-0.047368419797796955
• Child probablities:[0.8214251  0.06801178 0.04150251 0.00733421 0.00521954 0.0024277
 0.0021766  0.00162244 0.00102251 0.00093214]
• Child visitation:[1 1 0 0 0 0 0 0 0 0]
• N=18.0,Q=-0.047368419797796955,M=-0.047368419797796955
----
 Tree depth: 2
 Node: action=4
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198   197]]
• Child Action scores:[ 0.32042336 -0.32042444  0.35842296  0.25077093  0.16406202  0.10398068
  0.0903984   0.05949224  0.05578544  0.02610689]
• Child averaged monte carlo:-0.06363636255264282
• Child probablities:[0.58637625 0.07846966 0.07831057 0.05479005 0.03584533 0.02271837
 0.01975083 0.01299825 0.01218836 0.005704  ]
• Child visitation:[1 1 0 0 0 0 0 0 0 0]
• N=10.0,Q=-0.06363636255264282,M=-0.06363636255264282
----
 Tree depth: 2
 Node: action=5
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198   220]]
• Child Action scores:[0.23408502 0.18684362 0.07707226 0.00531971 0.00188746 0.00118405
 0.00049764 0.00045056 0.00044459 0.00037289]
• Child averaged monte carlo:-0.041666666666666664
• Child probablities:[9.5908105e-01 2.7637171e-02 1.1400225e-02 7.8687054e-04 2.7918580e-04
 1.7513975e-04 7.3609241e-05 6.6645669e-05 6.5762266e-05 5.5156015e-05]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=23.0,Q=-0.041666666666666664,M=-0.041666666666666664
----
 Tree depth: 2
 Node: action=6
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198 50280]]
• Child Action scores:[1.122402   0.44631928 0.18369107 0.02313786 0.01083362 0.00405025
 0.0036566  0.00362958 0.00271411 0.00265757]
• Child averaged monte carlo:-0.05000000074505806
• Child probablities:[0.5751145  0.22869231 0.09412261 0.01185575 0.00555111 0.00207533
 0.00187363 0.00185979 0.0013907  0.00136173]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.05000000074505806,M=-0.05000000074505806
----
 Tree depth: 2
 Node: action=7
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198 50282]]
• Child Action scores:[1.1604718  0.5410568  0.10713665 0.01156057 0.00678826 0.00546043
 0.00218946 0.00204255 0.00194191 0.00129231]
• Child averaged monte carlo:-0.05000000074505806
• Child probablities:[0.59462136 0.27723545 0.05489641 0.00592359 0.00347828 0.0027979
 0.00112187 0.0010466  0.00099503 0.00066217]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.05000000074505806,M=-0.05000000074505806
----
 Tree depth: 2
 Node: action=8
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198 50283]]
• Child Action scores:[0.24605301 0.22009721 0.20198008 0.05352787 0.02649003 0.01114361
 0.0109212  0.01028279 0.01023653 0.00854055]
• Child averaged monte carlo:-0.004999999329447747
• Child probablities:[0.6541063  0.13939643 0.04925186 0.00867333 0.00429228 0.00180564
 0.0017696  0.00166616 0.00165867 0.00138386]
• Child visitation:[1 1 1 0 0 0 0 0 0 0]
• N=19.0,Q=-0.004999999329447747,M=-0.004999999329447747
----
 Tree depth: 2
 Node: action=9
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198   437]]
• Child Action scores:[1.9197524e+00 2.0798907e-02 3.5682640e-03 1.0462211e-03 7.5861230e-04
 7.0230581e-04 5.3530204e-04 3.8816244e-04 3.0348438e-04 2.7081469e-04]
• Child averaged monte carlo:-0.05000000074505806
• Child probablities:[9.8367381e-01 1.0657281e-02 1.8283649e-03 5.3607975e-04 3.8871006e-04
 3.5985885e-04 2.7428675e-04 1.9889297e-04 1.5550425e-04 1.3876443e-04]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.05000000074505806,M=-0.05000000074505806
----
 Tree depth: 2
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   628 50286]]
• Child Action scores:[0.23517007 0.34177834 0.05039933 0.0358815  0.02316861 0.01179515
 0.01051105 0.00979891 0.00810857 0.00788266]
• Child averaged monte carlo:-0.10909091342579234
• Child probablities:[0.7978472  0.07467394 0.01101157 0.00783962 0.00506203 0.00257708
 0.00229652 0.00214093 0.00177161 0.00172225]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=10.0,Q=-0.10909091342579234,M=-0.10909091342579234
----
 Tree depth: 2
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   220   198]]
• Child Action scores:[0.28638935 0.05885879 0.04453178 0.03601316 0.02243063 0.0191002
 0.01415341 0.00644224 0.00434599 0.00410846]
• Child averaged monte carlo:-0.04117646988700418
• Child probablities:[9.4592923e-01 1.0344460e-02 7.8264810e-03 6.3293302e-03 3.9421930e-03
 3.3568691e-03 2.4874674e-03 1.1322267e-03 7.6380925e-04 7.2206295e-04]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=16.0,Q=-0.04117646988700418,M=-0.04117646988700418
----
 Tree depth: 2
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776 50286   198]]
• Child Action scores:[0.24004176 0.06337544 0.04631872 0.04221585 0.03254035 0.02084311
 0.00959523 0.00721149 0.00647233 0.00382526]
• Child averaged monte carlo:-0.045454545454545456
• Child probablities:[9.4872421e-01 9.7910790e-03 7.1559316e-03 6.5220655e-03 5.0272648e-03
 3.2201204e-03 1.4823993e-03 1.1141265e-03 9.9993171e-04 5.9097726e-04]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=21.0,Q=-0.045454545454545456,M=-0.045454545454545456
----
 Tree depth: 2
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776 50284   198]]
• Child Action scores:[0.26008397 0.09075696 0.03151372 0.03087426 0.02655443 0.01796954
 0.01063272 0.00808494 0.00631421 0.00469214]
• Child averaged monte carlo:-0.047368419797796955
• Child probablities:[9.4451308e-01 1.5087735e-02 5.2389442e-03 5.1326379e-03 4.4144951e-03
 2.9873159e-03 1.7676185e-03 1.3440667e-03 1.0496951e-03 7.8003743e-04]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=18.0,Q=-0.047368419797796955,M=-0.047368419797796955
----
 Tree depth: 2
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776 50285   198]]
• Child Action scores:[0.11098985 0.09829922 0.06547491 0.04339297 0.04242757 0.02687782
 0.0164998  0.01154044 0.00827879 0.00645865]
• Child averaged monte carlo:-0.11874999105930328
• Child probablities:[9.4033480e-01 1.2592037e-02 8.3872732e-03 5.5585988e-03 5.4349317e-03
 3.4430230e-03 2.1136084e-03 1.4783196e-03 1.0605048e-03 8.2734739e-04]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=31.0,Q=-0.11874999105930328,M=-0.11874999105930328
----
 Tree depth: 2
 Node: action=1
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776 50285   628]]
• Child Action scores:[0.47197175 0.14241658 0.06252602 0.05115076 0.01411353 0.00543403
 0.00480599 0.00443902 0.00412247 0.00322696]
• Child averaged monte carlo:-0.10000000397364299
• Child probablities:[0.9052044  0.0421314  0.01849721 0.01513204 0.00417524 0.00160756
 0.00142177 0.0013132  0.00121956 0.00095464]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=5.0,Q=-0.10000000397364299,M=-0.10000000397364299
----
 Tree depth: 2
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   197   198]]
• Child Action scores:[0.25293228 0.22741425 0.05092287 0.0371881  0.0250224  0.02382286
 0.0129498  0.01140133 0.00579752 0.00425754]
• Child averaged monte carlo:-0.03999999761581421
• Child probablities:[8.9973885e-01 5.7494253e-02 8.2512321e-03 6.0257330e-03 4.0544779e-03
 3.8601118e-03 2.0983061e-03 1.8474024e-03 9.3939475e-04 6.8986579e-04]
• Child visitation:[1 1 0 0 0 0 0 0 0 0]
• N=19.0,Q=-0.03999999761581421,M=-0.03999999761581421
----
 Tree depth: 2
 Node: action=1
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   197   220]]
• Child Action scores:[1.1540946e+00 1.2009696e-01 5.3578489e-02 4.7724801e-03 1.3072542e-03
 1.0416140e-03 3.6433490e-04 2.6849209e-04 2.2323742e-04 1.2345753e-04]
• Child averaged monte carlo:0.06666666766007741
• Child probablities:[9.2383963e-01 5.0244935e-02 2.2415619e-02 1.9966613e-03 5.4691563e-04
 4.3577977e-04 1.5242670e-04 1.1232897e-04 9.3395785e-05 5.1650895e-05]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=2.0,Q=0.06666666766007741,M=0.06666666766007741
----
 Tree depth: 2
 Node: action=2
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   197 50286]]
• Child Action scores:[1.8053066e+00 6.4551383e-02 3.2568365e-02 2.0194319e-03 7.6680572e-04
 4.9408700e-04 2.0920162e-04 1.8901378e-04 1.6843715e-04 1.0539724e-04]
• Child averaged monte carlo:0.05000000074505806
• Child probablities:[9.25032258e-01 3.30758840e-02 1.66879073e-02 1.03474921e-03
 3.92908347e-04 2.53168313e-04 1.07194115e-04 9.68499444e-05
 8.63065579e-05 5.40051442e-05]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=0.05000000074505806,M=0.05000000074505806
----
 Tree depth: 3
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198 50286 21809]]
• Child Action scores:[ 0.00716871 -0.02194068 -0.3347187  -0.01417791  0.01473108  0.00994499
  0.00702641  0.00690156  0.00568513  0.00491032]
• Child averaged monte carlo:-0.16666669111985427
• Child probablities:[5.3108478e-01 4.1806984e-01 2.7122349e-02 1.2919959e-02 1.2086717e-03
 8.1597711e-04 5.7651039e-04 5.6626619e-04 4.6645931e-04 4.0288694e-04]
• Child visitation:[1 1 1 1 0 0 0 0 0 0]
• N=77.0,Q=-0.16666669111985427,M=-0.16666669111985427
----
 Tree depth: 3
 Node: action=1
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198 50286 26676]]
• Child Action scores:[5.95254362e-01 1.48815580e-03 2.02953262e-04 1.70757805e-04
 1.44464357e-04 1.43311670e-04 1.19606273e-04 1.18936528e-04
 1.01909696e-04 5.86196802e-05]
• Child averaged monte carlo:-0.08333333333333333
• Child probablities:[9.9880958e-01 4.4024424e-04 6.0040089e-05 5.0515639e-05 4.2737192e-05
 4.2396194e-05 3.5383375e-05 3.5185243e-05 3.0148160e-05 1.7341583e-05]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=5.0,Q=-0.08333333333333333,M=-0.08333333333333333
----
 Tree depth: 3
 Node: action=2
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198 50286  5235]]
• Child Action scores:[1.9512342e+00 3.1182118e-04 5.8279620e-05 9.3513927e-06 5.8041934e-07
 1.9447400e-07 5.5320843e-08 4.8700311e-08 3.4074123e-08 2.3484711e-08]
• Child averaged monte carlo:-0.5
• Child probablities:[9.9980503e-01 1.5977598e-04 2.9862256e-05 4.7916183e-06 2.9740468e-07
 9.9647743e-08 2.8346191e-08 2.4953856e-08 1.7459451e-08 1.2033477e-08]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 3
 Node: action=3
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198 50286   198]]
• Child Action scores:[1.8664892e+00 1.8440947e-02 1.0574244e-02 6.7716860e-03 3.2624544e-03
 2.4787465e-03 2.1757018e-03 1.6388638e-03 1.3863196e-03 9.5752469e-04]
• Child averaged monte carlo:-0.05000000074505806
• Child probablities:[9.5638198e-01 9.4490713e-03 5.4182024e-03 3.4697864e-03 1.6716693e-03
 1.2701002e-03 1.1148214e-03 8.3974760e-04 7.1034493e-04 4.9063202e-04]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.05000000074505806,M=-0.05000000074505806
----
 Tree depth: 3
 Node: action=4
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198 50286   562]]
• Child Action scores:[1.9515924e+00 7.8739286e-06 6.4603350e-06 4.0874579e-06 9.3059657e-07
 8.1377976e-07 6.7673363e-07 4.3160861e-07 2.8251321e-07 2.6235870e-07]
• Child averaged monte carlo:-0.05000000074505806
• Child probablities:[9.9998856e-01 4.0345712e-06 3.3102513e-06 2.0943980e-06 4.7683415e-07
 4.1697766e-07 3.4675574e-07 2.2115462e-07 1.4475870e-07 1.3443160e-07]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.05000000074505806,M=-0.05000000074505806
----
 Tree depth: 3
 Node: action=5
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198 50286  2860]]
• Child Action scores:[1.1269586  0.5686735  0.09358219 0.01943409 0.01569563 0.01079296
 0.00955419 0.00587733 0.00469116 0.00429686]
• Child averaged monte carlo:-0.05000000074505806
• Child probablities:[0.5774493  0.29138616 0.04795116 0.00995795 0.00804238 0.00553027
 0.00489553 0.00301152 0.00240373 0.00220169]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.05000000074505806,M=-0.05000000074505806
----
 Tree depth: 3
 Node: action=6
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198 50286  2301]]
• Child Action scores:[1.5441712  0.3017946  0.01772724 0.01636552 0.00763909 0.00706824
 0.00567161 0.00402406 0.00263894 0.00249491]
• Child averaged monte carlo:-0.5
• Child probablities:[0.79122746 0.15463841 0.00908337 0.00838563 0.00391424 0.00362174
 0.00290611 0.00206191 0.00135218 0.00127838]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 3
 Node: action=7
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198 50286 15414]]
• Child Action scores:[1.4424298  0.3720696  0.06646557 0.0126641  0.01007554 0.00442906
 0.00298859 0.00291738 0.00287901 0.0027373 ]
• Child averaged monte carlo:-0.5
• Child probablities:[0.73909557 0.19064705 0.03405671 0.00648904 0.00516267 0.00226943
 0.00153134 0.00149485 0.0014752  0.00140258]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 3
 Node: action=8
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198 50286 41433]]
• Child Action scores:[1.8406261e+00 3.6449678e-02 1.5947819e-02 9.5375292e-03 4.3165167e-03
 3.4330881e-03 2.7863467e-03 1.8267453e-03 1.7568241e-03 1.6655945e-03]
• Child averaged monte carlo:-0.05000000074505806
• Child probablities:[9.4312984e-01 1.8676678e-02 8.1716022e-03 4.8869937e-03 2.2117668e-03
 1.7591013e-03 1.4277135e-03 9.3601737e-04 9.0019003e-04 8.5344433e-04]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.05000000074505806,M=-0.05000000074505806
----
 Tree depth: 3
 Node: action=9
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198 50286  8612]]
• Child Action scores:[1.9511961e+00 2.2848193e-04 1.4073652e-04 9.6798085e-06 5.5293449e-06
 3.5325022e-06 3.1435206e-06 2.8629506e-06 2.6170837e-06 2.4521862e-06]
• Child averaged monte carlo:-0.5
• Child probablities:[9.9978548e-01 1.1707328e-04 7.2112860e-05 4.9598971e-06 2.8332154e-06
 1.8100408e-06 1.6107281e-06 1.4669650e-06 1.3409838e-06 1.2564909e-06]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 3
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198 50284 21809]]
• Child Action scores:[1.0854316  0.7188071  0.09568085 0.01898381 0.00279512 0.00267746
 0.00227885 0.00191636 0.00145316 0.00126018]
• Child averaged monte carlo:-0.05000000074505806
• Child probablities:[0.556171   0.36831403 0.0490265  0.00972723 0.00143221 0.00137192
 0.00116767 0.00098194 0.00074459 0.00064571]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.05000000074505806,M=-0.05000000074505806
----
 Tree depth: 3
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198 50285 21809]]
• Child Action scores:[0.23225646 0.32674688 0.12786    0.04473966 0.01262995 0.0121724
 0.00804593 0.00572355 0.00442439 0.00384233]
• Child averaged monte carlo:-0.052941175068126005
• Child probablities:[0.5952804  0.35742974 0.02247145 0.00786302 0.00221972 0.0021393
 0.00141408 0.00100592 0.00077759 0.00067529]
• Child visitation:[1 1 0 0 0 0 0 0 0 0]
• N=16.0,Q=-0.052941175068126005,M=-0.052941175068126005
----
 Tree depth: 3
 Node: action=1
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198 50285 26676]]
• Child Action scores:[1.9490139e+00 1.0748975e-03 1.1859737e-04 1.0714460e-04 9.8199227e-05
 9.3038427e-05 8.3664869e-05 6.6817032e-05 5.9495436e-05 3.9195584e-05]
• Child averaged monte carlo:-0.05000000074505806
• Child probablities:[9.9866736e-01 5.5077340e-04 6.0768842e-05 5.4900487e-05 5.0316910e-05
 4.7672536e-05 4.2869560e-05 3.4236793e-05 3.0485236e-05 2.0083669e-05]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.05000000074505806,M=-0.05000000074505806
----
 Tree depth: 3
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198   197 21809]]
• Child Action scores:[0.4846539  0.38541138 0.13001804 0.05785207 0.00967056 0.00706125
 0.00544055 0.00524919 0.00479241 0.00316789]
• Child averaged monte carlo:0.022222224209043715
• Child probablities:[0.48871243 0.44484195 0.03140533 0.01397393 0.00233588 0.00170562
 0.00131414 0.00126792 0.00115759 0.00076519]
• Child visitation:[1 1 0 0 0 0 0 0 0 0]
• N=8.0,Q=0.022222224209043715,M=0.022222224209043715
----
 Tree depth: 3
 Node: action=1
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198   197  6503]]
• Child Action scores:[0.94816417 0.88384694 0.05500188 0.02513064 0.00407985 0.00287468
 0.00264816 0.00246996 0.00224811 0.00192126]
• Child averaged monte carlo:-0.5
• Child probablities:[0.48583573 0.45287982 0.02818275 0.01287685 0.0020905  0.00147297
 0.00135691 0.0012656  0.00115192 0.00098445]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 3
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198   220   198]]
• Child Action scores:[0.2107473  0.19714902 0.14384939 0.06723952 0.03675885 0.03269426
 0.03026609 0.01619972 0.01297767 0.01277452]
• Child averaged monte carlo:-0.04782608799312426
• Child probablities:[0.88187104 0.0297887  0.02173527 0.01015972 0.00555417 0.00494002
 0.00457313 0.00244773 0.00196089 0.0019302 ]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=22.0,Q=-0.04782608799312426,M=-0.04782608799312426
----
 Tree depth: 3
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198 50283 21809]]
• Child Action scores:[0.3313293  0.27460355 0.19710977 0.06494687 0.01076879 0.00664726
 0.00663461 0.00591032 0.005428   0.00536362]
• Child averaged monte carlo:-0.006249999161809683
• Child probablities:[0.5458864  0.38906184 0.03570829 0.01176574 0.00195087 0.00120421
 0.00120192 0.00107071 0.00098333 0.00097167]
• Child visitation:[1 1 0 0 0 0 0 0 0 0]
• N=15.0,Q=-0.006249999161809683,M=-0.006249999161809683
----
 Tree depth: 3
 Node: action=1
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198 50283 26676]]
• Child Action scores:[1.1426957e+00 1.5486230e-03 2.5841416e-04 2.5594584e-04 2.4122528e-04
 1.5944139e-04 1.4432050e-04 1.3306794e-04 1.0927429e-04 7.6278186e-05]
• Child averaged monte carlo:-0.06666666766007741
• Child probablities:[9.9797553e-01 6.4789702e-04 1.0811267e-04 1.0707999e-04 1.0092136e-04
 6.6705456e-05 6.0379331e-05 5.5671597e-05 4.5717057e-05 3.1912485e-05]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=2.0,Q=-0.06666666766007741,M=-0.06666666766007741
----
 Tree depth: 3
 Node: action=2
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198 50283   198]]
• Child Action scores:[1.4917434  0.17584468 0.07397491 0.07164043 0.02724584 0.01528423
 0.00837826 0.00744837 0.00636607 0.00579429]
• Child averaged monte carlo:0.05000000074505806
• Child probablities:[0.7643637  0.09010215 0.03790446 0.03670828 0.01396066 0.00783158
 0.00429299 0.00381652 0.00326195 0.00296897]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=0.05000000074505806,M=0.05000000074505806
----
 Tree depth: 3
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   628 50286 21809]]
• Child Action scores:[0.24602221 0.34562677 0.16297907 0.05639307 0.00867089 0.0050725
 0.00452519 0.00441932 0.00392781 0.00339667]
• Child averaged monte carlo:-0.12999999523162842
• Child probablities:[0.54266924 0.3875517  0.03734674 0.0129225  0.00198694 0.00116237
 0.00103695 0.00101269 0.00090006 0.00077835]
• Child visitation:[1 1 0 0 0 0 0 0 0 0]
• N=9.0,Q=-0.12999999523162842,M=-0.12999999523162842
----
 Tree depth: 3
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   220   198 50286]]
• Child Action scores:[0.28457087 0.1428941  0.08774731 0.0787802  0.01796197 0.01231365
 0.00714445 0.00679076 0.005832   0.00567874]
• Child averaged monte carlo:-0.04999999701976776
• Child probablities:[0.86666524 0.06988917 0.01589625 0.01427177 0.00325398 0.00223073
 0.00129428 0.00123021 0.00105652 0.00102876]
• Child visitation:[1 1 0 0 0 0 0 0 0 0]
• N=15.0,Q=-0.04999999701976776,M=-0.04999999701976776
----
 Tree depth: 3
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776 50286   198 50286]]
• Child Action scores:[0.2257747  0.21011181 0.14321207 0.07765393 0.0172236  0.01721507
 0.00842767 0.00641694 0.00591632 0.00560781]
• Child averaged monte carlo:-0.05238095351627895
• Child probablities:[0.8522704  0.08226239 0.02264597 0.01227933 0.00272355 0.0027222
 0.00133266 0.0010147  0.00093554 0.00088676]
• Child visitation:[1 1 0 0 0 0 0 0 0 0]
• N=20.0,Q=-0.05238095351627895,M=-0.05238095351627895
----
 Tree depth: 3
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776 50284   198 50286]]
• Child Action scores:[0.25478372 0.17195404 0.08611232 0.06798235 0.01616004 0.01446539
 0.00662961 0.00622989 0.00587042 0.00532487]
• Child averaged monte carlo:-0.05555555555555555
• Child probablities:[0.86706656 0.07581894 0.01470788 0.0116113  0.00276011 0.00247067
 0.00113233 0.00106406 0.00100266 0.00090948]
• Child visitation:[1 1 0 0 0 0 0 0 0 0]
• N=17.0,Q=-0.05555555555555555,M=-0.05555555555555555
----
 Tree depth: 3
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776 50285   198 50286]]
• Child Action scores:[0.10530071 0.09798238 0.11578973 0.08565693 0.02132519 0.02015327
 0.00903551 0.00760034 0.00726345 0.0066143 ]
• Child averaged monte carlo:-0.1258064393074282
• Child probablities:[0.8515789  0.09005378 0.01506989 0.01114814 0.00277545 0.00262292
 0.00117596 0.00098917 0.00094533 0.00086084]
• Child visitation:[1 1 0 0 0 0 0 0 0 0]
• N=30.0,Q=-0.1258064393074282,M=-0.1258064393074282
----
 Tree depth: 3
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776 50285   628 50286]]
• Child Action scores:[0.4027112  0.3010719  0.03313268 0.03261639 0.01551098 0.00778312
 0.00632688 0.0054815  0.00525072 0.00427558]
• Child averaged monte carlo:-0.13999999761581422
• Child probablities:[0.78127724 0.09756772 0.01073724 0.01056992 0.00502661 0.00252226
 0.00205034 0.00177638 0.00170159 0.00138558]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=4.0,Q=-0.13999999761581422,M=-0.13999999761581422
----
 Tree depth: 3
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   197   198 50286]]
• Child Action scores:[0.25739104 0.16455106 0.07555028 0.05902994 0.01597185 0.01525214
 0.01145684 0.00597378 0.00548248 0.00456381]
• Child averaged monte carlo:-0.05555555555555555
• Child probablities:[8.7419176e-01 7.3290102e-02 1.2903893e-02 1.0082239e-02 2.7279726e-03
 2.6050464e-03 1.9568140e-03 1.0203143e-03 9.3640015e-04 7.7949301e-04]
• Child visitation:[1 1 0 0 0 0 0 0 0 0]
• N=17.0,Q=-0.05555555555555555,M=-0.05555555555555555
----
 Tree depth: 3
 Node: action=1
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   197   198   197]]
• Child Action scores:[0.9778782  0.2374237  0.23018219 0.12408778 0.06024368 0.04927537
 0.03628601 0.03480763 0.02916241 0.00956278]
• Child averaged monte carlo:0.05000000074505806
• Child probablities:[0.5010611  0.12165501 0.11794448 0.06358211 0.03086864 0.02524851
 0.01859281 0.0178353  0.01494271 0.00489993]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=0.05000000074505806,M=0.05000000074505806
----
 Tree depth: 3
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   197   220   198]]
• Child Action scores:[1.7313511  0.11022736 0.01799467 0.01447402 0.0118624  0.01121782
 0.00458202 0.00419    0.0024058  0.00188526]
• Child averaged monte carlo:0.05000000074505806
• Child probablities:[0.8871378  0.05648008 0.0092204  0.00741644 0.00607825 0.00574797
 0.00234781 0.00214694 0.00123272 0.000966  ]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=0.05000000074505806,M=0.05000000074505806
----
 Tree depth: 4
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198 50286 21809   269]]
• Child Action scores:[ 0.09208078  0.01719789 -0.43840864  0.09468412  0.03478878  0.01505074
  0.01477721  0.01331409  0.00988857  0.00983992]
• Child averaged monte carlo:-0.11730765379392184
• Child probablities:[0.94579965 0.01350532 0.01237853 0.00951473 0.0034959  0.00151244
 0.00148495 0.00133792 0.00099369 0.0009888 ]
• Child visitation:[1 1 1 0 0 0 0 0 0 0]
• N=51.0,Q=-0.11730765379392184,M=-0.11730765379392184
----
 Tree depth: 4
 Node: action=1
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198 50286 21809   685]]
• Child Action scores:[ 0.06486198 -0.0650484  -0.2898075   0.06135065  0.08165406  0.02537972
  0.02063561  0.01623097  0.01600789  0.01282223]
• Child averaged monte carlo:-0.24347825672315515
• Child probablities:[0.7052495  0.13144012 0.06351908 0.05802926 0.01233772 0.00383481
 0.00311799 0.00245246 0.00241875 0.00193741]
• Child visitation:[1 1 1 1 0 0 0 0 0 0]
• N=22.0,Q=-0.24347825672315515,M=-0.24347825672315515
----
 Tree depth: 4
 Node: action=2
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198 50286 21809    58]]
• Child Action scores:[1.3151687  0.24423672 0.08875683 0.07886009 0.05838785 0.02759036
 0.01464357 0.01349425 0.01229829 0.011231  ]
• Child averaged monte carlo:-0.5
• Child probablities:[0.6738875  0.12514597 0.04547866 0.04040761 0.02991771 0.01413719
 0.00750331 0.0069144  0.0063016  0.00575472]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 4
 Node: action=3
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198 50286 21809 42304]]
• Child Action scores:[0.64534634 0.5320158  0.3152835  0.06789517 0.01797013 0.01397957
 0.01173808 0.01149647 0.00193501 0.0018778 ]
• Child averaged monte carlo:-0.06666666766007741
• Child probablities:[0.58182377 0.22257932 0.13190508 0.02840529 0.00751816 0.00584863
 0.00491086 0.00480978 0.00080955 0.00078561]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=2.0,Q=-0.06666666766007741,M=-0.06666666766007741
----
 Tree depth: 4
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198 50286 26676    62]]
• Child Action scores:[6.92235589e-01 1.04633095e-02 1.55759533e-03 1.42004725e-03
 9.53192764e-04 4.93292755e-04 2.97769351e-04 2.54536339e-04
 1.64235724e-04 1.23766556e-04]
• Child averaged monte carlo:-0.0800000011920929
• Child probablities:[9.9454546e-01 3.3908221e-03 5.0476653e-04 4.6019163e-04 3.0889912e-04
 1.5986031e-04 9.6497468e-05 8.2487037e-05 5.3223514e-05 4.0108760e-05]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=4.0,Q=-0.0800000011920929,M=-0.0800000011920929
----
 Tree depth: 4
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198 50285 21809   685]]
• Child Action scores:[0.2957883  0.2255498  0.24325196 0.16232781 0.09920932 0.02231872
 0.01797229 0.01554898 0.0140749  0.00644733]
• Child averaged monte carlo:-0.050000001986821495
• Child probablities:[0.7442553  0.1152817  0.05088463 0.03395652 0.02075309 0.00466874
 0.00375953 0.00325261 0.00294426 0.00134868]
• Child visitation:[1 1 0 0 0 0 0 0 0 0]
• N=11.0,Q=-0.050000001986821495,M=-0.050000001986821495
----
 Tree depth: 4
 Node: action=1
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198 50285 21809   269]]
• Child Action scores:[0.6266018  0.07628743 0.06070783 0.04781473 0.01606598 0.00858082
 0.00782949 0.00589537 0.00533257 0.00461633]
• Child averaged monte carlo:-0.0800000011920929
• Child probablities:[0.9094663  0.0247223  0.01967346 0.01549521 0.00520647 0.00278077
 0.00253728 0.0019105  0.00172811 0.001496  ]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=4.0,Q=-0.0800000011920929,M=-0.0800000011920929
----
 Tree depth: 4
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198   197 21809   685]]
• Child Action scores:[0.6225894  0.41861153 0.16838245 0.13559671 0.04475294 0.01471568
 0.01235606 0.01158056 0.008438   0.00677062]
• Child averaged monte carlo:0.0800000011920929
• Child probablities:[0.7098245  0.13565853 0.05456734 0.04394253 0.01450299 0.00476888
 0.0040042  0.00375289 0.00273449 0.00219414]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=4.0,Q=0.0800000011920929,M=0.0800000011920929
----
 Tree depth: 4
 Node: action=1
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198   197 21809   269]]
• Child Action scores:[0.78320825 0.04837816 0.04618372 0.04328789 0.00976799 0.00582051
 0.00514723 0.00490347 0.00483081 0.00435564]
• Child averaged monte carlo:-0.07500000298023224
• Child probablities:[0.92377704 0.01752832 0.01673323 0.01568402 0.00353913 0.00210888
 0.00186494 0.00177662 0.00175029 0.00157813]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=3.0,Q=-0.07500000298023224,M=-0.07500000298023224
----
 Tree depth: 4
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198   220   198 50286]]
• Child Action scores:[0.20263949 0.17110126 0.06936891 0.03666391 0.02122641 0.01450622
 0.01218628 0.00894183 0.00862566 0.00708978]
• Child averaged monte carlo:-0.05454545671289617
• Child probablities:[0.81152076 0.06831732 0.01071703 0.00566433 0.00327934 0.00224111
 0.0018827  0.00138145 0.00133261 0.00109532]
• Child visitation:[1 1 0 0 0 0 0 0 0 0]
• N=21.0,Q=-0.05454545671289617,M=-0.05454545671289617
----
 Tree depth: 4
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198 50283 21809   685]]
• Child Action scores:[0.4408663  0.17616338 0.29211092 0.15763253 0.0803942  0.02180003
 0.01692137 0.01265482 0.01176889 0.00636458]
• Child averaged monte carlo:0.030000001192092896
• Child probablities:[0.7394529  0.10365093 0.06693738 0.03612158 0.01842238 0.00499549
 0.00387754 0.00289986 0.00269685 0.00145845]
• Child visitation:[1 1 0 0 0 0 0 0 0 0]
• N=9.0,Q=0.030000001192092896,M=0.030000001192092896
----
 Tree depth: 4
 Node: action=1
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198 50283 21809   269]]
• Child Action scores:[0.53377473 0.08456986 0.06011767 0.05958638 0.01828352 0.00856964
 0.00812512 0.00786166 0.00624226 0.00591788]
• Child averaged monte carlo:-0.08333333333333333
• Child probablities:[0.90787137 0.02501848 0.01778474 0.01762756 0.00540885 0.00253517
 0.00240367 0.00232573 0.00184666 0.0017507 ]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=5.0,Q=-0.08333333333333333,M=-0.08333333333333333
----
 Tree depth: 4
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198 50283 26676    62]]
• Child Action scores:[1.94174719e+00 5.36572700e-03 1.23128982e-03 1.04747247e-03
 4.79483686e-04 4.36251867e-04 2.28763602e-04 1.45947808e-04
 1.02536025e-04 7.60850162e-05]
• Child averaged monte carlo:-0.05000000074505806
• Child probablities:[9.94943917e-01 2.74937809e-03 6.30908238e-04 5.36720909e-04
 2.45685631e-04 2.23533803e-04 1.17217605e-04 7.47831073e-05
 5.25390715e-05 3.89856759e-05]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.05000000074505806,M=-0.05000000074505806
----
 Tree depth: 4
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   628 50286 21809   685]]
• Child Action scores:[0.33209148 0.39761376 0.24915089 0.18293189 0.08636016 0.02307074
 0.01833293 0.01718616 0.0144621  0.00797389]
• Child averaged monte carlo:-0.04999999701976776
• Child probablities:[0.7236675  0.10186789 0.06383198 0.0468668  0.02212531 0.00591068
 0.00469686 0.00440306 0.00370516 0.00204289]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=7.0,Q=-0.04999999701976776,M=-0.04999999701976776
----
 Tree depth: 4
 Node: action=1
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   628 50286 21809   269]]
• Child Action scores:[1.7594223  0.05315569 0.03923345 0.03084147 0.01412079 0.00642774
 0.00479681 0.00456486 0.0034401  0.00341716]
• Child averaged monte carlo:-0.5
• Child probablities:[0.9015213  0.02723678 0.02010307 0.01580305 0.00723544 0.00329355
 0.00245787 0.00233902 0.00176269 0.00175094]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 4
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   220   198 50286 21809]]
• Child Action scores:[0.22937098 0.38194323 0.13659781 0.07031024 0.00936904 0.00731456
 0.00542936 0.00413096 0.00399504 0.00314837]
• Child averaged monte carlo:-0.05714285373687744
• Child probablities:[0.4966293  0.4473171  0.02645457 0.01361681 0.00181448 0.00141659
 0.00105149 0.00080003 0.00077371 0.00060974]
• Child visitation:[1 1 0 0 0 0 0 0 0 0]
• N=13.0,Q=-0.05714285373687744,M=-0.05714285373687744
----
 Tree depth: 4
 Node: action=1
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   220   198 50286 26676]]
• Child Action scores:[1.9490701e+00 9.3928055e-04 1.2329330e-04 1.1537354e-04 1.1307902e-04
 7.2754636e-05 7.2554525e-05 6.2628053e-05 6.1039733e-05 3.6443209e-05]
• Child averaged monte carlo:-0.05000000074505806
• Child probablities:[9.9869615e-01 4.8128379e-04 6.3175023e-05 5.9116966e-05 5.7941263e-05
 3.7279198e-05 3.7176666e-05 3.2090378e-05 3.1276530e-05 1.8673361e-05]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.05000000074505806,M=-0.05000000074505806
----
 Tree depth: 4
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776 50286   198 50286 21809]]
• Child Action scores:[0.19637479 0.30653694 0.13815331 0.07780269 0.01183862 0.00764266
 0.00657703 0.00492281 0.00476604 0.00401451]
• Child averaged monte carlo:-0.05789473809693989
• Child probablities:[0.49149784 0.4564639  0.02296706 0.01293417 0.00196809 0.00127054
 0.00109339 0.00081838 0.00079232 0.00066739]
• Child visitation:[1 1 0 0 0 0 0 0 0 0]
• N=18.0,Q=-0.05789473809693989,M=-0.05789473809693989
----
 Tree depth: 4
 Node: action=1
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776 50286   198 50286 26676]]
• Child Action scores:[1.9494767e+00 7.6653855e-04 1.0788788e-04 9.5672374e-05 8.5261730e-05
 7.2491093e-05 7.0776725e-05 5.7503334e-05 4.6129499e-05 3.2042073e-05]
• Child averaged monte carlo:-0.05000000074505806
• Child probablities:[9.9890447e-01 3.9277144e-04 5.5281340e-05 4.9022161e-05 4.3687789e-05
 3.7144160e-05 3.6265727e-05 2.9464491e-05 2.3636579e-05 1.6418237e-05]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.05000000074505806,M=-0.05000000074505806
----
 Tree depth: 4
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776 50284   198 50286 21809]]
• Child Action scores:[0.21895543 0.32237393 0.13725941 0.07542802 0.00801354 0.0075203
 0.00526978 0.00455936 0.00391769 0.00355284]
• Child averaged monte carlo:-0.0625
• Child probablities:[0.50535405 0.44098616 0.02486583 0.0136645  0.00145173 0.00136237
 0.00095467 0.00082597 0.00070973 0.00064363]
• Child visitation:[1 1 0 0 0 0 0 0 0 0]
• N=15.0,Q=-0.0625,M=-0.0625
----
 Tree depth: 4
 Node: action=1
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776 50284   198 50286 26676]]
• Child Action scores:[1.9494839e+00 7.8186288e-04 9.8045457e-05 9.7154145e-05 7.8565055e-05
 6.9189155e-05 6.9097376e-05 5.4662600e-05 4.6551093e-05 3.0216588e-05]
• Child averaged monte carlo:-0.05000000074505806
• Child probablities:[9.9890816e-01 4.0062357e-04 5.0238119e-05 4.9781414e-05 4.0256436e-05
 3.5452260e-05 3.5405232e-05 2.8008910e-05 2.3852604e-05 1.5482865e-05]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.05000000074505806,M=-0.05000000074505806
----
 Tree depth: 4
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776 50285   198 50286 21809]]
• Child Action scores:[ 0.16242334  0.14448147 -0.4193942   0.10231022  0.01136027  0.01052723
  0.0074276   0.00640158  0.00523473  0.00505443]
• Child averaged monte carlo:-0.13703702997278283
• Child probablities:[0.51759356 0.4292835  0.02248202 0.01426783 0.00158426 0.00146809
 0.00103583 0.00089274 0.00073002 0.00070487]
• Child visitation:[1 1 1 0 0 0 0 0 0 0]
• N=26.0,Q=-0.13703702997278283,M=-0.13703702997278283
----
 Tree depth: 4
 Node: action=1
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776 50285   198 50286 26676]]
• Child Action scores:[8.5233539e-01 1.0335663e-03 1.5595471e-04 1.3901836e-04 1.1577815e-04
 1.0717373e-04 1.0558061e-04 8.5198983e-05 6.3979278e-05 4.0716750e-05]
• Child averaged monte carlo:-0.07500000298023224
• Child probablities:[9.9891531e-01 3.7448053e-04 5.6505331e-05 5.0368970e-05 4.1948606e-05
 3.8831062e-05 3.8253846e-05 3.0869196e-05 2.3180897e-05 1.4752446e-05]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=3.0,Q=-0.07500000298023224,M=-0.07500000298023224
----
 Tree depth: 4
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776 50285   628 50286 21809]]
• Child Action scores:[0.8020149  0.03220165 0.08027456 0.04898202 0.00647511 0.00357728
 0.00354563 0.00340583 0.00292315 0.0027394 ]
• Child averaged monte carlo:-0.20000000298023224
• Child probablities:[0.5449383  0.38565338 0.02908499 0.01774711 0.00234606 0.00129611
 0.00128465 0.00123399 0.00105911 0.00099254]
• Child visitation:[1 1 0 0 0 0 0 0 0 0]
• N=3.0,Q=-0.20000000298023224,M=-0.20000000298023224
----
 Tree depth: 4
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   197   198 50286 21809]]
• Child Action scores:[0.20704874 0.34254557 0.13429582 0.07079917 0.01018376 0.00879877
 0.00556252 0.00464495 0.00396991 0.00356586]
• Child averaged monte carlo:-0.0625
• Child probablities:[0.48378393 0.46291187 0.02432895 0.01282594 0.00184488 0.00159398
 0.0010077  0.00084148 0.00071919 0.00064599]
• Child visitation:[1 1 0 0 0 0 0 0 0 0]
• N=15.0,Q=-0.0625,M=-0.0625
----
 Tree depth: 4
 Node: action=1
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   197   198 50286 26676]]
• Child Action scores:[1.94911897e+00 7.80197151e-04 1.65093952e-04 1.03501719e-04
 1.02209284e-04 9.30228634e-05 8.28695411e-05 8.19928682e-05
 6.74588737e-05 6.61702506e-05]
• Child averaged monte carlo:-0.05000000074505806
• Child probablities:[9.9872118e-01 3.9977007e-04 8.4593514e-05 5.3033888e-05 5.2371652e-05
 4.7664562e-05 4.2462038e-05 4.2012834e-05 3.4565670e-05 3.3905388e-05]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.05000000074505806,M=-0.05000000074505806
----
 Tree depth: 5
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198 50286 21809   269    16]]
• Child Action scores:[0.09829235 0.11895995 0.00994156 0.00297942 0.00236587 0.0019286
 0.0011334  0.00062241 0.00029876 0.00025896]
• Child averaged monte carlo:-0.0999999727521624
• Child probablities:[9.8530340e-01 1.2314695e-02 1.0291467e-03 3.0842880e-04 2.4491418e-04
 1.9964775e-04 1.1732925e-04 6.4431559e-05 3.0928044e-05 2.6807276e-05]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=48.0,Q=-0.0999999727521624,M=-0.0999999727521624
----
 Tree depth: 5
 Node: action=1
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198 50286 21809   269    15]]
• Child Action scores:[1.8784375e+00 6.6600896e-02 2.0850119e-03 1.6684534e-03 1.1250285e-03
 5.7048042e-04 1.3634510e-04 1.3446598e-04 1.3040053e-04 5.6873530e-05]
• Child averaged monte carlo:-0.05000000074505806
• Child probablities:[9.6250427e-01 3.4126047e-02 1.0683523e-03 8.5490925e-04 5.7646033e-04
 2.9231200e-04 6.9862712e-05 6.8899863e-05 6.6816734e-05 2.9141782e-05]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.05000000074505806,M=-0.05000000074505806
----
 Tree depth: 5
 Node: action=2
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198 50286 21809   269    23]]
• Child Action scores:[1.9377887e+00 1.0236223e-02 1.9714802e-03 6.4702757e-04 1.2627216e-04
 9.9953540e-05 8.8826622e-05 7.6680320e-05 4.6643996e-05 4.0310388e-05]
• Child averaged monte carlo:-0.5
• Child probablities:[9.9291563e-01 5.2450020e-03 1.0101789e-03 3.3153448e-04 6.4701380e-05
 5.1215815e-05 4.5514425e-05 3.9290706e-05 2.3900207e-05 2.0654890e-05]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 5
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198 50286 21809   685  3132]]
• Child Action scores:[1.3254431e-01 1.4577049e-03 5.4039108e-05 1.3448268e-05 1.0911947e-05
 9.7103239e-06 8.7462822e-06 5.9687941e-06 4.9289370e-06 4.5590782e-06]
• Child averaged monte carlo:-0.19444444444444445
• Child probablities:[9.9972826e-01 2.4897416e-04 9.2298114e-06 2.2969473e-06 1.8637469e-06
 1.6585111e-06 1.4938540e-06 1.0194625e-06 8.4185626e-07 7.7868481e-07]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=17.0,Q=-0.19444444444444445,M=-0.19444444444444445
----
 Tree depth: 5
 Node: action=1
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198 50286 21809   685  5066]]
• Child Action scores:[1.94991350e+00 6.28236739e-04 6.21244486e-04 2.16667642e-04
 5.52221500e-05 3.90064451e-05 3.25046894e-05 2.15428026e-05
 1.55596736e-05 1.28918455e-05]
• Child averaged monte carlo:-0.5
• Child probablities:[9.9912828e-01 3.2190612e-04 3.1832332e-04 1.1101968e-04 2.8295621e-05
 1.9986755e-05 1.6655280e-05 1.1038451e-05 7.9727179e-06 6.6057328e-06]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 5
 Node: action=2
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198 50286 21809   685  1314]]
• Child Action scores:[1.9474907e+00 3.8410698e-03 5.8774272e-05 3.4993183e-05 1.7360457e-05
 1.7064925e-05 1.5039361e-05 1.1138552e-05 1.0512753e-05 9.6890881e-06]
• Child averaged monte carlo:-0.5
• Child probablities:[9.9788684e-01 1.9681496e-03 3.0115714e-05 1.7930375e-05 8.8954321e-06
 8.7440030e-06 7.7061113e-06 5.7073516e-06 5.3866947e-06 4.9646519e-06]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 5
 Node: action=3
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198 50286 21809   685    22]]
• Child Action scores:[1.1289557e+00 3.0764898e-02 4.1638603e-04 2.1731586e-04 2.0644788e-04
 9.2363720e-05 5.4411663e-05 4.5308559e-05 4.4405442e-05 3.1092372e-05]
• Child averaged monte carlo:-0.06666666766007741
• Child probablities:[9.8647875e-01 1.2871102e-02 1.7420332e-04 9.0918380e-05 8.6371547e-05
 3.8642185e-05 2.2764194e-05 1.8955730e-05 1.8577894e-05 1.3008107e-05]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=2.0,Q=-0.06666666766007741,M=-0.06666666766007741
----
 Tree depth: 5
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198 50286 21809 42304    16]]
• Child Action scores:[1.8956358e+00 5.0881743e-02 1.8367287e-03 1.1908225e-03 1.1781708e-03
 1.7847394e-04 1.3591365e-04 9.6145144e-05 6.4509404e-05 5.3882770e-05]
• Child averaged monte carlo:-0.05000000074505806
• Child probablities:[9.7131664e-01 2.6071612e-02 9.4113284e-04 6.1017292e-04 6.0369028e-04
 9.1449372e-05 6.9641639e-05 4.9264407e-05 3.3054373e-05 2.7609327e-05]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.05000000074505806,M=-0.05000000074505806
----
 Tree depth: 5
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198 50286 26676    62    23]]
• Child Action scores:[0.27959564 0.2730894  0.22062841 0.11261486 0.0644099  0.06109942
 0.05688915 0.05497178 0.05157693 0.04330012]
• Child averaged monte carlo:-0.07500000298023224
• Child probablities:[0.23883744 0.23412277 0.07993783 0.04080249 0.02333692 0.02213747
 0.02061201 0.01991731 0.01868729 0.01568845]
• Child visitation:[1 1 0 0 0 0 0 0 0 0]
• N=3.0,Q=-0.07500000298023224,M=-0.07500000298023224
----
 Tree depth: 5
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198 50285 21809   685  3132]]
• Child Action scores:[4.0699735e-01 8.5257704e-04 5.1669580e-05 9.4951865e-06 9.3312328e-06
 7.0660562e-06 6.6562275e-06 5.7620664e-06 4.1056505e-06 3.9307674e-06]
• Child averaged monte carlo:-0.06000000238418579
• Child probablities:[9.9977845e-01 1.9536850e-04 1.1840113e-05 2.1758274e-06 2.1382573e-06
 1.6191907e-06 1.5252782e-06 1.3203808e-06 9.4081207e-07 9.0073752e-07]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=9.0,Q=-0.06000000238418579,M=-0.06000000238418579
----
 Tree depth: 5
 Node: action=1
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198 50285 21809   685  5066]]
• Child Action scores:[1.9496590e+00 6.7478616e-04 5.5293797e-04 4.3495567e-04 6.9894144e-05
 5.3297554e-05 4.3378732e-05 2.0879745e-05 1.8634695e-05 1.1937288e-05]
• Child averaged monte carlo:-0.05000000074505806
• Child probablities:[9.9899787e-01 3.4575787e-04 2.8332332e-04 2.2286964e-04 3.5813493e-05
 2.7309465e-05 2.2227097e-05 1.0698702e-05 9.5483474e-06 6.1166211e-06]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.05000000074505806,M=-0.05000000074505806
----
 Tree depth: 5
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198 50285 21809   269    16]]
• Child Action scores:[8.2437152e-01 7.7303037e-02 3.9779576e-03 1.1299722e-03 1.0668448e-03
 7.2430720e-04 3.8531999e-04 3.4043565e-04 1.5400464e-04 1.3823857e-04]
• Child averaged monte carlo:-0.07500000298023224
• Child probablities:[9.6851975e-01 2.8008346e-02 1.4412890e-03 4.0941022e-04 3.8653798e-04
 2.6243014e-04 1.3960869e-04 1.2334625e-04 5.5798781e-05 5.0086437e-05]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=3.0,Q=-0.07500000298023224,M=-0.07500000298023224
----
 Tree depth: 5
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198   197 21809   685  3132]]
• Child Action scores:[9.8644757e-01 5.8155693e-04 3.0499285e-05 7.4770232e-06 5.5153146e-06
 5.0748831e-06 4.9001483e-06 3.8572784e-06 3.0215781e-06 2.5196298e-06]
• Child averaged monte carlo:0.07500000298023224
• Child probablities:[9.9976188e-01 2.1070904e-04 1.1050465e-05 2.7090664e-06 1.9983024e-06
 1.8387258e-06 1.7754160e-06 1.3975647e-06 1.0947747e-06 9.1290934e-07]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=3.0,Q=0.07500000298023224,M=0.07500000298023224
----
 Tree depth: 5
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198   197 21809   269    16]]
• Child Action scores:[1.1211852e+00 3.8317412e-02 4.5234947e-03 8.7566255e-04 7.7445753e-04
 7.6898199e-04 4.6204065e-04 2.7439612e-04 1.5067936e-04 1.1613612e-04]
• Child averaged monte carlo:-0.06666666766007741
• Child probablities:[9.7997689e-01 1.6030846e-02 1.8924935e-03 3.6635072e-04 3.2400960e-04
 3.2171881e-04 1.9330383e-04 1.1479904e-04 6.3039690e-05 4.8587841e-05]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=2.0,Q=-0.06666666766007741,M=-0.06666666766007741
----
 Tree depth: 5
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198   220   198 50286 21809]]
• Child Action scores:[0.19284979 0.2650571  0.22231944 0.1024932  0.00927653 0.0068291
 0.00665271 0.0063861  0.00563133 0.00473647]
• Child averaged monte carlo:-0.06000000238418579
• Child probablities:[0.47219884 0.45700964 0.03602329 0.01660738 0.00150311 0.00110655
 0.00107797 0.00103476 0.00091247 0.00076747]
• Child visitation:[1 1 0 0 0 0 0 0 0 0]
• N=19.0,Q=-0.06000000238418579,M=-0.06000000238418579
----
 Tree depth: 5
 Node: action=1
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198   220   198 50286 26676]]
• Child Action scores:[1.9495828e+00 7.8484905e-04 1.0475387e-04 1.0285166e-04 6.8885587e-05
 6.7298075e-05 6.0072987e-05 4.8073016e-05 3.8697071e-05 3.1914264e-05]
• Child averaged monte carlo:-0.05000000074505806
• Child probablities:[9.9895883e-01 4.0215367e-04 5.3675485e-05 5.2700801e-05 3.5296714e-05
 3.4483277e-05 3.0781172e-05 2.4632431e-05 1.9828232e-05 1.6352747e-05]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.05000000074505806,M=-0.05000000074505806
----
 Tree depth: 5
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198 50283 21809   685  3132]]
• Child Action scores:[5.8601749e-01 9.8877971e-04 5.2144576e-05 1.1217289e-05 8.6455275e-06
 8.6195123e-06 7.1712780e-06 6.5539034e-06 3.8890330e-06 3.2026946e-06]
• Child averaged monte carlo:0.03750000149011612
• Child probablities:[9.9971634e-01 2.5332349e-04 1.3359342e-05 2.8738482e-06 2.2149677e-06
 2.2083027e-06 1.8372679e-06 1.6790976e-06 9.9636293e-07 8.2052429e-07]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=7.0,Q=0.03750000149011612,M=0.03750000149011612
----
 Tree depth: 5
 Node: action=1
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198 50283 21809   685  5066]]
• Child Action scores:[1.9497532e+00 6.2760781e-04 5.7325995e-04 3.6305698e-04 6.5244923e-05
 5.0740739e-05 3.8176982e-05 2.9784936e-05 2.0910087e-05 1.3791809e-05]
• Child averaged monte carlo:-0.05000000074505806
• Child probablities:[9.9904615e-01 3.2158385e-04 2.9373623e-04 1.8602902e-04 3.3431250e-05
 2.5999363e-05 1.9561741e-05 1.5261689e-05 1.0714250e-05 7.0668707e-06]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.05000000074505806,M=-0.05000000074505806
----
 Tree depth: 5
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198 50283 21809   269    16]]
• Child Action scores:[6.7271966e-01 8.2997605e-02 4.9572396e-03 1.3683351e-03 1.2220282e-03
 9.7646611e-04 5.0610106e-04 3.3409151e-04 1.8415409e-04 1.6954073e-04]
• Child averaged monte carlo:-0.0800000011920929
• Child probablities:[9.69247580e-01 2.68968530e-02 1.60648185e-03 4.43433382e-04
 3.96020012e-04 3.16441263e-04 1.64011071e-04 1.08268316e-04
 5.96784193e-05 5.49426950e-05]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=4.0,Q=-0.0800000011920929,M=-0.0800000011920929
----
 Tree depth: 5
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   628 50286 21809   685  3132]]
• Child Action scores:[5.0824684e-01 1.4938731e-03 6.9236579e-05 1.7417622e-05 1.4824045e-05
 1.2310021e-05 7.5811213e-06 6.0913931e-06 5.9475396e-06 4.2500287e-06]
• Child averaged monte carlo:-0.07142857142857142
• Child probablities:[9.9954647e-01 4.0915285e-04 1.8963019e-05 4.7704652e-06 4.0601176e-06
 3.3715583e-06 2.0763728e-06 1.6683551e-06 1.6289555e-06 1.1640288e-06]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=6.0,Q=-0.07142857142857142,M=-0.07142857142857142
----
 Tree depth: 5
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   220   198 50286 21809   685]]
• Child Action scores:[ 0.4637244  -0.25140262  0.29460737  0.2868402   0.06122202  0.01831834
  0.01420248  0.01388693  0.01297569  0.00991811]
• Child averaged monte carlo:-0.05555555555555555
• Child probablities:[0.6874567  0.12009535 0.0711612  0.06928507 0.01478793 0.00442472
 0.00343055 0.00335433 0.00313422 0.00239568]
• Child visitation:[1 1 0 0 0 0 0 0 0 0]
• N=8.0,Q=-0.05555555555555555,M=-0.05555555555555555
----
 Tree depth: 5
 Node: action=1
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   220   198 50286 21809   269]]
• Child Action scores:[0.6379889  0.05839562 0.05408258 0.03570688 0.01940032 0.00691064
 0.00658413 0.00616562 0.00437999 0.00390952]
• Child averaged monte carlo:-0.0800000011920929
• Child probablities:[0.9242271  0.01892414 0.01752643 0.01157145 0.00628702 0.00223952
 0.0021337  0.00199808 0.00141941 0.00126695]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=4.0,Q=-0.0800000011920929,M=-0.0800000011920929
----
 Tree depth: 5
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776 50286   198 50286 21809   685]]
• Child Action scores:[0.27739716 0.21479826 0.32805467 0.29793698 0.07787404 0.02189294
 0.01615689 0.01560815 0.01514618 0.00978904]
• Child averaged monte carlo:-0.050000001986821495
• Child probablities:[0.7057838  0.11078358 0.06862407 0.06232391 0.01629007 0.00457967
 0.00337978 0.00326499 0.00316835 0.00204772]
• Child visitation:[1 1 0 0 0 0 0 0 0 0]
• N=11.0,Q=-0.050000001986821495,M=-0.050000001986821495
----
 Tree depth: 5
 Node: action=1
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776 50286   198 50286 21809   269]]
• Child Action scores:[0.48047104 0.06630678 0.06242742 0.04031448 0.0231556  0.00840591
 0.00824273 0.00726348 0.00479406 0.00478894]
• Child averaged monte carlo:-0.08571428912026542
• Child probablities:[0.92651314 0.01816058 0.01709808 0.01104162 0.00634203 0.00230227
 0.00225758 0.00198937 0.00131303 0.00131163]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=6.0,Q=-0.08571428912026542,M=-0.08571428912026542
----
 Tree depth: 5
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776 50284   198 50286 21809   685]]
• Child Action scores:[ 0.41994122 -0.2765708   0.3267341   0.31040478  0.06615508  0.02034713
  0.01385575  0.01349869  0.01277319  0.0094416 ]
• Child averaged monte carlo:-0.06000000238418579
• Child probablities:[0.70109296 0.10239784 0.0748713  0.07112943 0.01515947 0.00466256
 0.00317505 0.00309323 0.00292698 0.00216355]
• Child visitation:[1 1 0 0 0 0 0 0 0 0]
• N=9.0,Q=-0.06000000238418579,M=-0.06000000238418579
----
 Tree depth: 5
 Node: action=1
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776 50284   198 50286 21809   269]]
• Child Action scores:[0.5448075  0.0603772  0.05960826 0.04206511 0.0214005  0.00807581
 0.0074721  0.00595312 0.00489642 0.00471267]
• Child averaged monte carlo:-0.08333333333333333
• Child probablities:[0.9241906  0.01786151 0.01763404 0.01244421 0.00633096 0.00238909
 0.00221049 0.00176112 0.00144852 0.00139416]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=5.0,Q=-0.08333333333333333,M=-0.08333333333333333
----
 Tree depth: 5
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776 50285   198 50286 21809   685]]
• Child Action scores:[ 0.29420474  0.21705024 -0.33062255  0.306528    0.0799004   0.02135465
  0.01601428  0.01599243  0.01530999  0.01010829]
• Child averaged monte carlo:-0.12307692491091214
• Child probablities:[0.7118748  0.10734262 0.0680824  0.06160548 0.01605825 0.00429182
 0.00321852 0.00321413 0.00307698 0.00203155]
• Child visitation:[1 1 1 0 0 0 0 0 0 0]
• N=12.0,Q=-0.12307692491091214,M=-0.12307692491091214
----
 Tree depth: 5
 Node: action=1
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776 50285   198 50286 21809   269]]
• Child Action scores:[0.29042017 0.09739535 0.08810087 0.06084694 0.03323635 0.01213122
 0.01194474 0.00995925 0.00737369 0.00660182]
• Child averaged monte carlo:-0.0923077051456158
• Child probablities:[0.9214941  0.01957436 0.01770637 0.01222892 0.00667979 0.00243811
 0.00240063 0.00200159 0.00148195 0.00132682]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=12.0,Q=-0.0923077051456158,M=-0.0923077051456158
----
 Tree depth: 5
 Node: action=2
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776 50285   198 50286 21809    58]]
• Child Action scores:[1.3636365  0.15238884 0.1018814  0.07673562 0.055634   0.04212889
 0.01804395 0.01572735 0.01500548 0.01083884]
• Child averaged monte carlo:-0.5
• Child probablities:[0.6987222  0.07808346 0.05220364 0.03931904 0.02850665 0.02158668
 0.00924565 0.00805863 0.00768875 0.00555378]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 5
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776 50285   198 50286 26676    62]]
• Child Action scores:[1.1390102e+00 7.6425262e-03 1.2888721e-03 1.0984765e-03 5.7887845e-04
 2.6977918e-04 1.9150214e-04 1.7884177e-04 1.3140366e-04 7.7314275e-05]
• Child averaged monte carlo:-0.06666666766007741
• Child probablities:[9.9489176e-01 3.1974018e-03 5.3922512e-04 4.5956930e-04 2.4218524e-04
 1.1286745e-04 8.0118705e-05 7.4821990e-05 5.4975317e-05 3.2345954e-05]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=2.0,Q=-0.06666666766007741,M=-0.06666666766007741
----
 Tree depth: 5
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776 50285   628 50286 21809   685]]
• Child Action scores:[1.3837334  0.18985742 0.12510477 0.11444753 0.04698817 0.01265075
 0.01048336 0.00874795 0.00807037 0.00461646]
• Child averaged monte carlo:0.05000000074505806
• Child probablities:[0.7090197  0.09728222 0.06410321 0.05864248 0.02407656 0.00648219
 0.00537163 0.00448242 0.00413523 0.00236546]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=0.05000000074505806,M=0.05000000074505806
----
 Tree depth: 5
 Node: action=1
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776 50285   628 50286 21809   269]]
• Child Action scores:[1.7592746  0.04926386 0.03724878 0.03430039 0.01804479 0.0057233
 0.00557043 0.00495651 0.00439964 0.00284253]
• Child averaged monte carlo:-0.5
• Child probablities:[0.9014456  0.02524262 0.01908613 0.01757539 0.00924608 0.0029326
 0.00285427 0.00253969 0.00225436 0.0014565 ]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 5
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   197   198 50286 21809   685]]
• Child Action scores:[ 0.41132417 -0.27119383  0.3763613   0.31042126  0.06253026  0.02159768
  0.0153464   0.01474116  0.01367918  0.01166887]
• Child averaged monte carlo:-0.06000000238418579
• Child probablities:[0.6852962  0.10486212 0.08624341 0.0711332  0.01432884 0.00494912
 0.00351664 0.00337794 0.00313459 0.00267393]
• Child visitation:[1 1 0 0 0 0 0 0 0 0]
• N=9.0,Q=-0.06000000238418579,M=-0.06000000238418579
----
 Tree depth: 5
 Node: action=1
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   197   198 50286 21809   269]]
• Child Action scores:[0.5441399  0.06990605 0.0599418  0.03813913 0.01957618 0.00768573
 0.00731489 0.00681828 0.00511334 0.00397666]
• Child averaged monte carlo:-0.08333333333333333
• Child probablities:[0.92320305 0.02068045 0.01773271 0.01128278 0.00579126 0.00227369
 0.00216398 0.00201707 0.00151269 0.00117642]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=5.0,Q=-0.08333333333333333,M=-0.08333333333333333
----
 Tree depth: 6
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198 50286 21809   269    16    11]]
• Child Action scores:[0.09751377 0.10262944 0.11893514 0.00630819 0.00098802 0.00059891
 0.00037828 0.00031114 0.00030845 0.00030532]
• Child averaged monte carlo:-0.09999996423721313
• Child probablities:[8.0567938e-01 1.8028232e-01 1.2439716e-02 6.5978902e-04 1.0333905e-04
 6.2641018e-05 3.9564806e-05 3.2542390e-05 3.2261320e-05 3.1934153e-05]
• Child visitation:[1 1 0 0 0 0 0 0 0 0]
• N=47.0,Q=-0.09999996423721313,M=-0.09999996423721313
----
 Tree depth: 6
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198 50286 21809   685  3132    25]]
• Child Action scores:[1.24090016e-01 2.31521809e-03 1.30175508e-03 2.53417908e-04
 1.40649630e-04 9.19479935e-05 7.73577049e-05 3.78905861e-05
 3.17015511e-05 2.76573355e-05]
• Child averaged monte carlo:-0.21176470027250402
• Child probablities:[9.99218702e-01 4.06900625e-04 2.28784047e-04 4.45383121e-05
 2.47192365e-05 1.61599019e-05 1.35956525e-05 6.65928792e-06
 5.57156181e-06 4.86078943e-06]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=16.0,Q=-0.21176470027250402,M=-0.21176470027250402
----
 Tree depth: 6
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198 50286 21809   685    22    25]]
• Child Action scores:[1.9501379e+00 1.4090247e-03 3.5344150e-05 5.2245405e-06 4.5040069e-06
 3.9501492e-06 2.3805630e-06 1.9985189e-06 1.4277706e-06 1.1213798e-06]
• Child averaged monte carlo:-0.05000000074505806
• Child probablities:[9.9924326e-01 7.2197890e-04 1.8110208e-05 2.6770347e-06 2.3078362e-06
 2.0240416e-06 1.2197914e-06 1.0240335e-06 7.3158424e-07 5.7459079e-07]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.05000000074505806,M=-0.05000000074505806
----
 Tree depth: 6
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198 50286 26676    62    23   317]]
• Child Action scores:[1.3700222  0.30401632 0.12793651 0.04393425 0.03646253 0.02618775
 0.01255055 0.0078937  0.00531468 0.00182252]
• Child averaged monte carlo:-0.05000000074505806
• Child probablities:[0.7019942  0.15577681 0.06555419 0.02251174 0.01868326 0.0134185
 0.00643085 0.0040447  0.00272322 0.00093385]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.05000000074505806,M=-0.05000000074505806
----
 Tree depth: 6
 Node: action=1
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198 50286 26676    62    23   257]]
• Child Action scores:[1.1263     0.53266    0.22125684 0.02312223 0.01027841 0.00912293
 0.00301313 0.00261163 0.00224912 0.002213  ]
• Child averaged monte carlo:-0.05000000074505806
• Child probablities:[0.57711184 0.27293298 0.11337116 0.01184774 0.00526662 0.00467455
 0.00154392 0.00133819 0.00115244 0.00113394]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.05000000074505806,M=-0.05000000074505806
----
 Tree depth: 6
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198 50285 21809   685  3132    25]]
• Child Action scores:[4.1708693e-01 1.6923205e-03 9.9478813e-04 1.9099620e-04 1.0782387e-04
 6.1888284e-05 4.4829521e-05 3.6140729e-05 2.0787311e-05 1.8526316e-05]
• Child averaged monte carlo:-0.07777777645323011
• Child probablities:[9.99201834e-01 4.08773078e-04 2.40286987e-04 4.61343479e-05
 2.60444140e-05 1.49488615e-05 1.08283875e-05 8.72964483e-06
 5.02108969e-06 4.47495586e-06]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=8.0,Q=-0.07777777645323011,M=-0.07777777645323011
----
 Tree depth: 6
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198 50285 21809   269    16    11]]
• Child Action scores:[7.7612591e-01 6.9012338e-01 4.1496862e-02 2.4661871e-03 4.5689184e-04
 2.3151150e-04 1.5462638e-04 1.2373779e-04 1.1976847e-04 9.7641867e-05]
• Child averaged monte carlo:-0.06666666766007741
• Child probablities:[6.9125217e-01 2.8872675e-01 1.7361032e-02 1.0317781e-03 1.9114972e-04
 9.6857410e-05 6.4690998e-05 5.1768147e-05 5.0107505e-05 4.0850402e-05]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=2.0,Q=-0.06666666766007741,M=-0.06666666766007741
----
 Tree depth: 6
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198   197 21809   685  3132    25]]
• Child Action scores:[1.24395406e+00 1.25084748e-03 6.33449003e-04 1.07444175e-04
 7.12838737e-05 6.22285297e-05 4.29337742e-05 2.40491463e-05
 1.76670983e-05 1.12316047e-05]
• Child averaged monte carlo:0.06666666766007741
• Child probablities:[9.9902856e-01 5.2331673e-04 2.6501590e-04 4.4951394e-05 2.9823017e-05
 2.6034535e-05 1.7962193e-05 1.0061435e-05 7.3913798e-06 4.6989635e-06]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=2.0,Q=0.06666666766007741,M=0.06666666766007741
----
 Tree depth: 6
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198   197 21809   269    16    11]]
• Child Action scores:[1.4968623e+00 4.1290435e-01 3.6020871e-02 2.3040376e-03 2.7073413e-04
 1.9486416e-04 1.4652108e-04 1.4552956e-04 1.4533038e-04 8.4833868e-05]
• Child averaged monte carlo:-0.05000000074505806
• Child probablities:[7.6698655e-01 2.1157062e-01 1.8456958e-02 1.1805801e-03 1.3872315e-04
 9.9847653e-05 7.5076845e-05 7.4568794e-05 7.4466741e-05 4.3468553e-05]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.05000000074505806,M=-0.05000000074505806
----
 Tree depth: 6
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198   220   198 50286 21809   685]]
• Child Action scores:[0.27398336 0.17942806 0.35569823 0.31213537 0.09078115 0.02969917
 0.02157393 0.02081642 0.01884197 0.01583944]
• Child averaged monte carlo:-0.050000001986821495
• Child probablities:[0.6986427  0.09598576 0.07440669 0.065294   0.01899004 0.00621262
 0.00451294 0.00435448 0.00394146 0.00331337]
• Child visitation:[1 1 0 0 0 0 0 0 0 0]
• N=11.0,Q=-0.050000001986821495,M=-0.050000001986821495
----
 Tree depth: 6
 Node: action=1
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198   220   198 50286 21809   269]]
• Child Action scores:[0.42968076 0.07765783 0.06312814 0.04675992 0.02722741 0.00919126
 0.00847462 0.00756274 0.00565387 0.00443772]
• Child averaged monte carlo:-0.08750000596046448
• Child probablities:[0.9243027  0.01989579 0.01617331 0.0119798  0.00697561 0.00235478
 0.00217118 0.00193756 0.00144851 0.00113694]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=7.0,Q=-0.08750000596046448,M=-0.08750000596046448
----
 Tree depth: 6
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198 50283 21809   685  3132    25]]
• Child Action scores:[6.2464613e-01 1.6129824e-03 1.0199375e-03 1.9890403e-04 1.0828921e-04
 6.7692272e-05 4.7508434e-05 3.5114004e-05 1.9688156e-05 1.7402464e-05]
• Child averaged monte carlo:0.028571431125913347
• Child probablities:[9.9910718e-01 4.4177537e-04 2.7934791e-04 5.4477288e-05 2.9659039e-05
 1.8540053e-05 1.3011956e-05 9.6172798e-06 5.3923359e-06 4.7663139e-06]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=6.0,Q=0.028571431125913347,M=0.028571431125913347
----
 Tree depth: 6
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198 50283 21809   269    16    11]]
• Child Action scores:[5.8112669e-01 7.5401646e-01 5.3886071e-02 3.6050226e-03 6.7613483e-04
 2.8974339e-04 2.6700762e-04 1.6466690e-04 1.3145176e-04 1.2703954e-04]
• Child averaged monte carlo:-0.07500000298023224
• Child probablities:[7.0412320e-01 2.7319437e-01 1.9523939e-02 1.3061676e-03 2.4497640e-04
 1.0497949e-04 9.6741889e-05 5.9661917e-05 4.7627451e-05 4.6028821e-05]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=3.0,Q=-0.07500000298023224,M=-0.07500000298023224
----
 Tree depth: 6
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   628 50286 21809   685  3132    25]]
• Child Action scores:[5.3529859e-01 1.9343069e-03 1.1369209e-03 2.0516801e-04 1.2455085e-04
 8.0836209e-05 6.0784194e-05 3.7641403e-05 2.5629874e-05 2.0890107e-05]
• Child averaged monte carlo:-0.10000000397364299
• Child probablities:[9.9887496e-01 5.7223008e-04 3.3633769e-04 6.0695282e-05 3.6846141e-05
 2.3913946e-05 1.7981916e-05 1.1135536e-05 7.5821395e-06 6.1799642e-06]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=5.0,Q=-0.10000000397364299,M=-0.10000000397364299
----
 Tree depth: 6
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   220   198 50286 21809   685  3132]]
• Child Action scores:[6.5829945e-01 1.2541134e-03 2.9629355e-05 8.4978619e-06 7.5684270e-06
 6.0536959e-06 6.0186499e-06 4.9213008e-06 3.8111207e-06 3.2490234e-06]
• Child averaged monte carlo:0.05714285799435207
• Child probablities:[9.9963295e-01 3.4348574e-04 8.1151038e-06 2.3274565e-06 2.0728960e-06
 1.6580303e-06 1.6484317e-06 1.3478817e-06 1.0438175e-06 8.8986621e-07]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=6.0,Q=0.05714285799435207,M=0.05714285799435207
----
 Tree depth: 6
 Node: action=1
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   220   198 50286 21809   685  5066]]
• Child Action scores:[1.9498993e+00 7.6016382e-04 5.1865965e-04 2.0947351e-04 4.3335287e-05
 4.0185903e-05 2.7102395e-05 2.2387310e-05 1.7296008e-05 1.5431291e-05]
• Child averaged monte carlo:-0.5
• Child probablities:[9.99121010e-01 3.89505061e-04 2.65759241e-04 1.07333435e-04
 2.22048366e-05 2.05911037e-05 1.38871646e-05 1.14711729e-05
 8.86240923e-06 7.90693502e-06]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 6
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   220   198 50286 21809   269    16]]
• Child Action scores:[8.3522314e-01 4.5837462e-02 3.6316458e-03 1.0431546e-03 9.8540355e-04
 5.9192791e-04 3.8871742e-04 2.6539186e-04 1.1913058e-04 9.6581658e-05]
• Child averaged monte carlo:-0.07500000298023224
• Child probablities:[9.8031497e-01 1.6607776e-02 1.3158137e-03 3.7795460e-04 3.5703028e-04
 2.1446664e-04 1.4083965e-04 9.6156473e-05 4.3163254e-05 3.4993354e-05]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=3.0,Q=-0.07500000298023224,M=-0.07500000298023224
----
 Tree depth: 6
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776 50286   198 50286 21809   685  3132]]
• Child Action scores:[4.0689662e-01 1.7627083e-03 3.8339251e-05 1.0913542e-05 1.0754020e-05
 7.6528440e-06 7.1615359e-06 6.1291867e-06 4.9102696e-06 4.1821822e-06]
• Child averaged monte carlo:-0.06000000238418579
• Child probablities:[9.9957067e-01 4.0392560e-04 8.7854605e-06 2.5008442e-06 2.4642898e-06
 1.7536536e-06 1.6410700e-06 1.4045065e-06 1.1251910e-06 9.5834935e-07]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=9.0,Q=-0.06000000238418579,M=-0.06000000238418579
----
 Tree depth: 6
 Node: action=1
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776 50286   198 50286 21809   685  5066]]
• Child Action scores:[1.9497991e+00 8.7784010e-04 5.0073565e-04 2.0254485e-04 4.5085555e-05
 4.1641844e-05 2.7115373e-05 2.0751964e-05 1.9676669e-05 1.6139838e-05]
• Child averaged monte carlo:-0.05000000074505806
• Child probablities:[9.9906963e-01 4.4980194e-04 2.5657506e-04 1.0378321e-04 2.3101667e-05
 2.1337124e-05 1.3893815e-05 1.0633228e-05 1.0082251e-05 8.2699917e-06]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.05000000074505806,M=-0.05000000074505806
----
 Tree depth: 6
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776 50286   198 50286 21809   269    16]]
• Child Action scores:[5.8098024e-01 6.4612038e-02 4.4039218e-03 1.2962862e-03 1.2626401e-03
 8.8841224e-04 5.4793648e-04 3.5023218e-04 1.4698649e-04 1.2477342e-04]
• Child averaged monte carlo:-0.08333333333333333
• Child probablities:[9.7769588e-01 1.9114316e-02 1.3028214e-03 3.8348307e-04 3.7352947e-04
 2.6282086e-04 1.6209720e-04 1.0360992e-04 4.3483324e-05 3.6911981e-05]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=5.0,Q=-0.08333333333333333,M=-0.08333333333333333
----
 Tree depth: 6
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776 50284   198 50286 21809   685  3132]]
• Child Action scores:[5.8593452e-01 1.5757917e-03 4.0178780e-05 1.1077429e-05 1.0676820e-05
 8.1365442e-06 6.9649459e-06 5.8318974e-06 4.4002663e-06 4.3444925e-06]
• Child averaged monte carlo:0.03750000149011612
• Child probablities:[9.9956757e-01 4.0371486e-04 1.0293727e-05 2.8380164e-06 2.7353810e-06
 2.0845673e-06 1.7844060e-06 1.4941211e-06 1.1273399e-06 1.1130508e-06]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=7.0,Q=0.03750000149011612,M=0.03750000149011612
----
 Tree depth: 6
 Node: action=1
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776 50284   198 50286 21809   685  5066]]
• Child Action scores:[1.9496595e+00 9.6647994e-04 5.0758076e-04 2.2233935e-04 4.8735394e-05
 4.5730478e-05 3.1520474e-05 2.3619365e-05 1.9885025e-05 1.7578892e-05]
• Child averaged monte carlo:-0.5
• Child probablities:[9.98998106e-01 4.95220651e-04 2.60082452e-04 1.13925846e-04
 2.49718305e-05 2.34321233e-05 1.61509724e-05 1.21024732e-05
 1.01890109e-05 9.00735722e-06]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 6
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776 50284   198 50286 21809   269    16]]
• Child Action scores:[6.7860538e-01 6.0887348e-02 4.2726155e-03 1.1939994e-03 1.1652020e-03
 8.7585091e-04 5.5549858e-04 3.3260553e-04 1.5365031e-04 1.3189920e-04]
• Child averaged monte carlo:-0.0800000011920929
• Child probablities:[9.7687703e-01 1.9731632e-02 1.3846173e-03 3.8693682e-04 3.7760448e-04
 2.8383511e-04 1.8001923e-04 1.0778675e-04 4.9793121e-05 4.2744290e-05]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=4.0,Q=-0.0800000011920929,M=-0.0800000011920929
----
 Tree depth: 6
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776 50285   198 50286 21809   685  3132]]
• Child Action scores:[4.0690240e-01 1.7028091e-03 4.2525051e-05 1.1904712e-05 1.1657676e-05
 8.0558375e-06 7.4796772e-06 6.1610699e-06 4.9669961e-06 4.5530896e-06]
• Child averaged monte carlo:-0.06000000238418579
• Child probablities:[9.9958259e-01 3.9019965e-04 9.7446391e-06 2.7279714e-06 2.6713628e-06
 1.8459997e-06 1.7139722e-06 1.4118126e-06 1.1381900e-06 1.0433430e-06]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=9.0,Q=-0.06000000238418579,M=-0.06000000238418579
----
 Tree depth: 6
 Node: action=1
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776 50285   198 50286 21809   685  5066]]
• Child Action scores:[1.9496849e+00 9.0756192e-04 5.2237709e-04 2.3921733e-04 5.2896408e-05
 4.6253197e-05 3.0508005e-05 2.1947533e-05 2.1028380e-05 1.7237335e-05]
• Child averaged monte carlo:-0.05000000074505806
• Child probablities:[9.9901116e-01 4.6503128e-04 2.6766403e-04 1.2257406e-04 2.7103919e-05
 2.3699962e-05 1.5632186e-05 1.1245833e-05 1.0774862e-05 8.8323450e-06]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.05000000074505806,M=-0.05000000074505806
----
 Tree depth: 6
 Node: action=2
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776 50285   198 50286 21809   685  1314]]
• Child Action scores:[1.94629920e+00 4.97286720e-03 6.62514503e-05 5.20865287e-05
 1.74757770e-05 1.71702231e-05 1.62591678e-05 1.42825875e-05
 1.37734178e-05 9.67119922e-06]
• Child averaged monte carlo:-0.5
• Child probablities:[9.9727637e-01 2.5480783e-03 3.3946992e-05 2.6688940e-05 8.9545219e-06
 8.7979570e-06 8.3311361e-06 7.3183437e-06 7.0574470e-06 4.9554860e-06]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 6
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776 50285   198 50286 21809   269    16]]
• Child Action scores:[3.3328342e-01 9.8088451e-02 6.5840618e-03 1.8780795e-03 1.8567090e-03
 1.3772754e-03 8.3848211e-04 5.1269069e-04 2.4369221e-04 2.0945648e-04]
• Child averaged monte carlo:-0.09166667858759563
• Child probablities:[9.7608125e-01 2.0518620e-02 1.3772862e-03 3.9286583e-04 3.8839545e-04
 2.8810519e-04 1.7539777e-04 1.0724714e-04 5.0976723e-05 4.3815129e-05]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=11.0,Q=-0.09166667858759563,M=-0.09166667858759563
----
 Tree depth: 6
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776 50285   198 50286 26676    62    23]]
• Child Action scores:[0.47033942 0.46436706 0.14963122 0.08201444 0.053667   0.04587931
 0.03936455 0.03516166 0.03456823 0.03179022]
• Child averaged monte carlo:-0.05000000074505806
• Child probablities:[0.24100013 0.23793992 0.07667047 0.04202389 0.02749877 0.02350838
 0.02017025 0.0180167  0.01771263 0.01628919]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.05000000074505806,M=-0.05000000074505806
----
 Tree depth: 6
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   197   198 50286 21809   685  3132]]
• Child Action scores:[5.8598530e-01 1.2281779e-03 3.9148734e-05 1.0495899e-05 9.3465051e-06
 6.5155359e-06 6.3949028e-06 5.6188428e-06 4.1499870e-06 3.9425668e-06]
• Child averaged monte carlo:0.03750000149011612
• Child probablities:[9.9965858e-01 3.1465685e-04 1.0029831e-05 2.6890295e-06 2.3945570e-06
 1.6692679e-06 1.6383619e-06 1.4395368e-06 1.0632189e-06 1.0100781e-06]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=7.0,Q=0.03750000149011612,M=0.03750000149011612
----
 Tree depth: 6
 Node: action=1
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   197   198 50286 21809   685  5066]]
• Child Action scores:[1.9498967e+00 7.7642815e-04 4.8787854e-04 2.1448413e-04 4.5505451e-05
 4.2575746e-05 2.9499006e-05 2.1895059e-05 1.6986121e-05 1.6279904e-05]
• Child averaged monte carlo:-0.5
• Child probablities:[9.99119699e-01 3.97838856e-04 2.49987119e-04 1.09900851e-04
 2.33168212e-05 2.18156511e-05 1.51151789e-05 1.12189455e-05
 8.70362419e-06 8.34176080e-06]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 6
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   197   198 50286 21809   269    16]]
• Child Action scores:[6.8124521e-01 5.1022675e-02 4.1718995e-03 1.0563114e-03 1.0258527e-03
 8.4783806e-04 4.3605018e-04 2.9712226e-04 1.5011773e-04 1.3520784e-04]
• Child averaged monte carlo:-0.0800000011920929
• Child probablities:[9.8029894e-01 1.6534807e-02 1.3519785e-03 3.4231655e-04 3.3244590e-04
 2.7475704e-04 1.4130984e-04 9.6287768e-05 4.8648326e-05 4.3816512e-05]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=4.0,Q=-0.0800000011920929,M=-0.0800000011920929
----
 Tree depth: 7
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198 50286 21809   269    16    11    66]]
• Child Action scores:[1.2636277e-01 9.4201714e-03 4.9133664e-03 5.0324714e-04 3.3845755e-04
 2.4689455e-04 2.2938779e-04 1.2403088e-04 6.6134155e-05 3.5675064e-05]
• Child averaged monte carlo:-0.09999998410542806
• Child probablities:[9.9810719e-01 1.0930686e-03 5.7012192e-04 5.8394231e-05 3.9272887e-05
 2.8648383e-05 2.6616988e-05 1.4391910e-05 7.6738697e-06 4.1395524e-06]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=38.0,Q=-0.09999998410542806,M=-0.09999998410542806
----
 Tree depth: 7
 Node: action=1
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198 50286 21809   269    16    11   269]]
• Child Action scores:[4.2763445e-01 1.1636794e-02 2.3344229e-03 7.6437410e-04 6.2069728e-04
 5.1928108e-04 4.3884601e-04 3.1406729e-04 2.3220143e-04 1.5752103e-04]
• Child averaged monte carlo:-0.08888889683617486
• Child probablities:[9.95428920e-01 2.81081977e-03 5.63870301e-04 1.84631426e-04
 1.49926884e-04 1.25430219e-04 1.06001455e-04 7.58616661e-05
 5.60873050e-05 3.80485617e-05]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=8.0,Q=-0.08888889683617486,M=-0.08888889683617486
----
 Tree depth: 7
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198 50286 21809   685  3132    25    15]]
• Child Action scores:[1.1178550e-01 4.0518701e-02 1.4383153e-03 7.4296433e-04 1.7970242e-04
 6.4298416e-05 4.9861028e-05 4.1133484e-05 3.1860152e-05 2.2873892e-05]
• Child averaged monte carlo:-0.23124998807907104
• Child probablities:[9.9217075e-01 7.3403441e-03 2.6056435e-04 1.3459499e-04 3.2554784e-05
 1.1648264e-05 9.0327949e-06 7.4517184e-06 5.7717671e-06 4.1438211e-06]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=15.0,Q=-0.23124998807907104,M=-0.23124998807907104
----
 Tree depth: 7
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198 50285 21809   685  3132    25    15]]
• Child Action scores:[4.2246971e-01 4.4462997e-02 6.1657268e-04 4.8458893e-04 1.4123716e-04
 4.5344728e-05 3.8233644e-05 2.6240912e-05 2.0640773e-05 1.9191890e-05]
• Child averaged monte carlo:-0.09999999403953552
• Child probablities:[9.8822987e-01 1.1391336e-02 1.5796475e-04 1.2415077e-04 3.6184694e-05
 1.1617233e-05 9.7953871e-06 6.7228721e-06 5.2881269e-06 4.9169257e-06]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=7.0,Q=-0.09999999403953552,M=-0.09999999403953552
----
 Tree depth: 7
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198 50285 21809   269    16    11    66]]
• Child Action scores:[1.9459708e+00 3.2783465e-03 1.7954266e-03 1.2808197e-04 8.9517336e-05
 7.5919066e-05 6.5652363e-05 4.5075030e-05 2.3746708e-05 9.4607185e-06]
• Child averaged monte carlo:-0.05000000074505806
• Child probablities:[9.9710804e-01 1.6798123e-03 9.1996981e-04 6.5628716e-05 4.5868343e-05
 3.8900642e-05 3.3640023e-05 2.3096274e-05 1.2167723e-05 4.8476363e-06]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.05000000074505806,M=-0.05000000074505806
----
 Tree depth: 7
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198   197 21809   685  3132    25    15]]
• Child Action scores:[1.9181349e+00 3.1975240e-02 7.1267755e-04 5.0961721e-04 9.5465744e-05
 3.9375645e-05 3.2990825e-05 2.4789893e-05 1.8351166e-05 1.4343842e-05]
• Child averaged monte carlo:0.05000000074505806
• Child probablities:[9.8284507e-01 1.6383993e-02 3.6517327e-04 2.6112594e-04 4.8916285e-05
 2.0175932e-05 1.6904374e-05 1.2702248e-05 9.4030675e-06 7.3497304e-06]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=0.05000000074505806,M=0.05000000074505806
----
 Tree depth: 7
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198   220   198 50286 21809   685  3132]]
• Child Action scores:[4.0682706e-01 2.3314918e-03 6.6321991e-05 1.8739262e-05 1.4905630e-05
 1.0841068e-05 8.2743309e-06 7.9352176e-06 6.1926503e-06 5.5579417e-06]
• Child averaged monte carlo:-0.06000000238418579
• Child probablities:[9.9942720e-01 5.3426262e-04 1.5197722e-05 4.2941124e-06 3.4156335e-06
 2.4842368e-06 1.8960675e-06 1.8183596e-06 1.4190492e-06 1.2736054e-06]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=9.0,Q=-0.06000000238418579,M=-0.06000000238418579
----
 Tree depth: 7
 Node: action=1
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198   220   198 50286 21809   685  5066]]
• Child Action scores:[1.9492608e+00 1.0734111e-03 6.7065837e-04 3.2440320e-04 7.2757313e-05
 6.5495980e-05 2.3473349e-05 2.1541426e-05 1.7631502e-05 1.3115721e-05]
• Child averaged monte carlo:-0.05000000074505806
• Child probablities:[9.9879384e-01 5.5001175e-04 3.4364281e-04 1.6622298e-04 3.7280573e-05
 3.3559892e-05 1.2027655e-05 1.1037745e-05 9.0343156e-06 6.7204460e-06]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.05000000074505806,M=-0.05000000074505806
----
 Tree depth: 7
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198   220   198 50286 21809   269    16]]
• Child Action scores:[5.0767553e-01 8.8834010e-02 6.6483072e-03 2.0744049e-03 1.8671608e-03
 1.2547869e-03 9.1796572e-04 5.2793219e-04 2.6028280e-04 1.7904252e-04]
• Child averaged monte carlo:-0.08571428912026542
• Child probablities:[9.7121888e-01 2.4330506e-02 1.8208869e-03 5.6815310e-04 5.1139161e-04
 3.4367017e-04 2.5141914e-04 1.4459391e-04 7.1288152e-05 4.9037470e-05]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=6.0,Q=-0.08571428912026542,M=-0.08571428912026542
----
 Tree depth: 7
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198 50283 21809   685  3132    25    15]]
• Child Action scores:[6.6794252e-01 3.9009724e-02 6.1298074e-04 5.6551705e-04 1.6809504e-04
 4.1630094e-05 3.5367677e-05 2.7640897e-05 2.6326577e-05 1.9542917e-05]
• Child averaged monte carlo:0.01666666939854622
• Child probablities:[9.8799419e-01 1.1540328e-02 1.8133939e-04 1.6729810e-04 4.9727907e-05
 1.2315518e-05 1.0462894e-05 8.1770650e-06 7.7882469e-06 5.7814223e-06]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=5.0,Q=0.01666666939854622,M=0.01666666939854622
----
 Tree depth: 7
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198 50283 21809   269    16    11    66]]
• Child Action scores:[1.1415359e+00 4.0419227e-03 2.2738266e-03 1.9155494e-04 1.3864083e-04
 1.1637112e-04 9.2974711e-05 6.5053559e-05 3.5443831e-05 1.7778821e-05]
• Child averaged monte carlo:-0.06666666766007741
• Child probablities:[9.9700505e-01 1.6910181e-03 9.5130026e-04 8.0140788e-05 5.8003130e-05
 4.8686157e-05 3.8897808e-05 2.7216442e-05 1.4828627e-05 7.4381205e-06]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=2.0,Q=-0.06666666766007741,M=-0.06666666766007741
----
 Tree depth: 7
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   628 50286 21809   685  3132    25    15]]
• Child Action scores:[5.6101239e-01 4.0311530e-02 5.4751884e-04 4.9707835e-04 1.1559573e-04
 4.7579942e-05 4.0972998e-05 2.9509041e-05 2.2726314e-05 1.9291620e-05]
• Child averaged monte carlo:-0.13999999761581422
• Child probablities:[9.8647851e-01 1.3063670e-02 1.7743323e-04 1.6108710e-04 3.7460857e-05
 1.5419129e-05 1.3278031e-05 9.5629312e-06 7.3648671e-06 6.2517934e-06]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=4.0,Q=-0.13999999761581422,M=-0.13999999761581422
----
 Tree depth: 7
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   220   198 50286 21809   685  3132    25]]
• Child Action scores:[7.1546018e-01 1.5989954e-03 8.6427305e-04 1.4397793e-04 9.0598842e-05
 7.0568676e-05 4.9484115e-05 2.7431959e-05 2.1455995e-05 1.6525228e-05]
• Child averaged monte carlo:0.050000001986821495
• Child probablities:[9.9911398e-01 4.7303419e-04 2.5567971e-04 4.2593296e-05 2.6802045e-05
 2.0876480e-05 1.4638989e-05 8.1152539e-06 6.3473722e-06 4.8886927e-06]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=5.0,Q=0.050000001986821495,M=0.050000001986821495
----
 Tree depth: 7
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   220   198 50286 21809   269    16    11]]
• Child Action scores:[8.6598319e-01 5.1719129e-01 3.5520099e-02 2.3928245e-03 3.2846676e-04
 2.0975372e-04 1.2422568e-04 1.2034028e-04 9.9665172e-05 9.1901362e-05]
• Child averaged monte carlo:-0.06666666766007741
• Child probablities:[7.6643932e-01 2.1637720e-01 1.4860535e-02 1.0010854e-03 1.3742056e-04
 8.7754612e-05 5.1972267e-05 5.0346731e-05 4.1696894e-05 3.8448750e-05]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=2.0,Q=-0.06666666766007741,M=-0.06666666766007741
----
 Tree depth: 7
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776 50286   198 50286 21809   685  3132    25]]
• Child Action scores:[4.1701224e-01 2.2411749e-03 1.0041753e-03 1.8946368e-04 1.0803225e-04
 8.2951352e-05 5.8405440e-05 3.5021330e-05 2.5003805e-05 1.9973593e-05]
• Child averaged monte carlo:-0.07777777645323011
• Child probablities:[9.9905747e-01 5.4134661e-04 2.4255444e-04 4.5764176e-05 2.6094747e-05
 2.0036559e-05 1.4107594e-05 8.4592584e-06 6.0395664e-06 4.8245397e-06]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=8.0,Q=-0.07777777645323011,M=-0.07777777645323011
----
 Tree depth: 7
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776 50286   198 50286 21809   269    16    11]]
• Child Action scores:[5.1133335e-01 6.8762165e-01 4.5974389e-02 2.8359552e-03 4.4783094e-04
 2.7814944e-04 1.7125180e-04 1.4075293e-04 1.2397545e-04 1.1592428e-04]
• Child averaged monte carlo:-0.0800000011920929
• Child probablities:[7.6004708e-01 2.2283606e-01 1.4898821e-02 9.1904186e-04 1.4512760e-04
 9.0139285e-05 5.5497199e-05 4.5613499e-05 4.0176456e-05 3.7567330e-05]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=4.0,Q=-0.0800000011920929,M=-0.0800000011920929
----
 Tree depth: 7
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776 50284   198 50286 21809   685  3132    25]]
• Child Action scores:[6.2461591e-01 1.9104647e-03 9.2188996e-04 1.7066007e-04 1.0203570e-04
 7.7936806e-05 5.6694440e-05 2.9824860e-05 2.3839484e-05 1.9590088e-05]
• Child averaged monte carlo:0.028571431125913347
• Child probablities:[9.9905747e-01 5.2325201e-04 2.5249395e-04 4.6741625e-05 2.7946282e-05
 2.1345901e-05 1.5527887e-05 8.1686503e-06 6.5293316e-06 5.3654762e-06]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=6.0,Q=0.028571431125913347,M=0.028571431125913347
----
 Tree depth: 7
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776 50284   198 50286 21809   269    16    11]]
• Child Action scores:[6.54439628e-01 5.51780224e-01 3.92342247e-02 2.31715688e-03
 3.59492376e-04 2.50866549e-04 1.41095356e-04 1.16324270e-04
 1.02891834e-04 1.00766323e-04]
• Child averaged monte carlo:-0.07500000298023224
• Child probablities:[7.8381121e-01 1.9992037e-01 1.4215299e-02 8.3954958e-04 1.3025086e-04
 9.0893678e-05 5.1121504e-05 4.2146476e-05 3.7279649e-05 3.6509537e-05]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=3.0,Q=-0.07500000298023224,M=-0.07500000298023224
----
 Tree depth: 7
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776 50285   198 50286 21809   685  3132    25]]
• Child Action scores:[4.17015225e-01 2.18406576e-03 1.02120172e-03 1.90360224e-04
 1.12094145e-04 8.53255333e-05 6.19004786e-05 3.56463970e-05
 2.55660671e-05 2.05972101e-05]
• Child averaged monte carlo:-0.07777777645323011
• Child probablities:[9.9906331e-01 5.2755215e-04 2.4666710e-04 4.5980731e-05 2.7075881e-05
 2.0610032e-05 1.4951806e-05 8.6102409e-06 6.1753785e-06 4.9751716e-06]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=8.0,Q=-0.07777777645323011,M=-0.07777777645323011
----
 Tree depth: 7
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776 50285   198 50286 21809   269    16    11]]
• Child Action scores:[3.5122901e-01 2.6336899e-01 6.6947713e-02 4.1192276e-03 6.5232860e-04
 4.4532825e-04 2.5254875e-04 1.9998227e-04 1.7717313e-04 1.7699343e-04]
• Child averaged monte carlo:-0.09090910174629906
• Child probablities:[7.6685083e-01 2.1632497e-01 1.4627169e-02 8.9999550e-04 1.4252498e-04
 9.7298194e-05 5.5178483e-05 4.3693421e-05 3.8709932e-05 3.8670671e-05]
• Child visitation:[1 1 0 0 0 0 0 0 0 0]
• N=10.0,Q=-0.09090910174629906,M=-0.09090910174629906
----
 Tree depth: 7
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   197   198 50286 21809   685  3132    25]]
• Child Action scores:[6.2459320e-01 1.8720282e-03 1.0253098e-03 2.0523918e-04 1.0961884e-04
 8.3493571e-05 6.3948886e-05 3.2761975e-05 2.5223564e-05 2.1231135e-05]
• Child averaged monte carlo:0.028571431125913347
• Child probablities:[9.9902010e-01 5.1272474e-04 2.8081931e-04 5.6212404e-05 3.0023208e-05
 2.2867827e-05 1.7514787e-05 8.9730884e-06 6.9084135e-06 5.8149380e-06]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=6.0,Q=0.028571431125913347,M=0.028571431125913347
----
 Tree depth: 7
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   197   198 50286 21809   269    16    11]]
• Child Action scores:[6.5141857e-01 5.5768293e-01 4.2066395e-02 2.5498881e-03 3.3664607e-04
 2.4988037e-04 1.3744435e-04 1.2564678e-04 1.0760922e-04 1.0200837e-04]
• Child averaged monte carlo:-0.07500000298023224
• Child probablities:[7.80527413e-01 2.02059031e-01 1.52414478e-02 9.23872518e-04
 1.21973215e-04 9.05363631e-05 4.97986803e-05 4.55241934e-05
 3.89888482e-05 3.69595546e-05]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=3.0,Q=-0.07500000298023224,M=-0.07500000298023224
----
 Tree depth: 8
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198 50286 21809   269    16    11    66    17]]
• Child Action scores:[1.2729564e-01 9.1080919e-02 1.8939475e-03 1.8350607e-03 7.7311083e-04
 1.4157273e-04 1.3003936e-04 1.1896632e-04 8.1601625e-05 7.8656536e-05]
• Child averaged monte carlo:-0.0999999861968191
• Child probablities:[9.8860300e-01 1.0706722e-02 2.2263685e-04 2.1571461e-04 9.0880538e-05
 1.6642123e-05 1.5286356e-05 1.3984700e-05 9.5924142e-06 9.2462142e-06]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=37.0,Q=-0.0999999861968191,M=-0.0999999861968191
----
 Tree depth: 8
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198 50286 21809   269    16    11   269    17]]
• Child Action scores:[4.4967365e-01 1.4930196e-01 2.5264903e-03 1.1401605e-03 9.7474764e-04
 2.0854523e-04 2.0176072e-04 1.6121766e-04 9.3570095e-05 5.9156820e-05]
• Child averaged monte carlo:-0.08750000596046448
• Child probablities:[9.6015763e-01 3.8250878e-02 6.4728200e-04 2.9210697e-04 2.4972850e-04
 5.3428892e-05 5.1690713e-05 4.1303658e-05 2.3972481e-05 1.5155865e-05]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=7.0,Q=-0.08750000596046448,M=-0.08750000596046448
----
 Tree depth: 8
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198 50286 21809   685  3132    25    15    60]]
• Child Action scores:[ 0.08436827  0.24255544  0.2022193  -0.25038475 -0.35856235 -0.3787623
  0.15998389  0.1402716   0.08907418  0.08071223]
• Child averaged monte carlo:-0.25333333015441895
• Child probablities:[0.20404781 0.17356697 0.15092622 0.09340635 0.05292615 0.0453673
 0.02993309 0.02624491 0.01666584 0.01510131]
• Child visitation:[1 1 1 1 1 1 0 0 0 0]
• N=14.0,Q=-0.25333333015441895,M=-0.25333333015441895
----
 Tree depth: 8
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198 50285 21809   685  3132    25    15    60]]
• Child Action scores:[ 0.27799103  0.2578169   0.2494878  -0.34954816  0.24958494  0.1453283
  0.09251349  0.08638465  0.06135692  0.05647583]
• Child averaged monte carlo:-0.12857142516544887
• Child probablities:[0.17363717 0.16861428 0.1640518  0.08241369 0.06835815 0.03980358
 0.02533827 0.02365966 0.01680488 0.01546801]
• Child visitation:[1 1 1 1 0 0 0 0 0 0]
• N=6.0,Q=-0.12857142516544887,M=-0.12857142516544887
----
 Tree depth: 8
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198   220   198 50286 21809   685  3132    25]]
• Child Action scores:[4.1696361e-01 2.2206593e-03 1.3349083e-03 1.5864217e-04 1.2287944e-04
 1.0588266e-04 6.7441382e-05 4.8888887e-05 2.5805317e-05 2.4318731e-05]
• Child averaged monte carlo:-0.07777777645323011
• Child probablities:[9.9896348e-01 5.3639116e-04 3.2244163e-04 3.8319366e-05 2.9681027e-05
 2.5575522e-05 1.6290189e-05 1.1808910e-05 6.2331687e-06 5.8740898e-06]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=8.0,Q=-0.07777777645323011,M=-0.07777777645323011
----
 Tree depth: 8
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198   220   198 50286 21809   269    16    11]]
• Child Action scores:[5.3676265e-01 3.8716763e-01 5.0707925e-02 3.0260712e-03 6.5079908e-04
 3.6677934e-04 1.9675469e-04 1.5778473e-04 1.3994746e-04 1.3429180e-04]
• Child averaged monte carlo:-0.08333333333333333
• Child probablities:[7.23916113e-01 2.58656442e-01 1.50010325e-02 8.95209028e-04
 1.92527252e-04 1.08505104e-04 5.82063512e-05 4.66777892e-05
 4.14009482e-05 3.97278236e-05]
• Child visitation:[1 1 0 0 0 0 0 0 0 0]
• N=5.0,Q=-0.08333333333333333,M=-0.08333333333333333
----
 Tree depth: 8
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198 50283 21809   685  3132    25    15    60]]
• Child Action scores:[0.27899802 0.17546147 0.1552392  0.34771463 0.24509102 0.14008562
 0.10161778 0.09967095 0.06425979 0.06324472]
• Child averaged monte carlo:2.9802322831784523e-10
• Child probablities:[0.14842178 0.14612962 0.13302284 0.11268312 0.07942612 0.04539724
 0.03293105 0.03230015 0.02082453 0.02049558]
• Child visitation:[1 1 1 0 0 0 0 0 0 0]
• N=4.0,Q=2.9802322831784523e-10,M=2.9802322831784523e-10
----
 Tree depth: 8
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198 50283 21809   269    16    11    66    17]]
• Child Action scores:[1.9188653e+00 3.0886637e-02 5.5804389e-04 4.6495936e-04 3.2231622e-04
 5.8847912e-05 5.6336728e-05 4.6938774e-05 3.3037897e-05 2.8795070e-05]
• Child averaged monte carlo:-0.05000000074505806
• Child probablities:[9.8321933e-01 1.5826195e-02 2.8593958e-04 2.3824342e-04 1.6515361e-04
 3.0153447e-05 2.8866727e-05 2.4051251e-05 1.6928494e-05 1.4754484e-05]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.05000000074505806,M=-0.05000000074505806
----
 Tree depth: 8
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   628 50286 21809   685  3132    25    15    60]]
• Child Action scores:[ 0.29553244 -0.2751101   0.3642664   0.32678673  0.20630829  0.10606601
  0.1034968   0.06310485  0.05629343  0.04845222]
• Child averaged monte carlo:-0.20000000298023224
• Child probablities:[0.17792206 0.1629637  0.13198058 0.11840098 0.07474938 0.03842971
 0.03749884 0.02286407 0.02039617 0.01755515]
• Child visitation:[1 1 0 0 0 0 0 0 0 0]
• N=3.0,Q=-0.20000000298023224,M=-0.20000000298023224
----
 Tree depth: 8
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   220   198 50286 21809   685  3132    25    15]]
• Child Action scores:[7.8950781e-01 2.6117519e-02 8.3551742e-04 4.6898864e-04 1.1388709e-04
 4.0050792e-05 3.5370864e-05 2.7983004e-05 1.9267887e-05 1.3710804e-05]
• Child averaged monte carlo:0.040000003576278684
• Child probablities:[9.9100959e-01 8.4638475e-03 2.7076431e-04 1.5198413e-04 3.6907142e-05
 1.2979173e-05 1.1462559e-05 9.0683916e-06 6.2441027e-06 4.4432304e-06]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=4.0,Q=0.040000003576278684,M=0.040000003576278684
----
 Tree depth: 8
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   220   198 50286 21809   269    16    11    66]]
• Child Action scores:[1.9459324e+00 3.4976290e-03 1.5693888e-03 1.4162940e-04 1.1039958e-04
 8.9901565e-05 6.7864894e-05 4.0622108e-05 2.2568072e-05 1.0126773e-05]
• Child averaged monte carlo:-0.05000000074505806
• Child probablities:[9.9708837e-01 1.7921719e-03 8.0414885e-04 7.2570365e-05 5.6568329e-05
 4.6065223e-05 3.4773715e-05 2.0814614e-05 1.1563795e-05 5.1889201e-06]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.05000000074505806,M=-0.05000000074505806
----
 Tree depth: 8
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776 50286   198 50286 21809   685  3132    25    15]]
• Child Action scores:[4.2399332e-01 3.3143062e-02 1.1287456e-03 5.9364887e-04 1.4661587e-04
 5.3537646e-05 4.5810648e-05 3.4456705e-05 2.5655916e-05 1.7448026e-05]
• Child averaged monte carlo:-0.09999999403953552
• Child probablities:[9.9096233e-01 8.4911902e-03 2.8918250e-04 1.5209171e-04 3.7562710e-05
 1.3716243e-05 1.1736602e-05 8.8277429e-06 6.5729969e-06 4.4701515e-06]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=7.0,Q=-0.09999999403953552,M=-0.09999999403953552
----
 Tree depth: 8
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776 50286   198 50286 21809   269    16    11    66]]
• Child Action scores:[8.5052896e-01 5.2951425e-03 2.2608449e-03 1.9132638e-04 1.5992994e-04
 1.3187232e-04 9.0423782e-05 5.5068274e-05 3.1695512e-05 1.3709355e-05]
• Child averaged monte carlo:-0.07500000298023224
• Child probablities:[9.9695182e-01 1.9185299e-03 8.1914669e-04 6.9321155e-05 5.7945632e-05
 4.7779828e-05 3.2762240e-05 1.9952273e-05 1.1483881e-05 4.9671576e-06]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=3.0,Q=-0.07500000298023224,M=-0.07500000298023224
----
 Tree depth: 8
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776 50284   198 50286 21809   685  3132    25    15]]
• Child Action scores:[6.6923642e-01 3.2347146e-02 9.3336334e-04 4.6556216e-04 1.3031729e-04
 4.9517988e-05 3.7863490e-05 3.2487704e-05 2.2421827e-05 1.5766700e-05]
• Child averaged monte carlo:0.01666666939854622
• Child probablities:[9.8990810e-01 9.5693246e-03 2.7611884e-04 1.3772823e-04 3.8552040e-05
 1.4649011e-05 1.1201236e-05 9.6109052e-06 6.6330963e-06 4.6642958e-06]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=5.0,Q=0.01666666939854622,M=0.01666666939854622
----
 Tree depth: 8
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776 50284   198 50286 21809   269    16    11    66]]
• Child Action scores:[1.1417208e+00 4.1684564e-03 1.8894650e-03 1.6250649e-04 1.3913392e-04
 1.1353788e-04 7.0416638e-05 4.7817073e-05 2.8133380e-05 1.1985992e-05]
• Child averaged monte carlo:-0.06666666766007741
• Child probablities:[9.9715984e-01 1.7439561e-03 7.9049502e-04 6.7987799e-05 5.8209422e-05
 4.7500813e-05 2.9460192e-05 2.0005216e-05 1.1770155e-05 5.0145768e-06]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=2.0,Q=-0.06666666766007741,M=-0.06666666766007741
----
 Tree depth: 8
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776 50285   198 50286 21809   685  3132    25    15]]
• Child Action scores:[4.2364565e-01 3.5788380e-02 9.8067871e-04 5.4608192e-04 1.2715100e-04
 5.5879707e-05 4.3661163e-05 3.7356349e-05 2.6221180e-05 1.7059587e-05]
• Child averaged monte carlo:-0.09999999403953552
• Child probablities:[9.9033874e-01 9.1689155e-03 2.5124804e-04 1.3990515e-04 3.2575845e-05
 1.4316275e-05 1.1185907e-05 9.5706255e-06 6.7178166e-06 4.3706336e-06]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=7.0,Q=-0.09999999403953552,M=-0.09999999403953552
----
 Tree depth: 8
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776 50285   198 50286 21809   269    16    11    66]]
• Child Action scores:[4.7016811e-01 7.4782865e-03 3.3377928e-03 2.7089196e-04 2.3503564e-04
 1.9251958e-04 1.2345694e-04 8.1352024e-05 4.7312682e-05 1.9873758e-05]
• Child averaged monte carlo:-0.08750000596046448
• Child probablities:[9.9691212e-01 1.9159229e-03 8.5513620e-04 6.9402005e-05 6.0215683e-05
 4.9323153e-05 3.1629432e-05 2.0842235e-05 1.2121420e-05 5.0916192e-06]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=7.0,Q=-0.08750000596046448,M=-0.08750000596046448
----
 Tree depth: 8
 Node: action=1
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776 50285   198 50286 21809   269    16    11   269]]
• Child Action scores:[1.13840747e+00 8.42321757e-03 1.54279626e-03 5.28087316e-04
 4.01435129e-04 3.78497003e-04 3.36804020e-04 2.38762426e-04
 1.50706241e-04 1.01757665e-04]
• Child averaged monte carlo:-0.06666666766007741
• Child probablities:[9.9438745e-01 3.5240194e-03 6.4545928e-04 2.2093576e-04 1.6794831e-04
 1.5835170e-04 1.4090861e-04 9.9890975e-05 6.3050931e-05 4.2572330e-05]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=2.0,Q=-0.06666666766007741,M=-0.06666666766007741
----
 Tree depth: 8
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   197   198 50286 21809   685  3132    25    15]]
• Child Action scores:[6.6940099e-01 3.1323414e-02 1.1126517e-03 4.7904410e-04 1.4018946e-04
 4.3644402e-05 4.1000123e-05 3.3308712e-05 2.2405362e-05 1.5763540e-05]
• Child averaged monte carlo:0.01666666939854622
• Child probablities:[9.9015146e-01 9.2664715e-03 3.2915807e-04 1.4171662e-04 4.1472540e-05
 1.2911415e-05 1.2129152e-05 9.8537867e-06 6.6282255e-06 4.6633613e-06]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=5.0,Q=0.01666666939854622,M=0.01666666939854622
----
 Tree depth: 8
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   197   198 50286 21809   269    16    11    66]]
• Child Action scores:[1.1415801e+00 4.2868722e-03 1.9729724e-03 1.8895943e-04 1.4894528e-04
 1.1770682e-04 8.3743478e-05 5.4457589e-05 3.1713735e-05 1.3824086e-05]
• Child averaged monte carlo:-0.06666666766007741
• Child probablities:[9.9704212e-01 1.7934976e-03 8.2543195e-04 7.9054909e-05 6.2314204e-05
 4.9244973e-05 3.5035737e-05 2.2783408e-05 1.3268067e-05 5.7835791e-06]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=2.0,Q=-0.06666666766007741,M=-0.06666666766007741
----
 Tree depth: 9
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198 50286 21809   269    16    11    66    17
     11]]
• Child Action scores:[0.13050945 0.0813038  0.00547485 0.00479796 0.00061337 0.00044282
 0.00042074 0.00016249 0.00014872 0.00014803]
• Child averaged monte carlo:-0.09999998840125832
• Child probablities:[9.8857868e-01 9.6856970e-03 6.5221672e-04 5.7157961e-04 7.3070136e-05
 5.2752654e-05 5.0122715e-05 1.9357374e-05 1.7717442e-05 1.7635313e-05]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=36.0,Q=-0.09999998840125832,M=-0.09999998840125832
----
 Tree depth: 9
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198 50286 21809   269    16    11   269    17
     11]]
• Child Action scores:[4.9669591e-01 1.2526272e-01 4.1313250e-02 5.4357003e-04 4.6551862e-04
 4.2493449e-04 3.3776788e-04 2.0556799e-04 1.8132734e-04 1.4831719e-04]
• Child averaged monte carlo:-0.08571428912026542
• Child probablities:[9.5317584e-01 3.4307867e-02 1.1315174e-02 1.4887692e-04 1.2749963e-04
 1.1638416e-04 9.2510330e-05 5.6302462e-05 4.9663253e-05 4.0622195e-05]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=6.0,Q=-0.08571428912026542,M=-0.08571428912026542
----
 Tree depth: 9
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198 50286 21809   685  3132    25    15    60
    269]]
• Child Action scores:[ 0.42961735 -0.25509384  0.33904243  0.18855873  0.14611599  0.11976837
  0.09295567  0.08637888  0.04299897  0.03897956]
• Child averaged monte carlo:-0.07142857142857142
• Child probablities:[0.47877875 0.13415337 0.09285941 0.05164384 0.04001931 0.03280304
 0.02545938 0.02365808 0.01177687 0.01067601]
• Child visitation:[1 1 0 0 0 0 0 0 0 0]
• N=6.0,Q=-0.07142857142857142,M=-0.07142857142857142
----
 Tree depth: 9
 Node: action=1
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198 50286 21809   685  3132    25    15    60
   3283]]
• Child Action scores:[0.9380197  0.1946791  0.10230339 0.01574918 0.01440976 0.01195787
 0.01065756 0.00750781 0.00657441 0.00540317]
• Child averaged monte carlo:-0.06666666766007741
• Child probablities:[0.8267151  0.08144785 0.04280065 0.00658898 0.00602861 0.00500281
 0.0044588  0.00314104 0.00275053 0.00226052]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=2.0,Q=-0.06666666766007741,M=-0.06666666766007741
----
 Tree depth: 9
 Node: action=2
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198 50286 21809   685  3132    25    15    60
  42304]]
• Child Action scores:[0.39945343 0.72775155 0.3313839  0.14199354 0.06596868 0.05995367
 0.00913253 0.00810124 0.00775501 0.0063108 ]
• Child averaged monte carlo:-0.06666666766007741
• Child probablities:[0.37607545 0.30446923 0.138641   0.0594058  0.0275993  0.0250828
 0.00382078 0.00338932 0.00324446 0.00264025]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=2.0,Q=-0.06666666766007741,M=-0.06666666766007741
----
 Tree depth: 9
 Node: action=3
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198 50286 21809   685  3132    25    15    60
   2160]]
• Child Action scores:[0.7628158  0.5180307  0.17250219 0.12141769 0.10167763 0.0404384
 0.03281279 0.0190037  0.0187871  0.01096908]
• Child averaged monte carlo:-0.5
• Child probablities:[0.39086393 0.26543698 0.08838947 0.06221396 0.05209923 0.02072048
 0.01681315 0.00973742 0.00962644 0.00562052]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 9
 Node: action=4
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198 50286 21809   685  3132    25    15    60
    287]]
• Child Action scores:[1.9265581e+00 1.2280648e-02 4.9700900e-03 2.2108043e-03 4.7601439e-04
 4.1491003e-04 2.6084032e-04 2.5930753e-04 1.9057225e-04 1.7808813e-04]
• Child averaged monte carlo:-0.5
• Child probablities:[9.8716110e-01 6.2925573e-03 2.5466552e-03 1.1328077e-03 2.4390797e-04
 2.1259833e-04 1.3365359e-04 1.3286820e-04 9.7648495e-05 9.1251684e-05]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 9
 Node: action=5
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198 50286 21809   685  3132    25    15    60
    503]]
• Child Action scores:[1.0483011  0.2778707  0.25221878 0.19265833 0.06610188 0.0208977
 0.02008049 0.00873845 0.00650462 0.00596632]
• Child averaged monte carlo:-0.5
• Child probablities:[0.5371455  0.1423799  0.12923595 0.0987174  0.03387035 0.0107079
 0.01028917 0.00447755 0.00333294 0.00305712]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 9
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198 50285 21809   685  3132    25    15    60
    269]]
• Child Action scores:[0.5565708  0.46483314 0.21466286 0.12931457 0.08771283 0.06671963
 0.06396129 0.06293892 0.0292267  0.02780911]
• Child averaged monte carlo:0.06666666766007741
• Child probablities:[0.4238678  0.19447212 0.08980845 0.05410131 0.0366964  0.02791347
 0.02675947 0.02633174 0.01222757 0.01163449]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=2.0,Q=0.06666666766007741,M=0.06666666766007741
----
 Tree depth: 9
 Node: action=1
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198 50285 21809   685  3132    25    15    60
   3283]]
• Child Action scores:[1.6178398  0.15789095 0.08018697 0.01441693 0.01323749 0.00786675
 0.00771462 0.00574026 0.0052912  0.00480446]
• Child averaged monte carlo:-0.05000000074505806
• Child probablities:[0.828975   0.08090273 0.0410875  0.00738718 0.00678284 0.00403089
 0.00395294 0.00294129 0.00271119 0.00246179]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.05000000074505806,M=-0.05000000074505806
----
 Tree depth: 9
 Node: action=2
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198 50285 21809   685  3132    25    15    60
  42304]]
• Child Action scores:[0.7441277  0.54865605 0.28917548 0.12848149 0.05852096 0.05001307
 0.00828428 0.00635328 0.00605412 0.00532291]
• Child averaged monte carlo:-0.05000000074505806
• Child probablities:[0.3812882  0.28112927 0.14817242 0.06583343 0.02998592 0.02562651
 0.00424484 0.0032554  0.00310211 0.00272744]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.05000000074505806,M=-0.05000000074505806
----
 Tree depth: 9
 Node: action=3
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198 50285 21809   685  3132    25    15    60
    287]]
• Child Action scores:[1.9278024e+00 1.1843038e-02 4.8241508e-03 2.1306907e-03 4.9263379e-04
 3.3560765e-04 2.7489892e-04 2.1534305e-04 2.0324752e-04 1.6399505e-04]
• Child averaged monte carlo:-0.5
• Child probablities:[9.87798691e-01 6.06832793e-03 2.47187656e-03 1.09175791e-03
 2.52423692e-04 1.71964086e-04 1.40857170e-04 1.10340967e-04
 1.04143255e-04 8.40304419e-05]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 9
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198   220   198 50286 21809   685  3132    25
     15]]
• Child Action scores:[4.2382589e-01 3.4838405e-02 6.0604495e-04 5.4521096e-04 1.3887011e-04
 6.8524700e-05 6.0681275e-05 4.4730765e-05 2.6639138e-05 2.4150513e-05]
• Child averaged monte carlo:-0.09999999403953552
• Child probablities:[9.9066204e-01 8.9255329e-03 1.5526757e-04 1.3968202e-04 3.5578258e-05
 1.7555898e-05 1.5546428e-05 1.1459937e-05 6.8248969e-06 6.1873156e-06]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=7.0,Q=-0.09999999403953552,M=-0.09999999403953552
----
 Tree depth: 9
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198   220   198 50286 21809   269    16    11
     66]]
• Child Action scores:[8.50038886e-01 6.03056094e-03 2.78674695e-03 1.87175334e-04
 1.81519019e-04 1.50550011e-04 1.15249415e-04 8.77614584e-05
 5.66950621e-05 2.27143937e-05]
• Child averaged monte carlo:-0.07500000298023224
• Child probablities:[9.9641907e-01 2.1849859e-03 1.0096909e-03 6.7817149e-05 6.5767759e-05
 5.4547105e-05 4.1757034e-05 3.1797630e-05 2.0541689e-05 8.2298529e-06]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=3.0,Q=-0.07500000298023224,M=-0.07500000298023224
----
 Tree depth: 9
 Node: action=1
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198   220   198 50286 21809   269    16    11
    269]]
• Child Action scores:[1.9395008e+00 7.9637570e-03 1.1145718e-03 5.1477714e-04 3.2255246e-04
 3.1208288e-04 2.6516657e-04 1.9901012e-04 1.4342474e-04 1.0001590e-04]
• Child averaged monte carlo:-0.05000000074505806
• Child probablities:[9.9379289e-01 4.0805992e-03 5.7110237e-04 2.6376985e-04 1.6527466e-04
 1.5991008e-04 1.3587034e-04 1.0197203e-04 7.3490293e-05 5.1247771e-05]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.05000000074505806,M=-0.05000000074505806
----
 Tree depth: 9
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198 50283 21809   685  3132    25    15    60
    269]]
• Child Action scores:[0.78766155 0.35734898 0.2069803  0.12312488 0.05875817 0.05658289
 0.05570789 0.0526523  0.03072629 0.02566362]
• Child averaged monte carlo:0.05000000074505806
• Child probablities:[0.4035948  0.18310426 0.10605592 0.06308872 0.03010746 0.02899286
 0.02854451 0.02697884 0.01574403 0.01314994]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=0.05000000074505806,M=0.05000000074505806
----
 Tree depth: 9
 Node: action=1
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198 50283 21809   685  3132    25    15    60
  42304]]
• Child Action scores:[0.7551834  0.4836706  0.31039995 0.15208979 0.07022209 0.05275427
 0.0065452  0.00618189 0.00562029 0.0044769 ]
• Child averaged monte carlo:-0.05000000074505806
• Child probablities:[0.38695312 0.24783097 0.15904775 0.07793023 0.03598154 0.02703109
 0.00335374 0.00316758 0.00287981 0.00229395]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.05000000074505806,M=-0.05000000074505806
----
 Tree depth: 9
 Node: action=2
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198 50283 21809   685  3132    25    15    60
   3283]]
• Child Action scores:[1.5581526  0.17914729 0.10344862 0.01846726 0.01599025 0.0095547
 0.00893025 0.00714288 0.00709525 0.00548961]
• Child averaged monte carlo:-0.05000000074505806
• Child probablities:[0.79839146 0.09179439 0.05300668 0.00946255 0.00819334 0.00489579
 0.00457583 0.00365999 0.00363558 0.00281285]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.05000000074505806,M=-0.05000000074505806
----
 Tree depth: 9
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   628 50286 21809   685  3132    25    15    60
    269]]
• Child Action scores:[0.78301364 0.34477597 0.22480835 0.11816463 0.06202598 0.0618948
 0.05998489 0.05860943 0.02423618 0.02159672]
• Child averaged monte carlo:0.05000000074505806
• Child probablities:[0.40121323 0.17666191 0.11519095 0.06054711 0.03178187 0.03171466
 0.03073603 0.03003125 0.01241853 0.01106608]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=0.05000000074505806,M=0.05000000074505806
----
 Tree depth: 9
 Node: action=1
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   628 50286 21809   685  3132    25    15    60
  42304]]
• Child Action scores:[0.77887595 0.5486729  0.29939017 0.10296052 0.0556425  0.05189736
 0.0060903  0.00584346 0.00477616 0.00442296]
• Child averaged monte carlo:-0.5
• Child probablities:[0.3990931  0.2811379  0.15340638 0.05275658 0.028511   0.02659201
 0.00312065 0.00299417 0.00244729 0.00226631]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 9
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   220   198 50286 21809   685  3132    25    15
     60]]
• Child Action scores:[0.30123195 0.18058997 0.34917158 0.2948631  0.16961172 0.15565428
 0.08517039 0.08056053 0.05147295 0.04646895]
• Child averaged monte carlo:0.02500000037252903
• Child probablities:[0.18205212 0.16709419 0.12651144 0.10683446 0.06145352 0.05639648
 0.03085884 0.0291886  0.01864962 0.01683658]
• Child visitation:[1 1 0 0 0 0 0 0 0 0]
• N=3.0,Q=0.02500000037252903,M=0.02500000037252903
----
 Tree depth: 9
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776 50286   198 50286 21809   685  3132    25    15
     60]]
• Child Action scores:[ 0.30492663  0.24038808  0.19993943 -0.31916115  0.21399371  0.2129083
  0.11165532  0.10052991  0.06630076  0.06099565]
• Child averaged monte carlo:-0.12857142516544887
• Child probablities:[0.19576912 0.15906721 0.13691047 0.09905893 0.05861016 0.05831288
 0.03058098 0.02753386 0.01815894 0.01670593]
• Child visitation:[1 1 1 1 0 0 0 0 0 0]
• N=6.0,Q=-0.12857142516544887,M=-0.12857142516544887
----
 Tree depth: 9
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776 50286   198 50286 21809   269    16    11    66
     17]]
• Child Action scores:[1.1307437e+00 2.6665384e-02 6.7066360e-04 5.6819560e-04 3.7599876e-04
 4.6315170e-05 4.5491139e-05 3.8859609e-05 2.6391201e-05 2.6380332e-05]
• Child averaged monte carlo:-0.06666666766007741
• Child probablities:[9.8797488e-01 1.1155990e-02 2.8058537e-04 2.3771585e-04 1.5730651e-04
 1.9376866e-05 1.9032117e-05 1.6257685e-05 1.1041280e-05 1.1036733e-05]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=2.0,Q=-0.06666666766007741,M=-0.06666666766007741
----
 Tree depth: 9
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776 50284   198 50286 21809   685  3132    25    15
     60]]
• Child Action scores:[0.34634018 0.19638322 0.1514457  0.31729886 0.16264349 0.16247979
 0.10482782 0.08350003 0.0576754  0.05464348]
• Child averaged monte carlo:2.9802322831784523e-10
• Child probablities:[0.19206864 0.15968975 0.13056414 0.10282636 0.05270752 0.05265447
 0.03397132 0.02705967 0.01869074 0.0177082 ]
• Child visitation:[1 1 1 0 0 0 0 0 0 0]
• N=4.0,Q=2.9802322831784523e-10,M=2.9802322831784523e-10
----
 Tree depth: 9
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776 50284   198 50286 21809   269    16    11    66
     17]]
• Child Action scores:[1.9271791e+00 2.2723123e-02 5.6244066e-04 4.8529831e-04 2.8274173e-04
 3.7045793e-05 3.6616988e-05 3.4654251e-05 2.2141823e-05 2.1232261e-05]
• Child averaged monte carlo:-0.05000000074505806
• Child probablities:[9.8747927e-01 1.1643242e-02 2.8819247e-04 2.4866502e-04 1.4487580e-04
 1.8982124e-05 1.8762406e-05 1.7756707e-05 1.1345386e-05 1.0879330e-05]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.05000000074505806,M=-0.05000000074505806
----
 Tree depth: 9
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776 50285   198 50286 21809   685  3132    25    15
     60]]
• Child Action scores:[ 0.30038068  0.2411107   0.19980791 -0.3176965   0.21013469  0.18758872
  0.11832088  0.0984872   0.07114391  0.06238867]
• Child averaged monte carlo:-0.12857142516544887
• Child probablities:[0.19203389 0.15946305 0.13683842 0.09986121 0.05755322 0.05137817
 0.03240659 0.02697439 0.01948541 0.01708746]
• Child visitation:[1 1 1 1 0 0 0 0 0 0]
• N=6.0,Q=-0.12857142516544887,M=-0.12857142516544887
----
 Tree depth: 9
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776 50285   198 50286 21809   269    16    11    66
     17]]
• Child Action scores:[5.1733822e-01 4.3882057e-02 1.0268312e-03 9.2348433e-04 5.4878101e-04
 7.1474366e-05 6.8037087e-05 6.2673440e-05 4.2760446e-05 4.1487558e-05]
• Child averaged monte carlo:-0.08571428912026542
• Child probablities:[9.8709780e-01 1.2018737e-02 2.8123602e-04 2.5293062e-04 1.5030414e-04
 1.9575920e-05 1.8634493e-05 1.7165459e-05 1.1711543e-05 1.1362915e-05]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=6.0,Q=-0.08571428912026542,M=-0.08571428912026542
----
 Tree depth: 9
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776 50285   198 50286 21809   269    16    11   269
     17]]
• Child Action scores:[1.8777088e+00 7.0248641e-02 1.3329921e-03 8.4926881e-04 6.1063294e-04
 1.4522849e-04 9.9792647e-05 8.2438040e-05 4.7915390e-05 3.3500131e-05]
• Child averaged monte carlo:-0.05000000074505806
• Child probablities:[9.6213084e-01 3.5995137e-02 6.8302010e-04 4.3516213e-04 3.1288600e-04
 7.4414529e-05 5.1133375e-05 4.2240939e-05 2.4551664e-05 1.7165341e-05]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.05000000074505806,M=-0.05000000074505806
----
 Tree depth: 9
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   197   198 50286 21809   685  3132    25    15
     60]]
• Child Action scores:[0.3311412  0.20402528 0.1396699  0.33896628 0.16093536 0.15192306
 0.10149582 0.08995738 0.06021118 0.05617783]
• Child averaged monte carlo:2.9802322831784523e-10
• Child probablities:[0.18221763 0.16464284 0.12293182 0.10984807 0.05215397 0.04923338
 0.03289153 0.02915229 0.01951251 0.01820543]
• Child visitation:[1 1 1 0 0 0 0 0 0 0]
• N=4.0,Q=2.9802322831784523e-10,M=2.9802322831784523e-10
----
 Tree depth: 9
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   197   198 50286 21809   269    16    11    66
     17]]
• Child Action scores:[1.9285647e+00 2.1277811e-02 6.7983812e-04 4.5975589e-04 2.5509740e-04
 3.8247483e-05 3.1996002e-05 3.1118954e-05 2.2614076e-05 2.1958151e-05]
• Child averaged monte carlo:-0.05000000074505806
• Child probablities:[9.88189220e-01 1.09026702e-02 3.48346482e-04 2.35577172e-04
 1.30710949e-04 1.95978646e-05 1.63946297e-05 1.59452338e-05
 1.15873672e-05 1.12512735e-05]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.05000000074505806,M=-0.05000000074505806
----
 Tree depth: 10
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198 50286 21809   269    16    11    66    17
     11    66]]
• Child Action scores:[0.13593058 0.00941953 0.00748217 0.00162815 0.00081789 0.00049533
 0.00038923 0.00033757 0.00029085 0.00027019]
• Child averaged monte carlo:-0.09999999072816637
• Child probablities:[9.9729115e-01 1.1376248e-03 9.0364367e-04 1.9663660e-04 9.8778575e-05
 5.9822254e-05 4.7008438e-05 4.0768784e-05 3.5127199e-05 3.2631920e-05]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=35.0,Q=-0.09999999072816637,M=-0.09999999072816637
----
 Tree depth: 10
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198 50286 21809   269    16    11   269    17
     11   269]]
• Child Action scores:[5.9274846e-01 6.1204052e-03 2.3384609e-03 2.2499054e-03 1.2299716e-03
 8.7961816e-04 6.6452811e-04 5.5540347e-04 3.4257639e-04 2.5582142e-04]
• Child averaged monte carlo:-0.08333333333333333
• Child probablities:[9.9510300e-01 1.8106123e-03 6.9179182e-04 6.6559424e-04 3.6386508e-04
 2.6021930e-04 1.9658875e-04 1.6430617e-04 1.0134510e-04 7.5680189e-05]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=5.0,Q=-0.08333333333333333,M=-0.08333333333333333
----
 Tree depth: 10
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198 50286 21809   685  3132    25    15    60
    269    26]]
• Child Action scores:[0.8175726  0.02730601 0.02578662 0.01466366 0.00375598 0.00218827
 0.00146798 0.00095419 0.00092513 0.00086711]
• Child averaged monte carlo:0.0800000011920929
• Child probablities:[9.6257555e-01 8.8489996e-03 8.3566150e-03 4.7520199e-03 1.2171930e-03
 7.0914871e-04 4.7572589e-04 3.0922086e-04 2.9980546e-04 2.8100371e-04]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=4.0,Q=0.0800000011920929,M=0.0800000011920929
----
 Tree depth: 10
 Node: action=1
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198 50286 21809   685  3132    25    15    60
    269   259]]
• Child Action scores:[0.9991355  0.30514598 0.14099039 0.12780006 0.08901826 0.06590389
 0.02994459 0.02452973 0.01875344 0.01495496]
• Child averaged monte carlo:-0.5
• Child probablities:[0.51195323 0.15635565 0.07224295 0.06548427 0.04561262 0.03376891
 0.0153435  0.01256894 0.00960919 0.00766287]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 10
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198 50286 21809   685  3132    25    15    60
   3283    26]]
• Child Action scores:[1.8693334e+00 4.8984271e-02 1.1260312e-02 4.1178279e-03 3.0034871e-03
 7.8324939e-04 7.1769801e-04 5.7865656e-04 3.2550708e-04 2.9955330e-04]
• Child averaged monte carlo:-0.05000000074505806
• Child probablities:[9.5783937e-01 2.5099354e-02 5.7697413e-03 2.1099595e-03 1.5389754e-03
 4.0133402e-04 3.6774576e-04 2.9650144e-04 1.6678860e-04 1.5348998e-04]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.05000000074505806,M=-0.05000000074505806
----
 Tree depth: 10
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198 50286 21809   685  3132    25    15    60
  42304    62]]
• Child Action scores:[0.30373707 0.29274642 0.2919908  0.1908057  0.16223645 0.12791754
 0.06843956 0.04433082 0.03423641 0.02786854]
• Child averaged monte carlo:-0.05000000074505806
• Child probablities:[0.15563373 0.15000217 0.14961497 0.09776812 0.08312935 0.06554446
 0.03506817 0.02271494 0.01754261 0.01427973]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.05000000074505806,M=-0.05000000074505806
----
 Tree depth: 10
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198 50285 21809   685  3132    25    15    60
    269    26]]
• Child Action scores:[1.8368188e+00 3.8312357e-02 2.5698749e-02 7.8821694e-03 4.9410486e-03
 2.5179861e-03 1.2511241e-03 1.0911665e-03 8.7816949e-04 6.1682845e-04]
• Child averaged monte carlo:0.05000000074505806
• Child probablities:[9.4117898e-01 1.9631106e-02 1.3167942e-02 4.0387940e-03 2.5317746e-03
 1.2902066e-03 6.4107124e-04 5.5910961e-04 4.4997071e-04 3.1606056e-04]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=0.05000000074505806,M=0.05000000074505806
----
 Tree depth: 10
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198   220   198 50286 21809   685  3132    25
     15    60]]
• Child Action scores:[ 0.32372463  0.1999876   0.19649953 -0.29683435  0.22167824  0.19744055
  0.15903392  0.07220557  0.0705865   0.05582808]
• Child averaged monte carlo:-0.12857142516544887
• Child probablities:[0.21121474 0.13693686 0.13502617 0.11128897 0.06071486 0.05407646
 0.04355737 0.01977619 0.01933274 0.0152906 ]
• Child visitation:[1 1 1 1 0 0 0 0 0 0]
• N=6.0,Q=-0.12857142516544887,M=-0.12857142516544887
----
 Tree depth: 10
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198   220   198 50286 21809   269    16    11
     66    17]]
• Child Action scores:[1.1316730e+00 2.4245068e-02 9.3254691e-04 7.0972589e-04 4.6254677e-04
 5.2917854e-05 4.8857815e-05 4.3556280e-05 3.5114263e-05 3.4185105e-05]
• Child averaged monte carlo:-0.06666666766007741
• Child probablities:[9.8875242e-01 1.0143403e-02 3.9014942e-04 2.9692784e-04 1.9351557e-04
 2.2139229e-05 2.0440631e-05 1.8222630e-05 1.4690745e-05 1.4302014e-05]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=2.0,Q=-0.06666666766007741,M=-0.06666666766007741
----
 Tree depth: 10
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   220   198 50286 21809   685  3132    25    15
     60   269]]
• Child Action scores:[0.8828207  0.27367502 0.21029228 0.11056247 0.06896925 0.0613327
 0.05731095 0.04837013 0.02631474 0.02432365]
• Child averaged monte carlo:0.05000000074505806
• Child probablities:[0.45235398 0.14023004 0.10775297 0.05665179 0.03533958 0.03142664
 0.02936591 0.02478467 0.01348357 0.01246335]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=0.05000000074505806,M=0.05000000074505806
----
 Tree depth: 10
 Node: action=1
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   220   198 50286 21809   685  3132    25    15
     60  3283]]
• Child Action scores:[1.5830129  0.18504673 0.07652055 0.01454927 0.01227145 0.01084407
 0.0104358  0.00779717 0.00627963 0.00556852]
• Child averaged monte carlo:-0.05000000074505806
• Child probablities:[0.8111298  0.09481724 0.03920884 0.00745499 0.00628784 0.00555646
 0.00534726 0.00399524 0.00321766 0.00285329]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.05000000074505806,M=-0.05000000074505806
----
 Tree depth: 10
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776 50286   198 50286 21809   685  3132    25    15
     60   269]]
• Child Action scores:[0.5910215  0.33780968 0.26553956 0.13021736 0.085018   0.07178569
 0.06436054 0.06206208 0.02957158 0.02884438]
• Child averaged monte carlo:0.06666666766007741
• Child probablities:[0.45269403 0.14132935 0.11109371 0.054479   0.03556896 0.03003296
 0.0269265  0.0259649  0.01237185 0.01206762]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=2.0,Q=0.06666666766007741,M=0.06666666766007741
----
 Tree depth: 10
 Node: action=1
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776 50286   198 50286 21809   685  3132    25    15
     60  3283]]
• Child Action scores:[1.5880783  0.17685021 0.07730377 0.01554239 0.01315126 0.01118674
 0.01086583 0.00735249 0.00631435 0.0057415 ]
• Child averaged monte carlo:-0.05000000074505806
• Child probablities:[0.8137253  0.09061738 0.03961016 0.00796386 0.00673866 0.00573204
 0.00556761 0.00376739 0.00323545 0.00294193]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.05000000074505806,M=-0.05000000074505806
----
 Tree depth: 10
 Node: action=2
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776 50286   198 50286 21809   685  3132    25    15
     60 42304]]
• Child Action scores:[0.7373954  0.51773506 0.28852153 0.14799109 0.06484146 0.05722086
 0.00784462 0.0070518  0.00692959 0.00629331]
• Child averaged monte carlo:-0.05000000074505806
• Child probablities:[0.3778386  0.2652855  0.14783734 0.07583007 0.03322452 0.02931975
 0.00401955 0.00361332 0.00355069 0.00322467]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.05000000074505806,M=-0.05000000074505806
----
 Tree depth: 10
 Node: action=3
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776 50286   198 50286 21809   685  3132    25    15
     60  2160]]
• Child Action scores:[0.7176984  0.59515864 0.19038601 0.11395648 0.0757517  0.04003302
 0.02599836 0.01956054 0.01915544 0.01229993]
• Child averaged monte carlo:-0.5
• Child probablities:[0.36774594 0.30495703 0.09755307 0.05839087 0.03881488 0.02051277
 0.01332146 0.01002275 0.00981517 0.00630244]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 10
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776 50286   198 50286 21809   269    16    11    66
     17    11]]
• Child Action scores:[1.9238780e+00 2.3554023e-02 1.5602794e-03 1.3359224e-03 1.8510470e-04
 1.3731800e-04 1.3101676e-04 4.5791290e-05 4.3181019e-05 4.2835829e-05]
• Child averaged monte carlo:-0.05000000074505806
• Child probablities:[9.85787749e-01 1.20689925e-02 7.99481233e-04 6.84521568e-04
 9.48469460e-05 7.03612241e-05 6.71324888e-05 2.34632844e-05
 2.21257906e-05 2.19489157e-05]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.05000000074505806,M=-0.05000000074505806
----
 Tree depth: 10
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776 50284   198 50286 21809   685  3132    25    15
     60   269]]
• Child Action scores:[0.89219165 0.27324829 0.21051858 0.10865999 0.07328586 0.06103113
 0.05028871 0.04764238 0.02364432 0.02219984]
• Child averaged monte carlo:0.05000000074505806
• Child probablities:[0.45715562 0.14001139 0.10786892 0.05567697 0.0375514  0.03127212
 0.02576775 0.02441177 0.01211526 0.01137511]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=0.05000000074505806,M=0.05000000074505806
----
 Tree depth: 10
 Node: action=1
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776 50284   198 50286 21809   685  3132    25    15
     60  3283]]
• Child Action scores:[1.5841428  0.17963488 0.080982   0.01474932 0.01239779 0.0112278
 0.01013025 0.00760468 0.00598636 0.00544513]
• Child averaged monte carlo:-0.05000000074505806
• Child probablities:[0.81170875 0.09204423 0.04149487 0.0075575  0.00635258 0.00575308
 0.0051907  0.00389661 0.00306739 0.00279007]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.05000000074505806,M=-0.05000000074505806
----
 Tree depth: 10
 Node: action=2
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776 50284   198 50286 21809   685  3132    25    15
     60 42304]]
• Child Action scores:[0.76603705 0.53183013 0.26245278 0.1371842  0.06341879 0.05383474
 0.00818508 0.00663154 0.00645833 0.00589565]
• Child averaged monte carlo:-0.05000000074505806
• Child probablities:[0.39251447 0.27250776 0.1344798  0.07029267 0.03249555 0.02758471
 0.004194   0.00339798 0.00330922 0.00302091]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.05000000074505806,M=-0.05000000074505806
----
 Tree depth: 10
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776 50285   198 50286 21809   685  3132    25    15
     60   269]]
• Child Action scores:[0.5932205  0.35316542 0.2574123  0.12582897 0.0840382  0.07064722
 0.06319817 0.06203257 0.02858503 0.02847001]
• Child averaged monte carlo:0.06666666766007741
• Child probablities:[0.45453402 0.14775373 0.10769352 0.05264303 0.03515904 0.02955666
 0.0264402  0.02595255 0.01195911 0.01191099]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=2.0,Q=0.06666666766007741,M=0.06666666766007741
----
 Tree depth: 10
 Node: action=1
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776 50285   198 50286 21809   685  3132    25    15
     60  3283]]
• Child Action scores:[1.5900308  0.17870983 0.07401805 0.01534234 0.01286304 0.01081109
 0.01071869 0.00749188 0.00606887 0.00599718]
• Child averaged monte carlo:-0.05000000074505806
• Child probablities:[0.81472576 0.09157024 0.03792657 0.00786136 0.00659098 0.00553956
 0.00549222 0.00383881 0.00310967 0.00307293]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.05000000074505806,M=-0.05000000074505806
----
 Tree depth: 10
 Node: action=2
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776 50285   198 50286 21809   685  3132    25    15
     60 42304]]
• Child Action scores:[0.7440413  0.52818626 0.27897772 0.1417138  0.06187169 0.05793469
 0.00844051 0.00677893 0.00675086 0.00597179]
• Child averaged monte carlo:-0.05000000074505806
• Child probablities:[0.38124394 0.27064064 0.14294712 0.07261361 0.03170282 0.02968552
 0.00432489 0.0034735  0.00345911 0.00305992]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.05000000074505806,M=-0.05000000074505806
----
 Tree depth: 10
 Node: action=3
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776 50285   198 50286 21809   685  3132    25    15
     60  2160]]
• Child Action scores:[0.7152348  0.6043686  0.18288691 0.11511369 0.07400131 0.03687587
 0.02879618 0.02137356 0.01882982 0.01224766]
• Child averaged monte carlo:-0.5
• Child probablities:[0.3664836  0.3096762  0.09371056 0.05898382 0.03791799 0.01889505
 0.01475506 0.01095173 0.00964833 0.00627565]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 10
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776 50285   198 50286 21809   269    16    11    66
     17    11]]
• Child Action scores:[5.8681279e-01 3.9132573e-02 2.6777757e-03 2.1643967e-03 3.2998182e-04
 2.4280891e-04 2.2356323e-04 8.0116326e-05 7.6842240e-05 7.4567892e-05]
• Child averaged monte carlo:-0.08333333333333333
• Child probablities:[9.8632312e-01 1.1576671e-02 7.9217198e-04 6.4029801e-04 9.7619217e-05
 7.1830669e-05 6.6137181e-05 2.3700981e-05 2.2732402e-05 2.2059576e-05]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=5.0,Q=-0.08333333333333333,M=-0.08333333333333333
----
 Tree depth: 10
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   197   198 50286 21809   685  3132    25    15
     60   269]]
• Child Action scores:[0.852947   0.2775999  0.22729674 0.1039672  0.07075574 0.05746194
 0.05721347 0.04897033 0.02712224 0.02462124]
• Child averaged monte carlo:0.05000000074505806
• Child probablities:[0.43704683 0.14224114 0.11646599 0.0532724  0.03625498 0.02944328
 0.02931597 0.02509221 0.01389734 0.01261583]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=0.05000000074505806,M=0.05000000074505806
----
 Tree depth: 10
 Node: action=1
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   197   198 50286 21809   685  3132    25    15
     60  3283]]
• Child Action scores:[1.5798339  0.17851321 0.08221273 0.01627335 0.01210025 0.01169338
 0.01104897 0.00834262 0.00677226 0.00603791]
• Child averaged monte carlo:-0.05000000074505806
• Child probablities:[0.8095009  0.0914695  0.04212549 0.0083384  0.00620012 0.00599165
 0.00566145 0.00427472 0.00347008 0.0030938 ]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.05000000074505806,M=-0.05000000074505806
----
 Tree depth: 10
 Node: action=2
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   197   198 50286 21809   685  3132    25    15
     60 42304]]
• Child Action scores:[0.7132314  0.5402186  0.2978799  0.13400863 0.0680139  0.06134075
 0.00851609 0.00689938 0.00647223 0.00584556]
• Child averaged monte carlo:-0.05000000074505806
• Child probablities:[0.36545706 0.27680597 0.15263253 0.06866551 0.03485006 0.03143077
 0.00436361 0.00353522 0.00331634 0.00299524]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.05000000074505806,M=-0.05000000074505806
----
 Tree depth: 11
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198 50286 21809   269    16    11    66    17
     11    66    18]]
• Child Action scores:[1.3287322e-01 1.5490231e-01 1.1181730e-03 6.8825076e-04 5.2216137e-04
 2.0019614e-04 8.1311002e-05 7.0483249e-05 6.4372864e-05 4.1860741e-05]
• Child averaged monte carlo:-0.09999999318804059
• Child probablities:[9.5370090e-01 4.5872472e-02 1.3696068e-04 8.4301166e-05 6.3957523e-05
 2.4521249e-05 9.9594690e-06 8.6332202e-06 7.8847825e-06 5.1273601e-06]
• Child visitation:[1 1 0 0 0 0 0 0 0 0]
• N=34.0,Q=-0.09999999318804059,M=-0.09999999318804059
----
 Tree depth: 11
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198 50286 21809   269    16    11   269    17
     11   269    18]]
• Child Action scores:[5.63778281e-01 5.27711987e-01 9.91835608e-04 6.34647557e-04
 5.03290154e-04 1.53036439e-04 1.06729945e-04 4.31037115e-05
 3.39030339e-05 2.61570931e-05]
• Child averaged monte carlo:-0.0800000011920929
• Child probablities:[8.2802993e-01 1.7101447e-01 3.2142201e-04 2.0566887e-04 1.6310015e-04
 4.9594189e-05 3.4587742e-05 1.3968526e-05 1.0986882e-05 8.4766725e-06]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=4.0,Q=-0.0800000011920929,M=-0.0800000011920929
----
 Tree depth: 11
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198 50286 21809   685  3132    25    15    60
    269    26   198]]
• Child Action scores:[9.8280609e-01 3.7655178e-03 3.7593176e-03 1.1979117e-03 6.1218831e-04
 2.2100551e-04 1.9731463e-04 1.4772321e-04 1.3915107e-04 6.6273649e-05]
• Child averaged monte carlo:0.07500000298023224
• Child probablities:[9.9580377e-01 1.3643181e-03 1.3620716e-03 4.3402598e-04 2.2180735e-04
 8.0074460e-05 7.1490809e-05 5.3522905e-05 5.0417057e-05 2.4012192e-05]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=3.0,Q=0.07500000298023224,M=0.07500000298023224
----
 Tree depth: 11
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198   220   198 50286 21809   685  3132    25
     15    60   269]]
• Child Action scores:[0.48338422 0.43619448 0.36498976 0.12930185 0.0913048  0.08499805
 0.07557201 0.06993695 0.02794834 0.02693277]
• Child averaged monte carlo:0.06666666766007741
• Child probablities:[0.36262968 0.18249057 0.15270068 0.05409598 0.03819917 0.03556061
 0.03161704 0.02925951 0.01169274 0.01126786]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=2.0,Q=0.06666666766007741,M=0.06666666766007741
----
 Tree depth: 11
 Node: action=1
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198   220   198 50286 21809   685  3132    25
     15    60  3283]]
• Child Action scores:[1.5376284  0.20914747 0.08454255 0.020196   0.01234048 0.01147735
 0.01070995 0.00822173 0.00797662 0.0073846 ]
• Child averaged monte carlo:-0.05000000074505806
• Child probablities:[0.787875   0.10716637 0.04331928 0.01034835 0.00632322 0.00588095
 0.00548774 0.00421278 0.00408719 0.00378384]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.05000000074505806,M=-0.05000000074505806
----
 Tree depth: 11
 Node: action=2
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198   220   198 50286 21809   685  3132    25
     15    60 42304]]
• Child Action scores:[0.8243788  0.5124878  0.29009488 0.11182534 0.06285167 0.03417564
 0.00658906 0.00652338 0.00515408 0.00492437]
• Child averaged monte carlo:-0.05000000074505806
• Child probablities:[0.42240858 0.26259682 0.14864352 0.05729888 0.03220496 0.01751147
 0.00337621 0.00334256 0.00264093 0.00252323]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.05000000074505806,M=-0.05000000074505806
----
 Tree depth: 11
 Node: action=3
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198   220   198 50286 21809   685  3132    25
     15    60  2160]]
• Child Action scores:[0.8030842  0.62282366 0.16150926 0.07121038 0.06049312 0.04595898
 0.01815952 0.017701   0.01624385 0.01096848]
• Child averaged monte carlo:-0.5
• Child probablities:[0.4114973  0.31913248 0.08275674 0.03648793 0.03099645 0.02354921
 0.00930487 0.00906993 0.00832329 0.00562021]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 11
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198   220   198 50286 21809   269    16    11
     66    17    11]]
• Child Action scores:[1.9242673e+00 2.3271890e-02 1.3873446e-03 1.3006970e-03 1.8630120e-04
 1.5859019e-04 1.3097031e-04 5.2072948e-05 4.5034449e-05 4.3068994e-05]
• Child averaged monte carlo:-0.05000000074505806
• Child probablities:[9.8598725e-01 1.1924429e-02 7.1087008e-04 6.6647219e-04 9.5460033e-05
 8.1261016e-05 6.7108689e-05 2.6681981e-05 2.3075481e-05 2.2068389e-05]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.05000000074505806,M=-0.05000000074505806
----
 Tree depth: 11
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776 50286   198 50286 21809   685  3132    25    15
     60   269    26]]
• Child Action scores:[1.8375186e+00 3.1059194e-02 2.3005635e-02 1.7294431e-02 6.5539177e-03
 2.1678417e-03 1.8350149e-03 1.6711572e-03 1.4762545e-03 8.6293306e-04]
• Child averaged monte carlo:0.05000000074505806
• Child probablities:[9.4153756e-01 1.5914613e-02 1.1788000e-02 8.8616014e-03 3.3582025e-03
 1.1107939e-03 9.4025471e-04 8.5629459e-04 7.5642724e-04 4.4216364e-04]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=0.05000000074505806,M=0.05000000074505806
----
 Tree depth: 11
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776 50285   198 50286 21809   685  3132    25    15
     60   269    26]]
• Child Action scores:[1.8289208e+00 3.2787096e-02 1.8662721e-02 1.5581752e-02 1.4420224e-02
 2.5550297e-03 2.3622408e-03 2.1787731e-03 1.8728825e-03 1.0048478e-03]
• Child averaged monte carlo:0.05000000074505806
• Child probablities:[9.3713212e-01 1.6799984e-02 9.5627075e-03 7.9840310e-03 7.3888684e-03
 1.3091875e-03 1.2104033e-03 1.1163951e-03 9.5965789e-04 5.1488023e-04]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=0.05000000074505806,M=0.05000000074505806
----
 Tree depth: 11
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776 50285   198 50286 21809   269    16    11    66
     17    11    66]]
• Child Action scores:[6.9391561e-01 4.2459415e-03 3.3663586e-03 7.4517139e-04 3.6843377e-04
 2.2705126e-04 1.7264849e-04 1.5301410e-04 1.4627914e-04 1.1173505e-04]
• Child averaged monte carlo:-0.0800000011920929
• Child probablities:[9.9672323e-01 1.3759731e-03 1.0909286e-03 2.4148608e-04 1.1939753e-04
 7.3580013e-05 5.5949822e-05 4.9586950e-05 4.7404366e-05 3.6209734e-05]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=4.0,Q=-0.0800000011920929,M=-0.0800000011920929
----
 Tree depth: 12
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198 50286 21809   269    16    11    66    17
     11    66    18    11]]
• Child Action scores:[0.13101    0.04489999 0.00492853 0.00342302 0.00131299 0.00071856
 0.00051185 0.00024089 0.00022582 0.00020798]
• Child averaged monte carlo:-0.12666664918263754
• Child probablities:[9.9215698e-01 5.9402753e-03 6.5204554e-04 4.5286637e-04 1.7370933e-04
 9.5065829e-05 6.7718480e-05 3.1870288e-05 2.9876386e-05 2.7515440e-05]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=29.0,Q=-0.12666664918263754,M=-0.12666664918263754
----
 Tree depth: 12
 Node: action=1
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198 50286 21809   269    16    11    66    17
     11    66    18    26]]
• Child Action scores:[8.2962787e-01 3.0219652e-02 1.0119612e-02 6.0514617e-03 9.8217011e-04
 7.4221846e-04 6.3451420e-04 5.2830717e-04 4.2719688e-04 4.0759990e-04]
• Child averaged monte carlo:0.0800000011920929
• Child probablities:[9.7820252e-01 9.7932173e-03 3.2794408e-03 1.9610841e-03 3.1828973e-04
 2.4052913e-04 2.0562563e-04 1.7120736e-04 1.3844077e-04 1.3209002e-04]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=4.0,Q=0.0800000011920929,M=0.0800000011920929
----
 Tree depth: 12
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198 50286 21809   269    16    11   269    17
     11   269    18    11]]
• Child Action scores:[8.18323314e-01 6.10693395e-02 3.93902399e-02 1.26556959e-03
 5.26799588e-04 3.23187880e-04 2.13628824e-04 1.73977387e-04
 1.43102254e-04 1.18420714e-04]
• Child averaged monte carlo:-0.07500000298023224
• Child probablities:[9.6194559e-01 2.2126572e-02 1.4271826e-02 4.5853970e-04 1.9086942e-04
 1.1709706e-04 7.7401746e-05 6.3035288e-05 5.1848641e-05 4.2906056e-05]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=3.0,Q=-0.07500000298023224,M=-0.07500000298023224
----
 Tree depth: 12
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198 50286 21809   685  3132    25    15    60
    269    26   198 50286]]
• Child Action scores:[0.69034463 0.57129115 0.29227492 0.03386394 0.03203814 0.03100639
 0.01191703 0.01045076 0.00999665 0.00891194]
• Child averaged monte carlo:0.06666666766007741
• Child probablities:[0.53580165 0.23901094 0.12227899 0.01416765 0.01340379 0.01297213
 0.00498573 0.00437228 0.0041823  0.00372849]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=2.0,Q=0.06666666766007741,M=0.06666666766007741
----
 Tree depth: 12
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198   220   198 50286 21809   685  3132    25
     15    60   269    26]]
• Child Action scores:[1.8629205e+00 2.2349866e-02 2.1380642e-02 1.0615886e-02 3.0240561e-03
 1.6992174e-03 9.3414669e-04 8.4273459e-04 6.0908642e-04 3.6418252e-04]
• Child averaged monte carlo:0.05000000074505806
• Child probablities:[9.5455343e-01 1.1451987e-02 1.0955360e-02 5.4395399e-03 1.5495149e-03
 8.7067252e-04 4.7865324e-04 4.3181400e-04 3.1209359e-04 1.8660574e-04]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=0.05000000074505806,M=0.05000000074505806
----
 Tree depth: 12
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776 50285   198 50286 21809   269    16    11    66
     17    11    66    18]]
• Child Action scores:[7.9963005e-01 1.5955500e-01 4.1076919e-04 3.6896762e-04 2.9882870e-04
 7.9572339e-05 3.1425749e-05 3.1226424e-05 2.8976829e-05 1.8014785e-05]
• Child averaged monte carlo:-0.07500000298023224
• Child probablities:[9.4162685e-01 5.7809781e-02 1.4882942e-04 1.3368392e-04 1.0827127e-04
 2.8830556e-05 1.1386141e-05 1.1313921e-05 1.0498851e-05 6.5270965e-06]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=3.0,Q=-0.07500000298023224,M=-0.07500000298023224
----
 Tree depth: 13
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198 50286 21809   269    16    11    66    17
     11    66    18    11    66]]
• Child Action scores:[0.13616967 0.00983269 0.00389807 0.00155172 0.00068671 0.00062677
 0.00039257 0.0003626  0.00028496 0.00013642]
• Child averaged monte carlo:-0.12758619209815716
• Child probablities:[9.9747330e-01 1.3231051e-03 5.2453100e-04 2.0880169e-04 9.2404574e-05
 8.4339052e-05 5.2825566e-05 4.8791968e-05 3.8344908e-05 1.8356866e-05]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=28.0,Q=-0.12758619209815716,M=-0.12758619209815716
----
 Tree depth: 13
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198 50286 21809   269    16    11    66    17
     11    66    18    26   198]]
• Child Action scores:[9.8551327e-01 8.5002510e-04 4.2742761e-04 3.9400064e-04 2.0049718e-04
 1.6365164e-04 5.6381152e-05 4.4275690e-05 4.2275729e-05 3.8666440e-05]
• Child averaged monte carlo:0.07500000298023224
• Child probablities:[9.9874628e-01 3.0798011e-04 1.5486508e-04 1.4275385e-04 7.2643903e-05
 5.9294074e-05 2.0427953e-05 1.6041917e-05 1.5317293e-05 1.4009579e-05]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=3.0,Q=0.07500000298023224,M=0.07500000298023224
----
 Tree depth: 13
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198 50286 21809   269    16    11   269    17
     11   269    18    11   269]]
• Child Action scores:[1.1438006e+00 5.8740715e-04 5.3210522e-04 3.5527887e-04 1.9578045e-04
 1.8089058e-04 1.1167922e-04 9.6012380e-05 8.4330131e-05 5.7725745e-05]
• Child averaged monte carlo:-0.06666666766007741
• Child probablities:[9.9890006e-01 2.4575338e-04 2.2261673e-04 1.4863793e-04 8.1908620e-05
 7.5679149e-05 4.6723206e-05 4.0168674e-05 3.5281177e-05 2.4150706e-05]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=2.0,Q=-0.06666666766007741,M=-0.06666666766007741
----
 Tree depth: 13
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198 50286 21809   685  3132    25    15    60
    269    26   198 50286 26676]]
• Child Action scores:[1.9507641e+00 3.0740615e-04 6.7123416e-05 4.2719006e-05 3.7103022e-05
 3.6474885e-05 3.4393579e-05 2.3547798e-05 2.2667475e-05 2.1707650e-05]
• Child averaged monte carlo:0.05000000074505806
• Child probablities:[9.99564111e-01 1.57513743e-04 3.43937827e-05 2.18890564e-05
 1.90114479e-05 1.86895923e-05 1.76231388e-05 1.20658024e-05
 1.16147285e-05 1.11229183e-05]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=0.05000000074505806,M=0.05000000074505806
----
 Tree depth: 13
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776 50285   198 50286 21809   269    16    11    66
     17    11    66    18    11]]
• Child Action scores:[1.1325904e+00 1.8332263e-02 2.1801754e-03 1.7264774e-03 7.2551362e-04
 3.0838532e-04 2.2338261e-04 9.9207908e-05 9.6191543e-05 9.3752031e-05]
• Child averaged monte carlo:-0.06666666766007741
• Child probablities:[9.8952007e-01 7.6696645e-03 9.1211940e-04 7.2230591e-04 3.0353296e-04
 1.2901908e-04 9.3456525e-05 4.1505587e-05 4.0243631e-05 3.9223014e-05]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=2.0,Q=-0.06666666766007741,M=-0.06666666766007741
----
 Tree depth: 14
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198 50286 21809   269    16    11    66    17
     11    66    18    11    66    19]]
• Child Action scores:[1.38072327e-01 7.30361193e-02 4.81168739e-04 1.69559426e-04
 1.04470484e-04 8.12388826e-05 7.26389553e-05 5.20396170e-05
 4.17920419e-05 2.85292808e-05]
• Child averaged monte carlo:-0.12857141665049962
• Child probablities:[9.8982227e-01 1.0001833e-02 6.5893000e-05 2.3220085e-05 1.4306569e-05
 1.1125149e-05 9.9474437e-06 7.1264949e-06 5.7231546e-06 3.9069037e-06]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=27.0,Q=-0.12857141665049962,M=-0.12857141665049962
----
 Tree depth: 14
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198 50286 21809   269    16    11    66    17
     11    66    18    26   198 50286]]
• Child Action scores:[0.9144282  0.4204239  0.06978788 0.02540561 0.02382052 0.02239541
 0.01446745 0.01177704 0.0071292  0.00373381]
• Child averaged monte carlo:0.06666666766007741
• Child probablities:[0.7233012  0.17589264 0.02919714 0.01062894 0.00996578 0.00936956
 0.00605275 0.00492716 0.00298264 0.00156211]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=2.0,Q=0.06666666766007741,M=0.06666666766007741
----
 Tree depth: 14
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198 50286 21809   269    16    11   269    17
     11   269    18    11   269    19]]
• Child Action scores:[1.88812923e+00 6.28108829e-02 2.73132318e-04 1.08224274e-04
 7.56265363e-05 5.79804582e-05 2.41652397e-05 1.45712156e-05
 1.40912643e-05 1.34343918e-05]
• Child averaged monte carlo:-0.05000000074505806
• Child probablities:[9.6747029e-01 3.2184057e-02 1.3995197e-04 5.5453707e-05 3.8750750e-05
 2.9708966e-05 1.2382177e-05 7.4662357e-06 7.2203106e-06 6.8837317e-06]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.05000000074505806,M=-0.05000000074505806
----
 Tree depth: 14
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776 50285   198 50286 21809   269    16    11    66
     17    11    66    18    11    66]]
• Child Action scores:[1.9444118e+00 3.9408556e-03 1.4331430e-03 5.7191192e-04 2.3717654e-04
 2.2351842e-04 1.5230311e-04 1.2711040e-04 1.1145284e-04 4.7160429e-05]
• Child averaged monte carlo:-0.05000000074505806
• Child probablities:[9.9630922e-01 2.0192794e-03 7.3433708e-04 2.9304551e-04 1.2152836e-04
 1.1452999e-04 7.8039535e-05 6.5130887e-05 5.7108013e-05 2.4164825e-05]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.05000000074505806,M=-0.05000000074505806
----
 Tree depth: 15
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198 50286 21809   269    16    11    66    17
     11    66    18    11    66    19    11]]
• Child Action scores:[1.4428163e-01 1.4675944e-02 1.5129157e-03 1.2050701e-03 6.7211071e-04
 1.9751184e-04 8.0942511e-05 7.4473923e-05 6.5092245e-05 5.1654315e-05]
• Child averaged monte carlo:-0.1296296207993119
• Child probablities:[9.9729890e-01 2.0466570e-03 2.1098605e-04 1.6805495e-04 9.3730261e-05
 2.7544325e-05 1.1287966e-05 1.0385879e-05 9.0775420e-06 7.2035341e-06]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=26.0,Q=-0.1296296207993119,M=-0.1296296207993119
----
 Tree depth: 15
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198 50286 21809   269    16    11    66    17
     11    66    18    26   198 50286 26676]]
• Child Action scores:[1.9508073e+00 3.1232549e-04 4.5322406e-05 3.8440568e-05 2.9876166e-05
 2.7237655e-05 2.7048794e-05 2.5109166e-05 2.1472091e-05 1.4026415e-05]
• Child averaged monte carlo:0.05000000074505806
• Child probablities:[9.9958628e-01 1.6003440e-04 2.3223029e-05 1.9696801e-05 1.5308435e-05
 1.3956471e-05 1.3859700e-05 1.2865841e-05 1.1002218e-05 7.1870818e-06]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=0.05000000074505806,M=0.05000000074505806
----
 Tree depth: 16
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198 50286 21809   269    16    11    66    17
     11    66    18    11    66    19    11    66]]
• Child Action scores:[1.4921454e-01 3.7891928e-03 9.4584213e-04 3.1200316e-04 2.4192469e-04
 2.1924217e-04 2.0159507e-04 1.2908952e-04 1.1583168e-04 7.2295632e-05]
• Child averaged monte carlo:-0.13076922526726356
• Child probablities:[9.9910706e-01 5.3849409e-04 1.3441659e-04 4.4339751e-05 3.4380679e-05
 3.1157193e-05 2.8649310e-05 1.8345318e-05 1.6461205e-05 1.0274160e-05]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=25.0,Q=-0.13076922526726356,M=-0.13076922526726356
----
 Tree depth: 17
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198 50286 21809   269    16    11    66    17
     11    66    18    11    66    19    11    66    20]]
• Child Action scores:[1.5380968e-01 7.0818909e-03 3.8662367e-04 3.7808271e-04 3.0629052e-04
 5.4978162e-05 4.9913648e-05 4.8893737e-05 3.8938688e-05 3.4330253e-05]
• Child averaged monte carlo:-0.13199999809265137
• Child probablities:[9.9875832e-01 1.0263610e-03 5.6032415e-05 5.4794597e-05 4.4389930e-05
 7.9678493e-06 7.2338621e-06 7.0860488e-06 5.6432877e-06 4.9753990e-06]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=24.0,Q=-0.13199999809265137,M=-0.13199999809265137
----
 Tree depth: 18
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198 50286 21809   269    16    11    66    17
     11    66    18    11    66    19    11    66    20    11]]
• Child Action scores:[1.58540457e-01 1.14246365e-02 7.82645831e-04 7.13352347e-04
 3.37795180e-04 1.22868878e-04 6.07322254e-05 4.05237297e-05
 4.02141995e-05 3.66959903e-05]
• Child averaged monte carlo:-0.13333333532015482
• Child probablities:[9.97905374e-01 1.68988714e-03 1.15765877e-04 1.05516265e-04
 4.99653288e-05 1.81742798e-05 8.98327107e-06 5.99410987e-06
 5.94832545e-06 5.42792577e-06]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=23.0,Q=-0.13333333532015482,M=-0.13333333532015482
----
 Tree depth: 19
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198 50286 21809   269    16    11    66    17
     11    66    18    11    66    19    11    66    20    11    66]]
• Child Action scores:[1.6428159e-01 3.0577132e-03 1.4855160e-04 1.3656217e-04 1.2401727e-04
 8.4088599e-05 7.8431236e-05 7.6959725e-05 7.0321395e-05 6.8305417e-05]
• Child averaged monte carlo:-0.13478261491526727
• Child probablities:[9.99387622e-01 4.62012511e-04 2.24457599e-05 2.06341902e-05
 1.87386868e-05 1.27055682e-05 1.18507560e-05 1.16284145e-05
 1.06253801e-05 1.03207713e-05]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=22.0,Q=-0.13478261491526727,M=-0.13478261491526727
----
 Tree depth: 20
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198 50286 21809   269    16    11    66    17
     11    66    18    11    66    19    11    66    20    11    66    21]]
• Child Action scores:[1.6824061e-01 3.9191440e-02 2.5357792e-04 1.0796390e-04 2.6724669e-05
 1.9846759e-05 1.1369418e-05 1.1042256e-05 6.6383036e-06 4.9952046e-06]
• Child averaged monte carlo:-0.1363636472008445
• Child probablities:[9.9386346e-01 6.0548140e-03 3.9176084e-05 1.6679696e-05 4.1287817e-06
 3.0661909e-06 1.7564986e-06 1.7059543e-06 1.0255733e-06 7.7172552e-07]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=21.0,Q=-0.1363636472008445,M=-0.1363636472008445
----
 Tree depth: 21
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198 50286 21809   269    16    11    66    17
     11    66    18    11    66    19    11    66    20    11    66    21
     11]]
• Child Action scores:[1.7568770e-01 8.0950493e-03 6.6210364e-04 5.1957613e-04 2.7243877e-04
 1.2466213e-04 3.1654472e-05 2.6631953e-05 2.5737259e-05 2.3972749e-05]
• Child averaged monte carlo:-0.13809525398981004
• Child probablities:[9.9838698e-01 1.2800612e-03 1.0469772e-04 8.2160004e-05 4.3080447e-05
 1.9712685e-05 5.0054869e-06 4.2112815e-06 4.0698046e-06 3.7907844e-06]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=20.0,Q=-0.13809525398981004,M=-0.13809525398981004
----
 Tree depth: 22
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198 50286 21809   269    16    11    66    17
     11    66    18    11    66    19    11    66    20    11    66    21
     11    66]]
• Child Action scores:[1.8256497e-01 8.3052320e-04 5.7820394e-04 5.2477239e-04 4.6508576e-04
 6.4050400e-05 4.6004076e-05 3.7231934e-05 3.6974903e-05 3.6192581e-05]
• Child averaged monte carlo:-0.14000000953674316
• Child probablities:[9.9954432e-01 1.3457293e-04 9.3688650e-05 8.5030922e-05 7.5359669e-05
 1.0378337e-05 7.4542204e-06 6.0328362e-06 5.9911886e-06 5.8644259e-06]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=19.0,Q=-0.14000000953674316,M=-0.14000000953674316
----
 Tree depth: 23
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198 50286 21809   269    16    11    66    17
     11    66    18    11    66    19    11    66    20    11    66    21
     11    66    22]]
• Child Action scores:[1.8593824e-01 1.4611155e-01 7.5370912e-04 3.2157605e-04 1.7829171e-04
 9.8887365e-05 8.7096189e-05 8.2070634e-05 2.8498091e-05 2.7968432e-05]
• Child averaged monte carlo:-0.14210527821591026
• Child probablities:[8.9355958e-01 1.0611885e-01 1.2529908e-04 5.3459858e-05 2.9639798e-05
 1.6439360e-05 1.4479157e-05 1.3643691e-05 4.7376161e-06 4.6495638e-06]
• Child visitation:[1 1 0 0 0 0 0 0 0 0]
• N=18.0,Q=-0.14210527821591026,M=-0.14210527821591026
----
 Tree depth: 24
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198 50286 21809   269    16    11    66    17
     11    66    18    11    66    19    11    66    20    11    66    21
     11    66    22    11]]
• Child Action scores:[2.0726915e-01 7.2287858e-02 2.9585056e-02 2.7375154e-03 1.9449398e-03
 7.3495088e-04 4.3050881e-04 3.3429469e-04 2.1453826e-04 1.7751685e-04]
• Child averaged monte carlo:-0.15000000596046448
• Child probablities:[9.7989815e-01 1.3095627e-02 5.3596115e-03 4.9592671e-04 3.5234418e-04
 1.3314327e-04 7.7990728e-05 6.0560633e-05 3.8865626e-05 3.2158849e-05]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=15.0,Q=-0.15000000596046448,M=-0.15000000596046448
----
 Tree depth: 24
 Node: action=1
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198 50286 21809   269    16    11    66    17
     11    66    18    11    66    19    11    66    20    11    66    21
     11    66    22    26]]
• Child Action scores:[1.1239803e+00 2.6791006e-02 5.1385728e-03 4.2594089e-03 3.4440740e-04
 1.4345320e-04 1.1998774e-04 5.5104818e-05 5.3423271e-05 4.9968356e-05]
• Child averaged monte carlo:-0.06666666766007741
• Child probablities:[9.8231560e-01 1.1208546e-02 2.1498234e-03 1.7820079e-03 1.4408963e-04
 6.0016482e-05 5.0199240e-05 2.3054188e-05 2.2350681e-05 2.0905249e-05]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=2.0,Q=-0.06666666766007741,M=-0.06666666766007741
----
 Tree depth: 25
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198 50286 21809   269    16    11    66    17
     11    66    18    11    66    19    11    66    20    11    66    21
     11    66    22    11    66]]
• Child Action scores:[2.23683387e-01 6.30614720e-03 4.71261144e-03 8.12357757e-04
 1.89740254e-04 1.42356308e-04 1.05963896e-04 8.43201560e-05
 7.54302891e-05 7.44230638e-05]
• Child averaged monte carlo:-0.15333334604899088
• Child probablities:[9.9753976e-01 1.1798842e-03 8.8173262e-04 1.5199266e-04 3.5500525e-05
 2.6634958e-05 1.9825913e-05 1.5776355e-05 1.4113056e-05 1.3924603e-05]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=14.0,Q=-0.15333334604899088,M=-0.15333334604899088
----
 Tree depth: 25
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198 50286 21809   269    16    11    66    17
     11    66    18    11    66    19    11    66    20    11    66    21
     11    66    22    26   198]]
• Child Action scores:[1.9499294e+00 4.6171391e-04 2.2722877e-04 1.9807983e-04 9.4536779e-05
 2.7646118e-05 2.7404407e-05 2.6338479e-05 2.0383879e-05 1.6011945e-05]
• Child averaged monte carlo:-0.05000000074505806
• Child probablities:[9.9913639e-01 2.3658045e-04 1.1643116e-04 1.0149535e-04 4.8440288e-05
 1.4165766e-05 1.4041914e-05 1.3495737e-05 1.0444623e-05 8.2044598e-06]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.05000000074505806,M=-0.05000000074505806
----
 Tree depth: 26
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198 50286 21809   269    16    11    66    17
     11    66    18    11    66    19    11    66    20    11    66    21
     11    66    22    11    66    23]]
• Child Action scores:[1.7911007e-01 2.8919375e-01 2.8589463e-03 1.3332511e-03 5.3776236e-04
 1.5726380e-04 9.7255128e-05 4.9075061e-05 4.0787058e-05 3.4266708e-05]
• Child averaged monte carlo:-0.15714287757873535
• Child probablities:[6.4142519e-01 3.5750431e-01 5.5368518e-04 2.5820752e-04 1.0414713e-04
 3.0456898e-05 1.8835164e-05 9.5042478e-06 7.8991307e-06 6.6363505e-06]
• Child visitation:[1 1 0 0 0 0 0 0 0 0]
• N=13.0,Q=-0.15714287757873535,M=-0.15714287757873535
----
 Tree depth: 27
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198 50286 21809   269    16    11    66    17
     11    66    18    11    66    19    11    66    20    11    66    21
     11    66    22    11    66    23    11]]
• Child Action scores:[3.1319535e-01 1.7771585e-02 1.1243428e-02 1.6346668e-03 1.2127624e-03
 3.2393224e-04 2.2464507e-04 1.5740411e-04 1.2176433e-04 8.8614252e-05]
• Child averaged monte carlo:-0.18888889418707955
• Child probablities:[9.9168187e-01 4.2926534e-03 2.7158039e-03 3.9484707e-04 2.9293780e-04
 7.8244506e-05 5.4262098e-05 3.8020316e-05 2.9411674e-05 2.1404408e-05]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=8.0,Q=-0.18888889418707955,M=-0.18888889418707955
----
 Tree depth: 27
 Node: action=1
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198 50286 21809   269    16    11    66    17
     11    66    18    11    66    19    11    66    20    11    66    21
     11    66    22    11    66    23    26]]
• Child Action scores:[6.7976105e-01 4.5890406e-02 8.5502304e-03 4.3831859e-03 5.3218723e-04
 4.8322551e-04 2.6228858e-04 1.4689166e-04 1.3054452e-04 1.2289561e-04]
• Child averaged monte carlo:-0.0800000011920929
• Child probablities:[9.7837514e-01 1.4871604e-02 2.7708546e-03 1.4204496e-03 1.7246476e-04
 1.5659785e-04 8.4999294e-05 4.7602862e-05 4.2305277e-05 3.9826515e-05]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=4.0,Q=-0.0800000011920929,M=-0.0800000011920929
----
 Tree depth: 28
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198 50286 21809   269    16    11    66    17
     11    66    18    11    66    19    11    66    20    11    66    21
     11    66    22    11    66    23    11    66]]
• Child Action scores:[3.4184092e-01 7.1451231e-03 8.7158964e-04 3.6889667e-04 3.6410964e-04
 1.6550776e-04 1.5486927e-04 1.5213709e-04 1.0895084e-04 8.6593216e-05]
• Child averaged monte carlo:-0.20000000298023224
• Child probablities:[9.9735010e-01 1.8305670e-03 2.2329962e-04 9.4510629e-05 9.3284201e-05
 4.2402775e-05 3.9677212e-05 3.8977232e-05 2.7912998e-05 2.2185019e-05]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=7.0,Q=-0.20000000298023224,M=-0.20000000298023224
----
 Tree depth: 28
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198 50286 21809   269    16    11    66    17
     11    66    18    11    66    19    11    66    20    11    66    21
     11    66    22    11    66    23    26   198]]
• Child Action scores:[8.5206527e-01 1.2776329e-03 4.8855925e-04 3.1669144e-04 2.4885955e-04
 1.2115684e-04 6.8699970e-05 5.3550757e-05 4.1663076e-05 3.1121701e-05]
• Child averaged monte carlo:-0.07500000298023224
• Child probablities:[9.9862170e-01 4.6291048e-04 1.7701421e-04 1.1474328e-04 9.0166504e-05
 4.3897406e-05 2.4891295e-05 1.9402449e-05 1.5095317e-05 1.1275978e-05]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=3.0,Q=-0.07500000298023224,M=-0.07500000298023224
----
 Tree depth: 29
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198 50286 21809   269    16    11    66    17
     11    66    18    11    66    19    11    66    20    11    66    21
     11    66    22    11    66    23    11    66    24]]
• Child Action scores:[ 5.36188185e-01 -2.15816736e-01  8.32077640e-04  3.26882116e-04
  1.46143895e-04  1.01411795e-04  7.04595295e-05  6.59239959e-05
  6.57923592e-05  9.43643772e-06]
• Child averaged monte carlo:-0.21428571428571427
• Child probablities:[8.4383053e-01 1.5566838e-01 2.2789549e-04 8.9528861e-05 4.0026956e-05
 2.7775402e-05 1.9297970e-05 1.8055745e-05 1.8019691e-05 2.5845204e-06]
• Child visitation:[1 1 0 0 0 0 0 0 0 0]
• N=6.0,Q=-0.21428571428571427,M=-0.21428571428571427
----
 Tree depth: 29
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198 50286 21809   269    16    11    66    17
     11    66    18    11    66    19    11    66    20    11    66    21
     11    66    22    11    66    23    26   198 50286]]
• Child Action scores:[0.7597648  0.6341637  0.0349799  0.01808231 0.01143395 0.0098677
 0.00780608 0.00749648 0.00191988 0.00189538]
• Child averaged monte carlo:-0.06666666766007741
• Child probablities:[0.6775622  0.2653149  0.01463453 0.00756509 0.00478362 0.00412835
 0.00326583 0.0031363  0.00080322 0.00079297]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=2.0,Q=-0.06666666766007741,M=-0.06666666766007741
----
 Tree depth: 30
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198 50286 21809   269    16    11    66    17
     11    66    18    11    66    19    11    66    20    11    66    21
     11    66    22    11    66    23    11    66    24    11]]
• Child Action scores:[6.9028038e-01 1.1260195e-02 5.5555198e-03 2.9708887e-03 1.1316038e-03
 3.8132546e-04 1.9675282e-04 1.9581088e-04 1.7895424e-04 1.5968698e-04]
• Child averaged monte carlo:-0.0800000011920929
• Child probablities:[9.9201101e-01 3.6490669e-03 1.8003653e-03 9.6276950e-04 3.6671641e-04
 1.2357532e-04 6.3761261e-05 6.3456006e-05 5.7993315e-05 5.1749415e-05]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=4.0,Q=-0.0800000011920929,M=-0.0800000011920929
----
 Tree depth: 30
 Node: action=1
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198 50286 21809   269    16    11    66    17
     11    66    18    11    66    19    11    66    20    11    66    21
     11    66    22    11    66    23    11    66    24    26]]
• Child Action scores:[1.9066619e+00 2.7257936e-02 5.6720516e-03 5.5473847e-03 4.9799873e-04
 4.1136827e-04 2.0493881e-04 1.2499018e-04 8.4015650e-05 7.4790092e-05]
• Child averaged monte carlo:-0.5
• Child probablities:[9.7696632e-01 1.3966863e-02 2.9063378e-03 2.8424589e-03 2.5517266e-04
 2.1078355e-04 1.0500987e-04 6.4044500e-05 4.3049302e-05 3.8322160e-05]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.5,M=-0.5
----
 Tree depth: 30
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198 50286 21809   269    16    11    66    17
     11    66    18    11    66    19    11    66    20    11    66    21
     11    66    22    11    66    23    26   198 50286 26676]]
• Child Action scores:[1.9506544e+00 3.6652634e-04 9.7451586e-05 5.1358864e-05 3.5706034e-05
 3.0018218e-05 2.6693662e-05 2.5508414e-05 2.2648914e-05 1.4349920e-05]
• Child averaged monte carlo:-0.05000000074505806
• Child probablities:[9.9950790e-01 1.8780671e-04 4.9933824e-05 2.6316087e-05 1.8295637e-05
 1.5381222e-05 1.3677732e-05 1.3070415e-05 1.1605218e-05 7.3528449e-06]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.05000000074505806,M=-0.05000000074505806
----
 Tree depth: 31
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198 50286 21809   269    16    11    66    17
     11    66    18    11    66    19    11    66    20    11    66    21
     11    66    22    11    66    23    11    66    24    11    66]]
• Child Action scores:[8.4570992e-01 9.3126763e-03 8.7525221e-03 2.9070938e-03 3.4794791e-04
 1.4383631e-04 1.1312861e-04 9.5239870e-05 8.8188717e-05 8.3850333e-05]
• Child averaged monte carlo:-0.07500000298023224
• Child probablities:[9.9171364e-01 3.3741579e-03 3.1712037e-03 1.0532949e-03 1.2606809e-04
 5.2114603e-05 4.0988627e-05 3.4507200e-05 3.1952433e-05 3.0380555e-05]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=3.0,Q=-0.07500000298023224,M=-0.07500000298023224
----
 Tree depth: 32
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198 50286 21809   269    16    11    66    17
     11    66    18    11    66    19    11    66    20    11    66    21
     11    66    22    11    66    23    11    66    24    11    66   940]]
• Child Action scores:[1.0436697e+00 2.0235823e-01 1.8458735e-04 5.8127323e-05 4.7975016e-05
 3.4905392e-05 1.5394100e-05 1.3735740e-05 8.6852579e-06 5.6744611e-06]
• Child averaged monte carlo:-0.06666666766007741
• Child probablities:[9.1511655e-01 8.4660560e-02 7.7225763e-05 2.4318713e-05 2.0071295e-05
 1.4603360e-05 6.4404258e-06 5.7466182e-06 3.6336492e-06 2.3740229e-06]
• Child visitation:[1 0 0 0 0 0 0 0 0 0]
• N=2.0,Q=-0.06666666766007741,M=-0.06666666766007741
----
 Tree depth: 33
 Node: action=0
• state:[[ 1003 23067   257  3933    12  2545   751   263  8265   357 23211   355
    751   263    62  2624  2174   737   198  1003  1858   389   734  3933
   1643 17311   357   259    16   290   287    17     8   290   257  2060
   3283    12   259  5128  1643    11   269   259    13   198  1003   464
  23862   389   257  3933  1643  1988    11   685  3132    25    15    60
   2160    11   290   257  2060  3283    12   448  5072  1643    11 42304
     13   198  1003   464   751   263    62  2624  8265   815 17624   262
    807  1643   751   263  5447  2174   357 26676    62    19   737   198
    198 21412  1336    62 26676    62    16     7 22915  6503  2160    11
    198 50267 22915  6503 42304    11   198 50267 15414  6503   287    16
     11   287    17    11   269   259  1776   198 50286 21809   256    16
     11   256    17    11   256    18    26   198 50286    87   273     7
     83    16    11   287    16    11   287    17  1776   198 50286    87
    273     7 16345    11   256    16    11   269   259  1776   198 50286
    392     7    83    17    11   256    16    11   269   259  1776   198
  50286   392     7    83    18    11   287    16    11   287    17  1776
    198 50286   273     7    66   448    11   256    17    11   256    18
   1776   198   437 21412   198   198 21412   751   263    62    23     7
  22915   685    22    25    15    60  2160    11   198 50266 22915 42304
     11   198 50266 15414   685    22    25    15    60   287    16    11
    287    17    11   198 50266 15414   269   259  1776   198 50286 21809
    269    16    11    66    17    11    66    18    11    66    19    11
     66    20    11    66    21    11    66    22    26   198 50286 12853
     62 26676    62    16  9677    16     7 16345    58    15  4357   269
     16    11   287    16    58    15  4357   287    17    58    15  4357
    269   259  1776   198 50286 12853    62 26676    62    16  9677    17
      7 16345    58    16  4357   269    17    11   287    16    58    16
   4357   287    17    58    16  4357   269    16  1776   198 50286 12853
     62 26676    62    16  9677    18     7 16345    58    17  4357   269
     18    11   287    16    58    17  4357   287    17    58    17  4357
    269    17  1776   198 50286 12853    62 26676    62    16  9677    19
      7 16345    58    18  4357   269    19    11   287    16    58    18
   4357   287    17    58    18  4357   269    18  1776   198 50286 12853
     62 26676    62    16  9677    20     7 16345    58    19  4357   269
     20    11   287    16    58    19  4357   287    17    58    19  4357
    269    19  1776   198 50286 12853    62 26676    62    16  9677    21
      7 16345    58    20  4357   269    21    11   287    16    58    20
   4357   287    17    58    20  4357   269    20  1776   198 50286 12853
     62 26676    62    16  9677    22     7 16345    58    21  4357   269
     22    11   287    16    58    21  4357   287    17    58    21  4357
    269    21  1776   198 50286 12853    62 26676    62    16  9677    23
      7 16345    58    22  4357 42304    11   287    16    58    22  4357
    287    17    58    22  4357   269    22  1776   198   437 21412   198
    198 21412   751   263    62  2624     7 22915   685  5066    25    15
     60  2160    11   198 50266 22915 42304    11   198 50266 15414   685
   5066    25    15    60   287    16    11   287    17    11   198 50266
  15414   269   259  1776   198 50286 21809   269    16    11    66    17
     11    66    18    11    66    19    11    66    20    11    66    21
     11    66    22    11    66    23    11    66    24    11    66   940
     11]]
• Child Action scores:[1.94854772e+00 1.87763933e-03 3.05311900e-04 2.91335105e-04
 1.11609836e-04 7.19859891e-05 3.35029108e-05 2.15459495e-05
 1.81078321e-05 1.77551556e-05]
• Child averaged monte carlo:-0.05000000074505806
• Child probablities:[9.9842846e-01 9.6209528e-04 1.5644066e-04 1.4927900e-04 5.7188456e-05
 3.6885347e-05 1.7166765e-05 1.1040063e-05 9.2783848e-06 9.0976746e-06]
• Child visitation:[0 0 0 0 0 0 0 0 0 0]
• N=1.0,Q=-0.05000000074505806,M=-0.05000000074505806
ROBUST FINAL VALUE:
Adding child.
Len original:  50295  Len new:  50278
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42,c43,c44,c45,c46,c47,c48,c49,c50,c51,c52,c53,c54,c55,c56,c57,c58,c59,c60,c61,c62,c63;
  adder_8 a1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
  adder_8 a3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
  adder_8 a4(sum[31:24], c4, in1[31:24], in2[31:24], c3);
  adder_8 a5(sum[39:32], c5, in1[39:32], in2[39:32], c4);
  adder_8 a6(sum[47:40], c6, in1[47:40], in2[47:40], c5);
  adder_8 a7(sum[55:48], c7, in1[55:48], in2[55:48], c6);
  adder_8 a8(sum[63:56], cout, in1[63:56], in2[63:56], c7);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 failed\n'
Tokens:  431
LLM generates return in:  192.373013  seconds
Running getPromptScore: 
Len original:  50295  Len new:  50278
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42,c43,c44,c45,c46,c47,c48,c49,c50,c51,c52,c53,c54,c55,c56,c57,c58,c59,c60,c61,c62,c63;
  adder_8 a1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
  adder_8 a3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
  adder_8 a4(sum[31:24], c4, in1[31:24], in2[31:24], c3);
  adder_8 a5(sum[39:32], c5, in1[39:32], in2[39:32], c4);
  adder_8 a6(sum[47:40], c6, in1[47:40], in2[47:40], c5);
  adder_8 a7(sum[55:48], c7, in1[55:48], in2[55:48], c6);
  adder_8 a8(sum[63:56], cout, in1[63:56], in2[63:56], c7);
endmodule
Path:  output_files/2329780_adder_32/2329780_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Some testbench tests failed.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 failed\n'
Tokens:  431
LLM generates return in:  192.474054  seconds
Running getPromptScore: 
MCTS Total Time:  46129.904731
