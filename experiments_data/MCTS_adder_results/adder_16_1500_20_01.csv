Area,Delay,Score,Current Run,Episode,Verilog
N/A,N/A,-1,2.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
  wire c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15;
  wire [15:0] sum1, sum2, sum3, sum4, sum5, sum6, sum7, sum8, sum9, sum10, sum11, sum12, sum13, sum14, sum15;
  
  localparam cin_d = 1'b0;
  
  defparam adder_16_1.WIDTH = 16;
  defparam adder_16_1.WIDTH1 = 16;
  defparam adder_16_1.WIDTH2 = 16;
  defparam adder_16_1.WIDTH3 = 16;
  defparam adder_16_1.WIDTH4 = 16;
  defparam adder_16_1.WIDTH5 = 16;
  defparam adder_16_1.WIDTH6 = 16;
  defparam adder_16_1.WIDTH7 = 16;
  defparam adder_16_1.WIDTH8 = 16;
  defparam adder_16_1.WIDTH9 = 16;
  defparam adder_16_1.WIDTH10 = 16;
  defparam adder_16_1.WIDTH11 = 16;
  defparam adder_16_1.WIDTH12 = 16;
  defparam adder_16_1.WIDTH13 = 16;
  defparam adder_16_1.WIDTH14 = 16;
  defparam adder_16_1.WIDTH15 = 16;
  defparam adder_16_1.WIDTH16 = 16;
  defparam adder_16_1.WIDTH17 = 16;
  defparam adder_16_1.WIDTH18 = 16;
  defparam adder_16_1.WIDTH19 = 16;
  defparam adder_16_1.WIDTH20 = 16;
  defparam adder_16_1.WIDTH21 = 16;
  defparam adder_16_1.WIDTH22 = 16;
  defparam adder_16_1.WIDTH23 = 16;
  defparam adder_16_1.WIDTH24 = 16;
  defparam adder_16_1.WIDTH25 = 16;
  defparam adder_16_1.WIDTH26 = 16;
  defparam adder_16_1.WIDTH27 = 16;
  defparam adder_16_1.WIDTH28 = 16;
  defparam adder_16_1.WIDTH29 = 16;
  defparam adder_16_1.WIDTH30 = 16;
  defparam adder_16_1.WIDTH31 = 16;
  defparam adder_16_1.WIDTH32 = 16;
  defparam adder_16_1.WIDTH33 = 16;
  defparam adder_16_1.WIDTH34 = 16;
  defparam adder_16_1.WIDTH35 = 16;
  defparam adder_16_1.WIDTH36 = 16;
  defparam adder_16_1.WIDTH37 = 16;
  defparam adder_16_1.WIDTH38 = 16;
  defparam adder_16_1.WIDTH39 = 16;
  defparam adder_16_1.WIDTH40 = 16;
  defparam adder_16_1.WIDTH41 = 16;
  defparam adder_16_1.WIDTH42 = 16;
  defparam adder_16_1.WIDTH43 = 16;
  defparam adder_16_1.WIDTH44 = 16;
  defparam adder_16_1.WIDTH45 = 16;
  defparam adder_16_1.WIDTH46 = 16;
  defparam adder_16_1.WIDTH47 = 16;
  defparam adder_16_1.WIDTH48 = 16;
  defparam adder_16_1.WIDTH49 = 16;
  defparam adder_16_1.WIDTH50 = 16;
  defparam adder_16_1.WIDTH51 = 16;
  defparam adder_16_1.WIDTH52 = 16;
  defparam adder_16_1.WIDTH53 = 16;
  defparam adder_16_1.WIDTH54 = 16;
  defparam adder_16_1.WIDTH55 = 16;
  defparam adder_16_1.WIDTH56 = 16;
  defparam adder_16_1.WIDTH57 = 16;
  defparam adder_16_1.WIDTH58 = 16;
  defparam adder_16_1.WIDTH59 = 16;
  defparam adder_16_1.WIDTH60 = 16;
  defparam adder_16_1.WIDTH61 = 16;
  defparam adder_16_1.WIDTH62 = 16;
  defparam adder_16_1.WIDTH63 = 16;
  defparam adder_16_1.WIDTH64 = 16;
  defparam adder_16_1.WIDTH65 = 16;
  defparam adder_16_1.WIDTH66 = 16;
  defparam adder_16_1.WIDTH67 = 16;
  defparam adder_16_1.WIDTH68 = 16;
  defparam adder_16_1.WIDTH69 = 16;
  defparam adder_16_1.WIDTH70 = 16;
  defparam adder_16_1.WIDTH71 = 16;
  defparam adder_16_1.WIDTH72 = 16;
  defparam adder_16_1.WIDTH73 = 16;
  defparam adder_16_1.WIDTH74 = 16;
  defparam adder_16_1.WIDTH75 = 16;
  defparam adder_16_1.WIDTH"
N/A,N/A,-0.5,3.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);

    wire [15:0] sum;
    wire cout;
    wire [15:0] in1;
    wire [15:0] in2;
    wire cin;

    nand n1(sum[0], in1[0], in2[0], cin);
    nand n2(sum[1], in1[1], in2[1], cin);
    nand n3(sum[2], in1[2], in2[2], cin);
    nand n4(sum[3], in1[3], in2[3], cin);
    nand n5(sum[4], in1[4], in2[4], cin);
    nand n6(sum[5], in1[5], in2[5], cin);
    nand n7(sum[6], in1[6], in2[6], cin);
    nand n8(sum[7], in1[7], in2[7], cin);
    nand n9(sum[8], in1[8], in2[8], cin);
    nand n10(sum[9], in1[9], in2[9], cin);
    nand n11(sum[10], in1[10], in2[10], cin);
    nand n12(sum[11], in1[11], in2[11], cin);
    nand n13(sum[12], in1[12], in2[12], cin);
    nand n14(sum[13], in1[13], in2[13], cin);
    nand n15(sum[14], in1[14], in2[14], cin);
    nand n16(sum[15], in1[15], in2[15], cin);
    nand n17(cout, in1[15], in2[15], cin);

endmodule"
N/A,N/A,-1,4.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);                     
  wire [15:0] sum;
  wire cout;
  wire [15:0] in1;
  wire [15:0] in2;
  wire cin;
  
  comparator_16 comp_1(.a(in1),.b(in2),.cin(cin),.sum(sum),.cout(cout));
endmodule

module comparator_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
  wire [15:0] in1;
  wire [15:0] in2;
  wire cin;
  wire [15:0] sum;
  wire cout;
  
  adder_16 adder_1(.sum(sum),.cout(cout),.in1(in1),.in2(in2),.cin(cin));
endmodule"
N/A,N/A,-1,5.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
  wire c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15;
  wire [15:0] sum1, sum2, sum3, sum4, sum5, sum6, sum7, sum8, sum9, sum10, sum11, sum12, sum13, sum14, sum15;
  
  top_adder_16 top_adder_16_1(sum1, c1, in1, in2, cin);
  top_adder_16 top_adder_16_2(sum2, c2, in1, in2, c1);
  top_adder_16 top_adder_16_3(sum3, c3, in1, in2, c2);
  top_adder_16 top_adder_16_4(sum4, c4, in1, in2, c3);
  top_adder_16 top_adder_16_5(sum5, c5, in1, in2, c4);
  top_adder_16 top_adder_16_6(sum6, c6, in1, in2, c5);
  top_adder_16 top_adder_16_7(sum7, c7, in1, in2, c6);
  top_adder_16 top_adder_16_8(sum8, c8, in1, in2, c7);
  top_adder_16 top_adder_16_9(sum9, c9, in1, in2, c8);
  top_adder_16 top_adder_16_10(sum10, c10, in1, in2, c9);
  top_adder_16 top_adder_16_11(sum11, c11, in1, in2, c10);
  top_adder_16 top_adder_16_12(sum12, c12, in1, in2, c11);
  top_adder_16 top_adder_16_13(sum13, c13, in1, in2, c12);
  top_adder_16 top_adder_16_14(sum14, c14, in1, in2, c13);
  top_adder_16 top_adder_16_15(sum15, c15, in1, in2, c14);
  
  assign sum = {c15, c14, c13, c12, c11, c10, c9, c8, c7, c6, c5, c4, c3, c2, c1};
  assign cout = c15;
endmodule

module top_adder_16(output [15:0] sum,
                     output cout,
                     input [15:0] in1, in2,
                     input cin);
  wire c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15;
  wire [15:0] sum1, sum2, sum3, sum4, sum5, sum6, sum7, sum8, sum9, sum10, sum11, sum12, sum13, sum14, sum15;
  
  adder_16 adder_16_1(sum1, c1, in1, in2, cin);
  adder_16 adder_16_2(sum2, c2, in1, in2, c1);
  adder_16 adder_16_3(sum3, c3, in1, in2, c2);
  adder_16 adder_16_4(sum4, c4, in1, in2, c3);
  adder_16 adder_16_5(sum5, c5, in1, in2, c4);
  adder_16 adder_16_6(sum6, c6, in1, in2, c5);
  adder_16 adder_16_7(sum7, c7, in1, in2, c6);
  adder_16 adder_16_8(sum8, c8, in1, in2, c7);
  adder_16 adder_16_9(sum9, c9, in1, in2, c8);
  adder_16 adder_16_10(sum10, c10, in1, in2, c9);
  adder_16 adder_16_11(sum11, c11, in1, in2, c10);
  adder_16 adder_16_12(sum12, c12, in1, in2, c11);
  adder_16 adder_16_13(sum13, c13, in1, in2, c12);
  adder_16 adder_16_14(sum14, c14, in1, in2, c13);
  adder_16 adder_16_15(sum15, c15, in1, in2, c14);
  
  assign sum = {c15, c14, c13, c12, c11, c10, c9, c8, c7, c6, c5, c4, c3, c2, c1};
  assign cout = c15;
endmodule"
N/A,N/A,-1,6.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);

    wire [15:0] sum;
    wire cout;
    wire [15:0] in1;
    wire [15:0] in2;
    wire cin;

    decoder_16 decoder(sum, cout, in1, in2, cin);

endmodule

module decoder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);

    wire [15:0] sum;
    wire cout;
    wire [15:0] in1;
    wire [15:0] in2;
    wire cin;

    wire [3:0] sum_0;
    wire [3:0] sum_1;
    wire [3:0] sum_2;
    wire [3:0] sum_3;
    wire [3:0] sum_4;
    wire [3:0] sum_5;
    wire [3:0] sum_6;
    wire [3:0] sum_7;
    wire [3:0] sum_8;
    wire [3:0] sum_9;
    wire [3:0] sum_10;
    wire [3:0] sum_11;
    wire [3:0] sum_12;
    wire [3:0] sum_13;
    wire [3:0] sum_14;
    wire [3:0] sum_15;
    wire [3:0] sum_16;
    wire [3:0] sum_17;
    wire [3:0] sum_18;
    wire [3:0] sum_19;
    wire [3:0] sum_20;
    wire [3:0] sum_21;
    wire [3:0] sum_22;
    wire [3:0] sum_23;
    wire [3:0] sum_24;
    wire [3:0] sum_25;
    wire [3:0] sum_26;
    wire [3:0] sum_27;
    wire [3:0] sum_28;
    wire [3:0] sum_29;
    wire [3:0] sum_30;
    wire [3:0] sum_31;
    wire [3:0] sum_32;
    wire [3:0] sum_33;
    wire [3:0] sum_34;
    wire [3:0] sum_35;
    wire [3:0] sum_36;
    wire [3:0] sum_37;
    wire [3:0] sum_38;
    wire [3:0] sum_39;
    wire [3:0] sum_40;
    wire [3:0] sum_41;
    wire [3:0] sum_42;
    wire [3:0] sum_43;
    wire [3:0] sum_44;
    wire [3:0] sum_45;
    wire [3:0] sum_46;
    wire [3:0] sum_47;
    wire [3:0] sum_48;
    wire [3:0] sum_49;
    wire [3:0] sum_50;
    wire [3:0] sum_51;
    wire [3:0] sum_52;
    wire [3:0] sum_53;
    wire [3:0] sum_54;
    wire [3:0] sum_55;
    wire [3:0] sum_56;
    wire [3:0] sum_57;
    wire [3:0] sum_58;
    wire [3:0] sum_59;
    wire [3:0] sum_60;
    wire [3:0] sum_61;
    wire [3:0] sum_62;
    wire [3:0] sum_63;
    wire [3:0] sum_64;
    wire [3:0] sum_65;
    wire [3:0] sum_66;
    wire [3:0] sum_67;
    wire [3:0] sum_68;
    wire [3:0] sum_69;
    wire [3:0] sum_70;
    wire [3:0] sum_71;
    wire [3:0] sum_72;
    wire [3:0] sum_73;
    wire [3:0] sum_74;
    wire [3:0] sum_75;
    wire [3:0] sum_76;
    wire [3:0] sum_77;
    wire [3:0] sum_78;
    wire [3:0] sum_79;
    wire [3:0] sum_80;
    wire [3:0] sum_81;
    wire [3:0] sum_82;
    wire [3:0] sum_83;
    wire [3:0] sum_84;
    wire [3:0] sum_85;
    wire [3:0] sum_86;
    wire [3:0] sum_87;
    wire [3:0] sum_88;
    wire [3:0] sum_89;
    wire [3:0] sum_90;
    wire [3:0] sum_91;
    wire [3:0] sum_92;
    wire [3:0] sum_93;
    wire [3:0] sum_94;
    wire [3:0] sum_95;
    wire [3:0] sum_96;
    wire [3:0] sum_97;
    wire [3:0] sum_98;
    wire [3:0] sum_99;
    wire [3:0] sum_100;
    wire [3:0] sum_101;
    wire [3:0] sum_102;
    wire [3:0] sum_103;
    wire [3:0] sum_104;
    wire [3:0] sum_105;
    wire [3:0] sum_106;
    wire [3:0] sum_107;
    wire [3:0] sum_108;
    wire [3:0] sum_109;
    wire [3:0] sum_110;
    wire [3:0] sum_111;
    wire"
N/A,N/A,-1,7.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);                              
  wire c1, c2, c3;
  wire [15:0] sum;
  
  cout_adder_16 c1(sum[0], c1, in1[0], in2[0], cin);
  cout_adder_16 c2(sum[1], c2, in1[1], in2[1], c1);
  cout_adder_16 c3(sum[2], c3, in1[2], in2[2], c2);
  cout_adder_16 c4(sum[3], cout, in1[3], in2[3], c3);
  cout_adder_16 c5(sum[4], cout, in1[4], in2[4], c3);
  cout_adder_16 c6(sum[5], cout, in1[5], in2[5], c3);
  cout_adder_16 c7(sum[6], cout, in1[6], in2[6], c3);
  cout_adder_16 c8(sum[7], cout, in1[7], in2[7], c3);
  cout_adder_16 c9(sum[8], cout, in1[8], in2[8], c3);
  cout_adder_16 c10(sum[9], cout, in1[9], in2[9], c3);
  cout_adder_16 c11(sum[10], cout, in1[10], in2[10], c3);
  cout_adder_16 c12(sum[11], cout, in1[11], in2[11], c3);
  cout_adder_16 c13(sum[12], cout, in1[12], in2[12], c3);
  cout_adder_16 c14(sum[13], cout, in1[13], in2[13], c3);
  cout_adder_16 c15(sum[14], cout, in1[14], in2[14], c3);
  cout_adder_16 c16(sum[15], cout, in1[15], in2[15], c3);
endmodule

module adder_16_tb;
  reg [15:0] in1, in2;
  reg cin;
  wire [15:0] sum;
  wire cout;
  
  adder_16 a1(sum, cout, in1, in2, cin);
  
  initial
  begin
    $dumpfile(""adder_16_tb.vcd"");
    $dumpvars(0, adder_16_tb);
    
    in1 = 16'b000000000000;
    in2 = 16'b000000000000;
    cin = 1'b0;
    #10
    in1 = 16'b000000000000;
    in2 = 16'b000000000001;
    cin = 1'b0;
    #10
    in1 = 16'b000000000000;
    in2 = 16'b000000000010;
    cin = 1'b0;
    #10
    in1 = 16'b000000000000;
    in2 = 16'b000000000011;
    cin = 1'b0;
    #10
    in1 = 16'b000000000000;
    in2 = 16'b000000000100;
    cin = 1'b0;
    #10
    in1 = 16'b000000000000;
    in2 = 16'b000000000101;
    cin = 1'b0;
    #10
    in1 = 16'b000000000000;
    in2 = 16'b000000000110;
    cin = 1'b0;
    #10
    in1 = 16'b000000000000;
    in2 = 16'b000000000111;
    cin = 1'b0;
    #10
    in1 = 16'b000000000000;
    in2 = 16'b000000001000;
    cin = 1'b0;
    #10
    in1 = 16'b000000000000;
    in2 = 16'b000000001001;
    cin = 1'b0;
    #10
    in1 = 16'b000000000000;
    in2 = 16'b000000001010;
    cin = 1'b0;
    #10
    in1 = 16'b000000000000;
    in2 = 16'b000000001011;
    cin = 1'b0;
    #10
    in1 = 16'b000000000000;
    in2 = 16'b000000001100;
    cin = 1'b0;
    #10
    in1 = 16'b000000000000;
    in2 = 16'b000000001101;
    cin = 1'b0;
    #10
    in1 = 16'b000000000000;
    in2 = 16'b000000001110;
    cin = 1'b0;
    #10
    in1 = 16'b000000000000;
    in2 = 16'b000000001111;
    cin = 1'b0;
    #10
    in1 = 16'b000000000000;
    in2 = 16'b000000010000;
    cin = 1'b0;
    #10
    in1 = 16'b000000000000;
    in2 = 16'b000000010001;
    cin = 1'b0;
    #10
    in1 = 16'b000000000000;
    in2 = 16'b000000010010;
    cin = 1'b0;
    #10
    in1 = 16'b000000000000;
    in2 = 16'b000000010011;
    cin = 1'b0;
    #10
    in1 = 16'b000000000000;
    in2 = 16'b000000010100;
    cin = 1'b0;
    #10
    in1 = 16'b000000000000;
    in2 = 16'b000000010101;
    cin = 1'b0;
    #10
    in1 = 16'b000000000000;
    in2 = 16'b000000010110;
    cin = 1'b0;
    #10
    in1 = 16'b000000000000;
    in2 = 16'b000000010111;
    cin = 1'b0;
    #10
    in1 = 16'b000000000000;
    in2 = 16'"
N/A,N/A,-1,8.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin); 
  wire c1, c2, c3;
  full_adder FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder FA4(sum[3], cout, in1[3], in2[3], c3);
  full_adder FA5(sum[4], c4, in1[4], in2[4], c3);
  full_adder FA6(sum[5], c5, in1[5], in2[5], c4);
  full_adder FA7(sum[6], c6, in1[6], in2[6], c5);
  full_adder FA8(sum[7], c7, in1[7], in2[7], c6);
  full_adder FA9(sum[8], c8, in1[8], in2[8], c7);
  full_adder FA10(sum[9], c9, in1[9], in2[9], c8);
  full_adder FA11(sum[10], c10, in1[10], in2[10], c9);
  full_adder FA12(sum[11], c11, in1[11], in2[11], c10);
  full_adder FA13(sum[12], c12, in1[12], in2[12], c11);
  full_adder FA14(sum[13], c13, in1[13], in2[13], c12);
  full_adder FA15(sum[14], c14, in1[14], in2[14], c13);
  full_adder FA16(sum[15], cout, in1[15], in2[15], c14);
endmodule

OAI21X1 U1 (.A(a[0]),.B(b[0]),.C(c[0]),.Y(sum[0]) );
AND2X1 U2 (.A(a[0]),.B(b[0]),.Y(c[0]) );
AND2X1 U3 (.A(a[1]),.B(b[1]),.Y(c[1]) );
AND2X1 U4 (.A(a[2]),.B(b[2]),.Y(c[2]) );
AND2X1 U5 (.A(a[3]),.B(b[3]),.Y(c[3]) );
AND2X1 U6 (.A(a[4]),.B(b[4]),.Y(c[4]) );
AND2X1 U7 (.A(a[5]),.B(b[5]),.Y(c[5]) );
AND2X1 U8 (.A(a[6]),.B(b[6]),.Y(c[6]) );
AND2X1 U9 (.A(a[7]),.B(b[7]),.Y(c[7]) );
AND2X1 U10 (.A(a[8]),.B(b[8]),.Y(c[8]) );
AND2X1 U11 (.A(a[9]),.B(b[9]),.Y(c[9]) );
AND2X1 U12 (.A(a[10]),.B(b[10]),.Y(c[10]) );
AND2X1 U13 (.A(a[11]),.B(b[11]),.Y(c[11]) );
AND2X1 U14 (.A(a[12]),.B(b[12]),.Y(c[12]) );
AND2X1 U15 (.A(a[13]),.B(b[13]),.Y(c[13]) );
AND2X1 U16 (.A(a[14]),.B(b[14]),.Y(c[14]) );
AND2X1 U17 (.A(a[15]),.B(b[15]),.Y(c[15]) );
endmodule"
N/A,N/A,-1,9.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);

wire c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15;

adder_4 adder_4_1(sum[3:0], c1, in1[3:0], in2[3:0], cin);
adder_4 adder_4_2(sum[7:4], c2, in1[7:4], in2[7:4], c1);
adder_4 adder_4_3(sum[11:8], c3, in1[11:8], in2[11:8], c2);
adder_4 adder_4_4(sum[15:12], c4, in1[15:12], in2[15:12], c3);

adder_4 adder_4_5(sum[3:0], c5, in1[3:0], in2[3:0], c4);
adder_4 adder_4_6(sum[7:4], c6, in1[7:4], in2[7:4], c5);
adder_4 adder_4_7(sum[11:8], c7, in1[11:8], in2[11:8], c6);
adder_4 adder_4_8(sum[15:12], c8, in1[15:12], in2[15:12], c7);

adder_4 adder_4_9(sum[3:0], c9, in1[3:0], in2[3:0], c8);
adder_4 adder_4_10(sum[7:4], c10, in1[7:4], in2[7:4], c9);
adder_4 adder_4_11(sum[11:8], c11, in1[11:8], in2[11:8], c10);
adder_4 adder_4_12(sum[15:12], c12, in1[15:12], in2[15:12], c11);

adder_4 adder_4_13(sum[3:0], c13, in1[3:0], in2[3:0], c12);
adder_4 adder_4_14(sum[7:4], c14, in1[7:4], in2[7:4], c13);
adder_4 adder_4_15(sum[11:8], c15, in1[11:8], in2[11:8], c14);
adder_4 adder_4_16(sum[15:12], cout, in1[15:12], in2[15:12], c15);

endmodule

module adder_4(output [3:0] sum,
                      output cout,
                      input [3:0] in1, in2,
                      input cin);

wire c1, c2, c3;

adder_1 adder_1_1(sum[0], c1, in1[0], in2[0], cin);
adder_1 adder_1_2(sum[1], c2, in1[1], in2[1], c1);
adder_1 adder_1_3(sum[2], c3, in1[2], in2[2], c2);
adder_1 adder_1_4(sum[3], cout, in1[3], in2[3], c3);

endmodule

module adder_1(output sum,
                      output cout,
                      input in1, in2, cin);

wire c1;

adder_1 adder_1_1(sum, c1, in1, in2, cin);
adder_1 adder_1_2(cout, cout, in1, in2, c1);

endmodule"
N/A,N/A,-1,10.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);   
    wire [15:0] sum;
    wire cout;
    wire [15:0] in1;
    wire [15:0] in2;
    wire cin;
    
    fadder_16 fadder_16(sum, cout, in1, in2, cin);
    
endmodule

module fadder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
    wire [15:0] sum;
    wire cout;
    wire [15:0] in1;
    wire [15:0] in2;
    wire cin;
    
    wire [15:0] sum_temp;
    wire cout_temp;
    
    adder_16 adder_16_1(sum_temp, cout_temp, in1, in2, cin);
    
    assign sum = sum_temp[15:0];
    assign cout = cout_temp;
    
endmodule"
N/A,N/A,-1,11.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);                                   //in1 and in2 are the 16 bit inputs, and cin is the carry-in input.
    wire [15:0] sum_temp;
    wire cout_temp;
    wire [15:0] in1_temp;
    wire [15:0] in2_temp;
    wire [15:0] carry_temp;
    
    assign in1_temp = in1;
    assign in2_temp = in2;
    assign carry_temp = cin;
    
    adder_16_bit adder_1(sum_temp[15:0], cout_temp, in1_temp[15:0], in2_temp[15:0], carry_temp[0]);
    adder_16_bit adder_2(sum_temp[31:16], cout_temp, in1_temp[31:16], in2_temp[31:16], carry_temp[1]);
    
    assign sum = sum_temp;
    assign cout = cout_temp;
endmodule

module adder_16_bit(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
    wire [15:0] sum_temp;
    wire cout_temp;
    wire [15:0] in1_temp;
    wire [15:0] in2_temp;
    wire [15:0] carry_temp;
    
    assign in1_temp = in1;
    assign in2_temp = in2;
    assign carry_temp = cin;
    
    adder_1 adder_1_bit(sum_temp[15:0], cout_temp, in1_temp[15:0], in2_temp[15:0], carry_temp[0]);
    adder_1 adder_2_bit(sum_temp[31:16], cout_temp, in1_temp[31:16], in2_temp[31:16], carry_temp[1]);
    
    assign sum = sum_temp;
    assign cout = cout_temp;
endmodule

module adder_1(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
    wire [15:0] sum_temp;
    wire cout_temp;
    wire [15:0] in1_temp;
    wire [15:0] in2_temp;
    wire [15:0] carry_temp;
    
    assign in1_temp = in1;
    assign in2_temp = in2;
    assign carry_temp = cin;
    
    adder_2 adder_1_bit(sum_temp[15:0], cout_temp, in1_temp[15:0], in2_temp[15:0], carry_temp[0]);
    adder_2 adder_2_bit(sum_temp[31:16], cout_temp, in1_temp[31:16], in2_temp[31:16], carry_temp[1]);
    
    assign sum = sum_temp;
    assign cout = cout_temp;
endmodule

module adder_2(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
    wire [15:0] sum_temp;
    wire cout_temp;
    wire [15:0] in1_temp;
    wire [15:0] in2_temp;
    wire [15:0] carry_temp;
    
    assign in1_temp = in1;
    assign in2_temp = in2;
    assign carry_temp = cin;
    
    adder_3 adder_1_bit(sum_temp[15:0], cout_temp, in1_temp[15:0], in2_temp[15:0], carry_temp[0]);
    adder_3 adder_2_bit(sum_temp[31:16], cout_temp, in1_temp[31:16], in2_temp[31:16], carry_temp[1]);
    
    assign sum = sum_temp;
    assign cout = cout_temp;
endmodule

module adder_3(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
    wire [15:0] sum_temp;
    wire cout_temp;
    wire [15:0] in1_temp;
    wire [15:0] in2_temp;
    wire [15:0] carry_temp;
    
    assign in1_temp = in1;
    assign in2_temp = in2;
    assign carry_temp = cin;
    
    adder_4 adder_1_bit(sum_temp[15:0], cout_temp, in1_temp[15:0], in2_temp[15:0], carry_temp[0]);
    adder_4 adder_2_bit(sum_temp[31:16], cout_temp, in1_temp[31:16], in2_temp[31:16], carry_temp[1]);
    
    assign sum = sum_temp;
    assign cout = cout_temp;
endmodule

module adder_4(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
    wire [15:0] sum_temp;
    wire cout_temp;
    wire [15:0] in1_temp;
    wire [15:0] in2_temp;
    wire [15:0] carry_temp;
    
    assign in1_temp = in1;
    assign in2_temp = in2;
    assign carry_temp = cin;
    
    adder_5 adder_1_bit(sum_temp[15:0], cout_temp, in1_temp[15:0], in2_temp[15:0], carry_temp[0]);
    adder_5 adder_2_bit(sum_temp[31:16], cout_temp, in1_temp[31:16], in2_temp[31:"
N/A,N/A,-1,12.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);  
  
  wire [15:0] sum;
  wire cout;
  
  integer i;
  
  sum_16 sum_16_1(sum[15:0], cin, in1[15:0], in2[15:0]);
  
  assign cout = cin & (in1[15] ^ in2[15]);
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  "
N/A,N/A,-1,13.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);

  wire [15:0] sum;
  wire cout;
  wire [15:0] in1;
  wire [15:0] in2;
  wire cin;

  Adder_16bit adder(sum, cout, in1, in2, cin);

endmodule

module Adder_16bit(output [15:0] sum,
                     output cout,
                     input [15:0] in1, in2,
                     input cin);

  wire [15:0] sum;
  wire cout;
  wire [15:0] in1;
  wire [15:0] in2;
  wire cin;

  wire [15:0] sum_temp;
  wire cout_temp;
  wire [15:0] in1_temp;
  wire [15:0] in2_temp;
  wire cin_temp;

  invert_16bit invert_16bit_1(in1_temp, in1);
  invert_16bit invert_16bit_2(in2_temp, in2);
  invert_16bit invert_16bit_3(sum_temp, sum);
  invert_16bit invert_16bit_4(cout_temp, cout);

  adder_16bit_1 adder_16bit_1_1(sum_temp, cout_temp, in1_temp, in2_temp, cin_temp);
  adder_16bit_2 adder_16bit_2_1(sum, cout, in1, in2, cin);

endmodule

module invert_16bit(output [15:0] out,
                     input [15:0] in);

  wire [15:0] in;
  wire [15:0] out;

  not not_1(out[0], in[0]);
  not not_2(out[1], in[1]);
  not not_3(out[2], in[2]);
  not not_4(out[3], in[3]);
  not not_5(out[4], in[4]);
  not not_6(out[5], in[5]);
  not not_7(out[6], in[6]);
  not not_8(out[7], in[7]);
  not not_9(out[8], in[8]);
  not not_10(out[9], in[9]);
  not not_11(out[10], in[10]);
  not not_12(out[11], in[11]);
  not not_13(out[12], in[12]);
  not not_14(out[13], in[13]);
  not not_15(out[14], in[14]);
  not not_16(out[15], in[15]);

endmodule

module adder_16bit_1(output [15:0] sum,
                     output cout,
                     input [15:0] in1, in2,
                     input cin);

  wire [15:0] sum;
  wire cout;
  wire [15:0] in1;
  wire [15:0] in2;
  wire cin;

  wire [15:0] sum_temp;
  wire cout_temp;
  wire [15:0] in1_temp;
  wire [15:0] in2_temp;
  wire cin_temp;

  adder_16bit_2 adder_16bit_2_1(sum_temp, cout_temp, in1_temp, in2_temp, cin_temp);
  adder_16bit_3 adder_16bit_3_1(sum, cout, in1, in2, cin);

endmodule

module adder_16bit_2(output [15:0] sum,
                     output cout,
                     input [15:0] in1, in2,
                     input cin);

  wire [15:0] sum;
  wire cout;
  wire [15:0] in1;
  wire [15:0] in2;
  wire cin;

  wire [15:0] sum_temp;
  wire cout_temp;
  wire [15:0] in1_temp;
  wire [15:0] in2_temp;
  wire cin_temp;

  adder_16bit_1 adder_16bit_1_1(sum_temp, cout_temp, in1_temp, in2_temp, cin_temp);
  adder_16bit_3 adder_16bit_3_2(sum, cout, in1, in2, cin);

endmodule

module adder_16bit_3(output [15:0] sum,
                     output cout,
                     input [15:0] in1, in2,
                     input cin);

  wire [15:0] sum;
  wire cout;
  wire [15:0] in1;
  wire [15:0] in2;
  wire cin;

  wire [15:0] sum_temp;
  wire cout_temp;
  wire [15:0] in1_temp;
  wire [15:0] in2_temp;
  wire cin_temp;

  adder_16bit_1 adder_16bit_1_2(sum_temp, cout_temp, in1_temp, in2_temp, cin_temp);
  adder_16bit_2 adder_16bit_2_2(sum, cout, in1, in2, cin);

endmodule"
N/A,N/A,-1,14.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);                      
    wire [15:0] sum;
    wire cout;
    wire [15:0] in1;
    wire [15:0] in2;
    wire cin;
    
    fadder_16 fadder_16_1(sum[15:0], cout, in1[15:0], in2[15:0], cin);
    fadder_16 fadder_16_2(sum[31:16], cout, in1[31:16], in2[31:16], cout);
endmodule

module fadder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
    wire [15:0] sum;
    wire cout;
    wire [15:0] in1;
    wire [15:0] in2;
    wire cin;
    
    wire [15:0] sum_temp;
    wire cout_temp;
    
    adder_16 adder_16_1(sum_temp[15:0], cout_temp, in1[15:0], in2[15:0], cin);
    adder_16 adder_16_2(sum_temp[31:16], cout_temp, in1[31:16], in2[31:16], cout_temp);
    
    assign sum[15:0] = sum_temp[15:0];
    assign cout = cout_temp;
endmodule"
N/A,N/A,-1,15.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);    
    
    wire [15:0] sum;
    wire cout;
    
    integer i;
    
    two_bit_adder_16 bit_adder_16(sum[15:0], cout, in1[15:0], in2[15:0], cin);
    
    always @(in1 or in2 or cin)
    begin
        for (i = 0; i < 16; i = i + 1)
        begin
            if (in1[i] == 1'b1 && in2[i] == 1'b0)
            begin
                sum[i] = 1'b1;
            end
            else if (in1[i] == 1'b0 && in2[i] == 1'b1)
            begin
                sum[i] = 1'b1;
            end
            else
            begin
                sum[i] = 1'b0;
            end
        end
    end
endmodule

index_16 index_16(output [15:0] out,
                    input [15:0] in,
                    input [15:0] index);
    
    wire [15:0] out;
    
    integer i;
    
    adder_16 adder_16(out,
                       1'b0,
                       in,
                       index);
    
    always @(in or index)
    begin
        for (i = 0; i < 16; i = i + 1)
        begin
            if (in[i] == 1'b1 && index[i] == 1'b0)
            begin
                out[i] = 1'b1;
            end
            else if (in[i] == 1'b0 && index[i] == 1'b1)
            begin
                out[i] = 1'b1;
            end
            else
            begin
                out[i] = 1'b0;
            end
        end
    end
endmodule"
N/A,N/A,-0.5,16.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);        
    wire [15:0] sum;
    wire cout;
    wire [15:0] in1;
    wire [15:0] in2;
    wire cin;
    
    fadder_16 fadder_16(sum, cout, in1, in2, cin);
    
endmodule

module fadder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
    wire [15:0] sum;
    wire cout;
    wire [15:0] in1;
    wire [15:0] in2;
    wire cin;
    
    assign sum = in1 + in2;
    assign cout = in1[15] ^ in2[15] ^ cin;
    
endmodule"
N/A,N/A,-1,17.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);                             
  wire [15:0] sum;
  wire cout;
  wire [15:0] in1;
  wire [15:0] in2;
  wire cin;
  
  mux_16 mux1(sum[15:0], in1[15:0], in2[15:0], cin, sum[15:0]);
  mux_1 mux2(cout, in1[15:0], in2[15:0], cin, cout);
endmodule

----------------------------------------------------

Design a 16-bit subtractor

There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
The outputs are a 16 bit value, [15:0] diff, and a single carry-out output bit, cout.
The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output diff and cout values.

Note: The module should not use the carry-in bit.

Design a 4-bit ripple-carry adder

There are two 4 bit inputs (in1 and in2) and a single carry-in input bit, cin.
The outputs are a 4 bit value, [3:0] sum, and a single carry-out output bit, cout.
The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.

Design a 4-bit ripple-carry subtractor

There are two 4 bit inputs (in1 and in2) and a single carry-in input bit, cin.
The outputs are a 4 bit value, [3:0] diff, and a single carry-out output bit, cout.
The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output diff and cout values.

Design a 4-bit ripple-carry adder

There are two 4 bit inputs (in1 and in2) and a single carry-in input bit, cin.
The outputs are a 4 bit value, [3:0] sum, and a single carry-out output bit, cout.
The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.

Design a 4-bit ripple-carry subtractor

There are two 4 bit inputs (in1 and in2) and a single carry-in input bit, cin.
The outputs are a 4 bit value, [3:0] diff, and a single carry-out output bit, cout.
The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output diff and cout values.

Design a 4-bit ripple-carry adder

There are two 4 bit inputs (in1 and in2) and a single carry-in input bit, cin.
The outputs are a 4 bit value, [3:0] sum, and a single carry-out output bit, cout.
The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.

Design a 4-bit ripple-carry subtractor

There are two 4 bit inputs (in1 and in2) and a single carry-in input bit, cin.
The outputs are a 4 bit value, [3:0] diff, and a single carry-out output bit, cout.
The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output diff and cout values.

Design a 4-bit ripple-carry adder

There are two 4 bit inputs (in1 and in2) and a single carry-in input bit, cin.
The outputs are a 4 bit value, [3:0] sum, and a single carry-out output bit, cout.
The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.

Design a 4-bit ripple-carry subtractor

There are two 4 bit inputs (in1 and in2) and a single carry-in input bit, cin.
The outputs are a 4 bit value, [3:0] diff, and a single carry-out output bit, cout.
The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output diff and cout values.

Design a 4-bit ripple-carry adder

There are two 4 bit inputs (in1 and in2) and a single carry-in input bit, cin.
The outputs are a 4 bit value, [3:0] sum, and a single carry-out output bit, cout.
The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.

Design a 4-bit ripple-carry subtractor

There are two 4 bit inputs (in1 and in2) and a single carry-in input bit, cin.
The outputs are a 4 bit value, [3:0] diff, and a single carry-out output bit, cout.
The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output diff and cout values.

Design a 4-bit ripple-carry adder

There are two 4 bit inputs (in1 and in2) and a single carry-in input bit, cin.
The outputs are a 4 bit value, [3:0] sum, and a single carry-out output bit, cout.
The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.

Design a 4-bit ripple-carry subtractor

There are two 4 bit inputs (in1 and in2) and a single carry-in input bit, cin.
The outputs are a 4 bit value, [3:0] diff, and a single carry-out output bit, cout.
The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output diff and cout values.

Design a 4-bit ripple-carry adder

There are two 4 bit inputs (in1 and in2) and a single carry-in input bit, cin.
The outputs are a 4 bit value, [3:0] sum, and a single carry-out output bit, cout.
The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.

Design a 4-bit ripple-carry subtractor

There are two 4 bit inputs (in1 and in2) and a single carry-in input bit, cin.
The outputs are a 4 bit value,"
N/A,N/A,-1,18.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
    wire [15:0] sum;
    wire cout;
    wire [15:0] in1;
    wire [15:0] in2;
    wire cin;
    
    logic [15:0] sum;
    logic cout;
    logic [15:0] in1;
    logic [15:0] in2;
    logic cin;
    
    node_16 n1(sum, cout, in1, in2, cin);
    
endmodule"
N/A,N/A,-1,19.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);                       
  wire [15:0] sum;
  wire cout;
  wire [15:0] in1;
  wire [15:0] in2;
  wire cin;
  
  comparator_16 comp_1(.a(in1),.b(in2),.cin(cin),.sum(sum),.cout(cout));
endmodule

module comparator_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
  wire [15:0] in1;
  wire [15:0] in2;
  wire cin;
  wire [15:0] sum;
  wire cout;
  
  adder_16 adder_1(.sum(sum),.cout(cout),.in1(in1),.in2(in2),.cin(cin));
endmodule"
N/A,N/A,-0.5,20.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);                          
  wire [15:0] sum;
  wire cout;
  wire [15:0] in1;
  wire [15:0] in2;
  wire cin;
  
  nand n1(sum[0], in1[0], in2[0], cin);
  nand n2(sum[1], in1[1], in2[1], cin);
  nand n3(sum[2], in1[2], in2[2], cin);
  nand n4(sum[3], in1[3], in2[3], cin);
  nand n5(sum[4], in1[4], in2[4], cin);
  nand n6(sum[5], in1[5], in2[5], cin);
  nand n7(sum[6], in1[6], in2[6], cin);
  nand n8(sum[7], in1[7], in2[7], cin);
  nand n9(sum[8], in1[8], in2[8], cin);
  nand n10(sum[9], in1[9], in2[9], cin);
  nand n11(sum[10], in1[10], in2[10], cin);
  nand n12(sum[11], in1[11], in2[11], cin);
  nand n13(sum[12], in1[12], in2[12], cin);
  nand n14(sum[13], in1[13], in2[13], cin);
  nand n15(sum[14], in1[14], in2[14], cin);
  nand n16(sum[15], in1[15], in2[15], cin);
  
  nand n17(cout, in1[15], in2[15], cin);
  
endmodule"
N/A,N/A,-1,21.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);                  
  wire [15:0] sum;
  wire cout;
  wire [15:0] in1;
  wire [15:0] in2;
  wire cin;
  
  alu_16bit alu_16bit_inst(sum, cout, in1, in2, cin);
endmodule

module alu_16bit(output [15:0] sum,
                  output cout,
                  input [15:0] in1, in2,
                  input cin);
  wire [15:0] sum;
  wire cout;
  wire [15:0] in1;
  wire [15:0] in2;
  wire cin;
  
  wire [15:0] sum_temp;
  wire cout_temp;
  
  adder_16 adder_16_inst(sum_temp, cout_temp, in1, in2, cin);
  
  assign sum = sum_temp[15:0];
  assign cout = cout_temp;
endmodule"
N/A,N/A,-1,22.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);                    
    wire [15:0] sum;
    wire cout;
    wire [15:0] in1;
    wire [15:0] in2;
    wire cin;
    
    fadder_16 fadder_16_1(sum[15:0], cout, in1[15:0], in2[15:0], cin);
    fadder_16 fadder_16_2(sum[31:16], cout, in1[31:16], in2[31:16], cout);
endmodule

module fadder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
    wire [15:0] sum;
    wire cout;
    wire [15:0] in1;
    wire [15:0] in2;
    wire cin;
    
    wire [15:0] sum_temp;
    wire cout_temp;
    
    adder_16 adder_16_1(sum_temp[15:0], cout_temp, in1[15:0], in2[15:0], cin);
    adder_16 adder_16_2(sum_temp[31:16], cout_temp, in1[31:16], in2[31:16], cout_temp);
    
    assign sum[15:0] = sum_temp[15:0];
    assign cout = cout_temp;
endmodule"
N/A,N/A,-1,23.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);          
  wire [15:0] sum;
  wire cout;
  wire [15:0] in1;
  wire [15:0] in2;
  wire cin;
  
  comparator_16 comp_1(.a(in1),.b(in2),.cin(cin),.sum(sum),.cout(cout));
endmodule

module comparator_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
  wire [15:0] in1;
  wire [15:0] in2;
  wire cin;
  wire [15:0] sum;
  wire cout;
  
  adder_16 adder_1(.sum(sum),.cout(cout),.in1(in1),.in2(in2),.cin(cin));
endmodule"
N/A,N/A,-1,24.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);              
  wire [15:0] sum;
  wire cout;
  wire [15:0] in1;
  wire [15:0] in2;
  wire cin;
  
  mux_16 mux1(sum[15:0], in1[15:0], in2[15:0], cin, sum[15:0]);
  mux_16 mux2(sum[31:16], in1[31:16], in2[31:16], cin, sum[31:16]);
  mux_1 mux3(cout, in1[15:0], in2[15:0], cin, cout);
endmodule

Hexadecimal_To_Seven_Segment hex_to_seven_segment(output [6:0] seg,
                                                   output dp,
                                                   input [3:0] hex);
  wire [6:0] seg;
  wire dp;
  wire [3:0] hex;
  
  assign seg = hex_to_seg(hex);
  assign dp = hex_to_dp(hex);
endmodule"
N/A,N/A,-1,25.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);                         
    wire [15:0] sum;
    wire cout;
    wire [15:0] in1;
    wire [15:0] in2;
    wire cin;
    
    fadder_16 fadder_16_1(sum[15:0], cout, in1[15:0], in2[15:0], cin);
    fadder_16 fadder_16_2(sum[31:16], cout, in1[31:16], in2[31:16], cout);
endmodule

module fadder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);                         
    wire [15:0] sum;
    wire cout;
    wire [15:0] in1;
    wire [15:0] in2;
    wire cin;
    
    assign sum = in1 + in2;
    assign cout = in1[15] ^ in2[15] ^ cin;
endmodule"
N/A,N/A,-0.5,26.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);     
    wire [15:0] sum;
    wire cout;
    wire [15:0] in1;
    wire [15:0] in2;
    wire cin;
    
    fadder_16 fadder_16(sum, cout, in1, in2, cin);
    
endmodule

module fadder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
    wire [15:0] sum;
    wire cout;
    wire [15:0] in1;
    wire [15:0] in2;
    wire cin;
    
    assign sum = in1 + in2;
    assign cout = in1[15] ^ in2[15] ^ cin;
    
endmodule"
N/A,N/A,-1,27.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
                      
//Definition for Variables in the module
wire [15:0] sum_temp;
wire [15:0] sum;
wire cout_temp;
                       
         
                                        
adder_16_bit adder_16_bit_inst(.sum(sum_temp),.cout(cout_temp),.in1(in1),.in2(in2),.cin(cin));
                                        
flipflop_16_bit adder_16_bit_inst_1(.dout(sum),.din(sum_temp),.clk(clk),.reset(reset));
flipflop_16_bit adder_16_bit_inst_2(.dout(cout),.din(cout_temp),.clk(clk),.reset(reset));
                                        
endmodule

'''
`timescale 1ns / 1ps

module adder_16_bit(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
                      
type adder_16_bit_tb();

reg clk;
reg reset;
reg [15:0] in1;
reg [15:0] in2;
reg cin;

adder_16_bit adder_16_bit_inst(.sum(sum),.cout(cout),.in1(in1),.in2(in2),.cin(cin));

initial begin
    clk = 0;
    reset = 0;
    in1 = 0;
    in2 = 0;
    cin = 0;
    #10;
    reset = 1;
    #10;
    reset = 0;
    in1 = 16'hFFFF;
    in2 = 16'hFFFF;
    cin = 0;
    #10;
    in1 = 16'hFFFF;
    in2 = 16'hFFFF;
    cin = 1;
    #10;
    in1 = 16'hFFFF;
    in2 = 16'hFFFF;
    cin = 0;
    #10;
    in1 = 16'hFFFF;
    in2 = 16'hFFFF;
    cin = 1;
    #10;
    in1 = 16'hFFFF;
    in2 = 16'hFFFF;
    cin = 0;
    #10;
    in1 = 16'hFFFF;
    in2 = 16'hFFFF;
    cin = 1;
    #10;
    in1 = 16'hFFFF;
    in2 = 16'hFFFF;
    cin = 0;
    #10;
    in1 = 16'hFFFF;
    in2 = 16'hFFFF;
    cin = 1;
    #10;
    in1 = 16'hFFFF;
    in2 = 16'hFFFF;
    cin = 0;
    #10;
    in1 = 16'hFFFF;
    in2 = 16'hFFFF;
    cin = 1;
    #10;
    in1 = 16'hFFFF;
    in2 = 16'hFFFF;
    cin = 0;
    #10;
    in1 = 16'hFFFF;
    in2 = 16'hFFFF;
    cin = 1;
    #10;
    in1 = 16'hFFFF;
    in2 = 16'hFFFF;
    cin = 0;
    #10;
    in1 = 16'hFFFF;
    in2 = 16'hFFFF;
    cin = 1;
    #10;
    in1 = 16'hFFFF;
    in2 = 16'hFFFF;
    cin = 0;
    #10;
    in1 = 16'hFFFF;
    in2 = 16'hFFFF;
    cin = 1;
    #10;
    in1 = 16'hFFFF;
    in2 = 16'hFFFF;
    cin = 0;
    #10;
    in1 = 16'hFFFF;
    in2 = 16'hFFFF;
    cin = 1;
    #10;
    in1 = 16'hFFFF;
    in2 = 16'hFFFF;
    cin = 0;
    #10;
    in1 = 16'hFFFF;
    in2 = 16'hFFFF;
    cin = 1;
    #10;
    in1 = 16'hFFFF;
    in2 = 16'hFFFF;
    cin = 0;
    #10;
    in1 = 16'hFFFF;
    in2 = 16'hFFFF;
    cin = 1;
    #10;
    in1 = 16'hFFFF;
    in2 = 16'hFFFF;
    cin = 0;
    #10;
    in1 = 16'hFFFF;
    in2 = 16'hFFFF;
    cin = 1;
    #10;
    in1 = 16'hFFFF;
    in2 = 16'hFFFF;
    cin = 0;
    #10;
    in1 = 16'hFFFF;
    in2 = 16'hFFFF;
    cin = 1;
    #10;
    in1 = 16'hFFFF;
    in2 = 16'hFFFF;
    cin = 0;
    #10;
    in1 = 16'hFFFF;
    in2 = 16'hFFFF;
    cin = 1;
    #10;
    in1 = 16'hFFFF;
    in2 = 16'hFFFF;
    cin = 0;
    #10;
    in1 = 16'hFFFF;
    in2 = 16'hFFFF;
    cin = 1;
    #10;
    in1 = 16'hFFFF;
    in2 = 16'hFFFF;
    cin = 0;
    #10;
    in1 = 16'hFFFF;
    in2 = 16'hFFFF;
    cin = 1;
    #10;
    in1 = 16'hFFFF;
    in2 = 16'hFFFF;
    cin = 0;
    #10;
    in1 = 16'hFFFF;
    in2 = 16'hFFFF;
    cin = 1;
    #10;
    in1 = 16'hFFFF;
    in2 = 16'hFFFF;
    cin = 0;
    #10;
    in1 = 16'hFFFF"
N/A,N/A,-1,28.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);


    wire [15:0] sum;
    wire cout;
    wire [15:0] in1;
    wire [15:0] in2;
    wire cin;

    	HA_16 HA1(sum[15:0], in1[15:0], in2[15:0], cin);
    	FA_16 FA1(sum[31:16], cout, in1[15:0], in2[15:0], cin);

endmodule

module FA_16(output [15:0] sum,
              output cout,
              input [15:0] in1, in2,
              input cin);

    wire [15:0] sum;
    wire cout;
    wire [15:0] in1;
    wire [15:0] in2;
    wire cin;

    	FA_16 FA1(sum[15:0], cout, in1[15:0], in2[15:0], cin);
    	FA_16 FA2(sum[31:16], cout, in1[15:0], in2[15:0], 1'b0);

endmodule

module HA_16(output [15:0] sum,
              output cout,
              input [15:0] in1, in2,
              input cin);

    wire [15:0] sum;
    wire cout;
    wire [15:0] in1;
    wire [15:0] in2;
    wire cin;

    	HA_16 HA1(sum[15:0], cout, in1[15:0], in2[15:0], cin);
    	HA_16 HA2(sum[31:16], cout, in1[15:0], in2[15:0], 1'b0);

endmodule"
N/A,N/A,-1,29.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);                     
  wire [15:0] sum;
  wire cout;
  wire [15:0] in1;
  wire [15:0] in2;
  wire cin;
  
  fadder_16 fadder_16_1(sum[15:0], cout, in1[15:0], in2[15:0], cin);
  fadder_16 fadder_16_2(sum[31:16], cout, in1[31:16], in2[31:16], cout);
endmodule

module fadder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
  wire [15:0] sum;
  wire cout;
  wire [15:0] in1;
  wire [15:0] in2;
  wire cin;
  
  wire [15:0] sum_temp;
  wire [15:0] in1_temp;
  wire [15:0] in2_temp;
  wire cin_temp;
  
  assign sum_temp = in1 + in2;
  assign in1_temp = in1;
  assign in2_temp = in2;
  assign cin_temp = cin;
  
  assign sum = sum_temp[15:0];
  assign cout = cin_temp;
endmodule"
N/A,N/A,-1,30.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
        wire [15:0] sum;
        wire cout;
        wire [15:0] in1;
        wire [15:0] in2;
        wire cin;
        
        one_bit_adder_16 one_bit_adder_16_0(sum[0], c1, in1[0], in2[0], cin);
        one_bit_adder_16 one_bit_adder_16_1(sum[1], c2, in1[1], in2[1], c1);
        one_bit_adder_16 one_bit_adder_16_2(sum[2], c3, in1[2], in2[2], c2);
        one_bit_adder_16 one_bit_adder_16_3(sum[3], c4, in1[3], in2[3], c3);
        one_bit_adder_16 one_bit_adder_16_4(sum[4], c5, in1[4], in2[4], c4);
        one_bit_adder_16 one_bit_adder_16_5(sum[5], c6, in1[5], in2[5], c5);
        one_bit_adder_16 one_bit_adder_16_6(sum[6], c7, in1[6], in2[6], c6);
        one_bit_adder_16 one_bit_adder_16_7(sum[7], c8, in1[7], in2[7], c7);
        one_bit_adder_16 one_bit_adder_16_8(sum[8], c9, in1[8], in2[8], c8);
        one_bit_adder_16 one_bit_adder_16_9(sum[9], c10, in1[9], in2[9], c9);
        one_bit_adder_16 one_bit_adder_16_10(sum[10], c11, in1[10], in2[10], c10);
        one_bit_adder_16 one_bit_adder_16_11(sum[11], c12, in1[11], in2[11], c11);
        one_bit_adder_16 one_bit_adder_16_12(sum[12], c13, in1[12], in2[12], c12);
        one_bit_adder_16 one_bit_adder_16_13(sum[13], c14, in1[13], in2[13], c13);
        one_bit_adder_16 one_bit_adder_16_14(sum[14], c15, in1[14], in2[14], c14);
        one_bit_adder_16 one_bit_adder_16_15(sum[15], cout, in1[15], in2[15], c15);
endmodule

module one_bit_adder_16(output [15:0] sum,
                         output cout,
                         input in1, in2,
                         input cin);
        wire [15:0] sum;
        wire cout;
        wire in1;
        wire in2;
        wire cin;
        
        assign sum[0] = in1 ^ in2 ^ cin;
        assign sum[1] = (in1 & in2) ^ (in1 & cin) ^ (in2 & cin);
        assign sum[2] = (in1 & in2) ^ (in1 & cin) ^ (in2 & cin) ^ (in1 & in2) ^ (in1 & cin) ^ (in2 & cin);
        assign sum[3] = (in1 & in2) ^ (in1 & cin) ^ (in2 & cin) ^ (in1 & in2) ^ (in1 & cin) ^ (in2 & cin);
        assign sum[4] = (in1 & in2) ^ (in1 & cin) ^ (in2 & cin) ^ (in1 & in2) ^ (in1 & cin) ^ (in2 & cin) ^ (in1 & in2) ^ (in1 & cin) ^ (in2 & cin);
        assign sum[5] = (in1 & in2) ^ (in1 & cin) ^ (in2 & cin) ^ (in1 & in2) ^ (in1 & cin) ^ (in2 & cin) ^ (in1 & in2) ^ (in1 & cin) ^ (in2 & cin);
        assign sum[6] = (in1 & in2) ^ (in1 & cin) ^ (in2 & cin) ^ (in1 & in2) ^ (in1 & cin) ^ (in2 & cin) ^ (in1 & in2) ^ (in1 & cin) ^ (in2 & cin);
        assign sum[7] = (in1 & in2) ^ (in1 & cin) ^ (in2 & cin) ^ (in1 & in2) ^ (in1 & cin) ^ (in2 & cin) ^ (in1 & in2) ^ (in1 & cin) ^ (in2 & cin);
        assign sum[8] = (in1 & in2) ^ (in1 & cin) ^ (in2 & cin) ^ (in1 & in2) ^ (in1 & cin) ^ (in2 & cin) ^ (in1 & in2) ^ (in1 & cin) ^ (in2 & cin);
        assign sum[9] = (in1 & in2) ^ (in1 & cin) ^ (in2 & cin) ^ (in1 & in2) ^ (in1 & cin) ^ (in2 & cin) ^ (in1 & in2) ^ (in1 & cin) ^ (in2 & cin);
        assign sum[10] = (in1 & in2) ^ (in1 & cin) ^ (in2 & cin) ^ (in1 & in2) ^ (in1 & cin) ^ (in2 & cin) ^ (in1 & in2) ^ (in1 & cin) ^ (in2 & cin);
        assign sum[11] = (in1 & in2) ^ (in1 & cin) ^ (in2 & cin) ^"
N/A,N/A,-1,31.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);

   wire [15:0] sum;
   wire cout;
   wire [15:0] in1;
   wire [15:0] in2;
   wire cin;

   (* ADDER_THRESHOLD = ""35"" *)
   ADDER_FIXED_POINT ADDER(sum, cout, in1, in2, cin);

endmodule

module adder_16_tb;

   reg [15:0] in1;
   reg [15:0] in2;
   reg cin;

   wire [15:0] sum;
   wire cout;

   adder_16 DUT(sum, cout, in1, in2, cin);

   initial begin
      in1 = 16'h0000;
      in2 = 16'h0000;
      cin = 1'b0;
      #10;
      in1 = 16'h0001;
      in2 = 16'h0001;
      cin = 1'b0;
      #10;
      in1 = 16'h0002;
      in2 = 16'h0002;
      cin = 1'b0;
      #10;
      in1 = 16'h0003;
      in2 = 16'h0003;
      cin = 1'b0;
      #10;
      in1 = 16'h0004;
      in2 = 16'h0004;
      cin = 1'b0;
      #10;
      in1 = 16'h0005;
      in2 = 16'h0005;
      cin = 1'b0;
      #10;
      in1 = 16'h0006;
      in2 = 16'h0006;
      cin = 1'b0;
      #10;
      in1 = 16'h0007;
      in2 = 16'h0007;
      cin = 1'b0;
      #10;
      in1 = 16'h0008;
      in2 = 16'h0008;
      cin = 1'b0;
      #10;
      in1 = 16'h0009;
      in2 = 16'h0009;
      cin = 1'b0;
      #10;
      in1 = 16'h000a;
      in2 = 16'h000a;
      cin = 1'b0;
      #10;
      in1 = 16'h000b;
      in2 = 16'h000b;
      cin = 1'b0;
      #10;
      in1 = 16'h000c;
      in2 = 16'h000c;
      cin = 1'b0;
      #10;
      in1 = 16'h000d;
      in2 = 16'h000d;
      cin = 1'b0;
      #10;
      in1 = 16'h000e;
      in2 = 16'h000e;
      cin = 1'b0;
      #10;
      in1 = 16'h000f;
      in2 = 16'h000f;
      cin = 1'b0;
      #10;
      in1 = 16'h0010;
      in2 = 16'h0010;
      cin = 1'b0;
      #10;
      in1 = 16'h0011;
      in2 = 16'h0011;
      cin = 1'b0;
      #10;
      in1 = 16'h0012;
      in2 = 16'h0012;
      cin = 1'b0;
      #10;
      in1 = 16'h0013;
      in2 = 16'h0013;
      cin = 1'b0;
      #10;
      in1 = 16'h0014;
      in2 = 16'h0014;
      cin = 1'b0;
      #10;
      in1 = 16'h0015;
      in2 = 16'h0015;
      cin = 1'b0;
      #10;
      in1 = 16'h0016;
      in2 = 16'h0016;
      cin = 1'b0;
      #10;
      in1 = 16'h0017;
      in2 = 16'h0017;
      cin = 1'b0;
      #10;
      in1 = 16'h0018;
      in2 = 16'h0018;
      cin = 1'b0;
      #10;
      in1 = 16'h0019;
      in2 = 16'h0019;
      cin = 1'b0;
      #10;
      in1 = 16'h001a;
      in2 = 16'h001a;
      cin = 1'b0;
      #10;
      in1 = 16'h001b;
      in2 = 16'h001b;
      cin = 1'b0;
      #10;
      in1 = 16'h001c;
      in2 = 16'h001c;
      cin = 1'b0;
      #10;
      in1 = 16'h001d;
      in2 = 16'h001d;
      cin = 1'b0;
      #10;
      in1 = 16'h001e;
      in2 = 16'h001e;
      cin = 1'b0;
      #10;
      in1 = 16'h001f;
      in2 = 16'h001f;
      cin = 1'b0;
      #10;
      in1 = 16'h0020;
      in2 = 16'h0020;
      cin = 1'b0;
      #10;
      in1 = 16'h0021;
      in2 = 16'h0021;
      cin = 1'b0;
      #10;
      in1 = 16'h0022;
      in2 = 16'h0022;
      cin = 1'b0;
      #10;
      in1 = 16'h0023;
      in2 = 16'h0023;
      cin = 1'b0;
      #10;
      in1 = 16'h0024;
      in2 = 16'h0024;
      cin = 1'b0;
      #10;
      in1 = 16'h00"
N/A,N/A,-0.5,32.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);        
    wire [15:0] sum;
    wire cout;
    wire [15:0] in1;
    wire [15:0] in2;
    wire cin;
    
    comparator_16 comp(sum, cin, in1, in2);
    
    adder_16_bit adder(sum[15:0], cout, in1[15:0], in2[15:0], cin);
    
endmodule

module comparator_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2);
    wire [15:0] in1;
    wire [15:0] in2;
    wire [15:0] sum;
    wire cout;
    
    assign sum = in1 + in2;
    assign cout = (in1[15:0] == in2[15:0]);
    
endmodule

module adder_16_bit(output [15:0] sum,
                     output cout,
                     input [15:0] in1, in2,
                     input cin);
    wire [15:0] in1;
    wire [15:0] in2;
    wire cin;
    wire [15:0] sum;
    wire cout;
    
    assign sum = in1 + in2;
    assign cout = (in1[15:0] == in2[15:0]);
    
endmodule"
N/A,N/A,-1,33.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);                          
  wire [15:0] sum;
  wire cout;
  wire [15:0] in1;
  wire [15:0] in2;
  wire cin;
  
  ALU_16bit alu_16bit_0(sum[15:0], cout, in1[15:0], in2[15:0], cin);
endmodule

module ALU_16bit(output [15:0] sum,
                  output cout,
                  input [15:0] in1, in2,
                  input cin);
  wire [15:0] sum;
  wire cout;
  wire [15:0] in1;
  wire [15:0] in2;
  wire cin;
  
  wire [15:0] sum;
  wire cout;
  wire [15:0] in1;
  wire [15:0] in2;
  wire cin;
  
  wire [15:0] sum;
  wire cout;
  wire [15:0] in1;
  wire [15:0] in2;
  wire cin;
  
  wire [15:0] sum;
  wire cout;
  wire [15:0] in1;
  wire [15:0] in2;
  wire cin;
  
  wire [15:0] sum;
  wire cout;
  wire [15:0] in1;
  wire [15:0] in2;
  wire cin;
  
  wire [15:0] sum;
  wire cout;
  wire [15:0] in1;
  wire [15:0] in2;
  wire cin;
  
  wire [15:0] sum;
  wire cout;
  wire [15:0] in1;
  wire [15:0] in2;
  wire cin;
  
  wire [15:0] sum;
  wire cout;
  wire [15:0] in1;
  wire [15:0] in2;
  wire cin;
  
  wire [15:0] sum;
  wire cout;
  wire [15:0] in1;
  wire [15:0] in2;
  wire cin;
  
  wire [15:0] sum;
  wire cout;
  wire [15:0] in1;
  wire [15:0] in2;
  wire cin;
  
  wire [15:0] sum;
  wire cout;
  wire [15:0] in1;
  wire [15:0] in2;
  wire cin;
  
  wire [15:0] sum;
  wire cout;
  wire [15:0] in1;
  wire [15:0] in2;
  wire cin;
  
  wire [15:0] sum;
  wire cout;
  wire [15:0] in1;
  wire [15:0] in2;
  wire cin;
  
  wire [15:0] sum;
  wire cout;
  wire [15:0] in1;
  wire [15:0] in2;
  wire cin;
  
  wire [15:0] sum;
  wire cout;
  wire [15:0] in1;
  wire [15:0] in2;
  wire cin;
  
  wire [15:0] sum;
  wire cout;
  wire [15:0] in1;
  wire [15:0] in2;
  wire cin;
  
  wire [15:0] sum;
  wire cout;
  wire [15:0] in1;
  wire [15:0] in2;
  wire cin;
  
  wire [15:0] sum;
  wire cout;
  wire [15:0] in1;
  wire [15:0] in2;
  wire cin;
  
  wire [15:0] sum;
  wire cout;
  wire [15:0] in1;
  wire [15:0] in2;
  wire cin;
  
  wire [15:0] sum;
  wire cout;
  wire [15:0] in1;
  wire [15:0] in2;
  wire cin;
  
  wire [15:0] sum;
  wire cout;
  wire [15:0] in1;
  wire [15:0] in2;
  wire cin;
  
  wire [15:0] sum;
  wire cout;
  wire [15:0] in1;
  wire [15:0] in2;
  wire cin;
  
  wire [15:0] sum;
  wire cout;
  wire [15:0] in1;
  wire [15:0] in2;
  wire cin;
  
  wire [15:0] sum;
  wire cout;
  wire [15:0] in1;
  wire [15:0] in2;
  wire cin;
  
  wire [15:0] sum;
  wire cout;
  wire [15:0] in1;
  wire [15:0] in2;
  wire cin;
  
  wire [15:0] sum;
  wire cout;
  wire [15:0] in1;
  wire [15:0] in2;
  wire cin;
  
  wire [15:0] sum;
  wire cout;
  wire [15:0] in1;
  wire [15:0] in2;
  wire cin;
  
  wire [15:0] sum;
  wire cout;
  wire [15:0] in1;
  wire [15:0] in2;
  wire cin;
  
  wire [15:0] sum;
  wire cout;
  wire [15:0] in1;
  wire [15:0] in2;
  wire cin;
  
  wire [15:0] sum;
  wire cout;
  wire [15:0] in1;
  wire [15:0] in2;
  wire cin;
  
  wire [15:0] sum;
  wire cout;
  wire ["
N/A,N/A,-0.5,34.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);     
    wire [15:0] sum;
    wire cout;
    wire [15:0] in1;
    wire [15:0] in2;
    wire cin;
    
    comparator_16 comp(sum, cin, in1, in2);
    adder_16_bit adder(sum[15:0], cout, in1[15:0], in2[15:0], cin);
endmodule

module comparator_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2);
    wire [15:0] in1;
    wire [15:0] in2;
    wire [15:0] sum;
    wire cout;
    
    assign sum = in1 + in2;
    assign cout = (in1[15:0] == in2[15:0]);
endmodule

module adder_16_bit(output [15:0] sum,
                     output cout,
                     input [15:0] in1, in2,
                     input cin);
    wire [15:0] in1;
    wire [15:0] in2;
    wire cin;
    wire [15:0] sum;
    wire cout;
    
    assign sum = in1 + in2;
    assign cout = (in1[15:0] == in2[15:0]);
endmodule"
N/A,N/A,-1,35.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
 
  wire [15:0] sum;
  wire cout;
  wire [15:0] in1;
  wire [15:0] in2;
  wire cin;
 
  parameter [15:0] carry_in = 16'b0;
 
  latch_16bit l1(sum, in1, in2, cin);
  latch_16bit l2(cout, sum, carry_in, cin);
 
endmodule
 
***************************************************************************************************
                         ***   ***
***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***
***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***
***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***
***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***
***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***
***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***
***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***
***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***
***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***
***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***
***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***
***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***
***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***
***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***
***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***
***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***
***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***
***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***
***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***
***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***
***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***
***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***
***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***
***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***
***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***
***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***
***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***
***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***
***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***
***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***
***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***
***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***
***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***
***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***
***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***
***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***  ***
***  ***  "
N/A,N/A,-1,36.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);

    wire [15:0] sum;
    wire cout;
    wire [15:0] in1;
    wire [15:0] in2;
    wire cin;

    logic [15:0] sum;
    logic cout;
    logic [15:0] in1;
    logic [15:0] in2;
    logic cin;

    task adder_16_task;
        input [15:0] in1;
        input [15:0] in2;
        input cin;
        begin
            sum = in1 + in2 + cin;
            cout = (in1[15] == in2[15] && in1[15] == cin)? 1'b1 : 1'b0;
        end
    endtask
    
    initial begin
        in1 = 16'b0000000000000001;
        in2 = 16'b0000000000000010;
        cin = 1'b0;
        #10
        in1 = 16'b0000000000000011;
        in2 = 16'b0000000000000100;
        cin = 1'b0;
        #10
        in1 = 16'b0000000000000101;
        in2 = 16'b0000000000001000;
        cin = 1'b0;
        #10
        in1 = 16'b0000000000001001;
        in2 = 16'b0000000000010000;
        cin = 1'b0;
        #10
        in1 = 16'b0000000000010001;
        in2 = 16'b0000000000100000;
        cin = 1'b0;
        #10
        in1 = 16'b0000000000100100;
        in2 = 16'b0000000001000000;
        cin = 1'b0;
        #10
        in1 = 16'b0000000001000001;
        in2 = 16'b0000000010000000;
        cin = 1'b0;
        #10
        in1 = 16'b0000000010000001;
        in2 = 16'b0000000100000000;
        cin = 1'b0;
        #10
        in1 = 16'b0000000100000010;
        in2 = 16'b0000000100000011;
        cin = 1'b0;
        #10
        in1 = 16'b0000000100000101;
        in2 = 16'b0000000100001000;
        cin = 1'b0;
        #10
        in1 = 16'b0000000100001001;
        in2 = 16'b0000000100010000;
        cin = 1'b0;
        #10
        in1 = 16'b0000000100010001;
        in2 = 16'b0000000100100001;
        cin = 1'b0;
        #10
        in1 = 16'b0000000100101000;
        in2 = 16'b0000000100110000;
        cin = 1'b0;
        #10
        in1 = 16'b0000000100110001;
        in2 = 16'b0000000101000000;
        cin = 1'b0;
        #10
        in1 = 16'b0000000101000001;
        in2 = 16'b0000000101000010;
        cin = 1'b0;
        #10
        in1 = 16'b0000000101000100;
        in2 = 16'b0000000101000111;
        cin = 1'b0;
        #10
        in1 = 16'b0000000101001010;
        in2 = 16'b0000000101001011;
        cin = 1'b0;
        #10
        in1 = 16'b0000000101010000;
        in2 = 16'b0000000101010010;
        cin = 1'b0;
        #10
        in1 = 16'b0000000101010001;
        in2 = 16'b0000000101010100;
        cin = 1'b0;
        #10
        in1 = 16'b0000000101010110;
        in2 = 16'b0000000101010111;
        cin = 1'b0;
        #10
        in1 = 16'b0000000101100000;
        in2 = 16'b0000000101100011;
        cin = 1'b0;
        #10
        in1 = 16'b0000000101100100;
        in2 = 16'b0000000101100101;
        cin = 1'b0;
        #10
        in1 = 16'b0000000101101000;
        in2 = 16'b0000000101101010;
        cin = 1'b0;
        #10
        in1 = 16'b0000000101101100;
        in2 = 16'b0000000101101101;
        cin = 1'b0;
        #10
        in1 = 16'b0000000101110000;
        in2 = 16'b0000000101110001;
        cin = 1'b0;
        #10
        in1 = 16'b0000000101110110;
        in2 = 16'b0000000101110111;
        cin = 1'b0;
        #10
        in1 = 16'b0000000101111000;
        in2 = 16'b0000000101111001;
        cin = 1'b0;
        #10
        in1 = 16'b0000000101111100;
        in2 = 16'b0000000101111101;
        cin = 1'b0;
        #10
        in1 = 16'b0000000101111110;
        in2 = 16'b0000000101111111;
        cin = 1'b0;
        #10
        in1 = 16'b00000001100000001;
        in2 = 16'b0000000110000001;
        cin = 1'b0;
        #10
        in1 = 16'b0000000110000010;
        in2 = 16'b0000000110000011;
        cin = 1'b0;
        #10
        in1 = 16'b0000000110000100;
        in2 = 16'b0000000110000101;
        cin = 1'b0;
        #10
        in1 = 16'b0000000110000110;
        in2 = 16'b0000000110000111;
        cin ="
N/A,N/A,-1,37.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);                     

    wire [15:0] sum;
    wire cout;
    wire [15:0] in1;
    wire [15:0] in2;
    wire cin;

    comparator_16 comp_1(.a(in1),.b(in2),.cin(cin),.sum(sum),.cout(cout));
endmodule

module comparator_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
    wire [15:0] sum;
    wire cout;
    wire [15:0] in1;
    wire [15:0] in2;
    wire cin;

    wire [15:0] a;
    wire [15:0] b;
    wire [15:0] c;
    wire [15:0] d;
    wire [15:0] e;
    wire [15:0] f;
    wire [15:0] g;
    wire [15:0] h;
    wire [15:0] i;
    wire [15:0] j;
    wire [15:0] k;
    wire [15:0] l;
    wire [15:0] m;
    wire [15:0] n;
    wire [15:0] o;
    wire [15:0] p;
    wire [15:0] q;
    wire [15:0] r;
    wire [15:0] s;
    wire [15:0] t;
    wire [15:0] u;
    wire [15:0] v;
    wire [15:0] w;
    wire [15:0] x;
    wire [15:0] y;
    wire [15:0] z;

    assign a = in1;
    assign b = in2;
    assign cin = 1'b0;

    assign sum = a + b + cin;
    assign cout = (a & b) | (a & cin) | (b & cin);
endmodule"
N/A,N/A,-1,38.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
      wire [15:0] sum;
      wire cout;
      wire [15:0] in1;
      wire [15:0] in2;
      wire cin;
      
      kogge_stone_16 KS_1(sum, in1, in2, cin);
      kogge_stone_1 KS_2(cout, sum[15], sum[14], sum[13], sum[12], sum[11], sum[10], sum[9], sum[8], sum[7], sum[6], sum[5], sum[4], sum[3], sum[2], sum[1], sum[0]);
endmodule

Top level design
module top_module(
    input clk,
    input reset,
    input [7:0] in,
    output [7:0] out_both,
    output [7:0] out_any,
    output [7:0] out_different
);
    
    wire [7:0] out_both;
    wire [7:0] out_any;
    wire [7:0] out_different;
    
    reg [7:0] out_reg;
    
    always @(posedge clk) begin
        if(reset) begin
            out_reg <= 0;
        end else begin
            out_reg <= in;
        end
    end
    
    assign out_both = out_reg & in;
    assign out_any = out_reg | in;
    assign out_different = out_reg ^ in;
    
endmodule"
N/A,N/A,-1,39.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);        
    wire [15:0] sum;
    wire cout;
    wire [15:0] in1;
    wire [15:0] in2;
    wire cin;
    
    Adder_16bit adder(sum, cout, in1, in2, cin);
    
endmodule

module Adder_16bit(output [15:0] sum,
                     output cout,
                     input [15:0] in1, in2,
                     input cin);
    wire [15:0] sum;
    wire cout;
    wire [15:0] in1;
    wire [15:0] in2;
    wire cin;
    
    wire [15:0] sum1;
    wire cout1;
    
    wire [15:0] sum2;
    wire cout2;
    
    wire [15:0] sum3;
    wire cout3;
    
    wire [15:0] sum4;
    wire cout4;
    
    wire [15:0] sum5;
    wire cout5;
    
    wire [15:0] sum6;
    wire cout6;
    
    wire [15:0] sum7;
    wire cout7;
    
    wire [15:0] sum8;
    wire cout8;
    
    wire [15:0] sum9;
    wire cout9;
    
    wire [15:0] sum10;
    wire cout10;
    
    wire [15:0] sum11;
    wire cout11;
    
    wire [15:0] sum12;
    wire cout12;
    
    wire [15:0] sum13;
    wire cout13;
    
    wire [15:0] sum14;
    wire cout14;
    
    wire [15:0] sum15;
    wire cout15;
    
    wire [15:0] sum16;
    wire cout16;
    
    wire [15:0] sum17;
    wire cout17;
    
    wire [15:0] sum18;
    wire cout18;
    
    wire [15:0] sum19;
    wire cout19;
    
    wire [15:0] sum20;
    wire cout20;
    
    wire [15:0] sum21;
    wire cout21;
    
    wire [15:0] sum22;
    wire cout22;
    
    wire [15:0] sum23;
    wire cout23;
    
    wire [15:0] sum24;
    wire cout24;
    
    wire [15:0] sum25;
    wire cout25;
    
    wire [15:0] sum26;
    wire cout26;
    
    wire [15:0] sum27;
    wire cout27;
    
    wire [15:0] sum28;
    wire cout28;
    
    wire [15:0] sum29;
    wire cout29;
    
    wire [15:0] sum30;
    wire cout30;
    
    wire [15:0] sum31;
    wire cout31;
    
    wire [15:0] sum32;
    wire cout32;
    
    wire [15:0] sum33;
    wire cout33;
    
    wire [15:0] sum34;
    wire cout34;
    
    wire [15:0] sum35;
    wire cout35;
    
    wire [15:0] sum36;
    wire cout36;
    
    wire [15:0] sum37;
    wire cout37;
    
    wire [15:0] sum38;
    wire cout38;
    
    wire [15:0] sum39;
    wire cout39;
    
    wire [15:0] sum40;
    wire cout40;
    
    wire [15:0] sum41;
    wire cout41;
    
    wire [15:0] sum42;
    wire cout42;
    
    wire [15:0] sum43;
    wire cout43;
    
    wire [15:0] sum44;
    wire cout44;
    
    wire [15:0] sum45;
    wire cout45;
    
    wire [15:0] sum46;
    wire cout46;
    
    wire [15:0] sum47;
    wire cout47;
    
    wire [15:0] sum48;
    wire cout48;
    
    wire [15:0] sum49;
    wire cout49;
    
    wire [15:0] sum50;
    wire cout50;
    
    wire [15:0] sum51;
    wire cout51;
    
    wire [15:0] sum52;
    wire cout52;
    
    wire [15:0] sum53;
    wire cout53;
    
    wire [15:0] sum54;
    wire cout54;
    
    wire [15:0] sum55;
    wire cout55;
    
    wire [15:0] sum56;
    wire cout56;
    
    wire [15:0] sum57;
    wire cout57;
    
    wire [15:0] sum58;
    wire cout58;
    
    wire [15:0] sum59;
    wire cout59;
    
    wire [15:0] sum60;
    wire cout60;
    
    wire [15:0] sum61;
    wire cout61;
    
    wire [15:0] sum62;
    wire cout62;
    
    wire [15:0] sum63;
    wire cout63;
    
    wire [15:0] sum64;
    wire cout64;
    
    wire [15:0] sum65;
    wire cout65;
    
    wire [15:0] sum66;
    wire cout66;
    
    wire [15:0] sum67;
    wire cout67;
    
    wire [15:0] sum68;
    wire cout68;
    
    wire [15:0] sum69;
    wire cout69;
    
    wire [15:0] sum70;
    wire cout70;
    
    wire [15:0] sum"
N/A,N/A,-1,40.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);     
    wire [15:0] sum;
    wire cout;
    wire [15:0] in1;
    wire [15:0] in2;
    wire cin;
    
    logic [15:0] sum;
    logic cout;
    logic [15:0] in1;
    logic [15:0] in2;
    logic cin;
    
    altera_add_sub #(16) adder_16_inst (
       .sum (sum),
       .cout (cout),
       .in1 (in1),
       .in2 (in2),
       .cin (cin)
    );
endmodule"
N/A,N/A,-0.5,41.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
   wire c1, c2, c3;
   wire [15:0] sum;
   
   adder_4 adder_4_1(sum[3:0], c1, in1[3:0], in2[3:0], cin);
   adder_4 adder_4_2(sum[7:4], c2, in1[7:4], in2[7:4], c1);
   adder_4 adder_4_3(sum[11:8], c3, in1[11:8], in2[11:8], c2);
   adder_4 adder_4_4(sum[15:12], cout, in1[15:12], in2[15:12], c3);
endmodule

module adder_4(output [3:0] sum,
                      output cout,
                      input [3:0] in1, in2,
                      input cin);
   wire c1, c2, c3;
   wire [3:0] sum;
   
   adder_1 adder_1_1(sum[0], c1, in1[0], in2[0], cin);
   adder_1 adder_1_2(sum[1], c2, in1[1], in2[1], c1);
   adder_1 adder_1_3(sum[2], c3, in1[2], in2[2], c2);
   adder_1 adder_1_4(sum[3], cout, in1[3], in2[3], c3);
endmodule

module adder_1(output sum,
                      output cout,
                      input in1, in2, cin);
   wire c1, c2;
   wire sum;
   
   xor(sum, in1, in2, cin);
   and(c1, in1, in2);
   and(c2, in1, cin);
   and(cout, in2, cin);
endmodule"
N/A,N/A,-1,42.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
	wire [15:0] sum;
	wire cout;
	wire [15:0] in1;
	wire [15:0] in2;
	wire cin;
	
	parameter [15:0] carry_in = 16'b0;
	
	alt_adder_16 adder(sum, cout, in1, in2, carry_in);
	
endmodule

module adder_16_tb;
	reg [15:0] in1;
	reg [15:0] in2;
	reg cin;
	wire [15:0] sum;
	wire cout;
	
	adder_16 adder(sum, cout, in1, in2, cin);
	
	initial
	begin
		$dumpfile(""adder_16_tb.vcd"");
		$dumpvars(0, adder_16_tb);
		
		in1 = 16'b0;
		in2 = 16'b0;
		cin = 1'b0;
		
		#10
		in1 = 16'b11111111;
		in2 = 16'b11111111;
		cin = 1'b0;
		
		#10
		in1 = 16'b11111111;
		in2 = 16'b11111111;
		cin = 1'b1;
		
		#10
		in1 = 16'b11111111;
		in2 = 16'b11111111;
		cin = 1'b0;
		
		#10
		in1 = 16'b11111111;
		in2 = 16'b11111111;
		cin = 1'b1;
		
		#10
		in1 = 16'b11111111;
		in2 = 16'b11111111;
		cin = 1'b0;
		
		#10
		in1 = 16'b11111111;
		in2 = 16'b11111111;
		cin = 1'b1;
		
		#10
		in1 = 16'b11111111;
		in2 = 16'b11111111;
		cin = 1'b0;
		
		#10
		in1 = 16'b11111111;
		in2 = 16'b11111111;
		cin = 1'b1;
		
		#10
		in1 = 16'b11111111;
		in2 = 16'b11111111;
		cin = 1'b0;
		
		#10
		in1 = 16'b11111111;
		in2 = 16'b11111111;
		cin = 1'b1;
		
		#10
		in1 = 16'b11111111;
		in2 = 16'b11111111;
		cin = 1'b0;
		
		#10
		in1 = 16'b11111111;
		in2 = 16'b11111111;
		cin = 1'b1;
		
		#10
		in1 = 16'b11111111;
		in2 = 16'b11111111;
		cin = 1'b0;
		
		#10
		in1 = 16'b11111111;
		in2 = 16'b11111111;
		cin = 1'b1;
		
		#10
		in1 = 16'b11111111;
		in2 = 16'b11111111;
		cin = 1'b0;
		
		#10
		in1 = 16'b11111111;
		in2 = 16'b11111111;
		cin = 1'b1;
		
		#10
		in1 = 16'b11111111;
		in2 = 16'b11111111;
		cin = 1'b0;
		
		#10
		in1 = 16'b11111111;
		in2 = 16'b11111111;
		cin = 1'b1;
		
		#10
		in1 = 16'b11111111;
		in2 = 16'b11111111;
		cin = 1'b0;
		
		#10
		in1 = 16'b11111111;
		in2 = 16'b11111111;
		cin = 1'b1;
		
		#10
		in1 = 16'b11111111;
		in2 = 16'b11111111;
		cin = 1'b0;
		
		#10
		in1 = 16'b11111111;
		in2 = 16'b11111111;
		cin = 1'b1;
		
		#10
		in1 = 16'b11111111;
		in2 = 16'b11111111;
		cin = 1'b0;
		
		#10
		in1 = 16'b11111111;
		in2 = 16'b11111111;
		cin = 1'b1;
		
		#10
		in1 = 16'b11111111;
		in2 = 16'b11111111;
		cin = 1'b0;
		
		#10
		in1 = 16'b11111111;
		in2 = 16'b11111111;
		cin = 1'b1;
		
		#10
		in1 = 16'b11111111;
		in2 = 16'b11111111;
		cin = 1'b0;
		
		#10
		in1 = 16'b11111111;
		in2 = 16'b11111111;
		cin = 1'b1;
		
		#10
		in1 = 16'b11111111;
		in2 = 16'b11111111;
		cin = 1'b0;
		
		#10
		in1 = 16'b11111111;
		in2 = 16'b11111111;
		cin = 1'b1;
		
		#10
		in1 = 16'b11111111;
		in2 = 16'b11111111;
		cin = 1'b0;
		
		#10
		in1 = 16'b11111111;
		in2 = 16'b11111111;
		cin = 1'b1;
		
		#10
		in1 = 16'b11111111;
		in2 = 16'b11111111;
		cin = 1'b0;
		
		#10
		in1 = 16'b11111111;
		in2 = 16'b11111111;
		cin = 1'b1"
N/A,N/A,-0.5,43.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);

  wire [15:0] sum;
  wire cout;
  wire [15:0] in1;
  wire [15:0] in2;
  wire cin;

  alu_16bit alu_16bit_0(sum, cout, in1, in2, cin);

endmodule

module alu_16bit(output [15:0] sum,
                  output cout,
                  input [15:0] in1, in2,
                  input cin);

  wire [15:0] sum;
  wire cout;
  wire [15:0] in1;
  wire [15:0] in2;
  wire cin;

  wire [15:0] sum_temp;
  wire cout_temp;
  wire [15:0] in1_temp;
  wire [15:0] in2_temp;
  wire cin_temp;

  assign sum_temp = in1 + in2;
  assign cout_temp = (in1[15] == in2[15])? 1'b0 : (in1[15] == sum_temp[15]? 1'b1 : 1'b0);
  assign in1_temp = in1;
  assign in2_temp = in2;
  assign cin_temp = cin;

  assign sum = sum_temp[15:0];
  assign cout = cout_temp;
  assign in1 = in1_temp;
  assign in2 = in2_temp;
  assign cin = cin_temp;

endmodule"
N/A,N/A,-0.5,44.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);

        wire [15:0] sum;
        wire cout;
        wire [15:0] in1;
        wire [15:0] in2;
        wire cin;

        register_16 r1(sum, in1, in2, cin);
        mux_2to1 m1(sum, in1, in2, cin);
        and a1(cout, in1[0], in2[0], cin);

endmodule

module mux_2to1(output [15:0] out,
                input [15:0] in1, in2,
                input cin);

        wire [15:0] out;
        wire [15:0] in1;
        wire [15:0] in2;
        wire cin;

        assign out = (cin)? in2 : in1;

endmodule

module register_16(output [15:0] out,
                    input [15:0] in,
                    input [15:0] in2,
                    input cin);

        wire [15:0] out;
        wire [15:0] in;
        wire [15:0] in2;
        wire cin;

        assign out = (cin)? in2 : in;

endmodule"
N/A,N/A,-0.5,45.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);

      wire [15:0] sum;
      wire cout;
      wire [15:0] in1;
      wire [15:0] in2;
      wire cin;

      localparam ADD = 1'b0;
      localparam SUB = 1'b1;
      wire [15:0] sum_temp;
      wire [15:0] in1_temp;
      wire [15:0] in2_temp;
      wire cin_temp;

      assign sum_temp = in1 + in2;
      assign in1_temp = in1;
      assign in2_temp = in2;
      assign cin_temp = cin;

      assign sum = sum_temp[15:0];
      assign cout = cin_temp;

endmodule"
N/A,N/A,-0.5,46.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);

	wire [15:0] sum;
	wire cout;
	wire [15:0] in1;
	wire [15:0] in2;
	wire cin;

	decoder_16 decoder(sum, cout, in1, in2, cin);

endmodule

module decoder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);

	wire [15:0] sum;
	wire cout;
	wire [15:0] in1;
	wire [15:0] in2;
	wire cin;

	assign sum = in1 ^ in2;
	assign cout = cin & (in1 ^ in2);

endmodule"
N/A,N/A,-1,47.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);

     wire [15:0] sum;
     wire cout;
     wire [15:0] in1;
     wire [15:0] in2;
     wire cin;

     

     hadd_16 adder_1(sum[15:0], cout, in1[15:0], in2[15:0], cin);
     hadd_16 adder_2(sum[31:16], cout, in1[31:16], in2[31:16], cout);

endmodule

module hadd_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);

     wire [15:0] sum;
     wire cout;
     wire [15:0] in1;
     wire [15:0] in2;
     wire cin;

     wire [15:0] sum_temp;
     wire [15:0] in1_temp;
     wire [15:0] in2_temp;
     wire cin_temp;

     assign sum_temp = in1 + in2;
     assign in1_temp = in1;
     assign in2_temp = in2;
     assign cin_temp = cin;

     assign sum[15:0] = sum_temp[15:0];
     assign cout = sum_temp[16];

endmodule"
N/A,N/A,-1,48.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
                          
  wire [15:0] sum;
  wire cout;
  wire [15:0] in1;
  wire [15:0] in2;
  wire cin;
  
  

  two_bit_ripple_adder adder_1(sum[0], c1, in1[0], in2[0], cin);
  two_bit_ripple_adder adder_2(sum[1], c2, in1[1], in2[1], c1);
  two_bit_ripple_adder adder_3(sum[2], c3, in1[2], in2[2], c2);
  two_bit_ripple_adder adder_4(sum[3], c4, in1[3], in2[3], c3);
  two_bit_ripple_adder adder_5(sum[4], c5, in1[4], in2[4], c4);
  two_bit_ripple_adder adder_6(sum[5], c6, in1[5], in2[5], c5);
  two_bit_ripple_adder adder_7(sum[6], c7, in1[6], in2[6], c6);
  two_bit_ripple_adder adder_8(sum[7], c8, in1[7], in2[7], c7);
  two_bit_ripple_adder adder_9(sum[8], c9, in1[8], in2[8], c8);
  two_bit_ripple_adder adder_10(sum[9], c10, in1[9], in2[9], c9);
  two_bit_ripple_adder adder_11(sum[10], c11, in1[10], in2[10], c10);
  two_bit_ripple_adder adder_12(sum[11], c12, in1[11], in2[11], c11);
  two_bit_ripple_adder adder_13(sum[12], c13, in1[12], in2[12], c12);
  two_bit_ripple_adder adder_14(sum[13], c14, in1[13], in2[13], c13);
  two_bit_ripple_adder adder_15(sum[14], c15, in1[14], in2[14], c14);
  two_bit_ripple_adder adder_16(sum[15], cout, in1[15], in2[15], c15);

endmodule

module two_bit_ripple_adder(output [1:0] sum,
                      output cout,
                      input in1, in2,
                      input cin);
                          
  wire [1:0] in1;
  wire [1:0] in2;
  wire cin;
  wire [1:0] sum;
  wire cout;
  
  
  
  xor(sum[0], in1[0], in2[0], cin);
  xor(sum[1], in1[1], in2[1], cin);
  and(cout, in1[0], in2[0], cin);
  
endmodule"
N/A,N/A,-1,49.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);                              
  wire c1, c2, c3;
  wire [15:0] sum;
  
  three_bit_ripple_adder add1(sum[3:0], c1, in1[3:0], in2[3:0], cin);
  three_bit_ripple_adder add2(sum[7:4], c2, in1[7:4], in2[7:4], c1);
  three_bit_ripple_adder add3(sum[11:8], c3, in1[11:8], in2[11:8], c2);
  three_bit_ripple_adder add4(sum[15:12], cout, in1[15:12], in2[15:12], c3);
endmodule

module three_bit_ripple_adder(output [2:0] sum,
                               output cout,
                               input [2:0] in1, in2,
                               input cin);
  wire c1, c2, c3;
  wire [2:0] sum;
  
  adder_16 add1(sum[0], c1, in1[0], in2[0], cin);
  adder_16 add2(sum[1], c2, in1[1], in2[1], c1);
  adder_16 add3(sum[2], c3, in1[2], in2[2], c2);
  adder_16 add4(cout, cout, in1[3], in2[3], c3);
endmodule"
151.886,636.95,0.1,50.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,51.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
N/A,N/A,-1,52.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
  wire c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15;
  wire [15:0] sum1, sum2, sum3, sum4, sum5, sum6, sum7, sum8, sum9, sum10, sum11, sum12, sum13, sum14, sum15;
  
  binary_adder_16 b1(sum1, c1, in1[15:0], in2[15:0], cin);
  binary_adder_16 b2(sum2, c2, in1[15:0], in2[15:0], c1);
  binary_adder_16 b3(sum3, c3, in1[15:0], in2[15:0], c2);
  binary_adder_16 b4(sum4, c4, in1[15:0], in2[15:0], c3);
  binary_adder_16 b5(sum5, c5, in1[15:0], in2[15:0], c4);
  binary_adder_16 b6(sum6, c6, in1[15:0], in2[15:0], c5);
  binary_adder_16 b7(sum7, c7, in1[15:0], in2[15:0], c6);
  binary_adder_16 b8(sum8, c8, in1[15:0], in2[15:0], c7);
  binary_adder_16 b9(sum9, c9, in1[15:0], in2[15:0], c8);
  binary_adder_16 b10(sum10, c10, in1[15:0], in2[15:0], c9);
  binary_adder_16 b11(sum11, c11, in1[15:0], in2[15:0], c10);
  binary_adder_16 b12(sum12, c12, in1[15:0], in2[15:0], c11);
  binary_adder_16 b13(sum13, c13, in1[15:0], in2[15:0], c12);
  binary_adder_16 b14(sum14, c14, in1[15:0], in2[15:0], c13);
  binary_adder_16 b15(sum15, c15, in1[15:0], in2[15:0], c14);
  
  assign sum = {sum15, sum14, sum13, sum12, sum11, sum10, sum9, sum8, sum7, sum6, sum5, sum4, sum3, sum2, sum1};
  assign cout = c15;
endmodule

module adder_16_tb;
  reg [15:0] in1, in2;
  reg cin;
  wire [15:0] sum;
  wire cout;
  
  adder_16 a1(sum, cout, in1, in2, cin);
  
  initial
  begin
    $dumpfile(""adder_16_tb.vcd"");
    $dumpvars(0, adder_16_tb);
    
    in1 = 16'b000000000000;
    in2 = 16'b000000000000;
    cin = 1'b0;
    #10
    in1 = 16'b111111111111;
    in2 = 16'b111111111111;
    cin = 1'b0;
    #10
    in1 = 16'b111111111111;
    in2 = 16'b111111111111;
    cin = 1'b1;
    #10
    in1 = 16'b111111111111;
    in2 = 16'b111111111111;
    cin = 1'b1;
    #10
    in1 = 16'b111111111111;
    in2 = 16'b111111111111;
    cin = 1'b0;
    #10
    in1 = 16'b111111111111;
    in2 = 16'b111111111111;
    cin = 1'b0;
    #10
    in1 = 16'b111111111111;
    in2 = 16'b111111111111;
    cin = 1'b1;
    #10
    in1 = 16'b111111111111;
    in2 = 16'b111111111111;
    cin = 1'b1;
    #10
    in1 = 16'b111111111111;
    in2 = 16'b111111111111;
    cin = 1'b0;
    #10
    in1 = 16'b111111111111;
    in2 = 16'b111111111111;
    cin = 1'b0;
    #10
    in1 = 16'b111111111111;
    in2 = 16'b111111111111;
    cin = 1'b1;
    #10
    in1 = 16'b111111111111;
    in2 = 16'b111111111111;
    cin = 1'b1;
    #10
    in1 = 16'b111111111111;
    in2 = 16'b111111111111;
    cin = 1'b0;
    #10
    in1 = 16'b111111111111;
    in2 = 16'b111111111111;
    cin = 1'b0;
    #10
    in1 = 16'b111111111111;
    in2 = 16'b111111111111;
    cin = 1'b1;
    #10
    in1 = 16'b111111111111;
    in2 = 16'b111111111111;
    cin = 1'b1;
    #10
    in1 = 16'b111111111111;
    in2 = 16'b111111111111;
    cin = 1'b0;
    #10
    in1 = 16'b111111111111;
    in2 = 16'b111111111111;
    cin = 1'b0;
    #10
    in1 = 16'b111111111111;
    in2 = 16'b111111111111;
    cin = 1'b1;
    #10
    in1 = 16'b111111111111;
    in2 = 16'b111111111111"
151.886,636.95,0.1,53.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
N/A,N/A,-1,54.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);

wire c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15;

h_sub h1(.a(in1[0]),.b(in2[0]),.s(sum[0]),.c(c1));
h_sub h2(.a(in1[1]),.b(in2[1]),.s(sum[1]),.c(c2));
h_sub h3(.a(in1[2]),.b(in2[2]),.s(sum[2]),.c(c3));
h_sub h4(.a(in1[3]),.b(in2[3]),.s(sum[3]),.c(c4));
h_sub h5(.a(in1[4]),.b(in2[4]),.s(sum[4]),.c(c5));
h_sub h6(.a(in1[5]),.b(in2[5]),.s(sum[5]),.c(c6));
h_sub h7(.a(in1[6]),.b(in2[6]),.s(sum[6]),.c(c7));
h_sub h8(.a(in1[7]),.b(in2[7]),.s(sum[7]),.c(c8));
h_sub h9(.a(in1[8]),.b(in2[8]),.s(sum[8]),.c(c9));
h_sub h10(.a(in1[9]),.b(in2[9]),.s(sum[9]),.c(c10));
h_sub h11(.a(in1[10]),.b(in2[10]),.s(sum[10]),.c(c11));
h_sub h12(.a(in1[11]),.b(in2[11]),.s(sum[11]),.c(c12));
h_sub h13(.a(in1[12]),.b(in2[12]),.s(sum[12]),.c(c13));
h_sub h14(.a(in1[13]),.b(in2[13]),.s(sum[13]),.c(c14));
h_sub h15(.a(in1[14]),.b(in2[14]),.s(sum[14]),.c(c15));

make_pair ha1(.a(in1[15]),.b(in2[15]),.p(sum[15]),.c(c16));

h_sub h16(.a(in1[15]),.b(in2[15]),.s(sum[15]),.c(cout));

endmodule

module h_sub(output a, b, s, c);

input a, b;

assign s = a ^ b;
assign c = a & b;

endmodule"
151.886,636.95,0.1,55.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,56.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
N/A,N/A,-0.5,57.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign sum = in1 + in2 + cin;
assign cout = (in1[15] == in2[15])? 1'b0 : (in1[15] == cin? 1'b1 : in1[15] + in2[15] + cin);
endmodule"
N/A,N/A,-0.5,58.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
endmodule"
N/A,N/A,-1,59.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
    wire [15:0] sum;
    wire cout;
    wire [15:0] in1;
    wire [15:0] in2;
    wire cin;
    
    ADD_FIXED_POINT_16b ADD_FIXED_POINT_16b_inst(
       .sum(sum),
       .cout(cout),
       .in1(in1),
       .in2(in2),
       .cin(cin)
    );
endmodule
`timescale 1ns / 1ps
-- --------------------------------------------------------------------
-- File: adder_16.v
-- 
-- Description: 16-bit adder
--
-- Dependencies: 
--
-- Revision:
-- Revision 0.01 - File Created
-- Additional Comments:
--
-- --------------------------------------------------------------------
--
-- Generated by Quartus V10.1 sp1
-- httpaddress: httpview.altera.com
--
--
--
-- --------------------------------------------------------------------
--
-- Revision 0.01 - File Created
-- Additional Comments:
--
-- Revision 0.01 - File Created
-- Additional Comments:
--
-- Revision 0.01 - File Created
-- Additional Comments:
--
-- Revision 0.01 - File Created
-- Additional Comments:
--
-- Revision 0.01 - File Created
-- Additional Comments:
--
-- Revision 0.01 - File Created
-- Additional Comments:
--
-- Revision 0.01 - File Created
-- Additional Comments:
--
-- Revision 0.01 - File Created
-- Additional Comments:
--
-- Revision 0.01 - File Created
-- Additional Comments:
--
-- Revision 0.01 - File Created
-- Additional Comments:
--
-- Revision 0.01 - File Created
-- Additional Comments:
--
-- Revision 0.01 - File Created
-- Additional Comments:
--
-- Revision 0.01 - File Created
-- Additional Comments:
--
-- Revision 0.01 - File Created
-- Additional Comments:
--
-- Revision 0.01 - File Created
-- Additional Comments:
--
-- Revision 0.01 - File Created
-- Additional Comments:
--
-- Revision 0.01 - File Created
-- Additional Comments:
--
-- Revision 0.01 - File Created
-- Additional Comments:
--
-- Revision 0.01 - File Created
-- Additional Comments:
--
-- Revision 0.01 - File Created
-- Additional Comments:
--
-- Revision 0.01 - File Created
-- Additional Comments:
--
-- Revision 0.01 - File Created
-- Additional Comments:
--
-- Revision 0.01 - File Created
-- Additional Comments:
--
-- Revision 0.01 - File Created
-- Additional Comments:
--
-- Revision 0.01 - File Created
-- Additional Comments:
--
-- Revision 0.01 - File Created
-- Additional Comments:
--
-- Revision 0.01 - File Created
-- Additional Comments:
--
-- Revision 0.01 - File Created
-- Additional Comments:
--
-- Revision 0.01 - File Created
-- Additional Comments:
--
-- Revision 0.01 - File Created
-- Additional Comments:
--
-- Revision 0.01 - File Created
-- Additional Comments:
--
-- Revision 0.01 - File Created
-- Additional Comments:
--
-- Revision 0.01 - File Created
-- Additional Comments:
--
-- Revision 0.01 - File Created
-- Additional Comments:
--
-- Revision 0.01 - File Created
-- Additional Comments:
--
-- Revision 0.01 - File Created
-- Additional Comments:
--
-- Revision 0.01 - File Created
-- Additional Comments:
--
-- Revision 0.01 - File Created
-- Additional Comments:
--
-- Revision 0.01 - File Created
-- Additional Comments:
--
-- Revision 0.01 - File Created
-- Additional Comments:
--
-- Revision 0.01 - File Created
-- Additional Comments:
--
-- Revision 0.01 - File Created
-- Additional Comments:
--
-- Revision 0.01 - File Created
-- Additional Comments:
--
-- Revision 0.01 - File Created
-- Additional Comments:
--
-- Revision 0.01 - File Created
-- Additional Comments:
--
-- Revision 0.01 - File Created
-- Additional Comments:
--
-- Revision 0.01 - File Created
-- Additional Comments:
--
-- Revision 0.01 - File Created
-- Additional Comments:
--
-- Revision 0.01 - File Created
-- Additional Comments:
--
-- Revision 0.01 - File Created
-- Additional Comments:
--
-- Revision 0.01 - File Created
-- Additional Comments:
--
-- Revision 0.01 - File Created
-- Additional Comments:
--
-- Revision 0.01 - File Created
-- Additional Comments:
--
-- Revision 0.01 - File Created
-- Additional Comments:
--
-- Revision 0.01 - File Created
-- Additional Comments:
--
-- Revision 0.01 - File Created
-- Additional Comments:
--
-- Revision 0.01 - File Created
-- Additional Comments:
--
-- Revision 0.01 - File Created
-- Additional Comments:
--
-- Revision 0.01 - File Created
-- Additional Comments:
--
-- Revision 0.01 - File Created
-- Additional Comments:
--
-- Revision 0.01 - File Created
-- Additional Comments:
--
-- Revision 0.01 - File Created
-- Additional Comments:
--
-- Revision 0.01 - File Created
-- Additional Comments:
--
-- Revision 0.01 - File Created
-- Additional Comments:
--
-- Revision 0.01 - File Created
-- Additional Comments:
--
-- Revision 0.01 - File Created
-- Additional Comments:
--
-- Revision 0.01 - File Created
-- Additional Comments:
--
-- Revision 0.01 - File Created
-- Additional Comments:
--
-- Revision 0.01 - File Created
-- Additional Comments:
--
-- Revision 0.01 - File Created
-- Additional Comments:
--
-- Revision 0.01 - File Created
-- Additional Comments:
--
-- Revision 0.01 - File Created
-- Additional Comments:
--
-- Revision 0.01 - File Created
-- Additional Comments:
--
-- Revision 0.01 - File Created
-- Additional Comments:
--
-- Revision 0.01 - File Created
-- Additional Comments:
--
-- Revision 0.01 - File Created
-- Additional Comments:
--
-- Revision 0.01 - File Created
-- Additional Comments:
--
-- Revision 0.01 - File Created
-- Additional Comments:
--
-- Revision 0.01 - File Created
-- Additional Comments:
--
-- Revision 0.01 - File Created
--"
N/A,N/A,-1,60.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
                    
    wire [15:0] sum;
    wire cout;
    
    integer i;
    
    //////////////////////////////// MULTIPLICATION CIRCUIT #1 SIDE =============================
    
    large_adder_16bit l1(sum[15:0], cout, in1[15:0], in2[15:0], cin);
    
    dff_16bit d1(sum[31:16], sum[15:0]);
    
    a_to_b_16bit a1(sum[15:0], sum[31:16], cout);
    
    start_bit_detector s1(sum[31:16], cout);
    
    parameter N = 16;
    
    rca_16bit r1(sum[31:16], cout, in1[31:16], in2[31:16], 1'b0);
    
    rca_16bit r2(sum[31:16], cout, in1[31:16], in2[31:16], 1'b1);
    
    gate_level_tb tb(sum[31:16], cout, in1[31:16], in2[31:16], 1'b0);
    
    gate_level_tb tb1(sum[31:16], cout, in1[31:16], in2[31:16], 1'b1);
    
    receive_and_send_16bit r1(sum[31:16], cout, in1[31:16], in2[31:16]);
    
    number_detector n1(sum[31:16], cout);
    
    internal_register_16bit r2(sum[31:16], cout, in1[31:16], in2[31:16]);
    
    ff_16bit f1(sum[31:16], cout, in1[31:16], in2[31:16]);
    
    operating_mode_tb tb2(sum[31:16], cout, in1[31:16], in2[31:16]);
    
    ba_tb(sum[31:16], cout, in1[31:16], in2[31:16]);
    
    less_than_16bit l1(sum[31:16], cout, in1[31:16], in2[31:16]);
    
    greater_than_16bit g1(sum[31:16], cout, in1[31:16], in2[31:16]);
    
    less_than_or_equal_to_16bit l2(sum[31:16], cout, in1[31:16], in2[31:16]);
    
    greater_than_or_equal_to_16bit g2(sum[31:16], cout, in1[31:16], in2[31:16]);
    
    relational_operators_16bit r3(sum[31:16], cout, in1[31:16], in2[31:16]);
    
    and_16bit a1(sum[31:16], cout, in1[31:16], in2[31:16]);
    
    or_16bit o1(sum[31:16], cout, in1[31:16], in2[31:16]);
    
    xor_16bit x1(sum[31:16], cout, in1[31:16], in2[31:16]);
    
    trigger_level_tb tb3(sum[31:16], cout, in1[31:16], in2[31:16]);
    
    johnson_counter_tb tb4(sum[31:16], cout, in1[31:16], in2[31:16]);
    
    ripple_carry_4bit r1(sum[31:16], cout, in1[31:16], in2[31:16]);
    
    ripple_carry_4bit r2(sum[31:16], cout, in1[31:16], in2[31:16]);
    
    ripple_carry_4bit r3(sum[31:16], cout, in1[31:16], in2[31:16]);
    
    ripple_carry_4bit r4(sum[31:16], cout, in1[31:16], in2[31:16]);
    
    ripple_carry_4bit r5(sum[31:16], cout, in1[31:16], in2[31:16]);
    
    ripple_carry_4bit r6(sum[31:16], cout, in1[31:16], in2[31:16]);
    
    ripple_carry_4bit r7(sum[31:16], cout, in1[31:16], in2[31:16]);
    
    ripple_carry_4bit r8(sum[31:16], cout, in1[31:16], in2[31:16]);
    
    ripple_carry_4bit r9(sum[31:16], cout, in1[31:16], in2[31:16]);
    
    ripple_carry_4bit r10(sum[31:16], cout, in1[31:16], in2[31:16]);
    
    ripple_carry_4bit r11(sum[31:16], cout, in1[31:16], in2[31:16]);
    
    ripple_carry_4bit r12(sum[31:16], cout, in1[31:16], in2[31:16]);
    
    ripple_carry_4bit r13(sum[31:16], cout, in1[31:16], in2[31:16]);
    
    ripple_carry_4bit r14(sum[31:16], cout, in1[31:16], in2[31:16]);
    
    ripple_carry_4bit r15(sum[31:16], cout, in1[31:16], in2[31:16]);
    
    ripple_carry_4bit r16(sum[31:16], cout, in1[31:16], in2[31:16]);
    
    ripple_carry_4bit r17(sum[31:16], cout, in1[31:16], in2[31:16]);
    
    "
N/A,N/A,-1,61.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
                                    
    wire [15:0] sum;
    wire cout;
    
    carry_select_adder_16 CS(sum, cout, in1, in2, cin);

endmodule

module carry_select_adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
    
    wire [15:0] sum;
    wire cout;
    
    wire [3:0] carry;
    
    carry_select_adder_4 CS1(sum[3:0], carry[3:0], in1[3:0], in2[3:0], cin);
    carry_select_adder_4 CS2(sum[7:4], carry[7:4], in1[7:4], in2[7:4], carry[3:0]);
    carry_select_adder_4 CS3(sum[11:8], carry[11:8], in1[11:8], in2[11:8], carry[7:4]);
    carry_select_adder_4 CS4(sum[15:12], cout, in1[15:12], in2[15:12], carry[11:8]);

endmodule

module carry_select_adder_4(output [3:0] sum,
                      output cout,
                      input [3:0] in1, in2,
                      input cin);
    
    wire [3:0] sum;
    wire cout;
    
    wire [1:0] carry;
    
    carry_select_adder_2 CS1(sum[1:0], carry[1:0], in1[1:0], in2[1:0], cin);
    carry_select_adder_2 CS2(sum[3:2], carry[3:2], in1[3:2], in2[3:2], carry[1:0]);
    carry_select_adder_2 CS3(cout, carry[3:2], in1[3:2], in2[3:2], carry[1:0]);

endmodule

module carry_select_adder_2(output [1:0] sum,
                      output cout,
                      input [1:0] in1, in2,
                      input cin);
    
    wire [1:0] sum;
    wire cout;
    
    wire [1:0] carry;
    
    carry_select_adder_1 CS1(sum[1:0], carry[1:0], in1[1:0], in2[1:0], cin);
    carry_select_adder_1 CS2(sum[3:2], carry[3:2], in1[3:2], in2[3:2], carry[1:0]);
    carry_select_adder_1 CS3(cout, carry[3:2], in1[3:2], in2[3:2], carry[1:0]);

endmodule

module carry_select_adder_1(output [1:0] sum,
                      output cout,
                      input [1:0] in1, in2,
                      input cin);
    
    wire [1:0] sum;
    wire cout;
    
    wire [1:0] carry;
    
    carry_select_adder_1 CS1(sum[1:0], carry[1:0], in1[1:0], in2[1:0], cin);
    carry_select_adder_1 CS2(sum[3:2], carry[3:2], in1[3:2], in2[3:2], carry[1:0]);
    carry_select_adder_1 CS3(cout, carry[3:2], in1[3:2], in2[3:2], carry[1:0]);

endmodule"
N/A,N/A,-1,62.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);                     
  wire [15:0] sum;
  wire cout;
  wire [15:0] in1;
  wire [15:0] in2;
  wire cin;
  
  alu_16bit alu_16bit_inst(sum, cout, in1, in2, cin);
endmodule

module alu_16bit(output [15:0] sum,
                  output cout,
                  input [15:0] in1, in2,
                  input cin);
  wire [15:0] sum;
  wire cout;
  wire [15:0] in1;
  wire [15:0] in2;
  wire cin;
  
  wire [15:0] sum_temp;
  wire cout_temp;
  
  adder_16 adder_16_inst(sum_temp, cout_temp, in1, in2, cin);
  
  assign sum = sum_temp[15:0];
  assign cout = cout_temp;
endmodule"
N/A,N/A,-1,63.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);

                      
//Definition for Variables in the module
wire [15:0] sum;
wire cout;

v_add_16 v_add_16(sum, cout, in1, in2, cin);

endmodule
`timescale 1ns / 1ps
default_netlist_file : ""adder_16.v""

module adder_16_tb;

m_add_16 m_add_16_tb(
);

endmodule"
N/A,N/A,-1,64.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
              
//Definition for Variables in the module
wire [15:0] sum_temp;
wire [15:0] sum;
wire cout_temp;
                        
                   
	                    
sum_16bit	#(.WIDTH(16))	adder_16bit_inst1(.a(in1),.b(in2),.cin(cin),.sum(sum_temp));
sum_16bit	#(.WIDTH(16))	adder_16bit_inst2(.a(sum_temp),.b(16'b000000000000),.cin(1'b0),.sum(sum));

assign	cout_temp = (in1[15] == in2[15])? 1'b0 : (in1[15] == sum[15])? 1'b1 : (in2[15] == sum[15])? 1'b1 : (in1[15] == sum[15])? 1'b1 : 1'bx;

assign	cout = cout_temp;

endmodule
`timescale 1ns / 1ps
modified by @VenciFreeman

module adder_16bit(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
              
comb_16bit	#(.WIDTH(16))	comb_16bit_inst1(.a(in1),.b(in2),.cin(cin),.sum(sum));

endmodule"
N/A,N/A,-1,65.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
     wire [15:0] sum;
     wire cout;
     wire [15:0] in1;
     wire [15:0] in2;
     wire cin;
     
     ADD_FIXED_POINT_1 adder_1(sum[15:0], cout, in1[15:0], in2[15:0], cin);
     
     DESTRUCTIVE_ADD_FIXED_POINT_2 adder_2(sum[31:16], cout, in1[31:16], in2[31:16], cin);
     
endmodule

module DESTRUCTIVE_ADD_FIXED_POINT_2(output [31:0] sum,
                                   output cout,
                                   input [31:0] in1, in2,
                                   input cin);
    wire [31:0] sum;
    wire cout;
    wire [31:0] in1;
    wire [31:0] in2;
    wire cin;
    
    wire [31:0] carry;
    
    assign carry[0] = cin;
    
    FA_FIXED_POINT_1 FA_1(sum[0], carry[1], in1[0], in2[0], carry[0]);
    FA_FIXED_POINT_1 FA_2(sum[1], carry[2], in1[1], in2[1], carry[1]);
    FA_FIXED_POINT_1 FA_3(sum[2], carry[3], in1[2], in2[2], carry[2]);
    FA_FIXED_POINT_1 FA_4(sum[3], carry[4], in1[3], in2[3], carry[3]);
    FA_FIXED_POINT_1 FA_5(sum[4], carry[5], in1[4], in2[4], carry[4]);
    FA_FIXED_POINT_1 FA_6(sum[5], carry[6], in1[5], in2[5], carry[5]);
    FA_FIXED_POINT_1 FA_7(sum[6], carry[7], in1[6], in2[6], carry[6]);
    FA_FIXED_POINT_1 FA_8(sum[7], carry[8], in1[7], in2[7], carry[7]);
    FA_FIXED_POINT_1 FA_9(sum[8], carry[9], in1[8], in2[8], carry[8]);
    FA_FIXED_POINT_1 FA_10(sum[9], carry[10], in1[9], in2[9], carry[9]);
    FA_FIXED_POINT_1 FA_11(sum[10], carry[11], in1[10], in2[10], carry[10]);
    FA_FIXED_POINT_1 FA_12(sum[11], carry[12], in1[11], in2[11], carry[11]);
    FA_FIXED_POINT_1 FA_13(sum[12], carry[13], in1[12], in2[12], carry[12]);
    FA_FIXED_POINT_1 FA_14(sum[13], carry[14], in1[13], in2[13], carry[13]);
    FA_FIXED_POINT_1 FA_15(sum[14], carry[15], in1[14], in2[14], carry[14]);
    FA_FIXED_POINT_1 FA_16(sum[15], carry[16], in1[15], in2[15], carry[15]);
    FA_FIXED_POINT_1 FA_17(sum[16], carry[17], in1[16], in2[16], carry[16]);
    FA_FIXED_POINT_1 FA_18(sum[17], carry[18], in1[17], in2[17], carry[17]);
    FA_FIXED_POINT_1 FA_19(sum[18], carry[19], in1[18], in2[18], carry[18]);
    FA_FIXED_POINT_1 FA_20(sum[19], carry[20], in1[19], in2[19], carry[19]);
    FA_FIXED_POINT_1 FA_21(sum[20], carry[21], in1[20], in2[20], carry[20]);
    FA_FIXED_POINT_1 FA_22(sum[21], carry[22], in1[21], in2[21], carry[21]);
    FA_FIXED_POINT_1 FA_23(sum[22], carry[23], in1[22], in2[22], carry[22]);
    FA_FIXED_POINT_1 FA_24(sum[23], carry[24], in1[23], in2[23], carry[23]);
    FA_FIXED_POINT_1 FA_25(sum[24], carry[25], in1[24], in2[24], carry[24]);
    FA_FIXED_POINT_1 FA_26(sum[25], carry[26], in1[25], in2[25], carry[25]);
    FA_FIXED_POINT_1 FA_27(sum[26], carry[27], in1[26], in2[26], carry[26]);
    FA_FIXED_POINT_1 FA_28(sum[27], carry[28], in1[27], in2[27], carry[27]);
    FA_FIXED_POINT_1 FA_29(sum[28], carry[29], in1[28], in2[28], carry[28]);
    FA_FIXED_POINT_1 FA_30(sum[29], carry[30], in1[29], in2[29], carry[29]);
    FA_FIXED_POINT_1 FA_31(sum[30], carry[31], in1[30], in2[30], carry[30]);
    FA_FIXED_POINT_1 FA_32(sum[31], cout, in1[31], in2[31], carry[31]);
endmodule

module FA_FIXED_POINT_1(output sum,
                       output cout,
                       input in1, in2,
                       input cin);
    wire [31:0] sum;
    wire cout;"
N/A,N/A,-1,66.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);

       wire [15:0] sum;
       wire cout;
       wire [15:0] in1;
       wire [15:0] in2;
       wire cin;

       adder_16_bit adder_16_bit_inst(sum, cout, in1, in2, cin);

endmodule

module adder_16_bit(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);

       wire [15:0] sum;
       wire cout;
       wire [15:0] in1;
       wire [15:0] in2;
       wire cin;

       adder_16_bit_inst adder_16_bit_inst(sum, cout, in1, in2, cin);

endmodule

module adder_16_bit_inst(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);

       wire [15:0] sum;
       wire cout;
       wire [15:0] in1;
       wire [15:0] in2;
       wire cin;

       adder_16_bit_inst adder_16_bit_inst(sum, cout, in1, in2, cin);

endmodule"
N/A,N/A,-1,67.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
                        
    wire [15:0] sum;
    wire cout;
    
    integer i;
    
    for (i = 0; i < 16; i = i + 1)
    begin
        assign sum[i] = in1[i] ^ in2[i] ^ cin;
    end
    
    assign cout = (in1[15] & in2[15] & cin) | (in1[15] & in2[15]) | (in1[15] & cin) | (in2[15] & cin);
    
endmodule"
N/A,N/A,-1,68.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin); 
  wire c1, c2, c3;
  full_adder FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder FA4(sum[3], cout, in1[3], in2[3], c3);
  full_adder FA5(sum[4], c4, in1[4], in2[4], c3);
  full_adder FA6(sum[5], c5, in1[5], in2[5], c4);
  full_adder FA7(sum[6], c6, in1[6], in2[6], c5);
  full_adder FA8(sum[7], c7, in1[7], in2[7], c6);
  full_adder FA9(sum[8], c8, in1[8], in2[8], c7);
  full_adder FA10(sum[9], c9, in1[9], in2[9], c8);
  full_adder FA11(sum[10], c10, in1[10], in2[10], c9);
  full_adder FA12(sum[11], c11, in1[11], in2[11], c10);
  full_adder FA13(sum[12], c12, in1[12], in2[12], c11);
  full_adder FA14(sum[13], c13, in1[13], in2[13], c12);
  full_adder FA15(sum[14], c14, in1[14], in2[14], c13);
  full_adder FA16(sum[15], cout, in1[15], in2[15], c14);
endmodule

imm_gen_v4_1 #(.WIDTH(16)) imm_gen_v4_1(
 .clk(clk),
 .rst(rst),
 .en(en),
 .in(in),
 .out(out)
);

adder_16 adder_16_inst(
 .sum(sum),
 .cout(cout),
 .in1(in1),
 .in2(in2),
 .cin(cin)
);

endmodule"
N/A,N/A,-1,69.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
wire c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15;

compare compare_1(c1, in1, in2);
compare compare_2(c2, in1, in2);
compare compare_3(c3, in1, in2);
compare compare_4(c4, in1, in2);
compare compare_5(c5, in1, in2);
compare compare_6(c6, in1, in2);
compare compare_7(c7, in1, in2);
compare compare_8(c8, in1, in2);
compare compare_9(c9, in1, in2);
compare compare_10(c10, in1, in2);
compare compare_11(c11, in1, in2);
compare compare_12(c12, in1, in2);
compare compare_13(c13, in1, in2);
compare compare_14(c14, in1, in2);
compare compare_15(c15, in1, in2);

ED_FF e1(sum[0], c1, in1[0], in2[0], cin);
ED_FF e2(sum[1], c2, in1[1], in2[1], c1);
ED_FF e3(sum[2], c3, in1[2], in2[2], c2);
ED_FF e4(sum[3], c4, in1[3], in2[3], c3);
ED_FF e5(sum[4], c5, in1[4], in2[4], c4);
ED_FF e6(sum[5], c6, in1[5], in2[5], c5);
ED_FF e7(sum[6], c7, in1[6], in2[6], c6);
ED_FF e8(sum[7], c8, in1[7], in2[7], c7);
ED_FF e9(sum[8], c9, in1[8], in2[8], c8);
ED_FF e10(sum[9], c10, in1[9], in2[9], c9);
ED_FF e11(sum[10], c11, in1[10], in2[10], c10);
ED_FF e12(sum[11], c12, in1[11], in2[11], c11);
ED_FF e13(sum[12], c13, in1[12], in2[12], c12);
ED_FF e14(sum[13], c14, in1[13], in2[13], c13);
ED_FF e15(sum[14], c15, in1[14], in2[14], c14);
ED_FF e16(sum[15], cout, in1[15], in2[15], c15);

endmodule

flag_counter flag_counter_1(cout, in1, in2);

module compare(output cout,
                input [15:0] in1, in2);

assign cout = (in1 == in2);

endmodule"
N/A,N/A,-1,70.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);   
    wire [15:0] sum;
    wire cout;
    wire [15:0] in1;
    wire [15:0] in2;
    wire cin;
    
    ADD_FIXED_POINT_16b ADD_FIXED_POINT_16b_inst(
       .sum(sum),
       .cout(cout),
       .in1(in1),
       .in2(in2),
       .cin(cin)
    );
endmodule
`timescale 1ns / 1ps
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
﻿_
�"
N/A,N/A,-1,71.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);

  wire [15:0] sum;
  wire cout;
  wire [15:0] in1;
  wire [15:0] in2;
  wire cin;

  ALU_16bit_1bit ADD(sum, cout, in1, in2, cin);

endmodule

module ALU_16bit_1bit(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);

  wire [15:0] sum;
  wire cout;
  wire [15:0] in1;
  wire [15:0] in2;
  wire cin;

  wire [15:0] sum;
  wire cout;
  wire [15:0] in1;
  wire [15:0] in2;
  wire cin;

  assign sum = in1 + in2;
  assign cout = in1[15] ^ in2[15];

endmodule"
N/A,N/A,-1,72.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);                                   
    wire [15:0] sum;
    wire cout;
    wire [15:0] in1;
    wire [15:0] in2;
    wire cin;
    
    fadder_16 fadder_16_1(sum[15:0], cout, in1[15:0], in2[15:0], cin);
    fadder_16 fadder_16_2(sum[31:16], cout, in1[31:16], in2[31:16], cout);
endmodule

module fadder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
    wire [15:0] sum;
    wire cout;
    wire [15:0] in1;
    wire [15:0] in2;
    wire cin;
    
    wire [15:0] sum_temp;
    wire cout_temp;
    
    adder_16 adder_16_1(sum_temp[15:0], cout_temp, in1[15:0], in2[15:0], cin);
    adder_16 adder_16_2(sum_temp[31:16], cout_temp, in1[31:16], in2[31:16], cout_temp);
    
    assign sum[15:0] = sum_temp[15:0];
    assign cout = cout_temp;
endmodule"
N/A,N/A,-0.5,73.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
                  
//Definition for Variables in the module
wire [15:0] sum_temp;
wire [15:0] sum;
wire cout_temp;
       
                   
                    
 assign sum_temp = in1 + in2 + cin;
 assign sum = sum_temp[15:0];
 assign cout_temp = (in1[15] == in2[15])? sum_temp[16] : (in1[15] == cin)? 1'b1 : 1'b0;
 assign cout = cout_temp;

endmodule"
N/A,N/A,-1,74.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
       wire [15:0] sum;
       wire cout;
       wire [15:0] in1;
       wire [15:0] in2;
       wire cin;
       
       localparam ADD = 1'b0;
       localparam SUB = 1'b1;
       
       adder_16_bit adder_16_bit_inst(sum, cout, in1, in2, cin, ADD, SUB);
       
endmodule

module adder_16_bit(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin,
                      input ADD, SUB);
       wire [15:0] sum;
       wire cout;
       wire [15:0] in1;
       wire [15:0] in2;
       wire cin;
       wire ADD;
       wire SUB;
       
       wire [15:0] sum_temp;
       wire cout_temp;
       
       adder_16_bit_temp adder_16_bit_temp_inst(sum_temp, cout_temp, in1, in2, cin, ADD, SUB);
       
       assign sum = sum_temp;
       assign cout = cout_temp;
       
endmodule

module adder_16_bit_temp(output [15:0] sum_temp,
                      output cout_temp,
                      input [15:0] in1, in2,
                      input cin,
                      input ADD, SUB);
       wire [15:0] sum_temp;
       wire cout_temp;
       
       wire [15:0] in1;
       wire [15:0] in2;
       wire cin;
       wire ADD;
       wire SUB;
       
       wire [15:0] sum;
       wire cout;
       
       adder_16_bit adder_16_bit_inst(sum, cout, in1, in2, cin, ADD, SUB);
       
       assign sum_temp = sum;
       assign cout_temp = cout;
       
endmodule"
N/A,N/A,-1,75.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);  
  
  wire [15:0] sum;
  wire cout;
  
  ADDER_FIXED_POINT ADDER_FIXED_POINT_inst(sum, cout, in1, in2, cin);
  
endmodule

module ADDER_FIXED_POINT(output [15:0] sum,
                         output cout,
                         input [15:0] in1, in2,
                         input cin);
  
  wire [15:0] sum;
  wire cout;
  
  wire [15:0] in1_full;
  wire [15:0] in2_full;
  
  wire [15:0] in1_full_temp;
  wire [15:0] in2_full_temp;
  
  wire [15:0] in1_full_temp_temp;
  wire [15:0] in2_full_temp_temp;
  
  wire [15:0] in1_full_temp_temp_temp;
  wire [15:0] in2_full_temp_temp_temp;
  
  wire [15:0] in1_full_temp_temp_temp_temp;
  wire [15:0] in2_full_temp_temp_temp_temp;
  
  wire [15:0] in1_full_temp_temp_temp_temp_temp;
  wire [15:0] in2_full_temp_temp_temp_temp_temp;
  
  wire [15:0] in1_full_temp_temp_temp_temp_temp_temp;
  wire [15:0] in2_full_temp_temp_temp_temp_temp_temp;
  
  wire [15:0] in1_full_temp_temp_temp_temp_temp_temp_temp;
  wire [15:0] in2_full_temp_temp_temp_temp_temp_temp_temp;
  
  wire [15:0] in1_full_temp_temp_temp_temp_temp_temp_temp_temp;
  wire [15:0] in2_full_temp_temp_temp_temp_temp_temp_temp_temp;
  
  wire [15:0] in1_full_temp_temp_temp_temp_temp_temp_temp_temp;
  wire [15:0] in2_full_temp_temp_temp_temp_temp_temp_temp_temp;
  
  wire [15:0] in1_full_temp_temp_temp_temp_temp_temp_temp_temp;
  wire [15:0] in2_full_temp_temp_temp_temp_temp_temp_temp_temp;
  
  wire [15:0] in1_full_temp_temp_temp_temp_temp_temp_temp_temp;
  wire [15:0] in2_full_temp_temp_temp_temp_temp_temp_temp_temp;
  
  wire [15:0] in1_full_temp_temp_temp_temp_temp_temp_temp_temp;
  wire [15:0] in2_full_temp_temp_temp_temp_temp_temp_temp_temp;
  
  wire [15:0] in1_full_temp_temp_temp_temp_temp_temp_temp_temp;
  wire [15:0] in2_full_temp_temp_temp_temp_temp_temp_temp_temp;
  
  wire [15:0] in1_full_temp_temp_temp_temp_temp_temp_temp_temp;
  wire [15:0] in2_full_temp_temp_temp_temp_temp_temp_temp_temp;
  
  wire [15:0] in1_full_temp_temp_temp_temp_temp_temp_temp_temp;
  wire [15:0] in2_full_temp_temp_temp_temp_temp_temp_temp_temp;
  
  wire [15:0] in1_full_temp_temp_temp_temp_temp_temp_temp_temp;
  wire [15:0] in2_full_temp_temp_temp_temp_temp_temp_temp_temp;
  
  wire [15:0] in1_full_temp_temp_temp_temp_temp_temp_temp_temp;
  wire [15:0] in2_full_temp_temp_temp_temp_temp_temp_temp_temp;
  
  wire [15:0] in1_full_temp_temp_temp_temp_temp_temp_temp_temp;
  wire [15:0] in2_full_temp_temp_temp_temp_temp_temp_temp_temp;
  
  wire [15:0] in1_full_temp_temp_temp_temp_temp_temp_temp_temp;
  wire [15:0] in2_full_temp_temp_temp_temp_temp_temp_temp_temp;
  
  wire [15:0] in1_full_temp_temp_temp_temp_temp_temp_temp_temp;
  wire [15:0] in2_full_temp_temp_temp_temp_temp_temp_temp_temp;
  
  wire [15:0] in1_full_temp_temp_temp_temp_temp_temp_temp_temp;
  wire [15:0] in2_full_temp_temp_temp_temp_temp_temp_temp_temp;
  
  wire [15:0] in1_full_temp_temp_temp_temp_temp_temp_temp_temp;
  wire [15:0] in2_full_temp_temp_temp_temp_temp_temp_temp_temp;
  
  wire [15:0] in1_full_temp_temp_temp_temp_temp_temp_temp_temp;
  wire [15:0] in2_full_temp_temp_temp_temp_temp_temp_temp_temp;
  
  wire [15:0] in1_full_temp_temp_temp_temp_temp_temp_temp_temp;
  wire [15:0] in2_full_temp_temp_temp_temp_temp_temp_temp_temp;
  
  wire [15:0] in1_full_temp_temp_temp_temp_"
N/A,N/A,-0.5,76.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);                      
    wire [15:0] sum;
    wire cout;
    wire [15:0] in1;
    wire [15:0] in2;
    wire cin;
    
    comparator_16 comp(sum, cin, in1, in2);
    adder_16_bit adder(sum[15:0], cout, in1[15:0], in2[15:0], cin);
endmodule

module comparator_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2);
    wire [15:0] in1;
    wire [15:0] in2;
    wire [15:0] sum;
    wire cout;
    
    assign sum = in1 + in2;
    assign cout = (in1[15:0] == in2[15:0]);
endmodule

module adder_16_bit(output [15:0] sum,
                     output cout,
                     input [15:0] in1, in2,
                     input cin);
    wire [15:0] in1;
    wire [15:0] in2;
    wire cin;
    wire [15:0] sum;
    wire cout;
    
    assign sum = in1 + in2;
    assign cout = (in1[15:0] == in2[15:0]);
endmodule"
N/A,N/A,-1,77.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);    
    
    wire [15:0] sum;
    wire cout;
    
    //// Initialize the sum and carry out wires to 0
    assign sum = 0;
    assign cout = 0;
    
    cout_carry_select_adder_16 cca_16(sum, cout, in1, in2, cin);
    
endmodule

module adder_16_tb;
    
    reg [15:0] in1, in2;
    reg cin;
    wire [15:0] sum;
    wire cout;
    
    adder_16 adder_16_tb(sum, cout, in1, in2, cin);
    
    initial
    begin
        in1 = 16'b0000_0000_0000_0001;
        in2 = 16'b0000_0000_0000_0010;
        cin = 1'b0;
        
        #10 in1 = 16'b0000_0000_0000_0010;
        in2 = 16'b0000_0000_0000_0001;
        cin = 1'b0;
        
        #10 in1 = 16'b0000_0000_0000_0010;
        in2 = 16'b0000_0000_0000_0001;
        cin = 1'b1;
        
        #10 in1 = 16'b0000_0000_0000_0010;
        in2 = 16'b0000_0000_0000_0001;
        cin = 1'b1;
        
        #10 in1 = 16'b0000_0000_0000_0010;
        in2 = 16'b0000_0000_0000_0001;
        cin = 1'b0;
        
        #10 in1 = 16'b0000_0000_0000_0010;
        in2 = 16'b0000_0000_0000_0001;
        cin = 1'b0;
        
        #10 in1 = 16'b0000_0000_0000_0010;
        in2 = 16'b0000_0000_0000_0001;
        cin = 1'b1;
        
        #10 in1 = 16'b0000_0000_0000_0010;
        in2 = 16'b0000_0000_0000_0001;
        cin = 1'b1;
        
        #10 in1 = 16'b0000_0000_0000_0010;
        in2 = 16'b0000_0000_0000_0001;
        cin = 1'b0;
        
        #10 in1 = 16'b0000_0000_0000_0010;
        in2 = 16'b0000_0000_0000_0001;
        cin = 1'b0;
        
        #10 in1 = 16'b0000_0000_0000_0010;
        in2 = 16'b0000_0000_0000_0001;
        cin = 1'b1;
        
        #10 in1 = 16'b0000_0000_0000_0010;
        in2 = 16'b0000_0000_0000_0001;
        cin = 1'b1;
        
        #10 in1 = 16'b0000_0000_0000_0010;
        in2 = 16'b0000_0000_0000_0001;
        cin = 1'b0;
        
        #10 in1 = 16'b0000_0000_0000_0010;
        in2 = 16'b0000_0000_0000_0001;
        cin = 1'b0;
        
        #10 in1 = 16'b0000_0000_0000_0010;
        in2 = 16'b0000_0000_0000_0001;
        cin = 1'b1;
        
        #10 in1 = 16'b0000_0000_0000_0010;
        in2 = 16'b0000_0000_0000_0001;
        cin = 1'b1;
        
        #10 in1 = 16'b0000_0000_0000_0010;
        in2 = 16'b0000_0000_0000_0001;
        cin = 1'b0;
        
        #10 in1 = 16'b0000_0000_0000_0010;
        in2 = 16'b0000_0000_0000_0001;
        cin = 1'b0;
        
        #10 in1 = 16'b0000_0000_0000_0010;
        in2 = 16'b0000_0000_0000_0001;
        cin = 1'b1;
        
        #10 in1 = 16'b0000_0000_0000_0010;
        in2 = 16'b0000_0000_0000_0001;
        cin = 1'b1;
        
        #10 in1 = 16'b0000_0000_0000_0010;
        in2 = 16'b0000_0000_0000_0001;
        cin = 1'b0;
        
        #10 in1 = 16'b0000_0000_0000_0010;
        in2 = 16'b0000_0000_0000_0001;
        cin = 1'b0;
        
        #10 in1 = 16'b0000_0000_0000_0010;
        in2 = 16'b0000_0000_0000_0001;
        cin = 1'b1;
        
        #10 in1 = 16'b0000_0000_0000_0010;
        in2 = 16'b0000_0000_0000_0001;
        cin = 1'b1;
        
        #10 in1 = 16'b0000_0000_0000_0010;
        in2 = 16'b0000_0000_0000_0001;
        cin = 1'b0;
        
        #10 in1 = 16'b0000_0000_0000_0010;
        in2 = 16'b0000_0000_0000_0001;
        cin = 1'b0;
        
        #10 in1 = 16'b0000_0000_0000_0010;
        in2 = 16'b0000_0000_0000_0001;
        cin = 1'b1;
        
        #10 in1 = 16'b0000_0000_0000_0010;
        in2 = 16'b0000_0000_0000_0001;
        cin = 1'b1;
        
        #10 in1 = 16'b0000_0000_0000_0010;
        in2 = 16'b0000_0000_0000_0001;
        cin = 1'b0;
        
        #10 in1 = 16'b0000_0000_0000_0010;
        in2 = 16'b0000"
N/A,N/A,-1,78.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);                      
    wire [15:0] sum;
    wire cout;
    wire [15:0] in1;
    wire [15:0] in2;
    wire cin;
    
    logic [15:0] sum;
    logic cout;
    logic [15:0] in1;
    logic [15:0] in2;
    logic cin;
    
    v_add_16 v_add_16_1(sum, cout, in1, in2, cin);
    
endmodule"
N/A,N/A,-0.5,79.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);                             
  wire [15:0] sum;
  wire cout;
  wire [15:0] in1;
  wire [15:0] in2;
  wire cin;
  
  nand n1(sum[0], in1[0], in2[0], cin);
  nand n2(sum[1], in1[1], in2[1], cin);
  nand n3(sum[2], in1[2], in2[2], cin);
  nand n4(sum[3], in1[3], in2[3], cin);
  nand n5(sum[4], in1[4], in2[4], cin);
  nand n6(sum[5], in1[5], in2[5], cin);
  nand n7(sum[6], in1[6], in2[6], cin);
  nand n8(sum[7], in1[7], in2[7], cin);
  nand n9(sum[8], in1[8], in2[8], cin);
  nand n10(sum[9], in1[9], in2[9], cin);
  nand n11(sum[10], in1[10], in2[10], cin);
  nand n12(sum[11], in1[11], in2[11], cin);
  nand n13(sum[12], in1[12], in2[12], cin);
  nand n14(sum[13], in1[13], in2[13], cin);
  nand n15(sum[14], in1[14], in2[14], cin);
  nand n16(sum[15], in1[15], in2[15], cin);
  
  nand n17(cout, in1[15], in2[15], cin);
  
endmodule"
N/A,N/A,-0.5,80.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);                     	
	wire [15:0] sum;
	wire cout;
	wire [15:0] in1;
	wire [15:0] in2;
	wire cin;
	
	/// This is the 1 bit adder implementation
	carry_select_adder_1bit CS_1bit(sum[0], cout, in1[0], in2[0], cin);
	
	AND2_X1 U1(sum[1], in1[1], in2[1]);
	AND2_X1 U2(sum[2], in1[2], in2[2]);
	AND2_X1 U3(sum[3], in1[3], in2[3]);
	AND2_X1 U4(sum[4], in1[4], in2[4]);
	AND2_X1 U5(sum[5], in1[5], in2[5]);
	AND2_X1 U6(sum[6], in1[6], in2[6]);
	AND2_X1 U7(sum[7], in1[7], in2[7]);
	AND2_X1 U8(sum[8], in1[8], in2[8]);
	AND2_X1 U9(sum[9], in1[9], in2[9]);
	AND2_X1 U10(sum[10], in1[10], in2[10]);
	AND2_X1 U11(sum[11], in1[11], in2[11]);
	AND2_X1 U12(sum[12], in1[12], in2[12]);
	AND2_X1 U13(sum[13], in1[13], in2[13]);
	AND2_X1 U14(sum[14], in1[14], in2[14]);
	AND2_X1 U15(sum[15], in1[15], in2[15]);
	
	Single_Precision_Adder adder(sum[15], cout, in1[15], in2[15], cin);
endmodule

module carry_select_adder_1bit(output sum,
                                output cout,
                                input in1, in2, cin);
	wire c1, c2, c3;
	
	xor(sum, in1, in2, cin);
	and(c1, in1, in2);
	and(c2, in1, cin);
	and(c3, in2, cin);
	or(cout, c1, c2, c3);
endmodule

module Single_Precision_Adder(output [15:0] sum,
                              output cout,
                              input [15:0] in1, in2,
                              input cin);
	wire [16:0] temp;
	wire [15:0] sum_temp;
	wire [15:0] in1_temp;
	wire [15:0] in2_temp;
	wire [15:0] c_temp;
	
	assign in1_temp = {in1[15], in1[14:0]};
	assign in2_temp = {in2[15], in2[14:0]};
	assign c_temp = {cin, cin};
	
	assign temp = in1_temp + in2_temp + c_temp;
	
	assign sum_temp = temp[15:0];
	assign cout = temp[16];
	
	assign sum = sum_temp;
endmodule

module AND2_X1(output wire z,
               input wire x,
               input wire y);
	assign z = x & y;
endmodule"
N/A,N/A,-1,81.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);                     		
	wire [15:0] sum;
	wire cout;
	wire [15:0] in1;
	wire [15:0] in2;
	wire cin;
	
	if (in1 == 16'b0 && in2 == 16'b0)
	begin
		sum = 16'b0;
		cout = 1'b0;
	end
	
	else if (in1 == 16'b1111111111111111)
	begin
		sum = in1 + in2;
		cout = 1'b0;
	end
	
	else if (in2 == 16'b1111111111111111)
	begin
		sum = in1 + in2;
		cout = 1'b0;
	end
	
	else if (in1 == 16'b0 && in2!= 16'b0)
	begin
		sum = in1;
		cout = 1'b1;
	end
	
	else if (in2 == 16'b0 && in1!= 16'b0)
	begin
		sum = in2;
		cout = 1'b1;
	end
	
	else
	begin
		sum = in1 + in2;
		cout = 1'b0;
	end
endmodule"
N/A,N/A,-1,82.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign cout = c[15];
assign sum = s[15:0];

and and0(a[0], in1[0], in2[0], cin);
and and1(a[1], in1[1], in2[1], cin);
and and2(a[2], in1[2], in2[2], cin);
and and3(a[3], in1[3], in2[3], cin);
and and4(a[4], in1[4], in2[4], cin);
and and5(a[5], in1[5], in2[5], cin);
and and6(a[6], in1[6], in2[6], cin);
and and7(a[7], in1[7], in2[7], cin);
and and8(a[8], in1[8], in2[8], cin);
and and9(a[9], in1[9], in2[9], cin);
and and10(a[10], in1[10], in2[10], cin);
and and11(a[11], in1[11], in2[11], cin);
and and12(a[12], in1[12], in2[12], cin);
and and13(a[13], in1[13], in2[13], cin);
and and14(a[14], in1[14], in2[14], cin);
and and15(a[15], in1[15], in2[15], cin);

or or0(s[0], a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15]);
or or1(s[1], a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15]);
or or2(s[2], a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15]);
or or3(s[3], a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15]);
or or4(s[4], a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15]);
or or5(s[5], a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15]);
or or6(s[6], a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15]);
or or7(s[7], a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15]);
or or8(s[8], a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15]);
or or9(s[9], a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15]);
or or10(s[10], a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15]);
or or11(s[11], a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15]);
or or12(s[12], a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15]);
or or13(s[13], a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15]);
or or14(s[14], a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15]);
or or15(s[15], a[0], a[1], a[2], a[3], a[4], a["
N/A,N/A,-1,83.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);                       
  wire [15:0] sum;
  wire cout;
  wire [15:0] in1;
  wire [15:0] in2;
  wire cin;
  
  alu_16bit alu_16bit_inst(sum, cout, in1, in2, cin);
endmodule

module alu_16bit(output [15:0] sum,
                  output cout,
                  input [15:0] in1, in2,
                  input cin);
  wire [15:0] sum;
  wire cout;
  wire [15:0] in1;
  wire [15:0] in2;
  wire cin;
  
  wire [15:0] sum_temp;
  wire cout_temp;
  
  adder_16 adder_16_inst(sum_temp, cout_temp, in1, in2, cin);
  
  assign sum = sum_temp[15:0];
  assign cout = cout_temp;
endmodule"
N/A,N/A,-1,84.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);                  
  wire [15:0] sum;
  wire cout;
  wire [15:0] in1;
  wire [15:0] in2;
  wire cin;
  
  fadder_16 fadder_16_1(sum[15:0], cout, in1[15:0], in2[15:0], cin);
  fadder_16 fadder_16_2(sum[31:16], cout, in1[31:16], in2[31:16], cout);
endmodule

module fadder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);                  
  wire [15:0] sum;
  wire cout;
  wire [15:0] in1;
  wire [15:0] in2;
  wire cin;
  
  assign sum = in1 + in2;
  assign cout = in1[15] ^ in2[15] ^ cin;
endmodule"
151.886,636.95,0.1,85.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);

    assign {cout, sum} = in1 + in2 + cin;
endmodule"
N/A,N/A,-1,86.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);

    wire [15:0] sum;
    wire cout;
    wire [15:0] in1;
    wire [15:0] in2;
    wire cin;

    ADD_FIXED_POINT_OPCODE adder_16_1(sum[15:0], cout, in1[15:0], in2[15:0], cin);

endmodule

module adder_16_1(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);

    wire [15:0] sum;
    wire cout;
    wire [15:0] in1;
    wire [15:0] in2;
    wire cin;

    wire [15:0] sum_temp;
    wire cout_temp;

    adder_16_2 adder_16_2_1(sum_temp[15:0], cout_temp, in1[15:0], in2[15:0], cin);
    adder_16_3 adder_16_3_1(sum[15:0], cout, sum_temp[15:0], cout_temp);

endmodule

module adder_16_2(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);

    wire [15:0] sum;
    wire cout;
    wire [15:0] in1;
    wire [15:0] in2;
    wire cin;

    wire [15:0] sum_temp;
    wire cout_temp;

    adder_16_3 adder_16_2_1(sum_temp[15:0], cout_temp, in1[15:0], in2[15:0], cin);
    adder_16_4 adder_16_4_1(sum[15:0], cout, sum_temp[15:0], cout_temp);

endmodule

module adder_16_3(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);

    wire [15:0] sum;
    wire cout;
    wire [15:0] in1;
    wire [15:0] in2;
    wire cin;

    wire [15:0] sum_temp;
    wire cout_temp;

    adder_16_4 adder_16_3_1(sum_temp[15:0], cout_temp, in1[15:0], in2[15:0], cin);
    adder_16_5 adder_16_5_1(sum[15:0], cout, sum_temp[15:0], cout_temp);

endmodule

module adder_16_4(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);

    wire [15:0] sum;
    wire cout;
    wire [15:0] in1;
    wire [15:0] in2;
    wire cin;

    wire [15:0] sum_temp;
    wire cout_temp;

    adder_16_5 adder_16_4_1(sum_temp[15:0], cout_temp, in1[15:0], in2[15:0], cin);
    adder_16_6 adder_16_6_1(sum[15:0], cout, sum_temp[15:0], cout_temp);

endmodule

module adder_16_5(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);

    wire [15:0] sum;
    wire cout;
    wire [15:0] in1;
    wire [15:0] in2;
    wire cin;

    wire [15:0] sum_temp;
    wire cout_temp;

    adder_16_6 adder_16_5_1(sum_temp[15:0], cout_temp, in1[15:0], in2[15:0], cin);
    adder_16_7 adder_16_7_1(sum[15:0], cout, sum_temp[15:0], cout_temp);

endmodule

module adder_16_6(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);

    wire [15:0] sum;
    wire cout;
    wire [15:0] in1;
    wire [15:0] in2;
    wire cin;

    wire [15:0] sum_temp;
    wire cout_temp;

    adder_16_7 adder_16_6_1(sum_temp[15:0], cout_temp, in1[15:0], in2[15:0], cin);
    adder_16_8 adder_16_8_1(sum[15:0], cout, sum_temp[15:0], cout_temp);

endmodule

module adder_16_7(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);

    wire [15:0] sum;
    wire cout;
    wire [15:0] in1;
    wire [15:0] in2;
    wire cin;

    wire [15:0] sum_temp;
    wire cout_temp;

    adder_16_8 adder_16_7_1(sum_temp[15:0], cout_temp, in1[15:0], in2[15:0], cin);
    adder_16_9 adder_16_9_1(sum[15:0], cout, sum_temp[15:0], cout_temp);

endmodule

module adder_16_8(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);

    wire [15:0] sum;
    wire cout;
    wire [15:0] in1;
    wire [15:0] in"
N/A,N/A,-1,87.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);

                    wire [15:0] sum;
                    wire cout;
                    wire [15:0] in1;
                    wire [15:0] in2;
                    wire cin;

                    part1 p1(sum[0], c1, in1[0], in2[0], cin);
                    part2 p2(sum[1], c2, in1[1], in2[1], c1);
                    part3 p3(sum[2], c3, in1[2], in2[2], c2);
                    part4 p4(sum[3], c4, in1[3], in2[3], c3);
                    part5 p5(sum[4], c5, in1[4], in2[4], c4);
                    part6 p6(sum[5], c6, in1[5], in2[5], c5);
                    part7 p7(sum[6], c7, in1[6], in2[6], c6);
                    part8 p8(sum[7], c8, in1[7], in2[7], c7);
                    part9 p9(sum[8], c9, in1[8], in2[8], c8);
                    part10 p10(sum[9], c10, in1[9], in2[9], c9);
                    part11 p11(sum[10], c11, in1[10], in2[10], c10);
                    part12 p12(sum[11], c12, in1[11], in2[11], c11);
                    part13 p13(sum[12], c13, in1[12], in2[12], c12);
                    part14 p14(sum[13], c14, in1[13], in2[13], c13);
                    part15 p15(sum[14], c15, in1[14], in2[14], c14);
                    part16 p16(sum[15], cout, in1[15], in2[15], c15);

endmodule

module part1(output wire sum,
              output wire cout,
              input wire in1, in2,
              input wire cin);

    assign sum = in1 ^ in2 ^ cin;
    assign cout = (in1 & in2) | (in1 & cin) | (in2 & cin);

endmodule

module part2(output wire sum,
              output wire cout,
              input wire in1, in2,
              input wire cin);

    assign sum = in1 ^ in2 ^ cin;
    assign cout = (in1 & in2) | (in1 & cin) | (in2 & cin);

endmodule

module part3(output wire sum,
              output wire cout,
              input wire in1, in2,
              input wire cin);

    assign sum = in1 ^ in2 ^ cin;
    assign cout = (in1 & in2) | (in1 & cin) | (in2 & cin);

endmodule

module part4(output wire sum,
              output wire cout,
              input wire in1, in2,
              input wire cin);

    assign sum = in1 ^ in2 ^ cin;
    assign cout = (in1 & in2) | (in1 & cin) | (in2 & cin);

endmodule

module part5(output wire sum,
              output wire cout,
              input wire in1, in2,
              input wire cin);

    assign sum = in1 ^ in2 ^ cin;
    assign cout = (in1 & in2) | (in1 & cin) | (in2 & cin);

endmodule

module part6(output wire sum,
              output wire cout,
              input wire in1, in2,
              input wire cin);

    assign sum = in1 ^ in2 ^ cin;
    assign cout = (in1 & in2) | (in1 & cin) | (in2 & cin);

endmodule

module part7(output wire sum,
              output wire cout,
              input wire in1, in2,
              input wire cin);

    assign sum = in1 ^ in2 ^ cin;
    assign cout = (in1 & in2) | (in1 & cin) | (in2 & cin);

endmodule

module part8(output wire sum,
              output wire cout,
              input wire in1, in2,
              input wire cin);

    assign sum = in1 ^ in2 ^ cin;
    assign cout = (in1 & in2) | (in1 & cin) | (in2 & cin);

endmodule

module part9(output wire sum,
              output wire cout,
              input wire in1, in2,
              input wire cin);

    assign sum = in1 ^ in2 ^ cin;
    assign cout = (in1 & in2) | (in1 & cin) | (in2 & cin);

endmodule

module part10(output wire sum,
              output wire cout,
              input wire in1, in2,
              input wire cin);

    assign sum = in1 ^ in2 ^ cin;
    assign cout = (in1 & in2) | (in1 & cin) | (in2 & cin);

endmodule

module part11(output wire sum,
              output wire cout,
              input wire in1, in2,
              input wire cin);

    assign sum = in1 ^ in2 ^ cin;
    assign cout = (in1 & in2) | (in1 & cin) | (in2 & cin);

endmodule

module part12(output wire sum,
              output wire cout,
              input wire in1, in2,
              input wire cin);

    assign sum = in1 ^ in2 ^ cin;
    assign cout = (in1 & in2) | (in1 & cin) | (in2 & cin);

endmodule

module part13(output wire sum,
              output wire cout,
              input wire in1, in2,
              input wire cin);

    assign sum = in1 ^ in2 ^ cin;
    "
N/A,N/A,-0.5,88.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);                    
    wire [15:0] sum;
    wire cout;
    wire [15:0] in1;
    wire [15:0] in2;
    wire cin;
    
    comparator_16 comp(sum, cin, in1, in2);
    adder_16_bit adder(sum[15:0], cout, in1[15:0], in2[15:0], cin);
endmodule

module comparator_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2);
    wire [15:0] in1;
    wire [15:0] in2;
    wire [15:0] sum;
    wire cout;
    
    assign sum = in1 + in2;
    assign cout = (in1[15:0] == in2[15:0]);
endmodule

module adder_16_bit(output [15:0] sum,
                     output cout,
                     input [15:0] in1, in2,
                     input cin);
    wire [15:0] in1;
    wire [15:0] in2;
    wire cin;
    wire [15:0] sum;
    wire cout;
    
    assign sum = in1 + in2;
    assign cout = (in1[15:0] == in2[15:0]);
endmodule"
N/A,N/A,-1,89.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);                             

    wire [15:0] sum;
    wire cout;
    wire [15:0] in1;
    wire [15:0] in2;
    wire cin;

    HA_16 HA1(sum[15:0], c1, in1[15:0], in2[15:0]);
    HA_16 HA2(sum[31:16], c2, in1[31:16], in2[31:16]);
    HA_16 HA3(sum[47:32], c3, in1[47:32], in2[47:32]);
    HA_16 HA4(sum[63:48], c4, in1[63:48], in2[63:48]);
    HA_16 HA5(sum[79:64], c5, in1[79:64], in2[79:64]);
    HA_16 HA6(sum[95:80], c6, in1[95:80], in2[95:80]);
    HA_16 HA7(sum[111:96], c7, in1[111:96], in2[111:96]);
    HA_16 HA8(sum[127:112], c8, in1[127:112], in2[127:112]);
    HA_16 HA9(sum[143:128], c9, in1[143:128], in2[143:128]);
    HA_16 HA10(sum[159:144], c10, in1[159:144], in2[159:144]);
    HA_16 HA11(sum[175:160], c11, in1[175:160], in2[175:160]);
    HA_16 HA12(sum[191:176], c12, in1[191:176], in2[191:176]);
    HA_16 HA13(sum[207:192], c13, in1[207:192], in2[207:192]);
    HA_16 HA14(sum[223:208], c14, in1[223:208], in2[223:208]);
    HA_16 HA15(sum[239:224], c15, in1[239:224], in2[239:224]);
    HA_16 HA16(sum[255:240], c16, in1[255:240], in2[255:240]);
    HA_16 HA17(sum[271:256], c17, in1[271:256], in2[271:256]);
    HA_16 HA18(sum[287:272], c18, in1[287:272], in2[287:272]);
    HA_16 HA19(sum[303:288], c19, in1[303:288], in2[303:288]);
    HA_16 HA20(sum[319:304], c20, in1[319:304], in2[319:304]);
    HA_16 HA21(sum[335:320], c21, in1[335:320], in2[335:320]);
    HA_16 HA22(sum[351:336], c22, in1[351:336], in2[351:336]);
    HA_16 HA23(sum[367:352], c23, in1[367:352], in2[367:352]);
    HA_16 HA24(sum[383:368], c24, in1[383:368], in2[383:368]);
    HA_16 HA25(sum[399:384], c25, in1[399:384], in2[399:384]);
    HA_16 HA26(sum[415:400], c26, in1[415:400], in2[415:400]);
    HA_16 HA27(sum[431:416], c27, in1[431:416], in2[431:416]);
    HA_16 HA28(sum[447:432], c28, in1[447:432], in2[447:432]);
    HA_16 HA29(sum[463:448], c29, in1[463:448], in2[463:448]);
    HA_16 HA30(sum[479:464], c30, in1[479:464], in2[479:464]);
    HA_16 HA31(sum[495:480], c31, in1[495:480], in2[495:480]);
    HA_16 HA32(sum[511:496], c32, in1[511:496], in2[511:496]);
    HA_16 HA33(sum[527:512], c33, in1[527:512], in2[527:512]);
    HA_16 HA34(sum[543:528], c34, in1[543:528], in2[543:528]);
    HA_16 HA35(sum[559:544], c35, in1[559:544], in2[559:544]);
    HA_16 HA36(sum[575:560], c36, in1[575:560], in2[575:560]);
    HA_16 HA37(sum[591:576], c37, in1[591:576], in2[591:576]);
    HA_16 HA38(sum[607:592], c38, in1[607:592], in2[607:592]);
    HA_16 HA39(sum[623:608], c39, in1[623:608], in2[623:608]);
    HA_16 HA40(sum[639:624], c40, in1[639:624], in2[639:624]);
    HA_16 HA41(sum[655:640], c41, in1[655:640], in2[655:640]);
    HA_16 HA42(sum[671:656], c42, in1[671:656], in2[671:656]);
    HA_16 HA43(sum[687:672], c43, in1[687:672], in2[687:672]);
    HA_16 HA44(sum[703:688], c44, in1[703:688], in2[703:688]);
    HA_16 HA45(sum[719:704], c45, in1[719:704], in2[719:704]);
    HA_16 HA46(sum[735:720], c46, in1[735:720], in2[735:720]);
    HA_16 HA47(sum[751:"
N/A,N/A,-1,90.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);          
  wire [15:0] sum;
  wire cout;
  wire [15:0] in1;
  wire [15:0] in2;
  wire cin;
  
  fadder_16 fadder_16_1(sum[15:0], cout, in1[15:0], in2[15:0], cin);
  fadder_16 fadder_16_2(sum[31:16], cout, in1[31:16], in2[31:16], cout);
endmodule

module fadder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
  wire [15:0] sum;
  wire cout;
  wire [15:0] in1;
  wire [15:0] in2;
  wire cin;
  
  wire [15:0] sum_temp;
  wire [15:0] in1_temp;
  wire [15:0] in2_temp;
  wire cin_temp;
  
  assign sum_temp = in1 + in2;
  assign in1_temp = in1;
  assign in2_temp = in2;
  assign cin_temp = cin;
  
  assign sum = sum_temp[15:0];
  assign cout = cin_temp;
endmodule"
N/A,N/A,-1,91.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);              
  wire [15:0] sum;
  wire cout;
  wire [15:0] in1;
  wire [15:0] in2;
  wire cin;
  
  comparator_16 comp_1(.a(in1),.b(in2),.cin(cin),.sum(sum),.cout(cout));
endmodule

module comparator_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
  wire [15:0] in1;
  wire [15:0] in2;
  wire cin;
  wire [15:0] sum;
  wire cout;
  
  adder_16 adder_1(.sum(sum),.cout(cout),.in1(in1),.in2(in2),.cin(cin));
endmodule"
N/A,N/A,-1,92.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);                         
    wire [15:0] sum;
    wire cout;
    wire [15:0] in1;
    wire [15:0] in2;
    wire cin;
    
    comparator_16 comp(.a(in1),.b(in2),.cin(cin),.sum(sum),.cout(cout));
endmodule

module comparator_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
    wire [15:0] sum;
    wire cout;
    wire [15:0] in1;
    wire [15:0] in2;
    wire cin;
    
    adder_16 adder(.sum(sum),.cout(cout),.in1(in1),.in2(in2),.cin(cin));
endmodule"
N/A,N/A,-1,93.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);                          

    wire [15:0] sum;
    wire cout;
    wire [15:0] in1;
    wire [15:0] in2;
    wire cin;

    HA_16 HA1(sum[15:0], c1, in1[15:0], in2[15:0]);
    HA_16 HA2(sum[31:16], c2, in1[31:16], in2[31:16]);
    HA_16 HA3(sum[47:32], c3, in1[47:32], in2[47:32]);
    HA_16 HA4(sum[63:48], c4, in1[63:48], in2[63:48]);
    HA_16 HA5(sum[79:64], c5, in1[79:64], in2[79:64]);
    HA_16 HA6(sum[95:80], c6, in1[95:80], in2[95:80]);
    HA_16 HA7(sum[111:96], c7, in1[111:96], in2[111:96]);
    HA_16 HA8(sum[127:112], c8, in1[127:112], in2[127:112]);
    HA_16 HA9(sum[143:128], c9, in1[143:128], in2[143:128]);
    HA_16 HA10(sum[159:144], c10, in1[159:144], in2[159:144]);
    HA_16 HA11(sum[175:160], c11, in1[175:160], in2[175:160]);
    HA_16 HA12(sum[191:176], c12, in1[191:176], in2[191:176]);
    HA_16 HA13(sum[207:192], c13, in1[207:192], in2[207:192]);
    HA_16 HA14(sum[223:208], c14, in1[223:208], in2[223:208]);
    HA_16 HA15(sum[239:224], c15, in1[239:224], in2[239:224]);
    HA_16 HA16(sum[255:240], c16, in1[255:240], in2[255:240]);
    HA_16 HA17(sum[271:256], c17, in1[271:256], in2[271:256]);
    HA_16 HA18(sum[287:272], c18, in1[287:272], in2[287:272]);
    HA_16 HA19(sum[303:288], c19, in1[303:288], in2[303:288]);
    HA_16 HA20(sum[319:304], c20, in1[319:304], in2[319:304]);
    HA_16 HA21(sum[335:320], c21, in1[335:320], in2[335:320]);
    HA_16 HA22(sum[351:336], c22, in1[351:336], in2[351:336]);
    HA_16 HA23(sum[367:352], c23, in1[367:352], in2[367:352]);
    HA_16 HA24(sum[383:368], c24, in1[383:368], in2[383:368]);
    HA_16 HA25(sum[399:384], c25, in1[399:384], in2[399:384]);
    HA_16 HA26(sum[415:400], c26, in1[415:400], in2[415:400]);
    HA_16 HA27(sum[431:416], c27, in1[431:416], in2[431:416]);
    HA_16 HA28(sum[447:432], c28, in1[447:432], in2[447:432]);
    HA_16 HA29(sum[463:448], c29, in1[463:448], in2[463:448]);
    HA_16 HA30(sum[479:464], c30, in1[479:464], in2[479:464]);
    HA_16 HA31(sum[495:480], c31, in1[495:480], in2[495:480]);
    HA_16 HA32(sum[511:496], c32, in1[511:496], in2[511:496]);
    HA_16 HA33(sum[527:512], c33, in1[527:512], in2[527:512]);
    HA_16 HA34(sum[543:528], c34, in1[543:528], in2[543:528]);
    HA_16 HA35(sum[559:544], c35, in1[559:544], in2[559:544]);
    HA_16 HA36(sum[575:560], c36, in1[575:560], in2[575:560]);
    HA_16 HA37(sum[591:576], c37, in1[591:576], in2[591:576]);
    HA_16 HA38(sum[607:592], c38, in1[607:592], in2[607:592]);
    HA_16 HA39(sum[623:608], c39, in1[623:608], in2[623:608]);
    HA_16 HA40(sum[639:624], c40, in1[639:624], in2[639:624]);
    HA_16 HA41(sum[655:640], c41, in1[655:640], in2[655:640]);
    HA_16 HA42(sum[671:656], c42, in1[671:656], in2[671:656]);
    HA_16 HA43(sum[687:672], c43, in1[687:672], in2[687:672]);
    HA_16 HA44(sum[703:688], c44, in1[703:688], in2[703:688]);
    HA_16 HA45(sum[719:704], c45, in1[719:704], in2[719:704]);
    HA_16 HA46(sum[735:720], c46, in1[735:720], in2[735:720]);
    HA_16 HA47(sum[751:"
N/A,N/A,-0.5,94.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);        

    wire [15:0] sum;
    wire cout;
    wire [15:0] in1;
    wire [15:0] in2;
    wire cin;

    nand n1(sum[0], in1[0], in2[0], cin);
    nand n2(sum[1], in1[1], in2[1], cin);
    nand n3(sum[2], in1[2], in2[2], cin);
    nand n4(sum[3], in1[3], in2[3], cin);
    nand n5(sum[4], in1[4], in2[4], cin);
    nand n6(sum[5], in1[5], in2[5], cin);
    nand n7(sum[6], in1[6], in2[6], cin);
    nand n8(sum[7], in1[7], in2[7], cin);
    nand n9(sum[8], in1[8], in2[8], cin);
    nand n10(sum[9], in1[9], in2[9], cin);
    nand n11(sum[10], in1[10], in2[10], cin);
    nand n12(sum[11], in1[11], in2[11], cin);
    nand n13(sum[12], in1[12], in2[12], cin);
    nand n14(sum[13], in1[13], in2[13], cin);
    nand n15(sum[14], in1[14], in2[14], cin);
    nand n16(sum[15], in1[15], in2[15], cin);
    nand n17(cout, in1[15], in2[15], cin);

endmodule"
N/A,N/A,-1,95.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
  
  wire [15:0] sum;
  wire cout;
  
  carry_select_adder_16 CS(sum, cout, in1, in2, cin);
  
endmodule

module carry_select_adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
  
  wire [15:0] sum;
  wire cout;
  
  wire [3:0] carry;
  
  adder_4 CS1(sum[3:0], carry[0], in1[3:0], in2[3:0], cin);
  adder_4 CS2(sum[7:4], carry[1], in1[7:4], in2[7:4], carry[0]);
  adder_4 CS3(sum[11:8], carry[2], in1[11:8], in2[11:8], carry[1]);
  adder_4 CS4(sum[15:12], cout, in1[15:12], in2[15:12], carry[2]);
  
endmodule

module adder_4(output [3:0] sum,
                      output cout,
                      input [3:0] in1, in2,
                      input cin);
  
  wire [3:0] sum;
  wire cout;
  
  wire [1:0] carry;
  
  adder_1 CS1(sum[0], carry[0], in1[0], in2[0], cin);
  adder_1 CS2(sum[1], carry[1], in1[1], in2[1], carry[0]);
  adder_1 CS3(sum[2], carry[2], in1[2], in2[2], carry[1]);
  adder_1 CS4(sum[3], cout, in1[3], in2[3], carry[2]);
  
endmodule

module adder_1(output sum,
                      output cout,
                      input in1, in2,
                      input cin);
  
  wire sum;
  wire cout;
  
  wire [1:0] carry;
  
  adder_1 CS1(sum, carry[0], in1, in2, cin);
  adder_1 CS2(cout, carry[1], in1, in2, carry[0]);
  
endmodule"
N/A,N/A,-1,96.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);                    
    wire [15:0] sum;
    wire cout;
    wire [15:0] in1;
    wire [15:0] in2;
    wire cin;
    
    kogge_stone_16 KS_1(sum[15:0], in1[15:0], in2[15:0], cin);
    kogge_stone_16 KS_2(sum[31:16], in1[31:16], in2[31:16], 1'b0);
    kogge_stone_16 KS_3(cout, in1[31:16], in2[31:16], 1'b1);
endmodule

Top level design
module top_level(output [15:0] sum,
                  output cout,
                  input [15:0] in1, in2,
                  input cin);
    wire [15:0] sum;
    wire cout;
    wire [15:0] in1;
    wire [15:0] in2;
    wire cin;
    
    adder_16 KS_1(sum, cout, in1, in2, cin);
endmodule"
N/A,N/A,-1,97.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);        
  wire [15:0] sum;
  wire cout;
  wire [15:0] in1;
  wire [15:0] in2;
  wire cin;
  
  alu_16bit alu_16bit_inst(sum, cout, in1, in2, cin);
endmodule

module alu_16bit(output [15:0] sum,
                  output cout,
                  input [15:0] in1, in2,
                  input cin);
  wire [15:0] sum;
  wire cout;
  wire [15:0] in1;
  wire [15:0] in2;
  wire cin;
  
  wire [15:0] sum_temp;
  wire cout_temp;
  
  adder_16 adder_16_inst(sum_temp, cout_temp, in1, in2, cin);
  
  assign sum = sum_temp[15:0];
  assign cout = cout_temp;
endmodule"
N/A,N/A,-0.5,98.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);     

    wire [15:0] sum;
    wire cout;
    wire [15:0] in1;
    wire [15:0] in2;
    wire cin;

    nand n1(sum[0], in1[0], in2[0], cin);
    nand n2(sum[1], in1[1], in2[1], cin);
    nand n3(sum[2], in1[2], in2[2], cin);
    nand n4(sum[3], in1[3], in2[3], cin);
    nand n5(sum[4], in1[4], in2[4], cin);
    nand n6(sum[5], in1[5], in2[5], cin);
    nand n7(sum[6], in1[6], in2[6], cin);
    nand n8(sum[7], in1[7], in2[7], cin);
    nand n9(sum[8], in1[8], in2[8], cin);
    nand n10(sum[9], in1[9], in2[9], cin);
    nand n11(sum[10], in1[10], in2[10], cin);
    nand n12(sum[11], in1[11], in2[11], cin);
    nand n13(sum[12], in1[12], in2[12], cin);
    nand n14(sum[13], in1[13], in2[13], cin);
    nand n15(sum[14], in1[14], in2[14], cin);
    nand n16(sum[15], in1[15], in2[15], cin);
    nand n17(cout, in1[15], in2[15], cin);

endmodule"
N/A,N/A,-1,99.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);     
  wire [15:0] sum;
  wire cout;
  wire [15:0] in1;
  wire [15:0] in2;
  wire cin;
  
  fadder_16 fadder_16_1(sum[15:0], cout, in1[15:0], in2[15:0], cin);
  fadder_16 fadder_16_2(sum[31:16], cout, in1[31:16], in2[31:16], cout);
endmodule

module fadder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
  wire [15:0] sum;
  wire cout;
  wire [15:0] in1;
  wire [15:0] in2;
  wire cin;
  
  wire [15:0] sum_temp;
  wire [15:0] in1_temp;
  wire [15:0] in2_temp;
  wire cin_temp;
  
  assign sum_temp = in1 + in2;
  assign in1_temp = in1;
  assign in2_temp = in2;
  assign cin_temp = cin;
  
  assign sum = sum_temp[15:0];
  assign cout = cin_temp;
endmodule"
N/A,N/A,-0.5,100.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);




endmodule"
N/A,N/A,-1,101.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);

                        
  wire c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15;
  
  node_16 n1(sum[15:0], c1, in1[15:0], in2[15:0]);
  node_16 n2(sum[31:16], c2, in1[15:0], in2[15:0]);
  node_16 n3(sum[47:32], c3, in1[15:0], in2[15:0]);
  node_16 n4(sum[63:48], c4, in1[15:0], in2[15:0]);
  node_16 n5(sum[79:64], c5, in1[15:0], in2[15:0]);
  node_16 n6(sum[95:80], c6, in1[15:0], in2[15:0]);
  node_16 n7(sum[111:96], c7, in1[15:0], in2[15:0]);
  node_16 n8(sum[127:112], c8, in1[15:0], in2[15:0]);
  node_16 n9(sum[143:128], c9, in1[15:0], in2[15:0]);
  node_16 n10(sum[159:144], c10, in1[15:0], in2[15:0]);
  node_16 n11(sum[175:160], c11, in1[15:0], in2[15:0]);
  node_16 n12(sum[191:176], c12, in1[15:0], in2[15:0]);
  node_16 n13(sum[207:192], c13, in1[15:0], in2[15:0]);
  node_16 n14(sum[223:208], c14, in1[15:0], in2[15:0]);
  node_16 n15(sum[239:224], c15, in1[15:0], in2[15:0]);
  
  assign cout = c15;
  
endmodule

module node_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2);

  xor(sum[0], in1[0], in2[0]);
  xor(sum[1], in1[1], in2[1]);
  xor(sum[2], in1[2], in2[2]);
  xor(sum[3], in1[3], in2[3]);
  xor(sum[4], in1[4], in2[4]);
  xor(sum[5], in1[5], in2[5]);
  xor(sum[6], in1[6], in2[6]);
  xor(sum[7], in1[7], in2[7]);
  xor(sum[8], in1[8], in2[8]);
  xor(sum[9], in1[9], in2[9]);
  xor(sum[10], in1[10], in2[10]);
  xor(sum[11], in1[11], in2[11]);
  xor(sum[12], in1[12], in2[12]);
  xor(sum[13], in1[13], in2[13]);
  xor(sum[14], in1[14], in2[14]);
  xor(sum[15], in1[15], in2[15]);
  
  assign cout = in1[15] ^ in2[15];
  
endmodule"
151.886,636.95,0.1,102.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);

assign {cout, sum} = in1 + in2 + cin;

endmodule"
151.886,636.95,0.1,103.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);

assign {cout, sum} = in1 + in2 + cin;

endmodule"
151.886,636.95,0.1,104.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);

assign {cout, sum} = in1 + in2 + cin;

endmodule"
N/A,N/A,-1,105.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);

wire c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15;

one_bit_add_16 one_bit_add_16_1(sum[0], c1, in1[0], in2[0], cin);
one_bit_add_16 one_bit_add_16_2(sum[1], c2, in1[1], in2[1], c1);
one_bit_add_16 one_bit_add_16_3(sum[2], c3, in1[2], in2[2], c2);
one_bit_add_16 one_bit_add_16_4(sum[3], c4, in1[3], in2[3], c3);
one_bit_add_16 one_bit_add_16_5(sum[4], c5, in1[4], in2[4], c4);
one_bit_add_16 one_bit_add_16_6(sum[5], c6, in1[5], in2[5], c5);
one_bit_add_16 one_bit_add_16_7(sum[6], c7, in1[6], in2[6], c6);
one_bit_add_16 one_bit_add_16_8(sum[7], c8, in1[7], in2[7], c7);
one_bit_add_16 one_bit_add_16_9(sum[8], c9, in1[8], in2[8], c8);
one_bit_add_16 one_bit_add_16_10(sum[9], c10, in1[9], in2[9], c9);
one_bit_add_16 one_bit_add_16_11(sum[10], c11, in1[10], in2[10], c10);
one_bit_add_16 one_bit_add_16_12(sum[11], c12, in1[11], in2[11], c11);
one_bit_add_16 one_bit_add_16_13(sum[12], c13, in1[12], in2[12], c12);
one_bit_add_16 one_bit_add_16_14(sum[13], c14, in1[13], in2[13], c13);
one_bit_add_16 one_bit_add_16_15(sum[14], c15, in1[14], in2[14], c14);
one_bit_add_16 one_bit_add_16_16(sum[15], cout, in1[15], in2[15], c15);

endmodule

module one_bit_add_16(output [15:0] sum,
                      output cout,
                      input in1, in2,
                      input cin);

wire c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15;

xor(c1, in1, in2);
xor(sum[0], c1, cin);
and(c2, in1, in2);
and(c3, in1, cin);
and(c4, in2, cin);
or(cout, c2, c3, c4);

xor(sum[1], c1, cin);
and(c5, in1, cin);
and(c6, in2, cin);
or(cout, c5, c6);

xor(sum[2], c1, cin);
and(c7, in1, cin);
and(c8, in2, cin);
or(cout, c7, c8);

xor(sum[3], c1, cin);
and(c9, in1, cin);
and(c10, in2, cin);
or(cout, c9, c10);

xor(sum[4], c1, cin);
and(c11, in1, cin);
and(c12, in2, cin);
or(cout, c11, c12);

xor(sum[5], c1, cin);
and(c13, in1, cin);
and(c14, in2, cin);
or(cout, c13, c14);

xor(sum[6], c1, cin);
and(c15, in1, cin);
and(c16, in2, cin);
or(cout, c15, c16);

xor(sum[7], c1, cin);
and(c17, in1, cin);
and(c18, in2, cin);
or(cout, c17, c18);

xor(sum[8], c1, cin);
and(c19, in1, cin);
and(c20, in2, cin);
or(cout, c19, c20);

xor(sum[9], c1, cin);
and(c21, in1, cin);
and(c22, in2, cin);
or(cout, c21, c22);

xor(sum[10], c1, cin);
and(c23, in1, cin);
and(c24, in2, cin);
or(cout, c23, c24);

xor(sum[11], c1, cin);
and(c25, in1, cin);
and(c26, in2, cin);
or(cout, c25, c26);

xor(sum[12], c1, cin);
and(c27, in1, cin);
and(c28, in2, cin);
or(cout, c27, c28);

xor(sum[13], c1, cin);
and(c29, in1, cin);
and(c30, in2, cin);
or(cout, c29, c30);

xor(sum[14], c1"
151.886,636.95,0.1,106.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,107.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,108.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
N/A,N/A,-1,109.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign c[0] = cin;
assign cout = c[16];
genvar i;
generate
for(i=0;i<16;i=i+1)
begin: adder_loop
    full_adder FA(sum[i],c[i+1],in1[i],in2[i],c[i]);
end
endgenerate
endmodule

half_adder HA1(output wire sum,
                output wire cout,
                input wire in1,
                input wire in2);
assign sum = in1 ^ in2;
assign cout = in1 & in2;
endmodule"
151.886,636.95,0.1,110.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);

assign {cout, sum} = in1 + in2 + cin;

endmodule"
N/A,N/A,-0.5,111.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);

endmodule"
N/A,N/A,-0.5,112.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);

assign sum = in1 + in2 + cin;
assign cout = (in1[15] == in2[15])? 1'b0 : (in1[15] == cin? 1'b1 : in1[15] + in2[15] + cin);

endmodule"
N/A,N/A,-1,113.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
    
    wire [15:0] sum;
    wire cout;
    
    carry_select_adder_16 CS(sum, cout, in1, in2, cin);
    
endmodule

module carry_select_adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
    
    wire [15:0] sum;
    wire cout;
    
    wire [3:0] carry;
    
    carry_select_adder_4 CS1(sum[3:0], carry[3:0], in1[3:0], in2[3:0], cin);
    carry_select_adder_4 CS2(sum[7:4], carry[7:4], in1[7:4], in2[7:4], carry[3:0]);
    carry_select_adder_4 CS3(sum[11:8], carry[11:8], in1[11:8], in2[11:8], carry[7:4]);
    carry_select_adder_4 CS4(sum[15:12], cout, in1[15:12], in2[15:12], carry[11:8]);
    
endmodule

module carry_select_adder_4(output [3:0] sum,
                      output cout,
                      input [3:0] in1, in2,
                      input cin);
    
    wire [3:0] sum;
    wire cout;
    
    wire [1:0] carry;
    
    carry_select_adder_2 CS1(sum[1:0], carry[1:0], in1[1:0], in2[1:0], cin);
    carry_select_adder_2 CS2(sum[3:2], carry[3:2], in1[3:2], in2[3:2], carry[1:0]);
    carry_select_adder_2 CS3(cout, carry[3:2], in1[3:2], in2[3:2], carry[1:0]);
    
endmodule

module carry_select_adder_2(output [1:0] sum,
                      output cout,
                      input [1:0] in1, in2,
                      input cin);
    
    wire [1:0] sum;
    wire cout;
    
    wire [1:0] carry;
    
    carry_select_adder_1 CS1(sum[1:0], carry[1:0], in1[1:0], in2[1:0], cin);
    carry_select_adder_1 CS2(sum[3:2], carry[3:2], in1[3:2], in2[3:2], carry[1:0]);
    carry_select_adder_1 CS3(cout, carry[3:2], in1[3:2], in2[3:2], carry[1:0]);
    
endmodule

module carry_select_adder_1(output [1:0] sum,
                      output cout,
                      input [1:0] in1, in2,
                      input cin);
    
    wire [1:0] sum;
    wire cout;
    
    wire [1:0] carry;
    
    carry_select_adder_1 CS1(sum[1:0], carry[1:0], in1[1:0], in2[1:0], cin);
    carry_select_adder_1 CS2(sum[3:2], carry[3:2], in1[3:2], in2[3:2], carry[1:0]);
    carry_select_adder_1 CS3(cout, carry[3:2], in1[3:2], in2[3:2], carry[1:0]);
    
endmodule"
151.886,636.95,0.1,114.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,115.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout,sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,116.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,117.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,118.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,119.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout,sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,120.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,121.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,122.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout,sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,123.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
N/A,N/A,-0.5,124.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign sum = in1 + in2 + cin;
assign cout = (in1[15] == in2[15])? 1'b0 : (in1[15] == cin? 1'b1 : in1[15] + in2[15] + cin);
endmodule"
151.886,636.95,0.1,125.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,126.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,127.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout,sum} = in1 + in2 + cin;
endmodule"
N/A,N/A,-0.5,128.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign #5 {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,129.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,130.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,131.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,132.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout,sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,133.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,134.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1+in2+cin;
endmodule"
151.886,636.95,0.1,135.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,136.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout,sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,137.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,138.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,139.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,140.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout,sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,141.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,142.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,143.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,144.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout,sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,145.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,146.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
N/A,N/A,-1,147.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign cout = c[15];
assign sum = s[15:0];

carry_select_adder_16 csa_16(s[15:0], c[15:0], in1[15:0], in2[15:0], cin);

endmodule

module carry_select_adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);

wire c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15;

FCICIND1 g1(.A (in1[15]),.B (in2[15]),.CIN (cin),.CO (c1));
FCICIND1 g2(.A (in1[14]),.B (in2[14]),.CIN (c1),.CO (c2));
FCICIND1 g3(.A (in1[13]),.B (in2[13]),.CIN (c2),.CO (c3));
FCICIND1 g4(.A (in1[12]),.B (in2[12]),.CIN (c3),.CO (c4));
FCICIND1 g5(.A (in1[11]),.B (in2[11]),.CIN (c4),.CO (c5));
FCICIND1 g6(.A (in1[10]),.B (in2[10]),.CIN (c5),.CO (c6));
FCICIND1 g7(.A (in1[9]),.B (in2[9]),.CIN (c6),.CO (c7));
FCICIND1 g8(.A (in1[8]),.B (in2[8]),.CIN (c7),.CO (c8));
FCICIND1 g9(.A (in1[7]),.B (in2[7]),.CIN (c8),.CO (c9));
FCICIND1 g10(.A (in1[6]),.B (in2[6]),.CIN (c9),.CO (c10));
FCICIND1 g11(.A (in1[5]),.B (in2[5]),.CIN (c10),.CO (c11));
FCICIND1 g12(.A (in1[4]),.B (in2[4]),.CIN (c11),.CO (c12));
FCICIND1 g13(.A (in1[3]),.B (in2[3]),.CIN (c12),.CO (c13));
FCICIND1 g14(.A (in1[2]),.B (in2[2]),.CIN (c13),.CO (c14));
FCICIND1 g15(.A (in1[1]),.B (in2[1]),.CIN (c14),.CO (c15));
FCICIND1 g16(.A (in1[0]),.B (in2[0]),.CIN (c15),.CO (cout));

assign sum[0] = c15;
assign sum[1] = s[1];
assign sum[2] = s[2];
assign sum[3] = s[3];
assign sum[4] = s[4];
assign sum[5] = s[5];
assign sum[6] = s[6];
assign sum[7] = s[7];
assign sum[8] = s[8];
assign sum[9] = s[9];
assign sum[10] = s[10];
assign sum[11] = s[11];
assign sum[12] = s[12];
assign sum[13] = s[13];
assign sum[14] = s[14];
assign sum[15] = s[15];

endmodule

module carry_select_adder_4(output [3:0] sum,
                      output cout,
                      input [3:0] in1, in2,
                      input cin);

wire c1, c2, c3;

FCICIND1 g1(.A (in1[3]),.B (in2[3]),.CIN (cin),.CO (c1));
FCICIND1 g2(.A (in1[2]),.B (in2[2]),.CIN (c1),.CO (c2));
FCICIND1 g3(.A (in1[1]),.B (in2[1]),.CIN (c2),.CO (c3));
FCICIND1 g4(.A (in1[0]),.B (in2[0]),.CIN (c3),.CO (cout));

assign sum[0] = c3;
assign sum[1] = s[1];
assign sum[2] = s[2];
assign sum[3] = s[3];

endmodule

module carry_select_adder_4_tb;

reg [3:0] in1, in2;
reg cin;
wire cout;

carry_select_adder_4 csa_4(.sum (sum),.cout (cout),.in1 (in1),.in2 (in2),.cin (cin));

initial begin
    in1 = 4'b0000;
    in2 = 4'b0000;
    cin = 0;
    #10;
    in1 = 4'b0000;
    in2 = 4'b0001;
    cin = 0;
    #10;
    in1 = 4'b0001;
    in2 = 4'b0001;
    cin = 0;
    #10;
    in1 = 4'b0010;
    in2 = 4'b0010;
    cin = 0;
    #10;
    in1 = 4'b0011;
    in2 = 4'b0011;
    cin = 0;
    #10;
    in1 = 4'b0100;
    in2 = 4'b0100;
    cin = 0;
    #10;
    in1 = 4'b0101;
    in2 = 4'b0101;
"
151.886,636.95,0.1,148.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1+in2+cin;
endmodule"
151.886,636.95,0.1,149.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout,sum} = in1+in2+cin;
endmodule"
151.886,636.95,0.1,150.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,151.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,152.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout,sum}=in1+in2+cin;
endmodule"
151.886,636.95,0.1,153.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum}=in1+in2+cin;
endmodule"
N/A,N/A,-0.5,154.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign sum = in1 + in2 + cin;
assign cout = (in1[15] == in2[15])? 1'b0 : (in1[15] == cin? 1'b1 : in1[15] + in2[15] + cin);
endmodule"
151.886,636.95,0.1,155.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,156.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,157.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
  assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,158.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
  assign {cout, sum} = in1 + in2 + cin;
endmodule"
N/A,N/A,-1,159.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
  wire c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15;
  wire [15:0] sum1, sum2, sum3, sum4, sum5, sum6, sum7, sum8, sum9, sum10, sum11, sum12, sum13, sum14, sum15;
  
  cmos_nand_16 nand1(sum1, in1, in2);
  cmos_nand_16 nand2(sum2, in1, in2);
  cmos_nand_16 nand3(sum3, in1, in2);
  cmos_nand_16 nand4(sum4, in1, in2);
  cmos_nand_16 nand5(sum5, in1, in2);
  cmos_nand_16 nand6(sum6, in1, in2);
  cmos_nand_16 nand7(sum7, in1, in2);
  cmos_nand_16 nand8(sum8, in1, in2);
  cmos_nand_16 nand9(sum9, in1, in2);
  cmos_nand_16 nand10(sum10, in1, in2);
  cmos_nand_16 nand11(sum11, in1, in2);
  cmos_nand_16 nand12(sum12, in1, in2);
  cmos_nand_16 nand13(sum13, in1, in2);
  cmos_nand_16 nand14(sum14, in1, in2);
  cmos_nand_16 nand15(sum15, in1, in2);
  
  cmos_nand_16 nand16(c1, in1, in2);
  cmos_nand_16 nand17(c2, in1, in2);
  cmos_nand_16 nand18(c3, in1, in2);
  cmos_nand_16 nand19(c4, in1, in2);
  cmos_nand_16 nand20(c5, in1, in2);
  cmos_nand_16 nand21(c6, in1, in2);
  cmos_nand_16 nand22(c7, in1, in2);
  cmos_nand_16 nand23(c8, in1, in2);
  cmos_nand_16 nand24(c9, in1, in2);
  cmos_nand_16 nand25(c10, in1, in2);
  cmos_nand_16 nand26(c11, in1, in2);
  cmos_nand_16 nand27(c12, in1, in2);
  cmos_nand_16 nand28(c13, in1, in2);
  cmos_nand_16 nand29(c14, in1, in2);
  cmos_nand_16 nand30(c15, in1, in2);
  
  cmos_nand_16 nand31(cout, in1, in2);
  
  cmos_nand_16 nand32(sum1, in1, in2);
  cmos_nand_16 nand33(sum2, in1, in2);
  cmos_nand_16 nand34(sum3, in1, in2);
  cmos_nand_16 nand35(sum4, in1, in2);
  cmos_nand_16 nand36(sum5, in1, in2);
  cmos_nand_16 nand37(sum6, in1, in2);
  cmos_nand_16 nand38(sum7, in1, in2);
  cmos_nand_16 nand39(sum8, in1, in2);
  cmos_nand_16 nand40(sum9, in1, in2);
  cmos_nand_16 nand41(sum10, in1, in2);
  cmos_nand_16 nand42(sum11, in1, in2);
  cmos_nand_16 nand43(sum12, in1, in2);
  cmos_nand_16 nand44(sum13, in1, in2);
  cmos_nand_16 nand45(sum14, in1, in2);
  cmos_nand_16 nand46(sum15, in1, in2);
  
  cmos_nand_16 nand47(cout, in1, in2);
  
  cmos_nand_16 nand48(sum1, in1, in2);
  cmos_nand_16 nand49(sum2, in1, in2);
  cmos_nand_16 nand50(sum3, in1, in2);
  cmos_nand_16 nand51(sum4, in1, in2);
  cmos_nand_16 nand52(sum5, in1, in2);
  cmos_nand_16 nand53(sum6, in1, in2);
  cmos_nand_16 nand54(sum7, in1, in2);
  cmos_nand_16 nand55(sum8, in1, in2);
  cmos_nand_16 nand56(sum9, in1, in2);
  cmos_nand_16 nand57(sum10, in1, in2);
  cmos_nand_16 nand58(sum11, in1, in2);
  cmos_nand_16 nand59(sum12, in1, in2);
  cmos_nand_16 nand60(sum13, in1, in2);
  cmos_nand_16 nand61(sum14, in1, in2);
  cmos_nand_16 nand62(sum15, in1, in2);
  
  cmos_nand_16 nand63(cout, in1, in2"
151.886,636.95,0.1,160.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout,sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,161.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,162.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign  {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,163.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,164.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,165.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout,sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,166.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,167.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,168.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1+in2+cin;
endmodule"
151.886,636.95,0.1,169.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout,sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,170.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,171.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,172.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,173.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout,sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,174.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,175.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;

endmodule"
151.886,636.95,0.1,176.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,177.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout,sum} = in1+in2+cin;
endmodule"
151.886,636.95,0.1,178.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,179.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,180.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1+in2+cin;
endmodule"
151.886,636.95,0.1,181.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout,sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,182.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,183.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,184.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout,sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,185.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,186.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
N/A,N/A,-1,187.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign carry[0] = cin;
assign cout = carry[1];
genvar i;
generate
for(i=0;i<16;i=i+1)
begin: adder_loop
fa_16 fa(sum[i],carry[i+1],in1[i],in2[i],carry[i]);
end
endgenerate
endmodule

8-bit adder_16
module fa_8(output [7:0] sum,
             output cout,
             input [7:0] in1, in2,
             input cin);
assign carry[0] = cin;
assign cout = carry[1];
genvar i;
generate
for(i=0;i<8;i=i+1)
begin: adder_loop
fa_16 fa(sum[i],carry[i+1],in1[i],in2[i],carry[i]);
end
endgenerate
endmodule"
151.886,636.95,0.1,188.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum}=in1+in2+cin;
endmodule"
151.886,636.95,0.1,189.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout,sum}=in1+in2+cin;
endmodule"
151.886,636.95,0.1,190.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,191.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,192.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,193.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout,sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,194.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,195.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign  {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,196.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,197.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1+in2+cin;
endmodule"
151.886,636.95,0.1,198.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout,sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,199.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,200.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,201.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
N/A,N/A,-0.5,202.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign sum = in1 + in2 + cin;
assign cout = (in1[15] == in2[15])? 1'b0 : (in1[15] == cin? 1'b1 : in1[15] + in2[15] + cin);
endmodule"
151.886,636.95,0.1,203.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout,sum} = in1+in2+cin;
endmodule"
151.886,636.95,0.1,204.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,205.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,206.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,207.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout,sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,208.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,209.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,210.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout,sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,211.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;

endmodule"
151.886,636.95,0.1,212.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1+in2+cin;
endmodule"
151.886,636.95,0.1,213.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,214.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout,sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,215.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
N/A,N/A,-1,216.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign c[0] = cin;
assign cout = c[16];
genvar i;
generate
for(i=0;i<16;i=i+1)
begin: adder_loop
    full_adder FA(sum[i],c[i+1],in1[i],in2[i],c[i]);
end
endgenerate
endmodule

bcd_to_7seg bcd_to_7seg(output reg [6:0] seg,
                        input [3:0] bcd);
always @(bcd)
case(bcd)
    4'b0000: seg = 7'b0000001;
    4'b0001: seg = 7'b1001111;
    4'b0010: seg = 7'b0010010;
    4'b0011: seg = 7'b0000110;
    4'b0100: seg = 7'b1001100;
    4'b0101: seg = 7'b0100100;
    4'b0110: seg = 7'b0100000;
    4'b0111: seg = 7'b0001111;
    4'b1000: seg = 7'b0000000;
    4'b1001: seg = 7'b0001100;
    4'b1010: seg = 7'b0001000;
    4'b1011: seg = 7'b1100000;
    4'b1100: seg = 7'b0110001;
    4'b1101: seg = 7'b1000010;
    4'b1110: seg = 7'b0110000;
    4'b1111: seg = 7'b0111000;
endcase
endmodule"
151.886,636.95,0.1,217.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,218.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,219.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout,sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,220.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,221.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum}= in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,222.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,223.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout,sum}=in1+in2+cin;
endmodule"
151.886,636.95,0.1,224.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,225.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,226.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
  assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,227.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
  assign {cout, sum} = in1 + in2 + cin;
endmodule"
N/A,N/A,-1,228.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
  full_adder FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder FA8(sum[7], c8, in1[7], in2[7], c7);
  full_adder FA9(sum[8], c9, in1[8], in2[8], c8);
  full_adder FA10(sum[9], c10, in1[9], in2[9], c9);
  full_adder FA11(sum[10], c11, in1[10], in2[10], c10);
  full_adder FA12(sum[11], c12, in1[11], in2[11], c11);
  full_adder FA13(sum[12], c13, in1[12], in2[12], c12);
  full_adder FA14(sum[13], c14, in1[13], in2[13], c13);
  full_adder FA15(sum[14], c15, in1[14], in2[14], c14);
  full_adder FA16(sum[15], cout, in1[15], in2[15], c15);
endmodule

ram_16x4 ram_16x4_inst(
 .clka(clka),
 .wea(wea),
 .addra(addra),
 .dina(dina),
 .clkb(clkb),
 .addrb(addrb),
 .doutb(doutb)
);

ADD_FIXED_POINT add_fixed_point_inst(
 .a(a),
 .b(b),
 .cin(cin),
 .sum(sum),
 .cout(cout)
);

endmodule"
151.886,636.95,0.1,229.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
    assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,230.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
    assign {cout, sum} = in1 + in2 + cin;
endmodule"
N/A,N/A,-1,231.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
    wire [15:0] sum;
    wire cout;
    wire [15:0] in1;
    wire [15:0] in2;
    wire cin;
    
    Adder_16bit adder(sum, cout, in1, in2, cin);
    
endmodule
`timescale 1ns / 1ps
assign sum = in1 + in2 + cin;

module Adder_16bit(output [15:0] sum,
                     output cout,
                     input [15:0] in1, in2,
                     input cin);
    wire [15:0] sum;
    wire cout;
    wire [15:0] in1;
    wire [15:0] in2;
    wire cin;
    
    wire [15:0] sum1;
    wire cout1;
    wire [15:0] in1_1;
    wire [15:0] in2_1;
    wire cin_1;
    
    wire [15:0] sum2;
    wire cout2;
    wire [15:0] in1_2;
    wire [15:0] in2_2;
    wire cin_2;
    
    wire [15:0] sum3;
    wire cout3;
    wire [15:0] in1_3;
    wire [15:0] in2_3;
    wire cin_3;
    
    wire [15:0] sum4;
    wire cout4;
    wire [15:0] in1_4;
    wire [15:0] in2_4;
    wire cin_4;
    
    wire [15:0] sum5;
    wire cout5;
    wire [15:0] in1_5;
    wire [15:0] in2_5;
    wire cin_5;
    
    wire [15:0] sum6;
    wire cout6;
    wire [15:0] in1_6;
    wire [15:0] in2_6;
    wire cin_6;
    
    wire [15:0] sum7;
    wire cout7;
    wire [15:0] in1_7;
    wire [15:0] in2_7;
    wire cin_7;
    
    wire [15:0] sum8;
    wire cout8;
    wire [15:0] in1_8;
    wire [15:0] in2_8;
    wire cin_8;
    
    wire [15:0] sum9;
    wire cout9;
    wire [15:0] in1_9;
    wire [15:0] in2_9;
    wire cin_9;
    
    wire [15:0] sum10;
    wire cout10;
    wire [15:0] in1_10;
    wire [15:0] in2_10;
    wire cin_10;
    
    wire [15:0] sum11;
    wire cout11;
    wire [15:0] in1_11;
    wire [15:0] in2_11;
    wire cin_11;
    
    wire [15:0] sum12;
    wire cout12;
    wire [15:0] in1_12;
    wire [15:0] in2_12;
    wire cin_12;
    
    wire [15:0] sum13;
    wire cout13;
    wire [15:0] in1_13;
    wire [15:0] in2_13;
    wire cin_13;
    
    wire [15:0] sum14;
    wire cout14;
    wire [15:0] in1_14;
    wire [15:0] in2_14;
    wire cin_14;
    
    wire [15:0] sum15;
    wire cout15;
    wire [15:0] in1_15;
    wire [15:0] in2_15;
    wire cin_15;
    
    wire [15:0] sum16;
    wire cout16;
    wire [15:0] in1_16;
    wire [15:0] in2_16;
    wire cin_16;
    
    wire [15:0] sum17;
    wire cout17;
    wire [15:0] in1_17;
    wire [15:0] in2_17;
    wire cin_17;
    
    wire [15:0] sum18;
    wire cout18;
    wire [15:0] in1_18;
    wire [15:0] in2_18;
    wire cin_18;
    
    wire [15:0] sum19;
    wire cout19;
    wire [15:0] in1_19;
    wire [15:0] in2_19;
    wire cin_19;
    
    wire [15:0] sum20;
    wire cout20;
    wire [15:0] in1_20;
    wire [15:0] in2_20;
    wire cin_20;
    
    wire [15:0] sum21;
    wire cout21;
    wire [15:0] in1_21;
    wire [15:0] in2_21;
    wire cin_21;
    
    wire [15:0] sum22;
    wire cout22;
    wire [15:0] in1_22;
    wire [15:0] in2_22;
    wire cin_22;
    
    wire [15:0] sum23;
    wire cout23;
    wire [15:0] in1_23;
    wire [15:0] in2_23;
    wire cin_23;
    
    wire [15:0] sum24;
    wire cout24;
    wire [15:0] in1_24;
    wire [15:0] in2_24;
    wire cin_24;
    
    wire [15:0] sum25;
    wire cout25;
    wire [15:0] in1_25;
    wire [15:0] in2_25;
    "
151.886,636.95,0.1,232.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1+in2+cin;
endmodule"
N/A,N/A,-0.5,233.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign  cout = cin;
assign  sum = in1 + in2;
endmodule"
N/A,N/A,-0.5,234.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);

reg [15:0] sum;
reg cout;

always @(in1 or in2 or cin)
begin
    sum = in1 + in2 + cin;
    cout = (in1[15] == in2[15] && in1[15] == cin)? 1'b1 : 1'b0;
end

endmodule"
151.886,636.95,0.1,235.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout,sum} = in1+in2+cin;
endmodule"
151.886,636.95,0.1,236.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,237.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,238.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,239.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout,sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,240.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,241.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,242.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout,sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,243.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,244.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,245.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,246.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout,sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,247.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
N/A,N/A,-1,248.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign cout = c[15];
assign sum = s[15:0];

ripple_carry_adder_16 rca1(s[15:0], c[15:0], in1[15:0], in2[15:0], cin);

endmodule

module ripple_carry_adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);

wire c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15;

full_adder fa1(s1[0], c1, in1[0], in2[0], cin);
full_adder fa2(s2[1], c2, in1[1], in2[1], c1);
full_adder fa3(s3[2], c3, in1[2], in2[2], c2);
full_adder fa4(s4[3], c4, in1[3], in2[3], c3);
full_adder fa5(s5[4], c5, in1[4], in2[4], c4);
full_adder fa6(s6[5], c6, in1[5], in2[5], c5);
full_adder fa7(s7[6], c7, in1[6], in2[6], c6);
full_adder fa8(s8[7], c8, in1[7], in2[7], c7);
full_adder fa9(s9[8], c9, in1[8], in2[8], c8);
full_adder fa10(s10[9], c10, in1[9], in2[9], c9);
full_adder fa11(s11[10], c11, in1[10], in2[10], c10);
full_adder fa12(s12[11], c12, in1[11], in2[11], c11);
full_adder fa13(s13[12], c13, in1[12], in2[12], c12);
full_adder fa14(s14[13], c14, in1[13], in2[13], c13);
full_adder fa15(s15[14], c15, in1[14], in2[14], c14);
full_adder fa16(s16[15], cout, in1[15], in2[15], c15);

assign sum[0] = s1[0];
assign sum[1] = s2[1];
assign sum[2] = s3[2];
assign sum[3] = s4[3];
assign sum[4] = s5[4];
assign sum[5] = s6[5];
assign sum[6] = s7[6];
assign sum[7] = s8[7];
assign sum[8] = s9[8];
assign sum[9] = s10[9];
assign sum[10] = s11[10];
assign sum[11] = s12[11];
assign sum[12] = s13[12];
assign sum[13] = s14[13];
assign sum[14] = s15[14];
assign sum[15] = s16[15];

endmodule

module full_adder(output wire sum,
                  output wire cout,
                  input wire in1,
                  input wire in2,
                  input wire cin);

assign sum = in1 ^ in2 ^ cin;
assign cout = (in1 & in2) | (in1 & cin) | (in2 & cin);

endmodule"
151.886,636.95,0.1,249.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1+in2+cin;
endmodule"
151.886,636.95,0.1,250.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,251.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout,sum} = in1+in2+cin;
endmodule"
151.886,636.95,0.1,252.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,253.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,254.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;

endmodule"
151.886,636.95,0.1,255.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout,sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,256.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,257.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,258.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,259.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout,sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,260.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum}=in1+in2+cin;
endmodule"
151.886,636.95,0.1,261.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,262.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1+in2+cin;
endmodule"
151.886,636.95,0.1,263.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout,sum}= in1+in2+cin;
endmodule"
151.886,636.95,0.1,264.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,265.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,266.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout,sum} = in1 + in2 + cin;
endmodule"
N/A,N/A,-0.5,267.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign sum = in1 + in2 + cin;
assign cout = (in1[15] == in2[15])? 1'b0 : (in1[15] == cin? 1'b1 : in1[15] + in2[15] + cin);
endmodule"
151.886,636.95,0.1,268.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,269.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,270.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,271.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout,sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,272.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,273.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,274.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,275.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout,sum} = in1+in2+cin;
endmodule"
151.886,636.95,0.1,276.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,277.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1+in2+cin;
endmodule"
151.886,636.95,0.1,278.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,279.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout,sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,280.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,281.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,282.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,283.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout,sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,284.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,285.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,286.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;

endmodule"
151.886,636.95,0.1,287.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout,sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,288.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,289.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,290.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout,sum} = in1+in2+cin;
endmodule"
151.886,636.95,0.1,291.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum}= in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,292.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1+in2+cin;
endmodule"
151.886,636.95,0.1,293.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,294.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout,sum}=in1+in2+cin;
endmodule"
N/A,N/A,-1,295.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);

full_adder FA0(sum[0], c1, in1[0], in2[0], cin);
full_adder FA1(sum[1], c2, in1[1], in2[1], c1);
full_adder FA2(sum[2], c3, in1[2], in2[2], c2);
full_adder FA3(sum[3], c4, in1[3], in2[3], c3);
full_adder FA4(sum[4], c5, in1[4], in2[4], c4);
full_adder FA5(sum[5], c6, in1[5], in2[5], c5);
full_adder FA6(sum[6], c7, in1[6], in2[6], c6);
full_adder FA7(sum[7], c8, in1[7], in2[7], c7);
full_adder FA8(sum[8], c9, in1[8], in2[8], c8);
full_adder FA9(sum[9], c10, in1[9], in2[9], c9);
full_adder FA10(sum[10], c11, in1[10], in2[10], c10);
full_adder FA11(sum[11], c12, in1[11], in2[11], c11);
full_adder FA12(sum[12], c13, in1[12], in2[12], c12);
full_adder FA13(sum[13], c14, in1[13], in2[13], c13);
full_adder FA14(sum[14], c15, in1[14], in2[14], c14);
full_adder FA15(sum[15], cout, in1[15], in2[15], c15);

endmodule

 ====
 bitwise_xor X1(out, in1, in2);
 ====

module bitwise_xor(output out,
                    input in1, in2);

assign out = in1 ^ in2;

endmodule"
151.886,636.95,0.1,296.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,297.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,298.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,299.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout,sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,300.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin; 
endmodule"
151.886,636.95,0.1,301.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,302.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,303.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout,sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,304.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,305.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1+in2+cin;
endmodule"
151.886,636.95,0.1,306.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,307.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout,sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,308.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,309.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,310.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,311.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout,sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,312.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,313.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,314.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout,sum} = in1+in2+cin;
endmodule"
151.886,636.95,0.1,315.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,316.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,317.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,318.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout,sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,319.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1+in2+cin;
endmodule"
151.886,636.95,0.1,320.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum}=in1+in2+cin;
endmodule"
N/A,N/A,-0.5,321.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
  assign sum = in1 + in2 + cin;
  assign cout = (in1[15] == in2[15])? 1'b0 : (in1[15] == cin? 1'b1 : in1[15] + in2[15] + cin);
endmodule"
151.886,636.95,0.1,322.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,323.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout,sum}=in1+in2+cin;
endmodule"
151.886,636.95,0.1,324.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;

endmodule"
151.886,636.95,0.1,325.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,326.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,327.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout,sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,328.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,329.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,330.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,331.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout,sum} = in1 + in2 + cin;

endmodule"
151.886,636.95,0.1,332.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,333.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1+in2+cin;
endmodule"
151.886,636.95,0.1,334.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,335.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout,sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,336.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,337.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,338.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout,sum} = in1+in2+cin;
endmodule"
151.886,636.95,0.1,339.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,340.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,341.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
N/A,N/A,-0.5,342.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign sum = in1 + in2 + cin;
assign cout = (in1[15] == in2[15])? 1'b0 : (in1[15] == cin? 1'b1 : in1[15] + in2[15] + cin);
endmodule"
151.886,636.95,0.1,343.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout,sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,344.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,345.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,346.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,347.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout,sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,348.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1+in2+cin;
endmodule"
151.886,636.95,0.1,349.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
    assign {cout, sum} = in1 + in2 + cin;
endmodule"
N/A,N/A,-1,350.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
    full_adder FA1(sum[0], c1, in1[0], in2[0], cin);
    full_adder FA2(sum[1], c2, in1[1], in2[1], c1);
    full_adder FA3(sum[2], c3, in1[2], in2[2], c2);
    full_adder FA4(sum[3], c4, in1[3], in2[3], c3);
    full_adder FA5(sum[4], c5, in1[4], in2[4], c4);
    full_adder FA6(sum[5], c6, in1[5], in2[5], c5);
    full_adder FA7(sum[6], c7, in1[6], in2[6], c6);
    full_adder FA8(sum[7], c8, in1[7], in2[7], c7);
    full_adder FA9(sum[8], c9, in1[8], in2[8], c8);
    full_adder FA10(sum[9], c10, in1[9], in2[9], c9);
    full_adder FA11(sum[10], c11, in1[10], in2[10], c10);
    full_adder FA12(sum[11], c12, in1[11], in2[11], c11);
    full_adder FA13(sum[12], c13, in1[12], in2[12], c12);
    full_adder FA14(sum[13], c14, in1[13], in2[13], c13);
    full_adder FA15(sum[14], c15, in1[14], in2[14], c14);
    full_adder FA16(sum[15], cout, in1[15], in2[15], c15);
endmodule

LED_controller
#(parameter WIDTH = 8)
(
    input clk,
    input reset,
    input [WIDTH-1:0] leds,
    output [WIDTH-1:0] led_out
);

shadow_register #(.WIDTH(WIDTH))
shadow_register_inst(
   .clk(clk),
   .reset(reset),
   .in(leds),
   .out(led_out)
);

endmodule"
151.886,636.95,0.1,351.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,352.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum}= in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,353.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout,sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,354.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,355.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,356.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
N/A,N/A,-0.5,357.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign #5 {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,358.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout,sum}=in1+in2+cin;
endmodule"
151.886,636.95,0.1,359.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;

endmodule"
151.886,636.95,0.1,360.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign   {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,361.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,362.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,363.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout,sum} = in1+in2+cin;
endmodule"
151.886,636.95,0.1,364.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,365.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1+in2+cin;
endmodule"
151.886,636.95,0.1,366.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout,sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,367.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,368.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,369.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,370.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout,sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,371.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,372.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,373.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,374.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout,sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,375.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,376.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,377.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,378.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout,sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,379.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1+in2+cin;
endmodule"
151.886,636.95,0.1,380.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,381.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,382.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout,sum} = in1+in2+cin;
endmodule"
151.886,636.95,0.1,383.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum}=in1+in2+cin;
endmodule"
151.886,636.95,0.1,384.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,385.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,386.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout,sum} = in1 + in2 + cin;
endmodule"
182.742,730.15,-0.27920040627063425,387.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
  adder_1 a1(sum[0], c1, in1[0], in2[0], cin);
  adder_1 a2(sum[1], c2, in1[1], in2[1], c1);
  adder_1 a3(sum[2], c3, in1[2], in2[2], c2);
  adder_1 a4(sum[3], c4, in1[3], in2[3], c3);
  adder_1 a5(sum[4], c5, in1[4], in2[4], c4);
  adder_1 a6(sum[5], c6, in1[5], in2[5], c5);
  adder_1 a7(sum[6], c7, in1[6], in2[6], c6);
  adder_1 a8(sum[7], c8, in1[7], in2[7], c7);
  adder_1 a9(sum[8], c9, in1[8], in2[8], c8);
  adder_1 a10(sum[9], c10, in1[9], in2[9], c9);
  adder_1 a11(sum[10], c11, in1[10], in2[10], c10);
  adder_1 a12(sum[11], c12, in1[11], in2[11], c11);
  adder_1 a13(sum[12], c13, in1[12], in2[12], c12);
  adder_1 a14(sum[13], c14, in1[13], in2[13], c13);
  adder_1 a15(sum[14], c15, in1[14], in2[14], c14);
  adder_1 a16(sum[15], cout, in1[15], in2[15], c15);
endmodule

module adder_1(output sum,
                      output cout,
                      input in1, in2, cin);
  assign sum = in1 ^ in2 ^ cin;
  assign cout = (in1 & in2) | (in1 & cin) | (in2 & cin);
endmodule"
151.886,636.95,0.1,388.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,389.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,390.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout,sum}= in1+in2+cin;
endmodule"
151.886,636.95,0.1,391.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,392.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;

endmodule"
151.886,636.95,0.1,393.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1+in2+cin;
endmodule"
151.886,636.95,0.1,394.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout,sum} = in1 + in2 + cin;
endmodule"
N/A,N/A,-1,395.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign cout=cout_temp;
assign sum=sum_temp;
endmodule"
151.886,636.95,0.1,396.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,397.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,398.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,399.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout,sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,400.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,401.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,402.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,403.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout,sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,404.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,405.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,406.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,407.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout,sum} = in1+in2+cin;
endmodule"
151.886,636.95,0.1,408.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1+in2+cin;
endmodule"
151.886,636.95,0.1,409.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,410.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,411.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout,sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,412.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,413.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin; 
endmodule"
151.886,636.95,0.1,414.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout,sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,415.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum}=in1+in2+cin;
endmodule"
151.886,636.95,0.1,416.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,417.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,418.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout,sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,419.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,420.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,421.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1+in2+cin;
endmodule"
151.886,636.95,0.1,422.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout,sum}=in1+in2+cin;
endmodule"
151.886,636.95,0.1,423.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,424.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,425.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,426.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout,sum} = in1+in2+cin;
endmodule"
151.886,636.95,0.1,427.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;

endmodule"
151.886,636.95,0.1,428.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
  assign {cout, sum} = in1 + in2 + cin;
endmodule"
N/A,N/A,-1,429.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
  assign c[0] = cin;
  assign sum = in1 ^ in2 ^ c[0];
  assign cout = (in1 & in2) | (in1 & c[0]) | (in2 & c[0]);
endmodule"
151.886,636.95,0.1,430.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,431.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,432.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout,sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,433.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
N/A,N/A,-0.5,434.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign sum=in1+in2;
assign cout=cin;
endmodule"
151.886,636.95,0.1,435.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);

assign {cout, sum} = in1 + in2 + cin;

endmodule"
N/A,N/A,-1,436.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);

assign cout = c[15];

assign sum = in1 ^ in2 ^ cin;

endmodule"
151.886,636.95,0.1,437.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,438.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
N/A,N/A,-0.5,439.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
                      
    wire [15:0] sum;
    wire cout;
    
    xor(sum[0], in1[0], in2[0], cin);
    xor(sum[1], in1[1], in2[1], cin);
    xor(sum[2], in1[2], in2[2], cin);
    xor(sum[3], in1[3], in2[3], cin);
    xor(sum[4], in1[4], in2[4], cin);
    xor(sum[5], in1[5], in2[5], cin);
    xor(sum[6], in1[6], in2[6], cin);
    xor(sum[7], in1[7], in2[7], cin);
    xor(sum[8], in1[8], in2[8], cin);
    xor(sum[9], in1[9], in2[9], cin);
    xor(sum[10], in1[10], in2[10], cin);
    xor(sum[11], in1[11], in2[11], cin);
    xor(sum[12], in1[12], in2[12], cin);
    xor(sum[13], in1[13], in2[13], cin);
    xor(sum[14], in1[14], in2[14], cin);
    xor(sum[15], in1[15], in2[15], cin);
    
    and(cout, in1[0], in2[0], cin);
    
endmodule"
151.886,636.95,0.1,440.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout,sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,441.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1+in2+cin;
endmodule"
151.886,636.95,0.1,442.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,443.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout,sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,444.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,445.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,446.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,447.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout,sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,448.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,449.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum}= in1+in2+cin;
endmodule"
151.886,636.95,0.1,450.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,451.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout,sum} = in1+in2+cin;
endmodule"
151.886,636.95,0.1,452.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,453.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,454.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1+in2+cin;
endmodule"
151.886,636.95,0.1,455.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout,sum}=in1+in2+cin;
endmodule"
151.886,636.95,0.1,456.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,457.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,458.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,459.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout,sum} = in1 + in2 + cin;

endmodule"
151.886,636.95,0.1,460.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,461.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,462.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout,sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,463.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,464.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;

endmodule"
151.886,636.95,0.1,465.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,466.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout,sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,467.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,468.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1+in2 + cin;
endmodule"
151.886,636.95,0.1,469.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign   {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,470.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;


endmodule"
151.886,636.95,0.1,471.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout,sum} = in1+in2+cin;
endmodule"
151.886,636.95,0.1,472.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,473.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,474.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,475.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout,sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,476.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,477.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,478.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum}=in1+in2+cin;
endmodule"
N/A,N/A,-0.5,479.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign cin_not = ~cin;
assign sum = in1 + in2 + cin_not;
assign cout = (in1[15] == in2[15])? cin_not : cin;
endmodule"
151.886,636.95,0.1,480.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout,sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,481.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,482.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,483.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1+in2+cin;
endmodule"
151.886,636.95,0.1,484.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout,sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,485.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
N/A,N/A,-0.5,486.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign 	cout = cin;
assign 	sum = in1 + in2;
endmodule"
151.886,636.95,0.1,487.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,488.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout,sum}=in1+in2+cin;
endmodule"
151.886,636.95,0.1,489.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,490.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,491.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,492.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout,sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,493.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,494.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,495.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,496.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout,sum} = in1+in2+cin;
endmodule"
151.886,636.95,0.1,497.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,498.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1+in2+cin;
endmodule"
151.886,636.95,0.1,499.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;

endmodule"
151.886,636.95,0.1,500.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout,sum} = in1 + in2 + cin;
endmodule"
151.886,636.95,0.1,501.0,1,"//Design a 16-bit adder.
//There are two 16 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 16 bit value, [15:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_16(output [15:0] sum,
                      output cout,
                      input [15:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
