Area,Delay,Score,Current Run,Episode,Verilog
N/A,N/A,-0.5,2.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1, c2, c3, c4, c5, c6, c7;
  wire [7:0] sum;
  
  nand #(8) n1(c1, in1[0], in2[0]);
  nand #(8) n2(c2, in1[1], in2[1]);
  nand #(8) n3(c3, in1[2], in2[2]);
  nand #(8) n4(c4, in1[3], in2[3]);
  nand #(8) n5(c5, in1[4], in2[4]);
  nand #(8) n6(c6, in1[5], in2[5]);
  nand #(8) n7(c7, in1[6], in2[6]);
  nand #(8) n8(sum[0], in1[7], in2[7]);
  nand #(8) n9(sum[1], c1,    in2[0]);
  nand #(8) n10(sum[2], c2,    in2[1]);
  nand #(8) n11(sum[3], c3,    in2[2]);
  nand #(8) n12(sum[4], c4,    in2[3]);
  nand #(8) n13(sum[5], c5,    in2[4]);
  nand #(8) n14(sum[6], c6,    in2[5]);
  nand #(8) n15(sum[7], c7,    in2[6]);
  nand #(1) n16(cout, c7, c6, c5, c4, c3, c2, c1);
endmodule"
N/A,N/A,-1,3.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);

    wire [7:0] sum;
    wire cout;
    wire [7:0] in1;
    wire [7:0] in2;
    wire cin;

    eight_bit_adder adder(sum, cout, in1, in2, cin);

endmodule

<<<<<<< HEAD
Module eight_bit_adder(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);

    wire [7:0] sum;
    wire cout;
    wire [7:0] in1;
    wire [7:0] in2;
    wire cin;

    wire [7:0] sum;
    wire cout;
    wire [7:0] in1;
    wire [7:0] in2;
    wire cin;

    wire [7:0] sum;
    wire cout;
    wire [7:0] in1;
    wire [7:0] in2;
    wire cin;

    wire [7:0] sum;
    wire cout;
    wire [7:0] in1;
    wire [7:0] in2;
    wire cin;

    wire [7:0] sum;
    wire cout;
    wire [7:0] in1;
    wire [7:0] in2;
    wire cin;

    wire [7:0] sum;
    wire cout;
    wire [7:0] in1;
    wire [7:0] in2;
    wire cin;

    wire [7:0] sum;
    wire cout;
    wire [7:0] in1;
    wire [7:0] in2;
    wire cin;

    wire [7:0] sum;
    wire cout;
    wire [7:0] in1;
    wire [7:0] in2;
    wire cin;

    wire [7:0] sum;
    wire cout;
    wire [7:0] in1;
    wire [7:0] in2;
    wire cin;

    wire [7:0] sum;
    wire cout;
    wire [7:0] in1;
    wire [7:0] in2;
    wire cin;

    wire [7:0] sum;
    wire cout;
    wire [7:0] in1;
    wire [7:0] in2;
    wire cin;

    wire [7:0] sum;
    wire cout;
    wire [7:0] in1;
    wire [7:0] in2;
    wire cin;

    wire [7:0] sum;
    wire cout;
    wire [7:0] in1;
    wire [7:0] in2;
    wire cin;

    wire [7:0] sum;
    wire cout;
    wire [7:0] in1;
    wire [7:0] in2;
    wire cin;

    wire [7:0] sum;
    wire cout;
    wire [7:0] in1;
    wire [7:0] in2;
    wire cin;

    wire [7:0] sum;
    wire cout;
    wire [7:0] in1;
    wire [7:0] in2;
    wire cin;

    wire [7:0] sum;
    wire cout;
    wire [7:0] in1;
    wire [7:0] in2;
    wire cin;

    wire [7:0] sum;
    wire cout;
    wire [7:0] in1;
    wire [7:0] in2;
    wire cin;

    wire [7:0] sum;
    wire cout;
    wire [7:0] in1;
    wire [7:0] in2;
    wire cin;

    wire [7:0] sum;
    wire cout;
    wire [7:0] in1;
    wire [7:0] in2;
    wire cin;

    wire [7:0] sum;
    wire cout;
    wire [7:0] in1;
    wire [7:0] in2;
    wire cin;

    wire [7:0] sum;
    wire cout;
    wire [7:0] in1;
    wire [7:0] in2;
    wire cin;

    wire [7:0] sum;
    wire cout;
    wire [7:0] in1;
    wire [7:0] in2;
    wire cin;

    wire [7:0] sum;
    wire cout;
    wire [7:0] in1;
    wire [7:0] in2;
    wire cin;

    wire [7:0] sum;
    wire cout;
    wire [7:0] in1;
    wire [7:0] in2;
    wire cin;

    wire [7:0] sum;
    wire cout;
    wire [7:0] in1;
    wire [7:0] in2;
    wire cin;

    wire [7:0] sum;
    wire cout;
    wire [7:0] in1;
    wire [7:0] in2;
    wire cin;

    wire [7:0] sum;
    wire cout;
    wire [7:0] in1;
    wire [7:0] in2;
    wire cin;

    wire [7:0] sum;
    wire cout;
    wire [7:0] in1;
    wire [7:0] in2;
    wire cin;

    wire [7:0] sum;
    wire cout;
    wire [7:0] in1;
    wire [7:0] in2;
    wire cin;

    wire [7:0] sum;
    wire cout;
    wire [7:0] in1;
    wire [7:0] in2;
    wire cin;

    wire [7:0] sum;
    wire cout;
    wire [7:0] in1;
    wire [7:0] in2;
    wire cin;

    wire [7:"
79.534,355.53,0.1,4.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1, c2, c3, c4, c5, c6, c7;
  wire [7:0] sum;
  
  one_bit_full_adder add1(sum[0], c1, in1[0], in2[0], cin);
  one_bit_full_adder add2(sum[1], c2, in1[1], in2[1], c1);
  one_bit_full_adder add3(sum[2], c3, in1[2], in2[2], c2);
  one_bit_full_adder add4(sum[3], c4, in1[3], in2[3], c3);
  one_bit_full_adder add5(sum[4], c5, in1[4], in2[4], c4);
  one_bit_full_adder add6(sum[5], c6, in1[5], in2[5], c5);
  one_bit_full_adder add7(sum[6], c7, in1[6], in2[6], c6);
  one_bit_full_adder add8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module one_bit_full_adder(output sum,
                          output cout,
                          input in1, in2, cin);
  wire x, y, z;
  
  xor(sum, in1, in2, cin);
  and(x, in1, in2);
  and(y, in1, cin);
  and(z, in2, cin);
  or(cout, x, y, z);
endmodule"
N/A,N/A,-0.5,5.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);

wire c1, c2, c3, c4, c5, c6, c7;

sum_8bit u1(sum[7:0], in1[7:0], in2[7:0], cin);

and u2(c1, in1[7], in2[7]);
and u3(c2, in1[7], cin);
and u4(c3, in2[7], cin);
or u5(c4, in1[7], in2[7]);
or u6(c5, in1[7], cin);
or u7(c6, in2[7], cin);
or u8(c7, c4, c5, c6);

and u9(cout, c7, cin);

endmodule

module sum_8bit(output [7:0] sum,
                  input [7:0] in1, in2,
                  input cin);

wire c1, c2, c3, c4, c5, c6, c7;

xor u1(sum[0], in1[0], in2[0], cin);
xor u2(sum[1], in1[1], in2[1], c1);
xor u3(sum[2], in1[2], in2[2], c2);
xor u4(sum[3], in1[3], in2[3], c3);
xor u5(sum[4], in1[4], in2[4], c4);
xor u6(sum[5], in1[5], in2[5], c5);
xor u7(sum[6], in1[6], in2[6], c6);
xor u8(sum[7], in1[7], in2[7], c7);

endmodule"
N/A,N/A,-1,6.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
    wire [7:0] sum;
    wire cout;
    wire [7:0] in1;
    wire [7:0] in2;
    wire cin;
    cla_8b cla_8b_1(sum[7:0], cout, in1[7:0], in2[7:0], cin);
endmodule

module cla_8b(output [7:0] sum,
                output cout,
                input [7:0] in1, in2,
                input cin);
    wire [7:0] sum;
    wire cout;
    wire [7:0] in1;
    wire [7:0] in2;
    wire cin;
    wire [7:0] G; ++ G[0];
    wire [7:0] P;
    wire [7:0] C;
    assign C[0] = cin;
    assign G[1] = in1[7] & in2[7];
    assign P[1] = in1[7] ^ in2[7];
    assign G[2] = in1[6] & in2[6];
    assign P[2] = in1[6] ^ in2[6];
    assign G[3] = in1[5] & in2[5];
    assign P[3] = in1[5] ^ in2[5];
    assign G[4] = in1[4] & in2[4];
    assign P[4] = in1[4] ^ in2[4];
    assign G[5] = in1[3] & in2[3];
    assign P[5] = in1[3] ^ in2[3];
    assign G[6] = in1[2] & in2[2];
    assign P[6] = in1[2] ^ in2[2];
    assign G[7] = in1[1] & in2[1];
    assign P[7] = in1[1] ^ in2[1];
    assign G[8] = in1[0] & in2[0];
    assign P[8] = in1[0] ^ in2[0];

    assign C[1] = G[0];
    assign C[2] = G[1] | (P[1] & C[1]);
    assign C[3] = G[2] | (P[2] & C[2]);
    assign C[4] = G[3] | (P[3] & C[3]);
    assign C[5] = G[4] | (P[4] & C[4]);
    assign C[6] = G[5] | (P[5] & C[5]);
    assign C[7] = G[6] | (P[6] & C[6]);
    assign C[8] = G[7] | (P[7] & C[7]);
    assign cout = G[8] | (P[8] & C[8]);
    assign sum = P ^ C;
endmodule"
N/A,N/A,-1,7.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);     
    wire [7:0] sum;
    wire cout;
    wire [7:0] in1;
    wire [7:0] in2;
    wire cin;
    
    comparator_8 comp(.a(in1),.b(in2),.cin(cin),.sum(sum),.cout(cout));
endmodule

module comparator_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
    wire [7:0] in1;
    wire [7:0] in2;
    wire cin;
    wire [7:0] sum;
    wire cout;
    
    adder_8 adder(.sum(sum),.cout(cout),.in1(in1),.in2(in2),.cin(cin));
endmodule"
N/A,N/A,-1,8.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin); 
  wire c1, c2, c3, c4, c5, c6, c7;
  wire [7:0] sum;
  
  or(c1, in1[0], in2[0]);
  or(c2, in1[1], in2[1]);
  or(c3, in1[2], in2[2]);
  or(c4, in1[3], in2[3]);
  or(c5, in1[4], in2[4]);
  or(c6, in1[5], in2[5]);
  or(c7, in1[6], in2[6]);
  or(cout, c1, c2, c3, c4, c5, c6, c7);
  
  adder_4 a1(sum[3:0], c7, in1[3:0], in2[3:0], cin);
  adder_4 a2(sum[7:4], cout, in1[7:4], in2[7:4], c7);
endmodule

module adder_4(output [3:0] sum,
                      output cout,
                      input [3:0] in1, in2,
                      input cin);
  wire c1, c2, c3;
  wire [3:0] sum;
  
  or(c1, in1[0], in2[0]);
  or(c2, in1[1], in2[1]);
  or(c3, in1[2], in2[2]);
  or(cout, c1, c2, c3);
  
  adder_2 a1(sum[1:0], c3, in1[1:0], in2[1:0], cin);
  adder_2 a2(sum[3:2], cout, in1[3:2], in2[3:2], c3);
endmodule

module adder_2(output [1:0] sum,
                      output cout,
                      input [1:0] in1, in2,
                      input cin);
  wire c1, c2;
  wire [1:0] sum;
  
  or(c1, in1[0], in2[0]);
  or(c2, in1[1], in2[1]);
  or(cout, c1, c2);
  
  adder_1 a1(sum[0], c1, in1[0], in2[0], cin);
  adder_1 a2(sum[1], cout, in1[1], in2[1], c1);
endmodule

module adder_1(output sum,
                      output cout,
                      input in1, in2, cin);
  wire c1;
  wire [1:0] sum;
  
  or(c1, in1, in2);
  or(cout, c1, cin);
  
  adder_0 a1(sum[0], c1, in1, in2, cin);
endmodule

module adder_0(output sum,
                      output cout,
                      input in1, in2, cin);
  wire c1;
  wire [1:0] sum;
  
  or(c1, in1, in2);
  or(cout, c1, cin);
  
  adder_0 a1(sum[0], c1, in1, in2, cin);
endmodule"
N/A,N/A,-1,9.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);                             
  wire c1, c2, c3, c4, c5, c6, c7;
  wire [7:0] sum;
  
  bitwise_full_adder add1(sum[0], c1, in1[0], in2[0], cin);
  bitwise_full_adder add2(sum[1], c2, in1[1], in2[1], c1);
  bitwise_full_adder add3(sum[2], c3, in1[2], in2[2], c2);
  bitwise_full_adder add4(sum[3], c4, in1[3], in2[3], c3);
  bitwise_full_adder add5(sum[4], c5, in1[4], in2[4], c4);
  bitwise_full_adder add6(sum[5], c6, in1[5], in2[5], c5);
  bitwise_full_adder add7(sum[6], c7, in1[6], in2[6], c6);
  bitwise_full_adder add8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module bitwise_full_adder(output wire sum,
                          output wire cout,
                          input wire in1, in2, cin);
  wire w1, w2, w3;
  xor3 XOR1(w1, in1, in2, cin);
  xor3 XOR2(sum, w1, w3);
  and2 AND1(w2, w1, cin);
  and2 AND2(cout, w2, w3);
endmodule

module and2(output wire z,
             input wire x,
             input wire y);
  assign z = x & y;
endmodule

module xor2(output wire z,
             input wire x,
             input wire y);
  assign z = x ^ y;
endmodule

module xor3(output wire z,
             input wire w,
             input wire x,
             input wire y);
  assign z = w ^ x ^ y;
endmodule"
N/A,N/A,-1,10.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);

    wire [7:0] sum;
    wire cout;
    wire [7:0] in1;
    wire [7:0] in2;
    wire cin;

    logic [7:0] sum;
    logic cout;
    logic [7:0] in1;
    logic [7:0] in2;
    logic cin;

    tri0 sum;
    tri0 cout;
    tri0 in1;
    tri0 in2;
    tri0 cin;

    lab7_soc_nios2_qsys_0_nios2_oci_add_sub the_lab7_soc_nios2_qsys_0_nios2_oci_add_sub
    (
       .sum (sum),
       .cout (cout),
       .in1 (in1),
       .in2 (in2),
       .cin (cin)
    );

endmodule"
73.416,346.83,0.19951123890875813,11.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1, c2, c3, c4, c5, c6, c7;
  wire [7:0] sum;
  
  bitwise_full_adder adder_1(sum[0], c1, in1[0], in2[0], cin);
  bitwise_full_adder adder_2(sum[1], c2, in1[1], in2[1], c1);
  bitwise_full_adder adder_3(sum[2], c3, in1[2], in2[2], c2);
  bitwise_full_adder adder_4(sum[3], c4, in1[3], in2[3], c3);
  bitwise_full_adder adder_5(sum[4], c5, in1[4], in2[4], c4);
  bitwise_full_adder adder_6(sum[5], c6, in1[5], in2[5], c5);
  bitwise_full_adder adder_7(sum[6], c7, in1[6], in2[6], c6);
  bitwise_full_adder adder_8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module bitwise_full_adder(output sum,
                          output cout,
                          input in1, in2, cin);
  wire w1, w2, w3;
  xor(w1, in1, in2);
  xor(sum, w1, cin);
  and(w2, w1, cin);
  and(w3, in1, in2);
  or(cout, w2, w3);
endmodule"
73.416,346.83,0.19951123890875813,12.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1, c2, c3, c4, c5, c6, c7;
  wire [7:0] sum;
  
  two_bit_full_adder add1(sum[0], c1, in1[0], in2[0], cin);
  two_bit_full_adder add2(sum[1], c2, in1[1], in2[1], c1);
  two_bit_full_adder add3(sum[2], c3, in1[2], in2[2], c2);
  two_bit_full_adder add4(sum[3], c4, in1[3], in2[3], c3);
  two_bit_full_adder add5(sum[4], c5, in1[4], in2[4], c4);
  two_bit_full_adder add6(sum[5], c6, in1[5], in2[5], c5);
  two_bit_full_adder add7(sum[6], c7, in1[6], in2[6], c6);
  two_bit_full_adder add8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module two_bit_full_adder(output wire sum,
                          output wire cout,
                          input wire in1, in2, cin);
  wire a, b, c;
  xor(a, in1, in2);
  xor(sum, a, cin);
  and(b, a, cin);
  and(c, in1, in2);
  or(cout, b, c);
endmodule"
N/A,N/A,-1,13.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire [7:0] sum;
  wire cout;
  wire [7:0] in1;
  wire [7:0] in2;
  wire cin;
  //////// BEGIN COMBINATIONAL LOGICS
  integer i;
  assign {cout, sum} = in1 + in2 + cin;
  Q_1_8 q1_8_0(sum[0], in1[0], in2[0], cin, sum[7:1]);
  Q_2_7 q2_7_0(sum[7:1], in1[7:1], in2[7:1], cin, sum[14:8]);
  invert_1 i1_1_0(sum[7:1], in1[7:1], in2[7:1], cin, cout);
  REG_1_1 r1_1_0(sum[7:1], in1[7:1], in2[7:1], cin, cout);
  ____ END COMBINATIONAL LOGICS
endmodule"
N/A,N/A,-1,14.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);                    
    wire [7:0] sum;
    wire cout;
    wire [7:0] in1;
    wire [7:0] in2;
    wire cin;
    
    comparator_8 comp(.a(in1),.b(in2),.cin(cin),.sum(sum),.cout(cout));
endmodule

module comparator_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
    wire [7:0] in1;
    wire [7:0] in2;
    wire cin;
    wire [7:0] sum;
    wire cout;
    
    adder_8 adder(.sum(sum),.cout(cout),.in1(in1),.in2(in2),.cin(cin));
endmodule"
N/A,N/A,-1,15.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
                      
//Definition for Variables in the module
wire [7:0] sum_temp;
wire [7:0] in1_temp;
wire [7:0] in2_temp;
wire [7:0] carry_temp;
/////////
bitwise_full_adder bitwise_full_adder_inst(
   .sum(sum_temp),
   .cout(carry_temp),
   .in1(in1_temp),
   .in2(in2_temp),
   .cin(cin)
);
buffer_8 buffer_inst(
   .sum(sum),
   .carry(carry),
   .in1(in1),
   .in2(in2)
);
exor_8 exor_8_inst(
   .sum(sum_temp),
   .carry(carry_temp),
   .in1(in1_temp),
   .in2(in2_temp)
);
partial_adder_8 partial_adder_8_inst(
   .sum(sum_temp),
   .carry(carry_temp),
   .in1(in1_temp),
   .in2(in2_temp)
);
get_bit get_bit_inst(
   .sum(sum_temp),
   .carry(carry_temp),
   .in1(in1_temp),
   .in2(in2_temp)
);
position_bit position_bit_inst(
   .sum(sum_temp),
   .carry(carry_temp),
   .in1(in1_temp),
   .in2(in2_temp)
);
endmodule
`timescale 1ns / 1ps
((in1[7:0] & in2[7:0]) | (~in1[7:0] & ~in2[7:0]))? 1'b1 : 1'b0;

module bitwise_full_adder(sum, cout, in1, in2, cin);

get_bit get_bit_inst(
   .sum(sum),
   .carry(cout),
   .in1(in1),
   .in2(in2)
);

position_bit position_bit_inst(
   .sum(sum),
   .carry(cout),
   .in1(in1),
   .in2(in2)
);

endmodule"
N/A,N/A,-1,16.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);  
  
  wire c1, c2, c3;
  
  full_adder FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder FA4(sum[3], cout, in1[3], in2[3], c3);
  full_adder FA5(sum[4], c1, in1[4], in2[4], cin);
  full_adder FA6(sum[5], c2, in1[5], in2[5], c1);
  full_adder FA7(sum[6], c3, in1[6], in2[6], c2);
  full_adder FA8(sum[7], cout, in1[7], in2[7], c3);
  
endmodule

'''

Any additional modules required for this lab can be added here.

'''

module lab4_part1(SW, KEY, HEX0, HEX1, HEX2, HEX3);
  
  input [9:0] SW;
  input [3:0] KEY;
  
  output [6:0] HEX0, HEX1, HEX2, HEX3;
  
  wire [7:0] out;
  
  adder_8 adder(out, cin, SW[7:0], SW[9], KEY[0]);
  
  hex_decoder hex0(out[3:0], HEX0);
  hex_decoder hex1(out[7:4], HEX1);
  hex_decoder hex2(out[11:8], HEX2);
  hex_decoder hex3(out[15:12], HEX3);
  
endmodule"
N/A,N/A,-1,17.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);                                   //in1 and in2 are 8 bit inputs
  wire c1, c2, c3, c4, c5, c6, c7;
  wire [7:0] sum;
  booth_subtractor_8 bs1(c1, sum[0], in1[0], in2[0], cin);
  booth_subtractor_8 bs2(c2, sum[1], in1[1], in2[1], c1);
  booth_subtractor_8 bs3(c3, sum[2], in1[2], in2[2], c2);
  booth_subtractor_8 bs4(c4, sum[3], in1[3], in2[3], c3);
  booth_subtractor_8 bs5(c5, sum[4], in1[4], in2[4], c4);
  booth_subtractor_8 bs6(c6, sum[5], in1[5], in2[5], c5);
  booth_subtractor_8 bs7(c7, sum[6], in1[6], in2[6], c6);
  booth_subtractor_8 bs8(cout, sum[7], in1[7], in2[7], c7);
endmodule

module booth_subtractor_8(output wire cout,
                          output wire [7:0] sum,
                          input wire in1, in2,
                          input wire cin);
  wire [7:0] in1_wire, in2_wire;
  wire c1, c2, c3, c4, c5, c6, c7;
  wire [7:0] sum_wire;
  wire [7:0] diff;
  wire [7:0] diff_wire;
  wire [7:0] diff_wire_wire;
  wire [7:0] diff_wire_wire_wire;
  wire [7:0] diff_wire_wire_wire_wire;
  wire [7:0] diff_wire_wire_wire_wire_wire;
  wire [7:0] diff_wire_wire_wire_wire_wire_wire;
  wire [7:0] diff_wire_wire_wire_wire_wire_wire_wire;
  wire [7:0] diff_wire_wire_wire_wire_wire_wire_wire;
  wire [7:0] diff_wire_wire_wire_wire_wire_wire_wire;
  wire [7:0] diff_wire_wire_wire_wire_wire_wire_wire;
  wire [7:0] diff_wire_wire_wire_wire_wire_wire_wire;
  wire [7:0] diff_wire_wire_wire_wire_wire_wire_wire;
  wire [7:0] diff_wire_wire_wire_wire_wire_wire_wire;
  wire [7:0] diff_wire_wire_wire_wire_wire_wire_wire;
  wire [7:0] diff_wire_wire_wire_wire_wire_wire_wire;
  wire [7:0] diff_wire_wire_wire_wire_wire_wire_wire;
  wire [7:0] diff_wire_wire_wire_wire_wire_wire_wire;
  wire [7:0] diff_wire_wire_wire_wire_wire_wire_wire;
  wire [7:0] diff_wire_wire_wire_wire_wire_wire_wire;
  wire [7:0] diff_wire_wire_wire_wire_wire_wire_wire;
  wire [7:0] diff_wire_wire_wire_wire_wire_wire_wire;
  wire [7:0] diff_wire_wire_wire_wire_wire_wire_wire;
  wire [7:0] diff_wire_wire_wire_wire_wire_wire_wire;
  wire [7:0] diff_wire_wire_wire_wire_wire_wire_wire;
  wire [7:0] diff_wire_wire_wire_wire_wire_wire_wire;
  wire [7:0] diff_wire_wire_wire_wire_wire_wire_wire;
  wire [7:0] diff_wire_wire_wire_wire_wire_wire_wire;
  wire [7:0] diff_wire_wire_wire_wire_wire_wire_wire;
  wire [7:0] diff_wire_wire_wire_wire_wire_wire_wire;
  wire [7:0] diff_wire_wire_wire_wire_wire_wire_wire;
  wire [7:0] diff_wire_wire_wire_wire_wire_wire_wire;
  wire [7:0] diff_wire_wire_wire_wire_wire_wire_wire;
  wire [7:0] diff_wire_wire_wire_wire_wire_wire_wire;
  wire [7:0] diff_wire_wire_wire_wire_wire_wire_wire;
  wire [7:0] diff_wire_wire_wire_wire_wire_wire_wire;
  wire [7:0] diff_wire_wire_wire_wire_wire_wire_wire;
  wire [7:0] diff_wire_wire_wire_wire_wire_wire_wire;
  wire [7:0] diff_wire_wire_wire_wire_wire_wire_wire;
  wire [7:0] diff_wire_wire_wire_wire_wire_wire_wire;
  wire [7:0] diff_wire_wire_wire_wire_wire_wire_wire;
  wire [7:0] diff_wire_wire_wire_wire_wire_wire_wire;
  wire [7:0] diff_wire_wire_wire_wire_wire_wire_wire;
  wire [7:0] diff_wire_wire_wire_wire_wire_wire_wire;
  wire [7:0] diff_wire_wire_wire_wire_wire_wire_wire;
  wire [7:0] diff_wire_wire_wire_wire_wire_wire_wire;
  wire [7:0] diff_wire_wire_wire_wire_wire_wire_wire;
  wire [7:0] diff_"
N/A,N/A,-1,18.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);              
  wire c1, c2, c3, c4, c5, c6, c7;
  wire [7:0] sum;
  
  Carry_Select_Adder_8bit CS_Adder(sum[7:0], c1, in1[7:0], in2[7:0], cin);
  Carry_Select_Adder_8bit CS_Adder_1(sum[15:8], c2, in1[15:8], in2[15:8], c1);
  Carry_Select_Adder_8bit CS_Adder_2(sum[23:16], c3, in1[23:16], in2[23:16], c2);
  Carry_Select_Adder_8bit CS_Adder_3(sum[31:24], c4, in1[31:24], in2[31:24], c3);
  Carry_Select_Adder_8bit CS_Adder_4(sum[39:32], c5, in1[39:32], in2[39:32], c4);
  Carry_Select_Adder_8bit CS_Adder_5(sum[47:40], c6, in1[47:40], in2[47:40], c5);
  Carry_Select_Adder_8bit CS_Adder_6(sum[55:48], c7, in1[55:48], in2[55:48], c6);
  Carry_Select_Adder_8bit CS_Adder_7(sum[63:56], cout, in1[63:56], in2[63:56], c7);
endmodule

module Carry_Select_Adder_8bit(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1, c2, c3, c4, c5, c6, c7;
  wire [7:0] sum;
  
  Carry_Select_Adder_8bit_1 CS_Adder_1(sum[7:0], c1, in1, in2, cin);
  Carry_Select_Adder_8bit_2 CS_Adder_2(sum[15:8], c2, in1, in2, c1);
  Carry_Select_Adder_8bit_3 CS_Adder_3(sum[23:16], c3, in1, in2, c2);
  Carry_Select_Adder_8bit_4 CS_Adder_4(sum[31:24], c4, in1, in2, c3);
  Carry_Select_Adder_8bit_5 CS_Adder_5(sum[39:32], c5, in1, in2, c4);
  Carry_Select_Adder_8bit_6 CS_Adder_6(sum[47:40], c6, in1, in2, c5);
  Carry_Select_Adder_8bit_7 CS_Adder_7(sum[55:48], c7, in1, in2, c6);
  Carry_Select_Adder_8bit_8 CS_Adder_8(sum[63:56], cout, in1, in2, c7);
endmodule

module Carry_Select_Adder_8bit_1(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1, c2, c3, c4, c5, c6, c7;
  wire [7:0] sum;
  
  Carry_Select_Adder_8bit_1 CS_Adder_1(sum[7:0], c1, in1, in2, cin);
  Carry_Select_Adder_8bit_2 CS_Adder_2(sum[15:8], c2, in1, in2, c1);
  Carry_Select_Adder_8bit_3 CS_Adder_3(sum[23:16], c3, in1, in2, c2);
  Carry_Select_Adder_8bit_4 CS_Adder_4(sum[31:24], c4, in1, in2, c3);
  Carry_Select_Adder_8bit_5 CS_Adder_5(sum[39:32], c5, in1, in2, c4);
  Carry_Select_Adder_8bit_6 CS_Adder_6(sum[47:40], c6, in1, in2, c5);
  Carry_Select_Adder_8bit_7 CS_Adder_7(sum[55:48], c7, in1, in2, c6);
  Carry_Select_Adder_8bit_8 CS_Adder_8(sum[63:56], cout, in1, in2, c7);
endmodule

module Carry_Select_Adder_8bit_2(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1, c2, c3, c4, c5, c6, c7;
  wire [7:0] sum;
  
  Carry_Select_Adder_8bit_1 CS_Adder_1(sum[7:0], c1, in1, in2, cin);
  Carry_Select_Adder_8bit_3 CS_Adder_2(sum[15:8], c2, in1, in2, c1);
  Carry_Select_Adder_8bit_4 CS_Adder_3(sum[23:16], c3, in1, in2, c2);
  Carry_Select_Adder_8bit_5 CS_Adder_4(sum[31:24], c4, in1, in2, c3);
  Carry_Select_Adder_8bit_6 CS_Adder_5(sum[39:32], c5, in1, in2, c4);
  Carry_Select_Adder_8bit_7 CS_Adder_6(sum[47:40], c6,"
N/A,N/A,-1,19.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);    
    
    wire [7:0] carry;
    
    full_adder_8 fa0(sum[0], carry[0], in1[0], in2[0], cin);
    full_adder_8 fa1(sum[1], carry[1], in1[1], in2[1], carry[0]);
    full_adder_8 fa2(sum[2], carry[2], in1[2], in2[2], carry[1]);
    full_adder_8 fa3(sum[3], carry[3], in1[3], in2[3], carry[2]);
    full_adder_8 fa4(sum[4], carry[4], in1[4], in2[4], carry[3]);
    full_adder_8 fa5(sum[5], carry[5], in1[5], in2[5], carry[4]);
    full_adder_8 fa6(sum[6], carry[6], in1[6], in2[6], carry[5]);
    full_adder_8 fa7(sum[7], cout, in1[7], in2[7], carry[6]);
endmodule

module full_adder_8(output sum,
                     output cout,
                     input in1, in2, cin);
    
    wire [7:0] sum_temp;
    wire [7:0] carry;
    
    adder_7 adder_7_0(sum_temp[0], carry[0], in1, in2, cin);
    adder_7 adder_7_1(sum_temp[1], carry[1], in1, in2, carry[0]);
    adder_7 adder_7_2(sum_temp[2], carry[2], in1, in2, carry[1]);
    adder_7 adder_7_3(sum_temp[3], carry[3], in1, in2, carry[2]);
    adder_7 adder_7_4(sum_temp[4], carry[4], in1, in2, carry[3]);
    adder_7 adder_7_5(sum_temp[5], carry[5], in1, in2, carry[4]);
    adder_7 adder_7_6(sum_temp[6], carry[6], in1, in2, carry[5]);
    adder_7 adder_7_7(sum_temp[7], cout, in1, in2, carry[6]);
    
    assign sum = sum_temp[7];
    assign cout = carry[7];
endmodule

module adder_7(output [6:0] sum,
                output cout,
                input [6:0] in1, in2,
                input cin);
    
    wire [6:0] carry;
    
    full_adder_7 fa0(sum[0], carry[0], in1[0], in2[0], cin);
    full_adder_7 fa1(sum[1], carry[1], in1[1], in2[1], carry[0]);
    full_adder_7 fa2(sum[2], carry[2], in1[2], in2[2], carry[1]);
    full_adder_7 fa3(sum[3], carry[3], in1[3], in2[3], carry[2]);
    full_adder_7 fa4(sum[4], carry[4], in1[4], in2[4], carry[3]);
    full_adder_7 fa5(sum[5], carry[5], in1[5], in2[5], carry[4]);
    full_adder_7 fa6(sum[6], cout, in1[6], in2[6], carry[5]);
endmodule

module full_adder_7(output sum,
                     output cout,
                     input in1, in2, cin);
    
    wire [6:0] sum_temp;
    wire [6:0] carry;
    
    adder_6 adder_6_0(sum_temp[0], carry[0], in1, in2, cin);
    adder_6 adder_6_1(sum_temp[1], carry[1], in1, in2, carry[0]);
    adder_6 adder_6_2(sum_temp[2], carry[2], in1, in2, carry[1]);
    adder_6 adder_6_3(sum_temp[3], carry[3], in1, in2, carry[2]);
    adder_6 adder_6_4(sum_temp[4], carry[4], in1, in2, carry[3]);
    adder_6 adder_6_5(sum_temp[5], carry[5], in1, in2, carry[4]);
    adder_6 adder_6_6(sum_temp[6], cout, in1, in2, carry[5]);
    
    assign sum = sum_temp[6];
    assign cout = carry[6];
endmodule

module adder_6(output [5:0] sum,
                output cout,
                input [5:0] in1, in2,
                input cin);
    
    wire [5:0] carry;
    
    full_adder_6 fa0(sum[0], carry[0], in1[0], in2[0], cin);
    full_adder_6 fa1(sum[1], carry[1], in1[1], in2[1], carry[0]);
    full_adder_6 fa2(sum[2], carry[2], in1[2], in2[2], carry[1]);
    full_adder_6 fa3(sum[3], carry[3], in1[3], in2[3], carry[2]);
    full_adder_6 fa4(sum[4], carry[4], in1[4], in2[4], carry[3]);
    full_adder_6 fa5(sum[5], cout, in1[5], in2[5], carry[4]);
endmodule

module full_adder_6(output sum,
                     output cout,
                     input in1, in2, cin);
    
    wire [5:0] sum_temp;
    wire [5:0] carry;
    
    adder_5 adder_5_"
N/A,N/A,-1,20.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);                      
    wire [7:0] sum;
    wire cout;
    wire [7:0] in1;
    wire [7:0] in2;
    wire cin;
    
    comparator_8 comp(.a(in1),.b(in2),.cin(cin),.sum(sum),.cout(cout));
endmodule

module comparator_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
    wire [7:0] in1;
    wire [7:0] in2;
    wire cin;
    wire [7:0] sum;
    wire cout;
    
    adder_8 adder(.sum(sum),.cout(cout),.in1(in1),.in2(in2),.cin(cin));
endmodule"
N/A,N/A,-1,21.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);   
    wire [7:0] sum;
    wire cout;
    wire [7:0] in1;
    wire [7:0] in2;
    wire cin;
    
    comparator_8 comp(.a(in1),.b(in2),.cin(cin),.sum(sum),.cout(cout));
endmodule

module comparator_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
    wire [7:0] in1;
    wire [7:0] in2;
    wire cin;
    wire [7:0] sum;
    wire cout;
    
    adder_8 adder(.sum(sum),.cout(cout),.in1(in1),.in2(in2),.cin(cin));
endmodule"
N/A,N/A,-1,22.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);                              
  wire c1, c2, c3, c4, c5, c6, c7;
  wire [7:0] sum;
  
  or(c1, in1[0], in2[0]);
  or(c2, in1[1], in2[1]);
  or(c3, in1[2], in2[2]);
  or(c4, in1[3], in2[3]);
  or(c5, in1[4], in2[4]);
  or(c6, in1[5], in2[5]);
  or(c7, in1[6], in2[6]);
  or(cout, c1, c2, c3, c4, c5, c6, c7);
  
  adder_7 adder_7_0(sum[0], c7, in1[0], in2[0], cin);
  adder_7 adder_7_1(sum[1], c7, in1[1], in2[1], c7);
  adder_7 adder_7_2(sum[2], c7, in1[2], in2[2], c7);
  adder_7 adder_7_3(sum[3], c7, in1[3], in2[3], c7);
  adder_7 adder_7_4(sum[4], c7, in1[4], in2[4], c7);
  adder_7 adder_7_5(sum[5], c7, in1[5], in2[5], c7);
  adder_7 adder_7_6(sum[6], c7, in1[6], in2[6], c7);
  adder_7 adder_7_7(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_7(output [6:0] sum,
                      output cout,
                      input [6:0] in1, in2,
                      input cin);
  wire c1, c2, c3, c4, c5, c6;
  wire [6:0] sum;
  
  or(c1, in1[0], in2[0]);
  or(c2, in1[1], in2[1]);
  or(c3, in1[2], in2[2]);
  or(c4, in1[3], in2[3]);
  or(c5, in1[4], in2[4]);
  or(c6, in1[5], in2[5]);
  or(cout, c1, c2, c3, c4, c5, c6);
  
  adder_6 adder_6_0(sum[0], c6, in1[0], in2[0], cin);
  adder_6 adder_6_1(sum[1], c6, in1[1], in2[1], c6);
  adder_6 adder_6_2(sum[2], c6, in1[2], in2[2], c6);
  adder_6 adder_6_3(sum[3], c6, in1[3], in2[3], c6);
  adder_6 adder_6_4(sum[4], c6, in1[4], in2[4], c6);
  adder_6 adder_6_5(sum[5], c6, in1[5], in2[5], c6);
  adder_6 adder_6_6(sum[6], cout, in1[6], in2[6], c6);
endmodule

module adder_6(output [5:0] sum,
                      output cout,
                      input [5:0] in1, in2,
                      input cin);
  wire c1, c2, c3, c4, c5;
  wire [5:0] sum;
  
  or(c1, in1[0], in2[0]);
  or(c2, in1[1], in2[1]);
  or(c3, in1[2], in2[2]);
  or(c4, in1[3], in2[3]);
  or(c5, in1[4], in2[4]);
  or(cout, c1, c2, c3, c4, c5);
  
  adder_5 adder_5_0(sum[0], c5, in1[0], in2[0], cin);
  adder_5 adder_5_1(sum[1], c5, in1[1], in2[1], c5);
  adder_5 adder_5_2(sum[2], c5, in1[2], in2[2], c5);
  adder_5 adder_5_3(sum[3], c5, in1[3], in2[3], c5);
  adder_5 adder_5_4(sum[4], c5, in1[4], in2[4], c5);
  adder_5 adder_5_5(sum[5], cout, in1[5], in2[5], c5);
endmodule

module adder_5(output [4:0] sum,
                      output cout,
                      input [4:0] in1, in2,
                      input cin);
  wire c1, c2, c3, c4;
  wire [4:0] sum;
  
  or(c1, in1[0], in2[0]);
  or(c2, in1[1], in2[1]);
  or(c3, in1[2], in2[2]);
  or(c4, in1[3], in2[3]);
  or(cout, c1, c2, c3, c4);
  
  adder_4 adder_4_0(sum[0], c4, in1[0], in2[0], cin);
  adder_4 adder_4_1(sum[1], c4, in1[1], in2[1], c4);
  adder_4 adder_4_2(sum[2], c4, in1[2], in2[2], c4);"
N/A,N/A,-1,23.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);

  wire [7:0] sum;
  wire cout;
  wire [7:0] in1;
  wire [7:0] in2;
  wire cin;

  ////////   Carry Look-Ahead Adder   reads: in1, in2, cin
  flipflop_carry_lookahead adder_1(.sum(sum[0]),.cout(cout),.in1(in1[0]),.in2(in2[0]),.cin(cin));
  flipflop_carry_lookahead adder_2(.sum(sum[1]),.cout(cout),.in1(in1[1]),.in2(in2[1]),.cin(cout));
  flipflop_carry_lookahead adder_3(.sum(sum[2]),.cout(cout),.in1(in1[2]),.in2(in2[2]),.cin(cout));
  flipflop_carry_lookahead adder_4(.sum(sum[3]),.cout(cout),.in1(in1[3]),.in2(in2[3]),.cin(cout));
  flipflop_carry_lookahead adder_5(.sum(sum[4]),.cout(cout),.in1(in1[4]),.in2(in2[4]),.cin(cout));
  flipflop_carry_lookahead adder_6(.sum(sum[5]),.cout(cout),.in1(in1[5]),.in2(in2[5]),.cin(cout));
  flipflop_carry_lookahead adder_7(.sum(sum[6]),.cout(cout),.in1(in1[6]),.in2(in2[6]),.cin(cout));
  flipflop_carry_lookahead adder_8(.sum(sum[7]),.cout(cout),.in1(in1[7]),.in2(in2[7]),.cin(cout));

endmodule

module flipflop_carry_lookahead(output reg sum,
                                output cout,
                                input in1, in2, cin);

  reg [7:0] sum;
  reg cout;

  always @(in1 or in2 or cin)
  begin
    sum = in1 ^ in2 ^ cin;
    cout = (in1 ^ in2) & cin | (in1 & in2);
  end

endmodule"
N/A,N/A,-1,24.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);

wire c1, c2, c3, c4, c5, c6, c7;

mux_8 mux1(sum[0], in1[0], in2[0], cin, c1, c2, c3, c4, c5, c6, c7);
mux_8 mux2(sum[1], in1[1], in2[1], c1, c2, c3, c4, c5, c6, c7, c1);
mux_8 mux3(sum[2], in1[2], in2[2], c2, c3, c4, c5, c6, c7, c1, c2);
mux_8 mux4(sum[3], in1[3], in2[3], c3, c4, c5, c6, c7, c1, c2, c3);
mux_8 mux5(sum[4], in1[4], in2[4], c4, c5, c6, c7, c1, c2, c3, c4);
mux_8 mux6(sum[5], in1[5], in2[5], c5, c6, c7, c1, c2, c3, c4, c5);
mux_8 mux7(sum[6], in1[6], in2[6], c6, c7, c1, c2, c3, c4, c5, c6);
mux_8 mux8(sum[7], in1[7], in2[7], c7, c1, c2, c3, c4, c5, c6, c7);

mux_1 mux9(cout, c1, c2, c3, c4, c5, c6, c7);

endmodule

module mux_8(output out,
              input in1, in2,
              input cin,
              input c1,
              input c2,
              input c3,
              input c4,
              input c5,
              input c6,
              input c7,
              input c1,
              input c2,
              input c3,
              input c4,
              input c5,
              input c6,
              input c7);

assign out = (in1 & ~in2 & ~cin) | (in2 & ~in1 & ~cin) | (in1 & in2 & ~cin) | (in1 & in2 & cin) | (in1 & c1 & ~c2) | (in1 & c2 & ~c3) | (in1 & c3 & ~c4) | (in1 & c4 & ~c5) | (in1 & c5 & ~c6) | (in1 & c6 & ~c7) | (in1 & c7 & cin);

endmodule"
N/A,N/A,-1,25.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);        
    wire [7:0] sum;
    wire cout;
    wire [7:0] in1;
    wire [7:0] in2;
    wire cin;
    
    decoder_8 decoder(sum, cout, in1, in2, cin);
    
    adder_1 adder_1(sum[0], cout, in1[0], in2[0], cin);
    adder_1 adder_2(sum[1], cout, in1[1], in2[1], cout);
    adder_1 adder_3(sum[2], cout, in1[2], in2[2], cout);
    adder_1 adder_4(sum[3], cout, in1[3], in2[3], cout);
    adder_1 adder_5(sum[4], cout, in1[4], in2[4], cout);
    adder_1 adder_6(sum[5], cout, in1[5], in2[5], cout);
    adder_1 adder_7(sum[6], cout, in1[6], in2[6], cout);
    adder_1 adder_8(sum[7], cout, in1[7], in2[7], cout);
    
endmodule

module decoder_8(output [7:0] sum,
                      output cout,
                      input in1, in2, cin);
    wire [7:0] in1;
    wire [7:0] in2;
    wire cin;
    
    assign in1 = {in2, cin};
    assign in2 = {in1, cin};
    
    assign sum = in1 ^ in2;
    assign cout = in1 & in2;
    
endmodule

module adder_1(output sum,
                      output cout,
                      input in1, in2, cin);
    wire in1;
    wire in2;
    wire cin;
    
    assign sum = in1 ^ in2;
    assign cout = in1 & in2;
    
endmodule"
N/A,N/A,-1,26.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);                     
    wire [7:0] sum;
    wire cout;
    wire [7:0] in1;
    wire [7:0] in2;
    wire cin;
    
    decoder_8 decoder(sum, cout, in1, in2, cin);
    
    bin_adder_8 b1(sum[0], in1[0], in2[0], cin);
    bin_adder_8 b2(sum[1], in1[1], in2[1], cin);
    bin_adder_8 b3(sum[2], in1[2], in2[2], cin);
    bin_adder_8 b4(sum[3], in1[3], in2[3], cin);
    bin_adder_8 b5(sum[4], in1[4], in2[4], cin);
    bin_adder_8 b6(sum[5], in1[5], in2[5], cin);
    bin_adder_8 b7(sum[6], in1[6], in2[6], cin);
    bin_adder_8 b8(sum[7], in1[7], in2[7], cin);
    
endmodule

module bin_adder_8(output wire sum,
                    input wire in1, in2,
                    input wire cin);
    wire [7:0] sum;
    wire [7:0] in1;
    wire [7:0] in2;
    wire cin;
    
    assign sum = in1 ^ in2 ^ cin;
    
    assign in1 = {1'b0, in1};
    assign in2 = {1'b0, in2};
    assign cin = 1'b0;
    
endmodule"
N/A,N/A,-1,27.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);                          
  wire c1, c2, c3, c4, c5, c6, c7;
  wire [7:0] sum;
  
  Carry_Select_Adder_8bit CS_Adder(sum[7:0], c1, in1[7:0], in2[7:0], cin);
  Carry_Select_Adder_8bit CS_Adder_1(sum[15:8], c2, in1[15:8], in2[15:8], c1);
  Carry_Select_Adder_8bit CS_Adder_2(sum[23:16], c3, in1[23:16], in2[23:16], c2);
  Carry_Select_Adder_8bit CS_Adder_3(sum[31:24], c4, in1[31:24], in2[31:24], c3);
  Carry_Select_Adder_8bit CS_Adder_4(sum[39:32], c5, in1[39:32], in2[39:32], c4);
  Carry_Select_Adder_8bit CS_Adder_5(sum[47:40], c6, in1[47:40], in2[47:40], c5);
  Carry_Select_Adder_8bit CS_Adder_6(sum[55:48], c7, in1[55:48], in2[55:48], c6);
  Carry_Select_Adder_8bit CS_Adder_7(sum[63:56], cout, in1[63:56], in2[63:56], c7);
endmodule

module Carry_Select_Adder_8bit(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1, c2, c3, c4, c5, c6, c7;
  wire [7:0] sum;
  
  Carry_Select_Adder_8bit_1 CS_Adder_1(sum[7:0], c1, in1, in2, cin);
  Carry_Select_Adder_8bit_2 CS_Adder_2(sum[15:8], c2, in1, in2, c1);
  Carry_Select_Adder_8bit_3 CS_Adder_3(sum[23:16], c3, in1, in2, c2);
  Carry_Select_Adder_8bit_4 CS_Adder_4(sum[31:24], c4, in1, in2, c3);
  Carry_Select_Adder_8bit_5 CS_Adder_5(sum[39:32], c5, in1, in2, c4);
  Carry_Select_Adder_8bit_6 CS_Adder_6(sum[47:40], c6, in1, in2, c5);
  Carry_Select_Adder_8bit_7 CS_Adder_7(sum[55:48], c7, in1, in2, c6);
  Carry_Select_Adder_8bit_8 CS_Adder_8(sum[63:56], cout, in1, in2, c7);
endmodule

module Carry_Select_Adder_8bit_1(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1, c2, c3, c4, c5, c6, c7;
  wire [7:0] sum;
  
  Carry_Select_Adder_8bit_1 CS_Adder_1(sum[7:0], c1, in1, in2, cin);
  Carry_Select_Adder_8bit_2 CS_Adder_2(sum[15:8], c2, in1, in2, c1);
  Carry_Select_Adder_8bit_3 CS_Adder_3(sum[23:16], c3, in1, in2, c2);
  Carry_Select_Adder_8bit_4 CS_Adder_4(sum[31:24], c4, in1, in2, c3);
  Carry_Select_Adder_8bit_5 CS_Adder_5(sum[39:32], c5, in1, in2, c4);
  Carry_Select_Adder_8bit_6 CS_Adder_6(sum[47:40], c6, in1, in2, c5);
  Carry_Select_Adder_8bit_7 CS_Adder_7(sum[55:48], c7, in1, in2, c6);
  Carry_Select_Adder_8bit_8 CS_Adder_8(sum[63:56], cout, in1, in2, c7);
endmodule

module Carry_Select_Adder_8bit_2(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1, c2, c3, c4, c5, c6, c7;
  wire [7:0] sum;
  
  Carry_Select_Adder_8bit_1 CS_Adder_1(sum[7:0], c1, in1, in2, cin);
  Carry_Select_Adder_8bit_3 CS_Adder_2(sum[15:8], c2, in1, in2, c1);
  Carry_Select_Adder_8bit_4 CS_Adder_3(sum[23:16], c3, in1, in2, c2);
  Carry_Select_Adder_8bit_5 CS_Adder_4(sum[31:24], c4, in1, in2, c3);
  Carry_Select_Adder_8bit_6 CS_Adder_5(sum[39:32], c5, in1, in2, c4);
  Carry_Select_Adder_8bit_7 CS_Adder_6(sum[47:40], c6,"
N/A,N/A,-1,28.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);                       
    wire [7:0] sum;
    wire cout;
    wire [7:0] in1;
    wire [7:0] in2;
    wire cin;
    
    comparator_8 comp(.a(in1),.b(in2),.cin(cin),.sum(sum),.cout(cout));
endmodule

module comparator_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
    wire [7:0] in1;
    wire [7:0] in2;
    wire cin;
    wire [7:0] sum;
    wire cout;
    
    adder_8 adder(.sum(sum),.cout(cout),.in1(in1),.in2(in2),.cin(cin));
endmodule"
73.416,346.83,0.19951123890875813,29.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);                  
  wire c1, c2, c3, c4, c5, c6, c7;
  wire [7:0] sum;
  
  supply0 zero;
  
  full_adder FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module full_adder(output sum,
                  output cout,
                  input in1,
                  input in2,
                  input cin);
  wire a, b, c;
  
  xor(a, in1, in2);
  xor(sum, a, cin);
  and(b, a, cin);
  and(c, in1, in2);
  or(cout, b, c);
endmodule"
N/A,N/A,-1,30.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);                  
  wire c1, c2, c3, c4, c5, c6, c7;
  wire [7:0] sum;
  
  or(c1, in1[0], in2[0]);
  or(c2, in1[1], in2[1]);
  or(c3, in1[2], in2[2]);
  or(c4, in1[3], in2[3]);
  or(c5, in1[4], in2[4]);
  or(c6, in1[5], in2[5]);
  or(c7, in1[6], in2[6]);
  or(cout, c1, c2, c3, c4, c5, c6, c7);
  
  adder_4 a1(sum[3:0], c7, in1[3:0], in2[3:0], cin);
  adder_4 a2(sum[7:4], cout, in1[7:4], in2[7:4], c7);
endmodule

module adder_4(output [3:0] sum,
                      output cout,
                      input [3:0] in1, in2,
                      input cin);
  wire c1, c2, c3;
  wire [3:0] sum;
  
  or(c1, in1[0], in2[0]);
  or(c2, in1[1], in2[1]);
  or(c3, in1[2], in2[2]);
  or(cout, c1, c2, c3);
  
  adder_2 a1(sum[1:0], c3, in1[1:0], in2[1:0], cin);
  adder_2 a2(sum[3:2], cout, in1[3:2], in2[3:2], c3);
endmodule

module adder_2(output [1:0] sum,
                      output cout,
                      input [1:0] in1, in2,
                      input cin);
  wire c1, c2;
  wire [1:0] sum;
  
  or(c1, in1[0], in2[0]);
  or(c2, in1[1], in2[1]);
  or(cout, c1, c2);
  
  adder_1 a1(sum[0], c1, in1[0], in2[0], cin);
  adder_1 a2(sum[1], cout, in1[1], in2[1], c1);
endmodule

module adder_1(output sum,
                      output cout,
                      input in1, in2, cin);
  wire c1;
  wire [1:0] sum;
  
  or(c1, in1, in2);
  or(cout, c1, cin);
  
  adder_0 a1(sum[0], c1, in1, in2, cin);
endmodule

module adder_0(output sum,
                      output cout,
                      input in1, in2, cin);
  wire c1;
  wire [1:0] sum;
  
  or(c1, in1, in2);
  or(cout, c1, cin);
  
  adder_0 a1(sum[0], c1, in1, in2, cin);
endmodule"
N/A,N/A,-1,31.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);          
  wire c1, c2, c3, c4, c5, c6, c7;
  wire [7:0] sum;
  
  Carry_Select_Adder_8bit CS_Adder(sum[7:0], c1, in1[7:0], in2[7:0], cin);
  Carry_Select_Adder_8bit CS_Adder_1(sum[15:8], c2, in1[15:8], in2[15:8], c1);
  Carry_Select_Adder_8bit CS_Adder_2(sum[23:16], c3, in1[23:16], in2[23:16], c2);
  Carry_Select_Adder_8bit CS_Adder_3(sum[31:24], c4, in1[31:24], in2[31:24], c3);
  Carry_Select_Adder_8bit CS_Adder_4(sum[39:32], c5, in1[39:32], in2[39:32], c4);
  Carry_Select_Adder_8bit CS_Adder_5(sum[47:40], c6, in1[47:40], in2[47:40], c5);
  Carry_Select_Adder_8bit CS_Adder_6(sum[55:48], c7, in1[55:48], in2[55:48], c6);
  Carry_Select_Adder_8bit CS_Adder_7(sum[63:56], cout, in1[63:56], in2[63:56], c7);
endmodule

module Carry_Select_Adder_8bit(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1, c2, c3, c4, c5, c6, c7;
  wire [7:0] sum;
  
  Carry_Select_Adder_8bit_1 CS_Adder_1(sum[7:0], c1, in1, in2, cin);
  Carry_Select_Adder_8bit_2 CS_Adder_2(sum[15:8], c2, in1, in2, c1);
  Carry_Select_Adder_8bit_3 CS_Adder_3(sum[23:16], c3, in1, in2, c2);
  Carry_Select_Adder_8bit_4 CS_Adder_4(sum[31:24], c4, in1, in2, c3);
  Carry_Select_Adder_8bit_5 CS_Adder_5(sum[39:32], c5, in1, in2, c4);
  Carry_Select_Adder_8bit_6 CS_Adder_6(sum[47:40], c6, in1, in2, c5);
  Carry_Select_Adder_8bit_7 CS_Adder_7(sum[55:48], c7, in1, in2, c6);
  Carry_Select_Adder_8bit_8 CS_Adder_8(sum[63:56], cout, in1, in2, c7);
endmodule

module Carry_Select_Adder_8bit_1(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1, c2, c3, c4, c5, c6, c7;
  wire [7:0] sum;
  
  Carry_Select_Adder_8bit_1 CS_Adder_1(sum[7:0], c1, in1, in2, cin);
  Carry_Select_Adder_8bit_2 CS_Adder_2(sum[15:8], c2, in1, in2, c1);
  Carry_Select_Adder_8bit_3 CS_Adder_3(sum[23:16], c3, in1, in2, c2);
  Carry_Select_Adder_8bit_4 CS_Adder_4(sum[31:24], c4, in1, in2, c3);
  Carry_Select_Adder_8bit_5 CS_Adder_5(sum[39:32], c5, in1, in2, c4);
  Carry_Select_Adder_8bit_6 CS_Adder_6(sum[47:40], c6, in1, in2, c5);
  Carry_Select_Adder_8bit_7 CS_Adder_7(sum[55:48], c7, in1, in2, c6);
  Carry_Select_Adder_8bit_8 CS_Adder_8(sum[63:56], cout, in1, in2, c7);
endmodule

module Carry_Select_Adder_8bit_2(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1, c2, c3, c4, c5, c6, c7;
  wire [7:0] sum;
  
  Carry_Select_Adder_8bit_1 CS_Adder_1(sum[7:0], c1, in1, in2, cin);
  Carry_Select_Adder_8bit_3 CS_Adder_2(sum[15:8], c2, in1, in2, c1);
  Carry_Select_Adder_8bit_4 CS_Adder_3(sum[23:16], c3, in1, in2, c2);
  Carry_Select_Adder_8bit_5 CS_Adder_4(sum[31:24], c4, in1, in2, c3);
  Carry_Select_Adder_8bit_6 CS_Adder_5(sum[39:32], c5, in1, in2, c4);
  Carry_Select_Adder_8bit_7 CS_Adder_6(sum[47:40], c6,"
N/A,N/A,-1,32.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);                         
    wire [7:0] sum;
    wire cout;
    wire [7:0] in1;
    wire [7:0] in2;
    wire cin;
    
    comparator_8 comp(.a(in1),.b(in2),.cin(cin),.sum(sum),.cout(cout));
endmodule

module comparator_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
    wire [7:0] in1;
    wire [7:0] in2;
    wire cin;
    wire [7:0] sum;
    wire cout;
    
    adder_8 adder(.sum(sum),.cout(cout),.in1(in1),.in2(in2),.cin(cin));
endmodule"
N/A,N/A,-1,33.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
        wire [7:0] sum;
        wire cout;
        wire [7:0] in1;
        wire [7:0] in2;
        wire cin;
        
        input [7:0] in1;
        input [7:0] in2;
        input cin;
        
        wire [7:0] sum;
        wire cout;
        
        assign sum = in1 + in2 + cin;
        assign cout = (in1[7] == in2[7] && in1[7] == cin)? 1'b1 : 1'b0;
endmodule"
N/A,N/A,-1,34.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  
  wire c1, c2, c3;
  
  full_adder FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder FA4(sum[3], cout, in1[3], in2[3], c3);
  
  
endmodule

altera_mf
module adder_8_tb;
  
  reg [7:0] in1, in2;
  reg cin;
  wire [7:0] sum;
  wire cout;
  
  adder_8 adder_8_tb(sum, cout, in1, in2, cin);
  
  initial
  begin
    $dumpfile(""adder_8_tb.vcd"");
    $dumpvars(0, adder_8_tb);
    
    in1 = 8'b00001010;
    in2 = 8'b00001010;
    cin = 1'b0;
    
    #10 in1 = 8'b00001010;
    in2 = 8'b00001010;
    cin = 1'b1;
    
    #10 in1 = 8'b00001010;
    in2 = 8'b00001010;
    cin = 1'b0;
    
    #10 in1 = 8'b00001010;
    in2 = 8'b00001010;
    cin = 1'b0;
    
    #10 in1 = 8'b00001010;
    in2 = 8'b00001010;
    cin = 1'b1;
    
    #10 in1 = 8'b00001010;
    in2 = 8'b00001010;
    cin = 1'b0;
    
    #10 in1 = 8'b00001010;
    in2 = 8'b00001010;
    cin = 1'b0;
    
    #10 in1 = 8'b00001010;
    in2 = 8'b00001010;
    cin = 1'b1;
    
    #10 in1 = 8'b00001010;
    in2 = 8'b00001010;
    cin = 1'b0;
    
    #10 in1 = 8'b00001010;
    in2 = 8'b00001010;
    cin = 1'b0;
    
    #10 in1 = 8'b00001010;
    in2 = 8'b00001010;
    cin = 1'b1;
    
    #10 in1 = 8'b00001010;
    in2 = 8'b00001010;
    cin = 1'b0;
    
    #10 in1 = 8'b00001010;
    in2 = 8'b00001010;
    cin = 1'b0;
    
    #10 in1 = 8'b00001010;
    in2 = 8'b00001010;
    cin = 1'b1;
    
    #10 in1 = 8'b00001010;
    in2 = 8'b00001010;
    cin = 1'b0;
    
    #10 in1 = 8'b00001010;
    in2 = 8'b00001010;
    cin = 1'b0;
    
    #10 in1 = 8'b00001010;
    in2 = 8'b00001010;
    cin = 1'b1;
    
    #10 in1 = 8'b00001010;
    in2 = 8'b00001010;
    cin = 1'b0;
    
    #10 in1 = 8'b00001010;
    in2 = 8'b00001010;
    cin = 1'b0;
    
    #10 in1 = 8'b00001010;
    in2 = 8'b00001010;
    cin = 1'b1;
    
    #10 in1 = 8'b00001010;
    in2 = 8'b00001010;
    cin = 1'b0;
    
    #10 in1 = 8'b00001010;
    in2 = 8'b00001010;
    cin = 1'b0;
    
    #10 in1 = 8'b00001010;
    in2 = 8'b00001010;
    cin = 1'b1;
    
    #10 in1 = 8'b00001010;
    in2 = 8'b00001010;
    cin = 1'b0;
    
    #10 in1 = 8'b00001010;
    in2 = 8'b00001010;
    cin = 1'b0;
    
    #10 in1 = 8'b00001010;
    in2 = 8'b00001010;
    cin = 1'b1;
    
    #10 in1 = 8'b00001010;
    in2 = 8'b00001010;
    cin = 1'b0;
    
    #10 in1 = 8'b00001010;
    in2 = 8'b00001010;
    cin = 1'b0;
    
    #10 in1 = 8'b00001010;
    in2 = 8'b00001010;
    cin = 1'b1;
    
    #10 in1 = 8'b00001010;
    in2 = 8'b00001010;
    cin = 1'b0;
    
    #10 in1 = 8'b00001010;
    in2 = 8'b00001010;
    cin = 1'b0;
    
    #10 in1 = 8'b00001010;
    in2 = 8'b00001010;
    cin = 1'b1;
    
    #10 in1 = 8'b00001010;
    in2 = 8'b00001010;
    cin = 1'b0;
    
    #10 in1 = 8'b00001010;
    in2 = 8'b"
N/A,N/A,-1,35.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);


    wire [7:0] sum;
    wire cout;
    wire [7:0] in1;
    wire [7:0] in2;
    wire cin;

    CLA_8 adder(sum, cout, in1, in2, cin);

    assign sum = sum;
    assign cout = cout;
    assign in1 = in1;
    assign in2 = in2;
    assign cin = cin;

endmodule
`timescale 1ns / 1ps
,
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    "
N/A,N/A,-1,36.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
 
  wire c1, c2, c3;
  
  full_adder FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder FA4(sum[3], cout, in1[3], in2[3], c3);
  full_adder FA5(sum[4], c1, in1[4], in2[4], cin);
  full_adder FA6(sum[5], c2, in1[5], in2[5], c1);
  full_adder FA7(sum[6], c3, in1[6], in2[6], c2);
  full_adder FA8(sum[7], cout, in1[7], in2[7], c3);

endmodule

four_bit_adder FA1(output [3:0] sum,
                     output cout,
                     input [3:0] in1, in2,
                     input cin);
 
  wire c1, c2, c3;
  
  full_adder FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder FA4(sum[3], cout, in1[3], in2[3], c3);

endmodule"
N/A,N/A,-1,37.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
      wire c1, c2, c3;
      full_adder FA1(sum[0], c1, in1[0], in2[0], cin);
      full_adder FA2(sum[1], c2, in1[1], in2[1], c1);
      full_adder FA3(sum[2], c3, in1[2], in2[2], c2);
      full_adder FA4(sum[3], cout, in1[3], in2[3], c3);
endmodule

component adder_8_tb;
    reg [7:0] in1, in2;
    reg cin;
    wire [7:0] sum;
    wire cout;
    adder_8 DUT(sum, cout, in1, in2, cin);
    initial begin
        $dumpfile(""adder_8_tb.vcd"");
        $dumpvars(0, adder_8_tb);
        $monitor(""in1 = %b, in2 = %b, cin = %b, sum = %b, cout = %b"", in1, in2, cin, sum, cout);
        in1 = 8'b00000001;
        in2 = 8'b00000010;
        cin = 1'b0;
        #10
        in1 = 8'b00000100;
        in2 = 8'b00001000;
        cin = 1'b0;
        #10
        in1 = 8'b00010000;
        in2 = 8'b00100000;
        cin = 1'b0;
        #10
        in1 = 8'b00100100;
        in2 = 8'b01000000;
        cin = 1'b0;
        #10
        in1 = 8'b00100100;
        in2 = 8'b01000000;
        cin = 1'b1;
        #10
        in1 = 8'b00100100;
        in2 = 8'b01000000;
        cin = 1'b1;
        #10
        in1 = 8'b00100100;
        in2 = 8'b01000000;
        cin = 1'b0;
        #10
        in1 = 8'b00100100;
        in2 = 8'b01000000;
        cin = 1'b0;
        #10
        in1 = 8'b00100100;
        in2 = 8'b01000000;
        cin = 1'b1;
        #10
        in1 = 8'b00100100;
        in2 = 8'b01000000;
        cin = 1'b1;
        #10
        in1 = 8'b00100100;
        in2 = 8'b01000000;
        cin = 1'b0;
        #10
        in1 = 8'b00100100;
        in2 = 8'b01000000;
        cin = 1'b0;
        #10
        in1 = 8'b00100100;
        in2 = 8'b01000000;
        cin = 1'b1;
        #10
        in1 = 8'b00100100;
        in2 = 8'b01000000;
        cin = 1'b1;
        #10
        in1 = 8'b00100100;
        in2 = 8'b01000000;
        cin = 1'b0;
        #10
        in1 = 8'b00100100;
        in2 = 8'b01000000;
        cin = 1'b0;
        #10
        in1 = 8'b00100100;
        in2 = 8'b01000000;
        cin = 1'b1;
        #10
        in1 = 8'b00100100;
        in2 = 8'b01000000;
        cin = 1'b1;
        #10
        in1 = 8'b00100100;
        in2 = 8'b01000000;
        cin = 1'b0;
        #10
        in1 = 8'b00100100;
        in2 = 8'b01000000;
        cin = 1'b0;
        #10
        in1 = 8'b00100100;
        in2 = 8'b01000000;
        cin = 1'b1;
        #10
        in1 = 8'b00100100;
        in2 = 8'b01000000;
        cin = 1'b1;
        #10
        in1 = 8'b00100100;
        in2 = 8'b01000000;
        cin = 1'b0;
        #10
        in1 = 8'b00100100;
        in2 = 8'b01000000;
        cin = 1'b0;
        #10
        in1 = 8'b00100100;
        in2 = 8'b01000000;
        cin = 1'b1;
        #10
        in1 = 8'b00100100;
        in2 = 8'b01000000;
        cin = 1'b1;
        #10
        in1 = 8'b00100100;
        in2 = 8'b01000000;
        cin = 1'b0;
        #10
        in1 = 8'b00100100;
        in2 = 8'b01000000;
        cin = 1'b0;
        #10
        in1 = 8'b00100100;
        in2 = 8'b01000000;
        cin = 1'b1;
        #10
        in1 = 8'b00100100;
        in2 = 8'b01000000;
        cin = 1'b1;
        #10
        in1 = 8'b00100100;
        in2 = 8'b01000000;
        cin = 1'b0;
        #10
        in1 = 8'b00100100;
        in2 = 8'b01000000;
        cin = 1'b0;
        #10
        in1 = 8'b00100100;
        in2 = 8'b01000000;
        cin = 1'b1;
        #10
        in1 = 8'b00100100;
        in2 = 8'b01000000;
        cin = 1'b1;
        #10
        "
N/A,N/A,-1,38.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);                  

    wire [7:0] sum;
    wire cout;
    wire [7:0] in1;
    wire [7:0] in2;
    wire cin;

    

    CLA_8 CLA(sum, cout, in1, in2, cin);

endmodule
`timescale 1ns / 1ps
default_nettype none

module adder_8_tb;

    reg [7:0] in1;
    reg [7:0] in2;
    reg cin;

    wire [7:0] sum;
    wire cout;

    adder_8 adder_8_tb(sum, cout, in1, in2, cin);

    initial begin
        in1 = 8'b00000001;
        in2 = 8'b00000010;
        cin = 1'b0;
        #10 in1 = 8'b00000100;
        in2 = 8'b00001000;
        cin = 1'b0;
        #10 in1 = 8'b00010000;
        in2 = 8'b00100000;
        cin = 1'b0;
        #10 in1 = 8'b00100100;
        in2 = 8'b01000000;
        cin = 1'b0;
        #10 in1 = 8'b00100100;
        in2 = 8'b01000000;
        cin = 1'b1;
        #10 in1 = 8'b00100100;
        in2 = 8'b01000000;
        cin = 1'b1;
        #10 in1 = 8'b00100100;
        in2 = 8'b01000000;
        cin = 1'b0;
        #10 in1 = 8'b00100100;
        in2 = 8'b01000000;
        cin = 1'b0;
        #10 in1 = 8'b00100100;
        in2 = 8'b01000000;
        cin = 1'b1;
        #10 in1 = 8'b00100100;
        in2 = 8'b01000000;
        cin = 1'b1;
        #10 in1 = 8'b00100100;
        in2 = 8'b01000000;
        cin = 1'b0;
        #10 in1 = 8'b00100100;
        in2 = 8'b01000000;
        cin = 1'b0;
        #10 in1 = 8'b00100100;
        in2 = 8'b01000000;
        cin = 1'b1;
        #10 in1 = 8'b00100100;
        in2 = 8'b01000000;
        cin = 1'b1;
        #10 in1 = 8'b00100100;
        in2 = 8'b01000000;
        cin = 1'b0;
        #10 in1 = 8'b00100100;
        in2 = 8'b01000000;
        cin = 1'b0;
        #10 in1 = 8'b00100100;
        in2 = 8'b01000000;
        cin = 1'b1;
        #10 in1 = 8'b00100100;
        in2 = 8'b01000000;
        cin = 1'b1;
        #10 in1 = 8'b00100100;
        in2 = 8'b01000000;
        cin = 1'b0;
        #10 in1 = 8'b00100100;
        in2 = 8'b01000000;
        cin = 1'b0;
        #10 in1 = 8'b00100100;
        in2 = 8'b01000000;
        cin = 1'b1;
        #10 in1 = 8'b00100100;
        in2 = 8'b01000000;
        cin = 1'b1;
        #10 in1 = 8'b00100100;
        in2 = 8'b01000000;
        cin = 1'b0;
        #10 in1 = 8'b00100100;
        in2 = 8'b01000000;
        cin = 1'b0;
        #10 in1 = 8'b00100100;
        in2 = 8'b01000000;
        cin = 1'b1;
        #10 in1 = 8'b00100100;
        in2 = 8'b01000000;
        cin = 1'b1;
        #10 in1 = 8'b00100100;
        in2 = 8'b01000000;
        cin = 1'b0;
        #10 in1 = 8'b00100100;
        in2 = 8'b01000000;
        cin = 1'b0;
        #10 in1 = 8'b00100100;
        in2 = 8'b01000000;
        cin = 1'b1;
        #10 in1 = 8'b00100100;
        in2 = 8'b01000000;
        cin = 1'b1;
        #10 in1 = 8'b00100100;
        in2 = 8'b01000000;
        cin = 1'b0;
        #10 in1 = 8'b00100100;
        in2 = 8'b01000000;
        cin = 1'b0;
        #10 in1 = 8'b00100100;
        in2 = 8'b01000000;
        cin = 1'b1;
        #10 in1 = 8'b00100100;
        in2 = 8'b01000000;
        cin = 1'b1;
        #10 in1 = 8'b00100100;
        in2 = 8'b01000000;
        cin = 1'b0;
        #10 in1 = 8'b00100100;
        in2 = 8'b01000000;
        cin = 1'b0;
        #10 in1 = 8'b00100100;
        in2 = 8'b01000000;
        cin = 1'b1;
        #10 in1 = 8'b00100100;
        in2 = 8'b01000000;
        cin = 1'b1;
        #10 in1 = 8'b00100100;
        in2 = 8'b01000000;
        cin = 1'b0;
        #10 in1 = 8'"
N/A,N/A,-1,39.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);

   wire [7:0] sum;
   wire cout;
   wire [7:0] in1;
   wire [7:0] in2;
   wire cin;

   (* KEEP = ""TRUE"" *)
   assign sum = in1 + in2 + cin;
   (* KEEP = ""TRUE"" *)
   assign cout = (in1[7] == in2[7])? (in1[7] == cin) : (in1[7]!= cin);

endmodule"
N/A,N/A,-0.5,40.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);     
    wire [7:0] sum;
    wire cout;
    wire [7:0] in1;
    wire [7:0] in2;
    wire cin;
    
    or(sum[0], in1[0], in2[0], cin);
    or(sum[1], in1[1], in2[1], cin);
    or(sum[2], in1[2], in2[2], cin);
    or(sum[3], in1[3], in2[3], cin);
    or(sum[4], in1[4], in2[4], cin);
    or(sum[5], in1[5], in2[5], cin);
    or(sum[6], in1[6], in2[6], cin);
    or(sum[7], in1[7], in2[7], cin);
    
    and(cout, in1[7], in2[7], cin);
endmodule"
N/A,N/A,-1,41.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
   wire c1, c2, c3;
   full_adder FA1(sum[0], c1, in1[0], in2[0], cin);
   full_adder FA2(sum[1], c2, in1[1], in2[1], c1);
   full_adder FA3(sum[2], c3, in1[2], in2[2], c2);
   full_adder FA4(sum[3], cout, in1[3], in2[3], c3);
   full_adder FA5(sum[4], c4, in1[4], in2[4], c3);
   full_adder FA6(sum[5], c5, in1[5], in2[5], c4);
   full_adder FA7(sum[6], c6, in1[6], in2[6], c5);
   full_adder FA8(sum[7], cout, in1[7], in2[7], c6);
endmodule

encode_8_bit_encode_3_2_encode_8_bit_decode_3_2_decode_8_bit_encode_3_2_decode_8_bit_encode_3_2_decode_8_bit_encode_3_2_decode_8_bit_encode_3_2_decode_8_bit_encode_3_2_decode_8_bit_encode_3_2_decode_8_bit_encode_3_2_decode_8_bit_encode_3_2_decode_8_bit_encode_3_2_decode_8_bit_encode_3_2_decode_8_bit_encode_3_2_decode_8_bit_encode_3_2_decode_8_bit_encode_3_2_decode_8_bit_encode_3_2_decode_8_bit_encode_3_2_decode_8_bit_encode_3_2_decode_8_bit_encode_3_2_decode_8_bit_encode_3_2_decode_8_bit_encode_3_2_decode_8_bit_encode_3_2_decode_8_bit_encode_3_2_decode_8_bit_encode_3_2_decode_8_bit_encode_3_2_decode_8_bit_encode_3_2_decode_8_bit_encode_3_2_decode_8_bit_encode_3_2_decode_8_bit_encode_3_2_decode_8_bit_encode_3_2_decode_8_bit_encode_3_2_decode_8_bit_encode_3_2_decode_8_bit_encode_3_2_decode_8_bit_encode_3_2_decode_8_bit_encode_3_2_decode_8_bit_encode_3_2_decode_8_bit_encode_3_2_decode_8_bit_encode_3_2_decode_8_bit_encode_3_2_decode_8_bit_encode_3_2_decode_8_bit_encode_3_2_decode_8_bit_encode_3_2_decode_8_bit_encode_3_2_decode_8_bit_encode_3_2_decode_8_bit_encode_3_2_decode_8_bit_encode_3_2_decode_8_bit_encode_3_2_decode_8_bit_encode_3_2_decode_8_bit_encode_3_2_decode_8_bit_encode_3_2_decode_8_bit_encode_3_2_decode_8_bit_encode_3_2_decode_8_bit_encode_3_2_decode_8_bit_encode_3_2_decode_8_bit_encode_3_2_decode_8_bit_encode_3_2_decode_8_bit_encode_3_2_decode_8_bit_encode_3_2_decode_8_bit_encode_3_2_decode_8_bit_encode_3_2_decode_8_bit_encode_3_2_decode_8_bit_encode_3_2_decode_8_bit_encode_3_2_decode_8_bit_encode_3_2_decode_8_bit_encode_3_2_decode_8_bit_encode_3_2_decode_8_bit_encode_3_2_decode_8_bit_encode_3_2_decode_8_bit_encode_3_2_decode_8_bit_encode_3_2_decode_8_bit_encode_3_2_decode_8_bit_encode_3_2_decode_8_bit_encode_3_2_decode_8_bit_encode_3_2_decode_8_bit_encode_3_2_decode_8_bit_encode_3_2_decode_8_bit_encode_3_2_decode_8_bit_encode_3_2_decode_8_bit_encode_3_2_decode_8_bit_encode_3_2_decode_8_bit_encode_3_2_decode_8_bit_encode_3_2_decode_8_bit_encode_3_2_decode_8_bit_encode_3_2_decode_8_bit_encode_3_2_decode_8_bit_encode_3_2_decode_8_bit_encode_3_2_decode_8_bit_encode_3_2_decode_8_bit_encode_3_2_decode_8_bit_encode_3_2_dec"
N/A,N/A,-1,42.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin); 
  wire c1, c2, c3, c4, c5, c6, c7;
  wire [7:0] sum;
  
  bitwise_full_adder add1(sum[0], c1, in1[0], in2[0], cin);
  bitwise_full_adder add2(sum[1], c2, in1[1], in2[1], c1);
  bitwise_full_adder add3(sum[2], c3, in1[2], in2[2], c2);
  bitwise_full_adder add4(sum[3], c4, in1[3], in2[3], c3);
  bitwise_full_adder add5(sum[4], c5, in1[4], in2[4], c4);
  bitwise_full_adder add6(sum[5], c6, in1[5], in2[5], c5);
  bitwise_full_adder add7(sum[6], c7, in1[6], in2[6], c6);
  bitwise_full_adder add8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module bitwise_full_adder(output wire sum,
                          output wire cout,
                          input wire in1, in2, cin);
  wire w1, w2, w3;
  xor3 XOR1(w1, in1, in2, cin);
  xor3 XOR2(sum, w1, w3);
  and2 AND1(w2, w1, cin);
  and2 AND2(cout, w2, w3);
endmodule

module and2(output wire z,
             input wire x,
             input wire y);
  assign z = x & y;
endmodule

module xor2(output wire z,
             input wire x,
             input wire y);
  assign z = x ^ y;
endmodule

module xor3(output wire z,
             input wire w,
             input wire x,
             input wire y);
  assign z = w ^ x ^ y;
endmodule"
N/A,N/A,-1,43.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
                          
  wire c1, c2, c3, c4, c5, c6, c7;
  
  full_adder FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

eight_bit_adder eight_bit_adder_inst(.sum(sum),.cout(cout),.in1(in1),.in2(in2),.cin(cin));

endmodule"
N/A,N/A,-1,44.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);     
    wire [7:0] sum;
    wire cout;
    wire [7:0] in1;
    wire [7:0] in2;
    wire cin;
    
    CLA_8 CLA(sum, cout, in1, in2, cin);
    
endmodule
`timescale 1ns / 1ps
			
module CLA_8(output [7:0] sum,
					output cout,
					input [7:0] in1, in2,
					input cin);
	wire [7:0] G; short_adder_8(G, in1, in2);
	wire [7:0] P; short_adder_8(P, in1, in2);
	wire [7:0] C; short_adder_8(C, in1, in2);
	
	wire [7:0] G_Z;
	wire [7:0] P_Z;
	wire [7:0] C_Z;
	
	assign G_Z[0] = G[0] & C[0];
	assign G_Z[1] = G[1] & C[1];
	assign G_Z[2] = G[2] & C[2];
	assign G_Z[3] = G[3] & C[3];
	assign G_Z[4] = G[4] & C[4];
	assign G_Z[5] = G[5] & C[5];
	assign G_Z[6] = G[6] & C[6];
	assign G_Z[7] = G[7] & C[7];
	
	assign P_Z[0] = P[0] ^ C[0];
	assign P_Z[1] = P[1] ^ C[1];
	assign P_Z[2] = P[2] ^ C[2];
	assign P_Z[3] = P[3] ^ C[3];
	assign P_Z[4] = P[4] ^ C[4];
	assign P_Z[5] = P[5] ^ C[5];
	assign P_Z[6] = P[6] ^ C[6];
	assign P_Z[7] = P[7] ^ C[7];
	
	assign C_Z[0] = G_Z[0] | (P_Z[0] & C_Z[0]);
	assign C_Z[1] = G_Z[1] | (P_Z[1] & C_Z[1]);
	assign C_Z[2] = G_Z[2] | (P_Z[2] & C_Z[2]);
	assign C_Z[3] = G_Z[3] | (P_Z[3] & C_Z[3]);
	assign C_Z[4] = G_Z[4] | (P_Z[4] & C_Z[4]);
	assign C_Z[5] = G_Z[5] | (P_Z[5] & C_Z[5]);
	assign C_Z[6] = G_Z[6] | (P_Z[6] & C_Z[6]);
	assign C_Z[7] = G_Z[7] | (P_Z[7] & C_Z[7]);
	
	assign cout = G_Z[7] | (P_Z[7] & C_Z[7]);
	
	assign sum = P_Z ^ C_Z;
	
endmodule
`timescale 1ns / 1ps

module CLA_8_tb;
	reg [7:0] in1, in2;
	reg cin;
	wire [7:0] sum;
	wire cout;
	
	CLA_8 cla(sum, cout, in1, in2, cin);
	
	initial
	begin
		$dumpfile(""CLA_8_tb.vcd"");
		$dumpvars(0, CLA_8_tb);
		
		in1 = 8'b00000001;
		in2 = 8'b00000010;
		cin = 1'b0;
		
		#10 in1 = 8'b00000100;
		in2 = 8'b00001000;
		cin = 1'b0;
		
		#10 in1 = 8'b00010000;
		in2 = 8'b00100000;
		cin = 1'b0;
		
		#10 in1 = 8'b00100100;
		in2 = 8'b01000000;
		cin = 1'b0;
		
		#10 in1 = 8'b00100100;
		in2 = 8'b01000000;
		cin = 1'b1;
		
		#10 in1 = 8'b00100100;
		in2 = 8'b01000000;
		cin = 1'b0;
		
		#10 in1 = 8'b00100100;
		in2 = 8'b01000000;
		cin = 1'b1;
		
		#10 in1 = 8'b00100100;
		in2 = 8'b01000000;
		cin = 1'b0;
		
		#10 in1 = 8'b00100100;
		in2 = 8'b01000000;
		cin = 1'b1;
		
		#10 in1 = 8'b00100100;
		in2 = 8'b01000000;
		cin = 1'b0;
		
		#10 in1 = 8'b00100100;
		in2 = 8'b01000000;
		cin = 1'b1;
		
		#10 in1 = 8'b00100100;
		in2 = 8'b01000000;
		cin = 1'b0;
		
		#10 in1 = 8'b00100100;
		in2 = 8'b01000000;
		cin = 1'b1;
		
		#10 in1 = 8'b00100100;
		in2 = 8'b01000000;
		cin = 1'b0;
		
		#10 in1 = 8'b00100100;
		in2 ="
N/A,N/A,-1,45.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);                             
  wire c1, c2, c3, c4, c5, c6, c7;
  wire [7:0] sum;
  
  or(c1, in1[0], in2[0]);
  or(c2, in1[1], in2[1]);
  or(c3, in1[2], in2[2]);
  or(c4, in1[3], in2[3]);
  or(c5, in1[4], in2[4]);
  or(c6, in1[5], in2[5]);
  or(c7, in1[6], in2[6]);
  or(cout, c1, c2, c3, c4, c5, c6, c7);
  
  adder_4 a1(sum[3:0], c7, in1[3:0], in2[3:0], cin);
  adder_4 a2(sum[7:4], cout, in1[7:4], in2[7:4], c7);
endmodule

module adder_4(output [3:0] sum,
                      output cout,
                      input [3:0] in1, in2,
                      input cin);                             
  wire c1, c2, c3;
  wire [3:0] sum;
  
  or(c1, in1[0], in2[0]);
  or(c2, in1[1], in2[1]);
  or(c3, in1[2], in2[2]);
  or(cout, c1, c2, c3);
  
  adder_2 a1(sum[1:0], c3, in1[1:0], in2[1:0], cin);
  adder_2 a2(sum[3:2], cout, in1[3:2], in2[3:2], c3);
endmodule

module adder_2(output [1:0] sum,
                      output cout,
                      input [1:0] in1, in2,
                      input cin);                             
  wire c1, c2;
  wire [1:0] sum;
  
  or(c1, in1[0], in2[0]);
  or(c2, in1[1], in2[1]);
  or(cout, c1, c2);
  
  adder_1 a1(sum[0], c1, in1[0], in2[0], cin);
  adder_1 a2(sum[1], cout, in1[1], in2[1], c1);
endmodule

module adder_1(output sum,
                      output cout,
                      input in1, in2,
                      input cin);                             
  wire c1;
  wire [1:0] sum;
  
  or(c1, in1, in2);
  or(cout, c1, cin);
  
  adder_0 a1(sum[0], c1, in1, in2, cin);
endmodule

module adder_0(output sum,
                      output cout,
                      input in1, in2,
                      input cin);                             
  wire c1;
  wire [1:0] sum;
  
  or(c1, in1, in2);
  or(cout, c1, cin);
  
  adder_0 a1(sum[0], c1, in1, in2, cin);
endmodule"
N/A,N/A,-0.5,46.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
	wire [7:0] carry;
	full_adder_8 fa0(sum[0], carry[0], in1[0], in2[0], cin);
	full_adder_8 fa1(sum[1], carry[1], in1[1], in2[1], carry[0]);
	full_adder_8 fa2(sum[2], carry[2], in1[2], in2[2], carry[1]);
	full_adder_8 fa3(sum[3], carry[3], in1[3], in2[3], carry[2]);
	full_adder_8 fa4(sum[4], carry[4], in1[4], in2[4], carry[3]);
	full_adder_8 fa5(sum[5], carry[5], in1[5], in2[5], carry[4]);
	full_adder_8 fa6(sum[6], carry[6], in1[6], in2[6], carry[5]);
	full_adder_8 fa7(sum[7], cout, in1[7], in2[7], carry[6]);
endmodule

module full_adder_8(output sum,
                     output cout,
                     input in1, in2, cin);
	wire a, b, c, d, e, f, g;
	xor(a, in1, in2);
	xor(sum, a, cin);
	and(b, a, cin);
	and(c, in1, in2);
	and(d, in1, in2);
	and(e, in1, cin);
	and(f, in2, cin);
	or(cout, b, c);
	or(c, d, e);
	or(cout, c, f);
endmodule"
N/A,N/A,-0.5,47.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);

    wire [7:0] sum;
    wire cout;
    wire [7:0] in1;
    wire [7:0] in2;
    wire cin;

    decoder_8 decoder(sum, cout, in1, in2, cin);

endmodule

module decoder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);

    wire [7:0] sum;
    wire cout;
    wire [7:0] in1;
    wire [7:0] in2;
    wire cin;

    assign sum = in1 ^ in2;
    assign cout = cin & (in1 ^ in2);

endmodule"
79.534,345.76,0.12748010013219704,48.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,49.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,50.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,51.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
N/A,N/A,-1,52.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
    wire [7:0] sum;
    wire cout;
    wire [7:0] in1;
    wire [7:0] in2;
    wire cin;
    CLA_8 adder(sum, cout, in1, in2, cin);
endmodule

dadda_8 adder_8(sum, cout, in1, in2, cin);

Hex_Disp disp(Hex_Disp_in, Hex_Disp_out);

endmodule"
79.534,345.76,0.12748010013219704,53.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
N/A,N/A,-1,54.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign cout = c[7];
assign sum = s[7] + in1 + in2 + c[7];

eight_bit_ripple_adder adder_1(s[0], c[0], in1[0], in2[0], cin);
eight_bit_ripple_adder adder_2(s[1], c[1], in1[1], in2[1], c[0]);
eight_bit_ripple_adder adder_3(s[2], c[2], in1[2], in2[2], c[1]);
eight_bit_ripple_adder adder_4(s[3], c[3], in1[3], in2[3], c[2]);
eight_bit_ripple_adder adder_5(s[4], c[4], in1[4], in2[4], c[3]);
eight_bit_ripple_adder adder_6(s[5], c[5], in1[5], in2[5], c[4]);
eight_bit_ripple_adder adder_7(s[6], c[6], in1[6], in2[6], c[5]);
eight_bit_ripple_adder adder_8(s[7], cout, in1[7], in2[7], c[6]);

endmodule

module eight_bit_ripple_adder(output [7:0] sum,
                               output cout,
                               input in1, in2, cin);

wire c1, c2, c3, c4, c5, c6, c7;

ripple_carry_adder adder_1(sum[0], c1, in1, in2, cin);
ripple_carry_adder adder_2(sum[1], c2, in1, in2, c1);
ripple_carry_adder adder_3(sum[2], c3, in1, in2, c2);
ripple_carry_adder adder_4(sum[3], c4, in1, in2, c3);
ripple_carry_adder adder_5(sum[4], c5, in1, in2, c4);
ripple_carry_adder adder_6(sum[5], c6, in1, in2, c5);
ripple_carry_adder adder_7(sum[6], c7, in1, in2, c6);
ripple_carry_adder adder_8(sum[7], cout, in1, in2, c7);

endmodule

module ripple_carry_adder(output [7:0] sum,
                          output cout,
                          input in1, in2, cin);

wire c1, c2, c3, c4, c5, c6, c7;

full_adder adder_1(sum[0], c1, in1, in2, cin);
full_adder adder_2(sum[1], c2, in1, in2, c1);
full_adder adder_3(sum[2], c3, in1, in2, c2);
full_adder adder_4(sum[3], c4, in1, in2, c3);
full_adder adder_5(sum[4], c5, in1, in2, c4);
full_adder adder_6(sum[5], c6, in1, in2, c5);
full_adder adder_7(sum[6], c7, in1, in2, c6);
full_adder adder_8(sum[7], cout, in1, in2, c7);

endmodule

module full_adder(output sum,
                  output cout,
                  input in1, in2, cin);

wire xor1, and1, and2;

xor(xor1, in1, in2);
xor(sum, xor1, cin);

and(and1, xor1, cin);
and(and2, in1, in2);
or(cout, and1, and2);

endmodule"
N/A,N/A,-1,55.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
              
//Definition for Variables in the module
wire [7:0] sum;
wire cout;

N/A,N/A,-0.5,56.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
endmodule"
N/A,N/A,-0.5,57.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
                    
    wire [7:0] sum;
    wire cout;
    
    FA_8 FA(sum[7:0], cout, in1[7:0], in2[7:0], cin);
    
endmodule

module FA_8(output [7:0] sum,
             output cout,
             input [7:0] in1, in2,
             input cin);
    
    wire [7:0] sum;
    wire cout;
    
    assign sum = in1 + in2 + cin;
    assign cout = (in1[7] == in2[7] && in1[7] == cin)? 1'b1 : 1'b0;
    
endmodule"
N/A,N/A,-1,58.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);

  wire [7:0] sum;
  wire cout;
  wire [7:0] in1;
  wire [7:0] in2;
  wire cin;

  mux_8 mux1(sum[0], in1[0], in2[0], cin, in1[0], in2[0]);
  mux_8 mux2(sum[1], in1[1], in2[1], cin, in1[1], in2[1]);
  mux_8 mux3(sum[2], in1[2], in2[2], cin, in1[2], in2[2]);
  mux_8 mux4(sum[3], in1[3], in2[3], cin, in1[3], in2[3]);
  mux_8 mux5(sum[4], in1[4], in2[4], cin, in1[4], in2[4]);
  mux_8 mux6(sum[5], in1[5], in2[5], cin, in1[5], in2[5]);
  mux_8 mux7(sum[6], in1[6], in2[6], cin, in1[6], in2[6]);
  mux_8 mux8(sum[7], in1[7], in2[7], cin, in1[7], in2[7]);

  mux_1 mux9(cout, in1[7], in2[7], cin, in1[7], in2[7]);
endmodule

module mux_8(output out,
              input in1, in2, cin,
              input [7:0] in3, in4, in5, in6, in7, in8,
              input [7:0] in9, inA, inB);

  wire [7:0] in1;
  wire [7:0] in2;
  wire [7:0] in3;
  wire [7:0] in4;
  wire [7:0] in5;
  wire [7:0] in6;
  wire [7:0] in7;
  wire [7:0] in8;
  wire [7:0] in9;
  wire [7:0] inA;
  wire [7:0] inB;

  assign in1 = (in1 == 1'b0)? in2 : in3;
  assign in2 = (in2 == 1'b0)? in4 : in5;
  assign in3 = (in3 == 1'b0)? in6 : in7;
  assign in4 = (in4 == 1'b0)? in8 : in9;
  assign in5 = (in5 == 1'b0)? inA : inB;
  assign in6 = (in6 == 1'b0)? inA : inB;
  assign in7 = (in7 == 1'b0)? inA : inB;
  assign in8 = (in8 == 1'b0)? inA : inB;
  assign in9 = (in9 == 1'b0)? inA : inB;

  assign out = (cin == 1'b0)? in1 : in2;

endmodule

module mux_1(output out,
              input in1, in2,
              input cin,
              input in3, in4, in5, in6, in7, in8,
              input in9, inA, inB);

  wire [7:0] in1;
  wire [7:0] in2;
  wire [7:0] in3;
  wire [7:0] in4;
  wire [7:0] in5;
  wire [7:0] in6;
  wire [7:0] in7;
  wire [7:0] in8;
  wire [7:0] in9;
  wire [7:0] inA;
  wire [7:0] inB;

  assign in1 = (in1 == 1'b0)? in2 : in3;
  assign in2 = (in2 == 1'b0)? in4 : in5;
  assign in3 = (in3 == 1'b0)? in6 : in7;
  assign in4 = (in4 == 1'b0)? in8 : in9;
  assign in5 = (in5 == 1'b0)? inA : inB;
  assign in6 = (in6 == 1'b0)? inA : inB;
  assign in7 = (in7 == 1'b0)? inA : inB;
  assign in8 = (in8 == 1'b0)? inA : inB;
  assign in9 = (in9 == 1'b0)? inA : inB;

  assign out = (cin == 1'b0)? in1 : in2;

endmodule"
N/A,N/A,-1,59.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
                        
    wire [7:0] sum;
    wire cout;
    
    //////////////// COMPONENTS START
    
    HA_8 HA1(sum[0], c1, in1[0], in2[0]);
    FA_8 FA1(sum[1], c2, in1[1], in2[1], c1);
    FA_8 FA2(sum[2], c3, in1[2], in2[2], c2);
    FA_8 FA3(sum[3], c4, in1[3], in2[3], c3);
    FA_8 FA4(sum[4], c5, in1[4], in2[4], c4);
    FA_8 FA5(sum[5], c6, in1[5], in2[5], c5);
    FA_8 FA6(sum[6], c7, in1[6], in2[6], c6);
    FA_8 FA7(sum[7], cout, in1[7], in2[7], c7);
    
    Half_Adder HA2(cout, c8, c7, c6);
    
    CA_8 CA1(cout, c9, c7, c6);
    
    part2 u1(sum, c9, in1, in2, c8);
    
    dual_port u2(sum, cout, in1, in2, c8);
    
    only_port u3(sum, in1, in2, c8);
    
    bus_control u4(sum, c8, in1, in2);
    
    weak_half_adder u5(sum[0], sum[1], in1[0], in2[0]);
    
    ending u6(sum[7], cout, in1[7], in2[7]);
    
    requirement u7(sum[7], cout, in1[7], in2[7]);
    
    binary_to_gray u8(sum[7], sum[6], sum[5], sum[4], sum[3], sum[2], sum[1], sum[0]);
    
    variable_to_gray u9(sum[7], sum[6], sum[5], sum[4], sum[3], sum[2], sum[1], sum[0]);
    
    benchmark u10(sum[7], cout, in1[7], in2[7]);
    
    ball_game u11(sum[7], cout, in1[7], in2[7]);
    
    soft_full_adder u12(sum[7], cout, in1[7], in2[7]);
    
    endmodule

module Half_Adder(output wire sum,
                  output wire cout,
                  input wire in1,
                  input wire in2);
    xor(sum, in1, in2);
    and(cout, in1, in2);
endmodule

module CA_8(output wire sum,
             output wire cout,
             input wire cin,
             input wire [7:0] in1,
             input wire [7:0] in2);
    wire [7:0] sum;
    wire [7:0] cout;
    
    Half_Adder HA1(sum[0], c1, in1[0], in2[0]);
    Full_Adder FA1(sum[1], c2, in1[1], in2[1], c1);
    Full_Adder FA2(sum[2], c3, in1[2], in2[2], c2);
    Full_Adder FA3(sum[3], c4, in1[3], in2[3], c3);
    Full_Adder FA4(sum[4], c5, in1[4], in2[4], c4);
    Full_Adder FA5(sum[5], c6, in1[5], in2[5], c5);
    Full_Adder FA6(sum[6], c7, in1[6], in2[6], c6);
    Full_Adder FA7(sum[7], cout, in1[7], in2[7], c7);
endmodule"
N/A,N/A,-1,60.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
     wire c1, c2, c3;
     full_adder FA1(sum[0], c1, in1[0], in2[0], cin);
     full_adder FA2(sum[1], c2, in1[1], in2[1], c1);
     full_adder FA3(sum[2], c3, in1[2], in2[2], c2);
     full_adder FA4(sum[3], cout, in1[3], in2[3], c3);
     full_adder FA5(sum[4], c4, in1[4], in2[4], c3);
     full_adder FA6(sum[5], c5, in1[5], in2[5], c4);
     full_adder FA7(sum[6], c6, in1[6], in2[6], c5);
     full_adder FA8(sum[7], cout, in1[7], in2[7], c6);
endmodule

tester tester(
   .cout(cout),
   .sum(sum),
   .in1(in1),
   .in2(in2),
   .cin(cin)
);

endmodule"
N/A,N/A,-1,61.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
                                    
    wire c1, c2, c3;
    
    full_adder FA1(sum[0], c1, in1[0], in2[0], cin);
    full_adder FA2(sum[1], c2, in1[1], in2[1], c1);
    full_adder FA3(sum[2], c3, in1[2], in2[2], c2);
    full_adder FA4(sum[3], cout, in1[3], in2[3], c3);
    
endmodule

pipeline_adder_8
    (
    .sum(sum),
    .cout(cout),
    .in1(in1),
    .in2(in2),
    .cin(cin)
     );

endmodule"
N/A,N/A,-1,62.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
wire c1, c2, c3, c4, c5, c6, c7;

bitwise_full_adder add1(sum[0], c1, in1[0], in2[0], cin);
bitwise_full_adder add2(sum[1], c2, in1[1], in2[1], c1);
bitwise_full_adder add3(sum[2], c3, in1[2], in2[2], c2);
bitwise_full_adder add4(sum[3], c4, in1[3], in2[3], c3);
bitwise_full_adder add5(sum[4], c5, in1[4], in2[4], c4);
bitwise_full_adder add6(sum[5], c6, in1[5], in2[5], c5);
bitwise_full_adder add7(sum[6], c7, in1[6], in2[6], c6);
bitwise_full_adder add8(sum[7], cout, in1[7], in2[7], c7);

endmodule

CLA_8 CLA(sum, cout, in1, in2, cin);

endmodule"
N/A,N/A,-1,63.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);

        wire [7:0] sum;
        wire cout;
        wire [7:0] in1;
        wire [7:0] in2;
        wire cin;

        input [7:0] in1;
        input [7:0] in2;
        input cin;

        wire [7:0] sum;
        wire cout;

        wire [7:0] carry;

        full_adder_8bit fa0(sum[0], carry[0], in1[0], in2[0], cin);
        full_adder_8bit fa1(sum[1], carry[1], in1[1], in2[1], carry[0]);
        full_adder_8bit fa2(sum[2], carry[2], in1[2], in2[2], carry[1]);
        full_adder_8bit fa3(sum[3], carry[3], in1[3], in2[3], carry[2]);
        full_adder_8bit fa4(sum[4], carry[4], in1[4], in2[4], carry[3]);
        full_adder_8bit fa5(sum[5], carry[5], in1[5], in2[5], carry[4]);
        full_adder_8bit fa6(sum[6], carry[6], in1[6], in2[6], carry[5]);
        full_adder_8bit fa7(sum[7], cout, in1[7], in2[7], carry[6]);

endmodule"
79.534,345.76,0.12748010013219704,64.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,65.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  assign {cout, sum} = in1 + in2 + cin;
endmodule"
N/A,N/A,-0.5,66.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1, c2, c3, c4, c5, c6, c7;
  wire [7:0] sum;
  
  ha_8 HA1(sum[0], c1, in1[0], in2[0]);
  fa_8 FA1(sum[1], c2, in1[1], in2[1], c1);
  fa_8 FA2(sum[2], c3, in1[2], in2[2], c2);
  fa_8 FA3(sum[3], c4, in1[3], in2[3], c3);
  fa_8 FA4(sum[4], c5, in1[4], in2[4], c4);
  fa_8 FA5(sum[5], c6, in1[5], in2[5], c5);
  fa_8 FA6(sum[6], c7, in1[6], in2[6], c6);
  fa_8 FA7(sum[7], cout, in1[7], in2[7], c7);
endmodule

module fa_8(output wire sum,
             output wire cout,
             input wire in1, in2, cin);
  xor(sum, in1, in2, cin);
  and(cout, in1, in2);
endmodule

module ha_8(output wire sum,
             output wire cout,
             input wire in1, in2);
  xor(sum, in1, in2);
  and(cout, in1, in2);
endmodule"
N/A,N/A,-1,67.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
       wire [7:0] sum;
       wire cout;
       wire [7:0] in1;
       wire [7:0] in2;
       wire cin;
       
       ////////first stage half adders tree initialize blocks...
       half_adder_8 HA1(sum[0], c1, in1[0], in2[0]);
       half_adder_8 HA2(sum[1], c2, in1[1], in2[1]);
       half_adder_8 HA3(sum[2], c3, in1[2], in2[2]);
       half_adder_8 HA4(sum[3], c4, in1[3], in2[3]);
       half_adder_8 HA5(sum[4], c5, in1[4], in2[4]);
       half_adder_8 HA6(sum[5], c6, in1[5], in2[5]);
       half_adder_8 HA7(sum[6], c7, in1[6], in2[6]);
       half_adder_8 HA8(sum[7], cout, in1[7], in2[7]);
       queue_8 q1(c1, c2, c3, c4, c5, c6, c7, cout);
       
       hab_tree_8 HA1(sum, c1, in1, in2, cin);
       hab_tree_8 HA2(cout, cout, in1, in2, cin);
       
endmodule

module queue_8(output wire [7:0] out,
                input wire [7:0] in,
                input wire [7:0] in2,
                input wire cin);
       wire [7:0] in1;
       wire [7:0] in3;
       wire [7:0] in4;
       wire [7:0] in5;
       wire [7:0] in6;
       wire [7:0] in7;
       wire [7:0] in8;
       wire [7:0] in9;
       wire [7:0] in10;
       wire [7:0] in11;
       wire [7:0] in12;
       wire [7:0] in13;
       wire [7:0] in14;
       wire [7:0] in15;
       wire [7:0] in16;
       wire [7:0] in17;
       wire [7:0] in18;
       wire [7:0] in19;
       wire [7:0] in20;
       wire [7:0] in21;
       wire [7:0] in22;
       wire [7:0] in23;
       wire [7:0] in24;
       wire [7:0] in25;
       wire [7:0] in26;
       wire [7:0] in27;
       wire [7:0] in28;
       wire [7:0] in29;
       wire [7:0] in30;
       wire [7:0] in31;
       wire [7:0] in32;
       wire [7:0] in33;
       wire [7:0] in34;
       wire [7:0] in35;
       wire [7:0] in36;
       wire [7:0] in37;
       wire [7:0] in38;
       wire [7:0] in39;
       wire [7:0] in40;
       wire [7:0] in41;
       wire [7:0] in42;
       wire [7:0] in43;
       wire [7:0] in44;
       wire [7:0] in45;
       wire [7:0] in46;
       wire [7:0] in47;
       wire [7:0] in48;
       wire [7:0] in49;
       wire [7:0] in50;
       wire [7:0] in51;
       wire [7:0] in52;
       wire [7:0] in53;
       wire [7:0] in54;
       wire [7:0] in55;
       wire [7:0] in56;
       wire [7:0] in57;
       wire [7:0] in58;
       wire [7:0] in59;
       wire [7:0] in60;
       wire [7:0] in61;
       wire [7:0] in62;
       wire [7:0] in63;
       wire [7:0] in64;
       wire [7:0] in65;
       wire [7:0] in66;
       wire [7:0] in67;
       wire [7:0] in68;
       wire [7:0] in69;
       wire [7:0] in70;
       wire [7:0] in71;
       wire [7:0] in72;
       wire [7:0] in73;
       wire [7:0] in74;
       wire [7:0] in75;
       wire [7:0] in76;
       wire [7:0] in77;
       wire [7:0] in78;
       wire [7:0] in79;
       wire [7:0] in80;
       wire [7:0] in81;
       wire [7:0] in82;
       wire [7:0] in83;
       wire [7:0] in84;
       wire [7:0] in85;
       wire [7:0] in86;
       wire [7:0] in87;
       wire [7:0] in88;
       wire [7:0] in89;
       wire [7:0] in90;
       wire [7:0] in91;
       wire [7:0] in92;
       wire [7:0] in93;
       wire [7:0] in94;
       wire [7:0] in95;
       wire [7:0] in96;
       wire [7:0] in97;
       wire [7:0] in98;
       wire [7:0] in99;
       wire [7:0] in100;
       wire [7:0"
N/A,N/A,-1,68.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
                  
//Definition for Variables in the module
wire [7:0] sum;
wire cout;
integer i;
                    
               
	generate
	integer j;
	altera_add_sub #(8) adder_8(.a(in1),.b(in2),.cin(cin),.sum(sum),.cout(cout));
	endgenerate

nand nand_0(cout, cout, sum[0]);

latch latch_0(sum[0], cout, in1[0] ^ in2[0]);

endmodule
`timescale 1ns / 1ps
mem_mod_mast mem_mod_mast_inst(
	.clk(clk),
	.rst(rst),
	.mem_mod_mast_input_data(mem_mod_mast_input_data),
	.mem_mod_mast_input_valid(mem_mod_mast_input_valid),
	.mem_mod_mast_input_ready(mem_mod_mast_input_ready),
	.mem_mod_mast_output_data(mem_mod_mast_output_data),
	.mem_mod_mast_output_valid(mem_mod_mast_output_valid),
	.mem_mod_mast_output_ready(mem_mod_mast_output_ready)
);

mem_mod_mast_input mem_mod_mast_input_inst(
	.clk(clk),
	.rst(rst),
	.mem_mod_mast_input_data(mem_mod_mast_input_data),
	.mem_mod_mast_input_valid(mem_mod_mast_input_valid),
	.mem_mod_mast_input_ready(mem_mod_mast_input_ready)
);

mem_mod_mast_output mem_mod_mast_output_inst(
	.clk(clk),
	.rst(rst),
	.mem_mod_mast_output_data(mem_mod_mast_output_data),
	.mem_mod_mast_output_valid(mem_mod_mast_output_valid),
	.mem_mod_mast_output_ready(mem_mod_mast_output_ready)
);

mem_mod_mast_input_data mem_mod_mast_input_data_inst(
	.clk(clk),
	.rst(rst),
	.mem_mod_mast_input_data(mem_mod_mast_input_data),
	.mem_mod_mast_input_valid(mem_mod_mast_input_valid),
	.mem_mod_mast_input_ready(mem_mod_mast_input_ready)
);

mem_mod_mast_output_data mem_mod_mast_output_data_inst(
	.clk(clk),
	.rst(rst),
	.mem_mod_mast_output_data(mem_mod_mast_output_data),
	.mem_mod_mast_output_valid(mem_mod_mast_output_valid),
	.mem_mod_mast_output_ready(mem_mod_mast_output_ready)
);

endmodule"
79.534,345.76,0.12748010013219704,69.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);

assign {cout, sum} = in1 + in2 + cin;

endmodule"
79.534,345.76,0.12748010013219704,70.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);

assign {cout, sum} = in1 + in2 + cin;

endmodule"
79.534,345.76,0.12748010013219704,71.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);

assign {cout, sum} = in1 + in2 + cin;

endmodule"
N/A,N/A,-0.5,72.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);

endmodule"
79.534,345.76,0.12748010013219704,73.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,74.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  assign {cout, sum} = in1 + in2 + cin;
endmodule"
N/A,N/A,-1,75.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  full_adder FA0(sum[0], c1, in1[0], in2[0], cin);
  full_adder FA1(sum[1], c2, in1[1], in2[1], c1);
  full_adder FA2(sum[2], c3, in1[2], in2[2], c2);
  full_adder FA3(sum[3], c4, in1[3], in2[3], c3);
  full_adder FA4(sum[4], c5, in1[4], in2[4], c4);
  full_adder FA5(sum[5], c6, in1[5], in2[5], c5);
  full_adder FA6(sum[6], c7, in1[6], in2[6], c6);
  full_adder FA7(sum[7], cout, in1[7], in2[7], c7);
endmodule

edge_detector ED(output reg q,
                  input clk,
                  input reset);
  always @(posedge clk)
    begin
      if (reset)
        q <= 0;
      else
        q <= ~q;
    end
endmodule"
N/A,N/A,-1,76.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);

wire c1, c2, c3, c4, c5, c6, c7;

three_bit_ripple_adder add1(sum[0], c1, in1[0], in2[0], cin);
three_bit_ripple_adder add2(sum[1], c2, in1[1], in2[1], c1);
three_bit_ripple_adder add3(sum[2], c3, in1[2], in2[2], c2);
three_bit_ripple_adder add4(sum[3], c4, in1[3], in2[3], c3);
three_bit_ripple_adder add5(sum[4], c5, in1[4], in2[4], c4);
three_bit_ripple_adder add6(sum[5], c6, in1[5], in2[5], c5);
three_bit_ripple_adder add7(sum[6], c7, in1[6], in2[6], c6);
three_bit_ripple_adder add8(sum[7], cout, in1[7], in2[7], c7);

endmodule

              
genvar i;
generate
for (i=0; i<8; i=i+1)
begin: ripple_carry_adder
wire c1, c2, c3, c4, c5, c6, c7;

three_bit_ripple_adder add1(sum[i], c1, in1[i], in2[i], cin);
three_bit_ripple_adder add2(sum[i+1], c2, in1[i+1], in2[i+1], c1);
three_bit_ripple_adder add3(sum[i+2], c3, in1[i+2], in2[i+2], c2);
three_bit_ripple_adder add4(sum[i+3], c4, in1[i+3], in2[i+3], c3);
three_bit_ripple_adder add5(sum[i+4], c5, in1[i+4], in2[i+4], c4);
three_bit_ripple_adder add6(sum[i+5], c6, in1[i+5], in2[i+5], c5);
three_bit_ripple_adder add7(sum[i+6], c7, in1[i+6], in2[i+6], c6);
three_bit_ripple_adder add8(sum[i+7], cout, in1[i+7], in2[i+7], c7);

end
endgenerate

endmodule"
79.534,345.76,0.12748010013219704,77.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  assign {cout, sum} = in1 + in2 + cin;
endmodule"
N/A,N/A,-0.5,78.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  assign sum = in1 + in2 + cin;
  assign cout = (in1[7] == in2[7])? 1'b0 : (in1[7] == cin? 1'b1 : in1[7] + in2[7] + cin);
endmodule"
79.534,345.76,0.12748010013219704,79.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
N/A,N/A,-0.5,80.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign sum = in1 + in2 + cin;
assign cout = (in1[7] == in2[7])? 1'b0 : (in1[7] == cin? 1'b1 : in1[7] + in2[7] + cin);
endmodule"
N/A,N/A,-0.5,81.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
    
    wire [7:0] sum;
    wire cout;
    
    xor(sum[0], in1[0], in2[0], cin);
    xor(sum[1], in1[1], in2[1], cin);
    xor(sum[2], in1[2], in2[2], cin);
    xor(sum[3], in1[3], in2[3], cin);
    xor(sum[4], in1[4], in2[4], cin);
    xor(sum[5], in1[5], in2[5], cin);
    xor(sum[6], in1[6], in2[6], cin);
    xor(sum[7], in1[7], in2[7], cin);
    
    and(cout, in1[0], in2[0], cin);
    
endmodule"
N/A,N/A,-0.5,82.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1, c2, c3, c4, c5, c6, c7;
  wire [7:0] sum;
  
  ////////A simple carry-select adder
  single_bit_adder adder1(sum[0], c1, in1[0], in2[0], cin);
  single_bit_adder adder2(sum[1], c2, in1[1], in2[1], c1);
  single_bit_adder adder3(sum[2], c3, in1[2], in2[2], c2);
  single_bit_adder adder4(sum[3], c4, in1[3], in2[3], c3);
  single_bit_adder adder5(sum[4], c5, in1[4], in2[4], c4);
  single_bit_adder adder6(sum[5], c6, in1[5], in2[5], c5);
  single_bit_adder adder7(sum[6], c7, in1[6], in2[6], c6);
  single_bit_adder adder8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module single_bit_adder(output sum,
                         output cout,
                         input in1, in2, cin);
  wire x, y, z;
  
  master_slave_adder adder1(sum, x, in1, in2, cin);
  master_slave_adder adder2(cout, y, x, in2, 1'b0);
endmodule

module master_slave_adder(output sum,
                          output cout,
                          input in1, in2, cin);
  wire x, y, z;
  
  slave_adder adder1(sum, x, in1, in2, cin);
  slave_adder adder2(cout, y, x, in2, 1'b0);
endmodule

module slave_adder(output sum,
                    output cout,
                    input in1, in2, cin);
  wire x, y, z;
  
  assign sum = in1 ^ in2;
  assign cout = (in1 & in2) | (in1 ^ in2);
endmodule"
79.534,345.76,0.12748010013219704,83.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,84.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,85.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,86.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout,sum} = in1 + in2 + cin;
endmodule"
N/A,N/A,-1,87.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign c[0] = cin;
assign cout = c[8];
genvar i;
generate
for(i=0;i<8;i=i+1)
begin: adder_loop
    full_adder FA(sum[i],c[i+1],in1[i],in2[i],c[i]);
end
endgenerate
endmodule

counter_8bit c8(clk,reset,count);

vga_controller vga_c(clk,reset,hsync,vsync,blank,
                     h_count,v_count,
                     pixel);

add_sub_8bit as8(sum,cout,in1,in2,c);

endmodule"
N/A,N/A,-1,88.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  adder_4 adder_4_1(.sum(sum[3:0]),.cout(cout),.in1(in1[3:0]),.in2(in2[3:0]),.cin(cin));
  adder_4 adder_4_2(.sum(sum[7:4]),.cout(cout),.in1(in1[7:4]),.in2(in2[7:4]),.cin(cout));
endmodule

sum_8 adder_8_1(.sum(sum),.cout(cout),.in1(in1),.in2(in2),.cin(cin));

Main_Module main_module_1(.sum(sum),.cout(cout),.in1(in1),.in2(in2),.cin(cin));

endmodule"
79.534,345.76,0.12748010013219704,89.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);

assign {cout, sum} = in1 + in2 + cin;

endmodule"
79.534,345.76,0.12748010013219704,90.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);

assign {cout, sum} = in1 + in2 + cin;

endmodule"
N/A,N/A,-1,91.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);

assign cout = c[7];

assign sum = in1 ^ in2 ^ cin;

endmodule"
79.534,345.76,0.12748010013219704,92.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,93.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,94.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,95.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout,sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,96.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,97.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,98.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,99.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout,sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,100.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,101.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,102.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
N/A,N/A,-0.5,103.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign #5 {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,104.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,105.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout,sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,106.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,107.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,108.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,109.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout,sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,110.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
N/A,N/A,-0.5,111.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign sum = in1 + in2 + cin;
assign cout = (in1[7] == in2[7])? 1'b0 : (in1[7] == cin? 1'b1 : in1[7] + in2[7] + cin);
endmodule"
79.534,345.76,0.12748010013219704,112.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1+in2+cin;
endmodule"
79.534,345.76,0.12748010013219704,113.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,114.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout,sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,115.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,116.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,117.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,118.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout,sum} = in1 + in2 + cin;
endmodule"
N/A,N/A,-1,119.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign cout = c[7];
assign sum = s[7] + in1 + in2 + c[7];

add_8 a0(s[0], c[0], in1[0], in2[0], cin);
add_8 a1(s[1], c[1], in1[1], in2[1], c[0]);
add_8 a2(s[2], c[2], in1[2], in2[2], c[1]);
add_8 a3(s[3], c[3], in1[3], in2[3], c[2]);
add_8 a4(s[4], c[4], in1[4], in2[4], c[3]);
add_8 a5(s[5], c[5], in1[5], in2[5], c[4]);
add_8 a6(s[6], c[6], in1[6], in2[6], c[5]);
add_8 a7(s[7], c[7], in1[7], in2[7], c[6]);

endmodule

module add_8(output s,
                      output c,
                      input in1, in2,
                      input cin);
assign s = in1 ^ in2 ^ cin;
assign c = (in1 & in2) | (in1 & cin) | (in2 & cin);
endmodule"
79.534,345.76,0.12748010013219704,120.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
    assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,121.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
    assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,122.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
    assign {cout, sum} = in1 + in2 + cin;
endmodule"
N/A,N/A,-1,123.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
    full_adder FA1(sum[0], c1, in1[0], in2[0], cin);
    full_adder FA2(sum[1], c2, in1[1], in2[1], c1);
    full_adder FA3(sum[2], c3, in1[2], in2[2], c2);
    full_adder FA4(sum[3], c4, in1[3], in2[3], c3);
    full_adder FA5(sum[4], c5, in1[4], in2[4], c4);
    full_adder FA6(sum[5], c6, in1[5], in2[5], c5);
    full_adder FA7(sum[6], c7, in1[6], in2[6], c6);
    full_adder FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

structural_adder_8 structural_adder_8_inst(output [7:0] sum,
                                              output cout,
                                              input [7:0] in1, in2,
                                              input cin);
    wire c1, c2, c3, c4, c5, c6, c7;
    wire [7:0] sum;
    wire cout;
    
    adder_8 adder_8_inst(sum[7:0], cout, in1[7:0], in2[7:0], cin);
    adder_8 adder_8_inst1(sum[15:8], c1, in1[15:8], in2[15:8], 1'b0);
    adder_8 adder_8_inst2(sum[23:16], c2, in1[23:16], in2[23:16], c1);
    adder_8 adder_8_inst3(sum[31:24], c3, in1[31:24], in2[31:24], c2);
    adder_8 adder_8_inst4(sum[39:32], c4, in1[39:32], in2[39:32], c3);
    adder_8 adder_8_inst5(sum[47:40], c5, in1[47:40], in2[47:40], c4);
    adder_8 adder_8_inst6(sum[55:48], c6, in1[55:48], in2[55:48], c5);
    adder_8 adder_8_inst7(sum[63:56], c7, in1[63:56], in2[63:56], c6);
    adder_8 adder_8_inst8(sum[71:64], cout, in1[71:64], in2[71:64], c7);
endmodule"
79.534,345.76,0.12748010013219704,124.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,125.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,126.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,127.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout,sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,128.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,129.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,130.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,131.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout,sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,132.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,133.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1+in2+cin;
endmodule"
79.534,345.76,0.12748010013219704,134.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,135.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout,sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,136.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,137.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,138.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign  {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,139.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,140.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout,sum} = in1+in2+cin;
endmodule"
79.534,345.76,0.12748010013219704,141.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,142.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,143.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum}=in1+in2+cin;
endmodule"
79.534,345.76,0.12748010013219704,144.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,145.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout,sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,146.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,147.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,148.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,149.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout,sum}=in1+in2+cin;
endmodule"
79.534,345.76,0.12748010013219704,150.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1+in2+cin;
endmodule"
79.534,345.76,0.12748010013219704,151.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,152.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,153.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout,sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,154.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,155.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;

endmodule"
79.534,345.76,0.12748010013219704,156.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,157.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout,sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,158.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,159.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,160.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,161.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout,sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,162.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
N/A,N/A,-0.5,163.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign sum = in1 + in2 + cin;
assign cout = (in1[7] == in2[7])? 1'b0 : (in1[7] == cin? 1'b1 : in1[7] + in2[7] + cin);
endmodule"
79.534,345.76,0.12748010013219704,164.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,165.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1+in2+cin;
endmodule"
79.534,345.76,0.12748010013219704,166.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout,sum} = in1+in2+cin;
endmodule"
79.534,345.76,0.12748010013219704,167.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,168.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,169.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign  {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,170.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,171.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout,sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,172.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,173.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,174.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,175.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout,sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,176.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,177.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,178.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
N/A,N/A,-1,179.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign carry[0] = cin;
assign cout = carry[1];
full_adder FA0(sum[0], c1, in1[0], in2[0], cin);
full_adder FA1(sum[1], c2, in1[1], in2[1], c1);
full_adder FA2(sum[2], c3, in1[2], in2[2], c2);
full_adder FA3(sum[3], c4, in1[3], in2[3], c3);
full_adder FA4(sum[4], c5, in1[4], in2[4], c4);
full_adder FA5(sum[5], c6, in1[5], in2[5], c5);
full_adder FA6(sum[6], c7, in1[6], in2[6], c6);
full_adder FA7(sum[7], cout, in1[7], in2[7], c7);
endmodule

Top level design
module top_module(
    input clk,
    input reset,
    input [7:0] in1,
    input [7:0] in2,
    input cin,
    output [7:0] sum,
    output cout
);
    wire [7:0] carry;
    adder_8 a0(sum[7:0], carry[7:0], in1[7:0], in2[7:0], cin);
    adder_8 a1(sum[15:8], carry[15:8], in1[15:8], in2[15:8], carry[7:0]);
    adder_8 a2(sum[23:16], carry[23:16], in1[23:16], in2[23:16], carry[15:8]);
    adder_8 a3(sum[31:24], carry[31:24], in1[31:24], in2[31:24], carry[23:16]);
    adder_8 a4(sum[39:32], carry[39:32], in1[39:32], in2[39:32], carry[31:24]);
    adder_8 a5(sum[47:40], carry[47:40], in1[47:40], in2[47:40], carry[39:32]);
    adder_8 a6(sum[55:48], carry[55:48], in1[55:48], in2[55:48], carry[47:40]);
    adder_8 a7(sum[63:56], carry[63:56], in1[63:56], in2[63:56], carry[55:48]);
    adder_8 a8(sum[71:64], carry[71:64], in1[71:64], in2[71:64], carry[63:56]);
    adder_8 a9(sum[79:72], carry[79:72], in1[79:72], in2[79:72], carry[71:64]);
    adder_8 a10(sum[87:80], carry[87:80], in1[87:80], in2[87:80], carry[79:72]);
    adder_8 a11(sum[95:88], carry[95:88], in1[95:88], in2[95:88], carry[87:80]);
    adder_8 a12(sum[103:96], carry[103:96], in1[103:96], in2[103:96], carry[95:88]);
    adder_8 a13(sum[111:104], carry[111:104], in1[111:104], in2[111:104], carry[103:96]);
    adder_8 a14(sum[119:112], carry[119:112], in1[119:112], in2[119:112], carry[111:104]);
    adder_8 a15(sum[127:120], carry[127:120], in1[127:120], in2[127:120], carry[119:112]);
    adder_8 a16(sum[135:128], carry[135:128], in1[135:128], in2[135:128], carry[127:120]);
    adder_8 a17(sum[143:136], carry[143:136], in1[143:136], in2[143:136], carry[135:128]);
    adder_8 a18(sum[151:144], carry[151:144], in1[151:144], in2[151:144], carry[143:136]);
    adder_8 a19(sum[159:152], carry[159:152], in1[159:152], in2[159:152], carry[151:144]);
    adder_8 a20(sum[167:160], carry[167:160], in1[167:160], in2[167:160], carry[159:152]);
    adder_8 a21(sum[175:168], carry[175:168], in1[175:168], in2[175:168], carry[167:160]);
    adder_8 a22(sum[183:176], carry[183:176], in1[183:176], in2[183:176], carry[175:168]);
    adder_8 a23(sum[191:184], carry[191:184], in1[191:184], in2[191:184], carry[183:176]);
    adder_8 a24(sum[199:192], carry[199:192], in1[199:192], in2[199:192], carry[191:184]);
    adder_8 a25(sum[207:200], carry[207:200], in1[207:200], in2[207:200], carry[199:192]);
    adder_8 a26(sum[215:208], carry[215:208], in1[215:208], in2[215:208], carry[207:200]);
    adder_8 a27(sum[223:216], carry[223:216], in1[223:216], in2[223:216], carry[215:208]);
    adder_8 a28(sum[231:224], carry[231:224], in1[231:224], in2[231:224], carry[223:216]);
    adder_8 a29(sum[239:232], carry[239:232], in1[239:232], in2"
79.534,345.76,0.12748010013219704,180.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout,sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,181.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum}=in1+in2+cin;
endmodule"
79.534,345.76,0.12748010013219704,182.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,183.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,184.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout,sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,185.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1+in2+cin;
endmodule"
79.534,345.76,0.12748010013219704,186.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,187.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,188.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,189.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout,sum}=in1+in2+cin;
endmodule"
79.534,345.76,0.12748010013219704,190.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,191.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,192.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;

endmodule"
79.534,345.76,0.12748010013219704,193.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout,sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,194.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,195.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,196.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,197.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout,sum} = in1+in2+cin;
endmodule"
N/A,N/A,-0.5,198.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign  cout = cin;
assign  sum = in1 + in2;
endmodule"
79.534,345.76,0.12748010013219704,199.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,200.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1+in2+cin;
endmodule"
N/A,N/A,-1,201.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign cout = c[7];
assign sum = s[7] + in1 + in2 + c[7];

HA HA1(s[0], c[0], in1[0], in2[0], cin);
FA FA1(s[1], c[1], in1[1], in2[1], c[0]);
FA FA2(s[2], c[2], in1[2], in2[2], c[1]);
FA FA3(s[3], c[3], in1[3], in2[3], c[2]);
FA FA4(s[4], c[4], in1[4], in2[4], c[3]);
FA FA5(s[5], c[5], in1[5], in2[5], c[4]);
FA FA6(s[6], c[6], in1[6], in2[6], c[5]);
FA FA7(s[7], c[7], in1[7], in2[7], c[6]);

endmodule

module adder_8_tb;

reg [7:0] in1, in2;
reg cin;
wire [7:0] sum;
wire cout;

adder_8 adder_8_tb(sum, cout, in1, in2, cin);

initial begin
    in1 = 8'b00001010;
    in2 = 8'b00001010;
    cin = 1'b0;
    #10;
    in1 = 8'b00001010;
    in2 = 8'b00001011;
    cin = 1'b0;
    #10;
    in1 = 8'b00001010;
    in2 = 8'b00001100;
    cin = 1'b0;
    #10;
    in1 = 8'b00001010;
    in2 = 8'b00001101;
    cin = 1'b0;
    #10;
    in1 = 8'b00001010;
    in2 = 8'b00001110;
    cin = 1'b0;
    #10;
    in1 = 8'b00001010;
    in2 = 8'b00001111;
    cin = 1'b0;
    #10;
    in1 = 8'b00001010;
    in2 = 8'b00010000;
    cin = 1'b0;
    #10;
    in1 = 8'b00001010;
    in2 = 8'b00010001;
    cin = 1'b0;
    #10;
    in1 = 8'b00001010;
    in2 = 8'b00010010;
    cin = 1'b0;
    #10;
    in1 = 8'b00001010;
    in2 = 8'b00010011;
    cin = 1'b0;
    #10;
    in1 = 8'b00001010;
    in2 = 8'b00010100;
    cin = 1'b0;
    #10;
    in1 = 8'b00001010;
    in2 = 8'b00010101;
    cin = 1'b0;
    #10;
    in1 = 8'b00001010;
    in2 = 8'b00010110;
    cin = 1'b0;
    #10;
    in1 = 8'b00001010;
    in2 = 8'b00010111;
    cin = 1'b0;
    #10;
    in1 = 8'b00001010;
    in2 = 8'b00011000;
    cin = 1'b0;
    #10;
    in1 = 8'b00001010;
    in2 = 8'b00011001;
    cin = 1'b0;
    #10;
    in1 = 8'b00001010;
    in2 = 8'b00011010;
    cin = 1'b0;
    #10;
    in1 = 8'b00001010;
    in2 = 8'b00011011;
    cin = 1'b0;
    #10;
    in1 = 8'b00001010;
    in2 = 8'b00011100;
    cin = 1'b0;
    #10;
    in1 = 8'b00001010;
    in2 = 8'b00011101;
    cin = 1'b0;
    #10;
    in1 = 8'b00001010;
    in2 = 8'b00011110;
    cin = 1'b0;
    #10;
    in1 = 8'b00001010;
    in2 = 8'b00011111;
    cin = 1'b0;
    #10;
    in1 = 8'b00001010;
    in2 = 8'b00100000;
    cin = 1'b0;
    #10;
    in1 = 8'b00001010;
    in2 = 8'b00100001;
    cin = 1'b0;
    #10;
    in1 = 8'b00001010;
    in2 = 8'b00100010;
    cin = 1'b0;
    #10;
    in1 = 8'b00001010;
    in2 = 8'b00100011;
    cin = 1'b0;
    #10;
    in1 = 8'b00001010;
    in2 = 8'b00100100;
    cin = 1'b0;
    #10;
    in1 = 8'b00001010;
    in2 = 8'b00100101;
    cin = 1'b0;
    #10;
    in1 = 8'b00001010;
    in2 = 8'b00100110;
    cin = 1'b0;
    #10;
    in1 = 8'b00001010;
    in2 = 8'b00100111;
    cin = 1'b0;
    #10;
    in1 = 8'b00001010;
    in2 = 8'b00101000;
    cin = 1'b0;
    #10;
    in1 = 8'b0000101"
79.534,345.76,0.12748010013219704,202.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,203.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout,sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,204.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,205.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,206.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,207.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout,sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,208.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
N/A,N/A,-1,209.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
    wire [7:0] sum;
    wire cout;
    wire [7:0] in1;
    wire [7:0] in2;
    wire cin;
    ADDER_8_BITS adder_8_bit(sum, cout, in1, in2, cin);
endmodule

module ADDER_8_BITS(output [7:0] sum,
                     output cout,
                     input [7:0] in1, in2,
                     input cin);
    wire [7:0] sum;
    wire cout;
    wire [7:0] in1;
    wire [7:0] in2;
    wire cin;
    wire [7:0] carry;
    wire [7:0] carry_in;
    assign carry_in = {1'b0, cin};
    full_adder_8_bit fa_8_bit(sum, carry, in1, in2, carry_in);
    assign cout = carry[7];
endmodule

module full_adder_8_bit(output [7:0] sum,
                         output cout,
                         input [7:0] in1, in2,
                         input cin);
    wire [7:0] sum;
    wire cout;
    wire [7:0] in1;
    wire [7:0] in2;
    wire cin;
    wire [7:0] carry;
    wire [7:0] carry_in;
    assign carry_in = {1'b0, cin};
    adder_8_bit a8_bit(sum, carry, in1, in2, carry_in);
    assign cout = carry[7];
endmodule

module adder_8_bit(output [7:0] sum,
                    output cout,
                    input [7:0] in1, in2,
                    input cin);
    wire [7:0] sum;
    wire cout;
    wire [7:0] in1;
    wire [7:0] in2;
    wire cin;
    wire [7:0] carry;
    wire [7:0] carry_in;
    assign carry_in = {1'b0, cin};
    adder_8_bit_generate a8_bit_generate(sum, carry, in1, in2, carry_in);
    assign cout = carry[7];
endmodule

module adder_8_bit_generate(output [7:0] sum,
                            output cout,
                            input [7:0] in1, in2,
                            input cin);
    wire [7:0] sum;
    wire cout;
    wire [7:0] in1;
    wire [7:0] in2;
    wire cin;
    wire [7:0] carry;
    wire [7:0] carry_in;
    assign carry_in = {1'b0, cin};
    genvar i;
    generate
        for (i = 0; i < 8; i = i + 1) begin
            if (i == 0)
                full_adder_8_bit fa_8_bit(sum[i], carry[i], in1[i], in2[i], carry_in[i]);
            else
                full_adder_8_bit fa_8_bit(sum[i], carry[i], in1[i], in2[i], carry[i-1]);
        end
    endgenerate
    assign cout = carry[7];
endmodule"
79.534,345.76,0.12748010013219704,210.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,211.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,212.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout,sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,213.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,214.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,215.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,216.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout,sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,217.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1+in2+cin;
endmodule"
79.534,345.76,0.12748010013219704,218.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,219.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum}= in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,220.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout,sum} = in1+in2+cin;
endmodule"
79.534,345.76,0.12748010013219704,221.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,222.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,223.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,224.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout,sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,225.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,226.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,227.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,228.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout,sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,229.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,230.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;

endmodule"
79.534,345.76,0.12748010013219704,231.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,232.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout,sum}=in1+in2+cin;
endmodule"
79.534,345.76,0.12748010013219704,233.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1+in2+cin;
endmodule"
79.534,345.76,0.12748010013219704,234.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
N/A,N/A,-0.5,235.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign sum = in1 + in2 + cin;
assign cout = (in1[7] == in2[7])? 1'b0 : (in1[7] == cin? 1'b1 : in1[7] + in2[7] + cin);
endmodule"
79.534,345.76,0.12748010013219704,236.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,237.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,238.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout,sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,239.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,240.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,241.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,242.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout,sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,243.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,244.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,245.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,246.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout,sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,247.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,248.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1+in2+cin;
endmodule"
79.534,345.76,0.12748010013219704,249.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,250.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout,sum} = in1+in2+cin;
endmodule"
N/A,N/A,-1,251.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign c[0] = cin;
assign cout = c[8];
genvar i;
generate
for(i=0;i<8;i=i+1)
begin: adder_loop
    full_adder FA(sum[i],c[i+1],in1[i],in2[i],c[i]);
end
endgenerate
endmodule

cla_8 CLA(sum,cout,in1,in2,cin);

module full_adder(output sum,
                  output cout,
                  input in1,
                  input in2,
                  input cin);
assign sum = in1 ^ in2 ^ cin;
assign cout = (in1 & in2) | (in1 & cin) | (in2 & cin);
endmodule"
79.534,345.76,0.12748010013219704,252.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,253.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
N/A,N/A,-1,254.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);

full_adder FA0(sum[0], c1, in1[0], in2[0], cin);
full_adder FA1(sum[1], c2, in1[1], in2[1], c1);
full_adder FA2(sum[2], c3, in1[2], in2[2], c2);
full_adder FA3(sum[3], c4, in1[3], in2[3], c3);
full_adder FA4(sum[4], c5, in1[4], in2[4], c4);
full_adder FA5(sum[5], c6, in1[5], in2[5], c5);
full_adder FA6(sum[6], c7, in1[6], in2[6], c6);
full_adder FA7(sum[7], cout, in1[7], in2[7], c7);

endmodule

 or_gate og1(a, b, c);
 and_gate ag1(a, b, c);
 xor_gate xg1(a, b, c);
 not_gate nt1(a, c);

endmodule"
79.534,345.76,0.12748010013219704,255.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum}=in1+in2+cin;
endmodule"
79.534,345.76,0.12748010013219704,256.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout,sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,257.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,258.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,259.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,260.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout,sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,261.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin; 
endmodule"
79.534,345.76,0.12748010013219704,262.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,263.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,264.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout,sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,265.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,266.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1+in2+cin;
endmodule"
79.534,345.76,0.12748010013219704,267.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,268.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout,sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,269.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;

endmodule"
79.534,345.76,0.12748010013219704,270.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,271.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign   {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,272.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,273.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout,sum}= in1+in2+cin;
endmodule"
79.534,345.76,0.12748010013219704,274.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,275.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,276.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,277.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout,sum} = in1+in2+cin;
endmodule"
79.534,345.76,0.12748010013219704,278.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,279.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,280.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,281.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout,sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,282.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1+in2+cin;
endmodule"
79.534,345.76,0.12748010013219704,283.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,284.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,285.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,286.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout,sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,287.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,288.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,289.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum}= in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,290.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout,sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,291.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,292.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,293.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,294.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout,sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,295.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,296.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,297.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1+in2+cin;
endmodule"
79.534,345.76,0.12748010013219704,298.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout,sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,299.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,300.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,301.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;

endmodule"
79.534,345.76,0.12748010013219704,302.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout,sum} = in1+in2+cin;
endmodule"
79.534,345.76,0.12748010013219704,303.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,304.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,305.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
N/A,N/A,-0.5,306.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign #5 {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,307.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout,sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,308.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,309.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,310.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,311.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout,sum}=in1+in2+cin;
endmodule"
79.534,345.76,0.12748010013219704,312.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1+in2+cin;
endmodule"
79.534,345.76,0.12748010013219704,313.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,314.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,315.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout,sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,316.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,317.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,318.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,319.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout,sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,320.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,321.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,322.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,323.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout,sum} = in1 + in2 + cin;

endmodule"
79.534,345.76,0.12748010013219704,324.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum}=in1+in2+cin;
endmodule"
79.534,345.76,0.12748010013219704,325.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
N/A,N/A,-0.5,326.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);

      wire [7:0] sum;
      wire cout;
      wire [7:0] in1;
      wire [7:0] in2;
      wire cin;

      or(sum[0], in1[0], in2[0], cin);
      or(sum[1], in1[1], in2[1], cin);
      or(sum[2], in1[2], in2[2], cin);
      or(sum[3], in1[3], in2[3], cin);
      or(sum[4], in1[4], in2[4], cin);
      or(sum[5], in1[5], in2[5], cin);
      or(sum[6], in1[6], in2[6], cin);
      or(sum[7], in1[7], in2[7], cin);

      and(cout, in1[7], in2[7]);

endmodule"
79.534,345.76,0.12748010013219704,327.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
N/A,N/A,-1,328.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign cout=cout_temp;
assign sum=sum_temp;
endmodule"
79.534,345.76,0.12748010013219704,329.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  assign {cout, sum} = in1 + in2 + cin;
endmodule"
N/A,N/A,-1,330.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  assign cout = c[7];
  assign sum = s[7] + in1 + in2 + c[7];
  full_adder f1(s[0], c[0], in1[0], in2[0], cin);
  full_adder f2(s[1], c[1], in1[1], in2[1], c[0]);
  full_adder f3(s[2], c[2], in1[2], in2[2], c[1]);
  full_adder f4(s[3], c[3], in1[3], in2[3], c[2]);
  full_adder f5(s[4], c[4], in1[4], in2[4], c[3]);
  full_adder f6(s[5], c[5], in1[5], in2[5], c[4]);
  full_adder f7(s[6], c[6], in1[6], in2[6], c[5]);
  full_adder f8(s[7], c[7], in1[7], in2[7], c[6]);
endmodule

blk_mem_gen_0 bmem_0(
 .clka(clk),
 .addra(addr),
 .dina(din),
 .wea(wea),
 .ena(ena),
 .clkb(clk),
 .addrb(addr),
 .doutb(dout)
);

not n1(c[0], cin);

endmodule"
79.534,345.76,0.12748010013219704,331.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout,sum} = in1+in2+cin;
endmodule"
79.534,345.76,0.12748010013219704,332.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1+in2+cin;
endmodule"
79.534,345.76,0.12748010013219704,333.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,334.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
N/A,N/A,-0.5,335.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign sum = in1 + in2 + cin;
assign cout = (in1[7] == in2[7])? 1'b0 : (in1[7] == cin? 1'b1 : in1[7] + in2[7] + cin);
endmodule"
79.534,345.76,0.12748010013219704,336.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout,sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,337.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,338.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,339.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,340.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;

endmodule"
79.534,345.76,0.12748010013219704,341.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout,sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,342.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,343.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,344.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,345.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout,sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,346.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,347.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1+in2+cin;
endmodule"
79.534,345.76,0.12748010013219704,348.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,349.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout,sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,350.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,351.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign   {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,352.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,353.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
    assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,354.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
    assign {cout, sum} = in1 + in2 + cin;
endmodule"
N/A,N/A,-0.5,355.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
    assign sum = in1 + in2 + cin;
    assign cout = (in1[7] == in2[7])? 1'b0 : (in1[7] == cin? 1'b1 : in1[7] + in2[7] + cin);
endmodule"
79.534,345.76,0.12748010013219704,356.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,357.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout,sum}=in1+in2+cin;
endmodule"
79.534,345.76,0.12748010013219704,358.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,359.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,360.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,361.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout,sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,362.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,363.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin; 
endmodule"
79.534,345.76,0.12748010013219704,364.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,365.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout,sum} = in1+in2+cin;
endmodule"
79.534,345.76,0.12748010013219704,366.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum}= in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,367.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1+in2+cin;
endmodule"
79.534,345.76,0.12748010013219704,368.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,369.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout,sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,370.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,371.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,372.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,373.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout,sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,374.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,375.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,376.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,377.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout,sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,378.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;

endmodule"
79.534,345.76,0.12748010013219704,379.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
N/A,N/A,-0.5,380.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);

    wire [7:0] sum;
    wire cout;
    wire [7:0] in1;
    wire [7:0] in2;
    wire cin;

    nand n1(sum[0], in1[0], in2[0], cin);
    nand n2(sum[1], in1[1], in2[1], cin);
    nand n3(sum[2], in1[2], in2[2], cin);
    nand n4(sum[3], in1[3], in2[3], cin);
    nand n5(sum[4], in1[4], in2[4], cin);
    nand n6(sum[5], in1[5], in2[5], cin);
    nand n7(sum[6], in1[6], in2[6], cin);
    nand n8(sum[7], in1[7], in2[7], cin);
    nand n9(cout, in1[7], in2[7], cin);

endmodule"
79.534,345.76,0.12748010013219704,381.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,382.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout,sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,383.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1+in2+cin;
endmodule"
79.534,345.76,0.12748010013219704,384.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,385.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,386.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout,sum} = in1+in2+cin;
endmodule"
79.534,345.76,0.12748010013219704,387.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,388.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,389.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,390.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout,sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,391.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,392.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,393.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,394.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout,sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,395.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,396.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,397.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1+in2+cin;
endmodule"
79.534,345.76,0.12748010013219704,398.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,399.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout,sum}=in1+in2+cin;
endmodule"
79.534,345.76,0.12748010013219704,400.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum}=in1+in2+cin;
endmodule"
79.534,345.76,0.12748010013219704,401.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,402.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,403.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout,sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,404.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,405.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,406.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,407.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout,sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,408.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,409.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,410.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,411.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout,sum} = in1+in2+cin;
endmodule"
79.534,345.76,0.12748010013219704,412.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;

endmodule"
79.534,345.76,0.12748010013219704,413.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1+in2+cin;
endmodule"
79.534,345.76,0.12748010013219704,414.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,415.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout,sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,416.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,417.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,418.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,419.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout,sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,420.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,421.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,422.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,423.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout,sum} = in1 + in2 + cin;
endmodule"
N/A,N/A,-0.5,424.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);

reg [7:0] sum;
reg cout;

always @(in1 or in2 or cin)
begin
    sum = in1 + in2 + cin;
    cout = (in1[7] == in2[7] && in1[7] == cin)? 1'b1 : 1'b0;
end

endmodule"
79.534,345.76,0.12748010013219704,425.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,426.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
N/A,N/A,-0.5,427.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign   cout = cin;
assign   sum = in1 + in2;
endmodule"
79.534,345.76,0.12748010013219704,428.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,429.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout,sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,430.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1+in2+cin;
endmodule"
79.534,345.76,0.12748010013219704,431.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,432.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,433.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout,sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,434.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,435.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum}= in1+in2+cin;
endmodule"
79.534,345.76,0.12748010013219704,436.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
N/A,N/A,-0.5,437.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
    
    wire [7:0] sum;
    wire cout;
    
    FA_8 FA(sum[7:0], cout, in1[7:0], in2[7:0], cin);
    
endmodule

module FA_8(output [7:0] sum,
             output cout,
             input [7:0] in1, in2,
             input cin);
    
    wire [7:0] sum;
    wire cout;
    
    assign sum = in1 ^ in2;
    assign cout = (in1 & in2) | (in1 ^ in2);
    
endmodule"
79.534,345.76,0.12748010013219704,438.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout,sum}= in1+in2+cin;
endmodule"
79.534,345.76,0.12748010013219704,439.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,440.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,441.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,442.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout,sum} = in1+in2+cin;
endmodule"
79.534,345.76,0.12748010013219704,443.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,444.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
N/A,N/A,-1,445.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);

	wire [7:0] sum;
	wire cout;
	wire [7:0] in1;
	wire [7:0] in2;
	wire cin;

	shifter_8 shifter(sum, in1, in2, cin);
	carry_select_adder_8_1_1_1 carry_select_adder(cout, in1, in2, cin);

endmodule

module carry_select_adder_8_1_1_1(output cout,
                                input [7:0] in1, in2,
                                input cin);

	wire [7:0] in1;
	wire [7:0] in2;
	wire cin;

	wire [7:0] sum;
	wire [7:0] carry;

	adder_8 adder_8_1(sum, carry, in1, in2, cin);

	mux_8_1 mux_8_1_1(cout, carry, sum);

endmodule

module shifter_8(output [7:0] sum,
                  input [7:0] in1, in2,
                  input cin);

	wire [7:0] in1;
	wire [7:0] in2;
	wire cin;

	wire [7:0] carry;

	adder_8 adder_8_1(sum, carry, in1, in2, cin);

	mux_8_1 mux_8_1_1(carry, in1, in2);

endmodule

module mux_8_1(output out,
               input [7:0] in1, in2);

	wire [7:0] in1;
	wire [7:0] in2;

	wire [7:0] out;

	assign out = (in1[7] == 0)? in1 : in2;

endmodule"
79.534,345.76,0.12748010013219704,446.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1+in2+cin;
endmodule"
79.534,345.76,0.12748010013219704,447.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout,sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,448.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,449.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;

endmodule"
79.534,345.76,0.12748010013219704,450.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,451.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout,sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,452.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,453.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,454.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,455.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,456.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout,sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,457.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,458.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin; 
endmodule"
79.534,345.76,0.12748010013219704,459.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,460.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout,sum} = in1 + in2 + cin;
endmodule"
N/A,N/A,-0.5,461.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign sum = in1 ^ in2 ^ cin;
assign cout = (in1 & in2) | (in1 & cin) | (in2 & cin);
endmodule"
79.534,345.76,0.12748010013219704,462.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1+in2+cin;
endmodule"
79.534,345.76,0.12748010013219704,463.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,464.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,465.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout,sum} = in1+in2+cin;
endmodule"
79.534,345.76,0.12748010013219704,466.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,467.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,468.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,469.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout,sum} = in1 + in2 + cin;

endmodule"
79.534,345.76,0.12748010013219704,470.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum}=in1+in2+cin;
endmodule"
79.534,345.76,0.12748010013219704,471.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,472.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,473.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout,sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,474.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,475.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,476.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,477.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout,sum}=in1+in2+cin;
endmodule"
79.534,345.76,0.12748010013219704,478.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1+in2+cin;
endmodule"
79.534,345.76,0.12748010013219704,479.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
N/A,N/A,-0.5,480.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire [7:0] sum;
  wire cout;
  wire [7:0] in1;
  wire [7:0] in2;
  wire cin;
  or(sum[0], in1[0], in2[0], cin);
  or(sum[1], in1[1], in2[1], cin);
  or(sum[2], in1[2], in2[2], cin);
  or(sum[3], in1[3], in2[3], cin);
  or(sum[4], in1[4], in2[4], cin);
  or(sum[5], in1[5], in2[5], cin);
  or(sum[6], in1[6], in2[6], cin);
  or(sum[7], in1[7], in2[7], cin);
  and(cout, in1[7], in2[7]);
endmodule"
79.534,345.76,0.12748010013219704,481.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,482.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout,sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,483.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,484.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;

endmodule"
79.534,345.76,0.12748010013219704,485.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,486.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout,sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,487.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,488.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,489.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,490.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout,sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,491.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,492.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,493.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1+in2+cin;
endmodule"
79.534,345.76,0.12748010013219704,494.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout,sum} = in1+in2+cin;
endmodule"
79.534,345.76,0.12748010013219704,495.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,496.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,497.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,498.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout,sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,499.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,500.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
79.534,345.76,0.12748010013219704,501.0,1,"//Design an 8-bit adder.
//There are two 8 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are an 8 bit value, [7:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
assign {cout, sum} = in1 + in2 + cin;
endmodule"
