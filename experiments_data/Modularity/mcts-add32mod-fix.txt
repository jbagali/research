adders/ripple_carry/prompt1_adder_32.v
Prompt str:  //Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
Loading LLM model...
Initializing MCTS tree/LLM env...
Episode not stated yet!
Simulations per episode:  500
********-- EPISODE-1--************
ORIG MODILE:  adder_32
Env seed:  42
Initializing MCTS tree.
Initialize search (creating root node)
Selection: finding leaf node.
Leaf selection - depth:  0
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  198
Getting rollout return of leaf.
Token:  0
Token:  1
Token:  2
Token:  3
Token:  4
Token:  5
Token:  6
Token:  7
Token:  8
Token:  9
Token:  10
Token:  11
Token:  12
Token:  13
Token:  14
Token:  15
Token:  16
Token:  17
Token:  18
Token:  19
Token:  20
Token:  21
Token:  22
Token:  23
Token:  24
Token:  25
Token:  26
Token:  27
Token:  28
Token:  29
Token:  30
Token:  31
Token:  32
Token:  33
Token:  34
Token:  35
Token:  36
Token:  37
Token:  38
Token:  39
Token:  40
Token:  41
Token:  42
Token:  43
Token:  44
Token:  45
Token:  46
Token:  47
Token:  48
Token:  49
Token:  50
Token:  51
Token:  52
Token:  53
Token:  54
Token:  55
Token:  56
Token:  57
Token:  58
Token:  59
Token:  60
Token:  61
Token:  62
Token:  63
Token:  64
Token:  65
Token:  66
Token:  67
Token:  68
Token:  69
Token:  70
Token:  71
Token:  72
Token:  73
Token:  74
Token:  75
Token:  76
Token:  77
Token:  78
Token:  79
Token:  80
Token:  81
Token:  82
Token:  83
Token:  84
Token:  85
Token:  86
Token:  87
Token:  88
Token:  89
Token:  90
Token:  91
Token:  92
Token:  93
Token:  94
Token:  95
Token:  96
Token:  97
Token:  98
Token:  99
Token:  100
Token:  101
Token:  102
Token:  103
Token:  104
Token:  105
Token:  106
Token:  107
Token:  108
Token:  109
Token:  110
Token:  111
Token:  112
Token:  113
Token:  114
Token:  115
Token:  116
Token:  117
Token:  118
Token:  119
Token:  120
Token:  121
Token:  122
Token:  123
Token:  124
Token:  125
Token:  126
Token:  127
Token:  128
Token:  129
Token:  130
Token:  131
Token:  132
Token:  133
Token:  134
Token:  135
Token:  136
Token:  137
Token:  138
Token:  139
Token:  140
Token:  141
Token:  142
Token:  143
Token:  144
Token:  145
Token:  146
Token:  147
Token:  148
Token:  149
Token:  150
Token:  151
Token:  152
Token:  153
Token:  154
Token:  155
Token:  156
Token:  157
Token:  158
Token:  159
Token:  160
Token:  161
Token:  162
Token:  163
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7,c8;
  adder_8 A1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
  adder_8 A2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
  adder_8 A3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
  adder_8 A4(sum[31:24], cout, in1[31:24], in2[31:24], c3);
endmodule
Path:  output_files/3084873_adder_32/3084873_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  164
LLM generates return in:  56.642704  seconds
Running getPromptScore: 
adder_32
output_files/3084873_adder_32/synth_script.sh
Running bash in x seconds:  0.885747

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.5
Backpropogation: incorporating estimates.
Updated num:  1
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [1.60361699e+00 5.46839961e-02 1.05425076e-03 6.07246419e-04
 2.92841223e-04 1.93043528e-04 2.88895651e-01 1.30666627e-04
 1.25329593e-04 1.04487044e-04]  taking action:  0
Adding child.
Leaf selection - depth:  1
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  50286
Getting rollout return of leaf.
Token:  0
Token:  1
Token:  2
Token:  3
Token:  4
Token:  5
Token:  6
Token:  7
Token:  8
Token:  9
Token:  10
Token:  11
Token:  12
Token:  13
Token:  14
Token:  15
Token:  16
Token:  17
Token:  18
Token:  19
Token:  20
Token:  21
Token:  22
Token:  23
Token:  24
Token:  25
Token:  26
Token:  27
Token:  28
Token:  29
Token:  30
Token:  31
Token:  32
Token:  33
Token:  34
Token:  35
Token:  36
Token:  37
Token:  38
Token:  39
Token:  40
Token:  41
Token:  42
Token:  43
Token:  44
Token:  45
Token:  46
Token:  47
Token:  48
Token:  49
Token:  50
Token:  51
Token:  52
Token:  53
Token:  54
Token:  55
Token:  56
Token:  57
Token:  58
Token:  59
Token:  60
Token:  61
Token:  62
Token:  63
Token:  64
Token:  65
Token:  66
Token:  67
Token:  68
Token:  69
Token:  70
Token:  71
Token:  72
Token:  73
Token:  74
Token:  75
Token:  76
Token:  77
Token:  78
Token:  79
Token:  80
Token:  81
Token:  82
Token:  83
Token:  84
Token:  85
Token:  86
Token:  87
Token:  88
Token:  89
Token:  90
Token:  91
Token:  92
Token:  93
Token:  94
Token:  95
Token:  96
Token:  97
Token:  98
Token:  99
Token:  100
Token:  101
Token:  102
Token:  103
Token:  104
Token:  105
Token:  106
Token:  107
Token:  108
Token:  109
Token:  110
Token:  111
Token:  112
Token:  113
Token:  114
Token:  115
Token:  116
Token:  117
Token:  118
Token:  119
Token:  120
Token:  121
Token:  122
Token:  123
Token:  124
Token:  125
Token:  126
Token:  127
Token:  128
Token:  129
Token:  130
Token:  131
Token:  132
Token:  133
Token:  134
Token:  135
Token:  136
Token:  137
Token:  138
Token:  139
Token:  140
Token:  141
Token:  142
Token:  143
Token:  144
Token:  145
Token:  146
Token:  147
Token:  148
Token:  149
Token:  150
Token:  151
Token:  152
Token:  153
Token:  154
Token:  155
Token:  156
Token:  157
Token:  158
Token:  159
Token:  160
Token:  161
Token:  162
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7,c8;
  adder_8 A1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
  adder_8 A2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
  adder_8 A3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
  adder_8 A4(sum[31:24], cout, in1[31:24], in2[31:24], c3);
endmodule
Path:  output_files/3084873_adder_32/3084873_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  163
LLM generates return in:  58.433282  seconds
Running getPromptScore: 
adder_32
output_files/3084873_adder_32/synth_script.sh
Running bash in x seconds:  0.894348

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.5
Backpropogation: incorporating estimates.
Current runs:  2.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [1.23201084e+00 6.69739438e-02 1.29118821e-03 7.43721937e-04
 3.58655786e-04 2.36429071e-04 3.53823467e-01 1.60033281e-04
 1.53496776e-04 1.27969971e-04]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [1.8990551e+00 1.6276212e-02 6.2776725e-03 5.1738494e-03 3.1421955e-03
 2.7783352e-03 2.2867741e-03 1.2476497e-03 9.3482423e-04 6.9946225e-04]  taking action:  0
Adding child.
Leaf selection - depth:  2
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  21809
Getting rollout return of leaf.
Token:  0
Token:  1
Token:  2
Token:  3
Token:  4
Token:  5
Token:  6
Token:  7
Token:  8
Token:  9
Token:  10
Token:  11
Token:  12
Token:  13
Token:  14
Token:  15
Token:  16
Token:  17
Token:  18
Token:  19
Token:  20
Token:  21
Token:  22
Token:  23
Token:  24
Token:  25
Token:  26
Token:  27
Token:  28
Token:  29
Token:  30
Token:  31
Token:  32
Token:  33
Token:  34
Token:  35
Token:  36
Token:  37
Token:  38
Token:  39
Token:  40
Token:  41
Token:  42
Token:  43
Token:  44
Token:  45
Token:  46
Token:  47
Token:  48
Token:  49
Token:  50
Token:  51
Token:  52
Token:  53
Token:  54
Token:  55
Token:  56
Token:  57
Token:  58
Token:  59
Token:  60
Token:  61
Token:  62
Token:  63
Token:  64
Token:  65
Token:  66
Token:  67
Token:  68
Token:  69
Token:  70
Token:  71
Token:  72
Token:  73
Token:  74
Token:  75
Token:  76
Token:  77
Token:  78
Token:  79
Token:  80
Token:  81
Token:  82
Token:  83
Token:  84
Token:  85
Token:  86
Token:  87
Token:  88
Token:  89
Token:  90
Token:  91
Token:  92
Token:  93
Token:  94
Token:  95
Token:  96
Token:  97
Token:  98
Token:  99
Token:  100
Token:  101
Token:  102
Token:  103
Token:  104
Token:  105
Token:  106
Token:  107
Token:  108
Token:  109
Token:  110
Token:  111
Token:  112
Token:  113
Token:  114
Token:  115
Token:  116
Token:  117
Token:  118
Token:  119
Token:  120
Token:  121
Token:  122
Token:  123
Token:  124
Token:  125
Token:  126
Token:  127
Token:  128
Token:  129
Token:  130
Token:  131
Token:  132
Token:  133
Token:  134
Token:  135
Token:  136
Token:  137
Token:  138
Token:  139
Token:  140
Token:  141
Token:  142
Token:  143
Token:  144
Token:  145
Token:  146
Token:  147
Token:  148
Token:  149
Token:  150
Token:  151
Token:  152
Token:  153
Token:  154
Token:  155
Token:  156
Token:  157
Token:  158
Token:  159
Token:  160
Token:  161
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7,c8;
  adder_8 A1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
  adder_8 A2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
  adder_8 A3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
  adder_8 A4(sum[31:24], cout, in1[31:24], in2[31:24], c3);
endmodule
Path:  output_files/3084873_adder_32/3084873_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  162
LLM generates return in:  58.113988  seconds
Running getPromptScore: 
adder_32
output_files/3084873_adder_32/synth_script.sh
Running bash in x seconds:  0.887684

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.5
Backpropogation: incorporating estimates.
Current runs:  3.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [1.08928564e+00 7.73348489e-02 1.49093572e-03 8.58776121e-04
 4.14140030e-04 2.73004776e-04 4.08560148e-01 1.84790516e-04
 1.77242810e-04 1.47766994e-04]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [1.4129291e+00 1.9934209e-02 7.6885475e-03 6.3366457e-03 3.8483879e-03
 3.4027521e-03 2.8007149e-03 1.5280525e-03 1.1449212e-03 8.5666281e-04]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [1.8602318e+00 5.6816567e-02 5.8054845e-03 5.3170985e-03 2.4498841e-03
 1.9770635e-03 1.5510869e-03 8.9558645e-04 5.8298040e-04 5.7734142e-04]  taking action:  0
Adding child.
Leaf selection - depth:  3
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  269
Getting rollout return of leaf.
Token:  0
Token:  1
Token:  2
Token:  3
Token:  4
Token:  5
Token:  6
Token:  7
Token:  8
Token:  9
Token:  10
Token:  11
Token:  12
Token:  13
Token:  14
Token:  15
Token:  16
Token:  17
Token:  18
Token:  19
Token:  20
Token:  21
Token:  22
Token:  23
Token:  24
Token:  25
Token:  26
Token:  27
Token:  28
Token:  29
Token:  30
Token:  31
Token:  32
Token:  33
Token:  34
Token:  35
Token:  36
Token:  37
Token:  38
Token:  39
Token:  40
Token:  41
Token:  42
Token:  43
Token:  44
Token:  45
Token:  46
Token:  47
Token:  48
Token:  49
Token:  50
Token:  51
Token:  52
Token:  53
Token:  54
Token:  55
Token:  56
Token:  57
Token:  58
Token:  59
Token:  60
Token:  61
Token:  62
Token:  63
Token:  64
Token:  65
Token:  66
Token:  67
Token:  68
Token:  69
Token:  70
Token:  71
Token:  72
Token:  73
Token:  74
Token:  75
Token:  76
Token:  77
Token:  78
Token:  79
Token:  80
Token:  81
Token:  82
Token:  83
Token:  84
Token:  85
Token:  86
Token:  87
Token:  88
Token:  89
Token:  90
Token:  91
Token:  92
Token:  93
Token:  94
Token:  95
Token:  96
Token:  97
Token:  98
Token:  99
Token:  100
Token:  101
Token:  102
Token:  103
Token:  104
Token:  105
Token:  106
Token:  107
Token:  108
Token:  109
Token:  110
Token:  111
Token:  112
Token:  113
Token:  114
Token:  115
Token:  116
Token:  117
Token:  118
Token:  119
Token:  120
Token:  121
Token:  122
Token:  123
Token:  124
Token:  125
Token:  126
Token:  127
Token:  128
Token:  129
Token:  130
Token:  131
Token:  132
Token:  133
Token:  134
Token:  135
Token:  136
Token:  137
Token:  138
Token:  139
Token:  140
Token:  141
Token:  142
Token:  143
Token:  144
Token:  145
Token:  146
Token:  147
Token:  148
Token:  149
Token:  150
Token:  151
Token:  152
Token:  153
Token:  154
Token:  155
Token:  156
Token:  157
Token:  158
Token:  159
Token:  160
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7,c8;
  adder_8 A1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
  adder_8 A2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
  adder_8 A3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
  adder_8 A4(sum[31:24], cout, in1[31:24], in2[31:24], c3);
endmodule
Path:  output_files/3084873_adder_32/3084873_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  161
LLM generates return in:  57.711006  seconds
Running getPromptScore: 
adder_32
output_files/3084873_adder_32/synth_script.sh
Running bash in x seconds:  0.883339

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.5
Backpropogation: incorporating estimates.
Current runs:  4.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [1.00888527e+00 8.64629896e-02 1.66691681e-03 9.60140892e-04
 4.63022629e-04 3.05228618e-04 4.56784132e-01 2.06602078e-04
 1.98163486e-04 1.65208522e-04]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [1.2285565e+00 2.3018040e-02 8.8779693e-03 7.3169284e-03 4.4437353e-03
 3.9291596e-03 3.2339869e-03 1.7644430e-03 1.3220410e-03 9.8918891e-04]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [1.3891547e+00 6.9585800e-02 7.1102376e-03 6.5120892e-03 3.0004829e-03
 2.4213984e-03 1.8996858e-03 1.0968649e-03 7.1400224e-04 7.0709590e-04]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [1.3217633e+00 5.4759842e-01 3.8066108e-02 3.0149205e-02 1.8341950e-03
 1.4529505e-03 8.9485350e-04 7.6428836e-04 5.7649269e-04 4.7349781e-04]  taking action:  0
Adding child.
Leaf selection - depth:  4
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  16
Getting rollout return of leaf.
Token:  0
Token:  1
Token:  2
Token:  3
Token:  4
Token:  5
Token:  6
Token:  7
Token:  8
Token:  9
Token:  10
Token:  11
Token:  12
Token:  13
Token:  14
Token:  15
Token:  16
Token:  17
Token:  18
Token:  19
Token:  20
Token:  21
Token:  22
Token:  23
Token:  24
Token:  25
Token:  26
Token:  27
Token:  28
Token:  29
Token:  30
Token:  31
Token:  32
Token:  33
Token:  34
Token:  35
Token:  36
Token:  37
Token:  38
Token:  39
Token:  40
Token:  41
Token:  42
Token:  43
Token:  44
Token:  45
Token:  46
Token:  47
Token:  48
Token:  49
Token:  50
Token:  51
Token:  52
Token:  53
Token:  54
Token:  55
Token:  56
Token:  57
Token:  58
Token:  59
Token:  60
Token:  61
Token:  62
Token:  63
Token:  64
Token:  65
Token:  66
Token:  67
Token:  68
Token:  69
Token:  70
Token:  71
Token:  72
Token:  73
Token:  74
Token:  75
Token:  76
Token:  77
Token:  78
Token:  79
Token:  80
Token:  81
Token:  82
Token:  83
Token:  84
Token:  85
Token:  86
Token:  87
Token:  88
Token:  89
Token:  90
Token:  91
Token:  92
Token:  93
Token:  94
Token:  95
Token:  96
Token:  97
Token:  98
Token:  99
Token:  100
Token:  101
Token:  102
Token:  103
Token:  104
Token:  105
Token:  106
Token:  107
Token:  108
Token:  109
Token:  110
Token:  111
Token:  112
Token:  113
Token:  114
Token:  115
Token:  116
Token:  117
Token:  118
Token:  119
Token:  120
Token:  121
Token:  122
Token:  123
Token:  124
Token:  125
Token:  126
Token:  127
Token:  128
Token:  129
Token:  130
Token:  131
Token:  132
Token:  133
Token:  134
Token:  135
Token:  136
Token:  137
Token:  138
Token:  139
Token:  140
Token:  141
Token:  142
Token:  143
Token:  144
Token:  145
Token:  146
Token:  147
Token:  148
Token:  149
Token:  150
Token:  151
Token:  152
Token:  153
Token:  154
Token:  155
Token:  156
Token:  157
Token:  158
Token:  159
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7,c8;
  adder_8 A1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
  adder_8 A2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
  adder_8 A3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
  adder_8 A4(sum[31:24], cout, in1[31:24], in2[31:24], c3);
endmodule
Path:  output_files/3084873_adder_32/3084873_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  160
LLM generates return in:  57.319599  seconds
Running getPromptScore: 
adder_32
output_files/3084873_adder_32/synth_script.sh
Running bash in x seconds:  0.887706

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.5
Backpropogation: incorporating estimates.
Current runs:  5.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [9.55509226e-01 9.47154596e-02 1.82601588e-03 1.05178165e-03
 5.07215877e-04 3.34361199e-04 5.00381946e-01 2.26321237e-04
 2.17077223e-04 1.80976868e-04]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [1.1256673e+00 2.5734952e-02 9.9258712e-03 8.1805745e-03 4.9682469e-03
 4.3929336e-03 3.6157072e-03 1.9727072e-03 1.4780868e-03 1.1059468e-03]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [1.2102550e+00 8.0350757e-02 8.2101952e-03 7.5195124e-03 3.4646592e-03
 2.7959899e-03 2.1935680e-03 1.2665505e-03 8.2445878e-04 8.1648404e-04]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [1.0594114e+00 6.7066836e-01 4.6621270e-02 3.6925085e-02 2.2464211e-03
 1.7794938e-03 1.0959673e-03 9.3605829e-04 7.0605648e-04 5.7991402e-04]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [1.8839172e+00 1.9475173e-02 1.5463007e-02 1.1041219e-02 5.4724347e-03
 1.8757037e-03 1.5785493e-03 1.4683641e-03 1.3002041e-03 9.9046458e-04]  taking action:  0
Adding child.
Leaf selection - depth:  5
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  11
Getting rollout return of leaf.
Token:  0
Token:  1
Token:  2
Token:  3
Token:  4
Token:  5
Token:  6
Token:  7
Token:  8
Token:  9
Token:  10
Token:  11
Token:  12
Token:  13
Token:  14
Token:  15
Token:  16
Token:  17
Token:  18
Token:  19
Token:  20
Token:  21
Token:  22
Token:  23
Token:  24
Token:  25
Token:  26
Token:  27
Token:  28
Token:  29
Token:  30
Token:  31
Token:  32
Token:  33
Token:  34
Token:  35
Token:  36
Token:  37
Token:  38
Token:  39
Token:  40
Token:  41
Token:  42
Token:  43
Token:  44
Token:  45
Token:  46
Token:  47
Token:  48
Token:  49
Token:  50
Token:  51
Token:  52
Token:  53
Token:  54
Token:  55
Token:  56
Token:  57
Token:  58
Token:  59
Token:  60
Token:  61
Token:  62
Token:  63
Token:  64
Token:  65
Token:  66
Token:  67
Token:  68
Token:  69
Token:  70
Token:  71
Token:  72
Token:  73
Token:  74
Token:  75
Token:  76
Token:  77
Token:  78
Token:  79
Token:  80
Token:  81
Token:  82
Token:  83
Token:  84
Token:  85
Token:  86
Token:  87
Token:  88
Token:  89
Token:  90
Token:  91
Token:  92
Token:  93
Token:  94
Token:  95
Token:  96
Token:  97
Token:  98
Token:  99
Token:  100
Token:  101
Token:  102
Token:  103
Token:  104
Token:  105
Token:  106
Token:  107
Token:  108
Token:  109
Token:  110
Token:  111
Token:  112
Token:  113
Token:  114
Token:  115
Token:  116
Token:  117
Token:  118
Token:  119
Token:  120
Token:  121
Token:  122
Token:  123
Token:  124
Token:  125
Token:  126
Token:  127
Token:  128
Token:  129
Token:  130
Token:  131
Token:  132
Token:  133
Token:  134
Token:  135
Token:  136
Token:  137
Token:  138
Token:  139
Token:  140
Token:  141
Token:  142
Token:  143
Token:  144
Token:  145
Token:  146
Token:  147
Token:  148
Token:  149
Token:  150
Token:  151
Token:  152
Token:  153
Token:  154
Token:  155
Token:  156
Token:  157
Token:  158
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7,c8;
  adder_8 A1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
  adder_8 A2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
  adder_8 A3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
  adder_8 A4(sum[31:24], cout, in1[31:24], in2[31:24], c3);
endmodule
Path:  output_files/3084873_adder_32/3084873_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  159
LLM generates return in:  57.011463  seconds
Running getPromptScore: 
adder_32
output_files/3084873_adder_32/synth_script.sh
Running bash in x seconds:  0.881727

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.5
Backpropogation: incorporating estimates.
Current runs:  6.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [9.16682103e-01 1.02304389e-01 1.97232257e-03 1.13605402e-03
 5.47855763e-04 3.61151372e-04 5.40474274e-01 2.44454875e-04
 2.34470199e-04 1.95477359e-04]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [1.057852   0.02819123 0.01087325 0.00896137 0.00544244 0.00481222
 0.00396081 0.00216099 0.00161916 0.0012115 ]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [1.1103212e+00 8.9834876e-02 9.1792764e-03 8.4070703e-03 3.8736067e-03
 3.1260117e-03 2.4524836e-03 1.4160465e-03 9.2177291e-04 9.1285683e-04]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [9.5641851e-01 7.7442110e-01 5.3833604e-02 4.2637415e-02 2.5939434e-03
 2.0547824e-03 1.2655139e-03 1.0808669e-03 8.1528380e-04 6.6962698e-04]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [1.4036590e+00 2.3852119e-02 1.8938238e-02 1.3522677e-02 6.7023365e-03
 2.2972585e-03 1.9333201e-03 1.7983716e-03 1.5924183e-03 1.2130665e-03]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [1.9283082e+00 2.0348491e-02 1.1218865e-03 4.2508330e-04 3.9913386e-04
 2.6040585e-04 1.2374781e-04 8.6005850e-05 4.0448140e-05 3.9877297e-05]  taking action:  0
Adding child.
Leaf selection - depth:  6
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  66
Getting rollout return of leaf.
Token:  0
Token:  1
Token:  2
Token:  3
Token:  4
Token:  5
Token:  6
Token:  7
Token:  8
Token:  9
Token:  10
Token:  11
Token:  12
Token:  13
Token:  14
Token:  15
Token:  16
Token:  17
Token:  18
Token:  19
Token:  20
Token:  21
Token:  22
Token:  23
Token:  24
Token:  25
Token:  26
Token:  27
Token:  28
Token:  29
Token:  30
Token:  31
Token:  32
Token:  33
Token:  34
Token:  35
Token:  36
Token:  37
Token:  38
Token:  39
Token:  40
Token:  41
Token:  42
Token:  43
Token:  44
Token:  45
Token:  46
Token:  47
Token:  48
Token:  49
Token:  50
Token:  51
Token:  52
Token:  53
Token:  54
Token:  55
Token:  56
Token:  57
Token:  58
Token:  59
Token:  60
Token:  61
Token:  62
Token:  63
Token:  64
Token:  65
Token:  66
Token:  67
Token:  68
Token:  69
Token:  70
Token:  71
Token:  72
Token:  73
Token:  74
Token:  75
Token:  76
Token:  77
Token:  78
Token:  79
Token:  80
Token:  81
Token:  82
Token:  83
Token:  84
Token:  85
Token:  86
Token:  87
Token:  88
Token:  89
Token:  90
Token:  91
Token:  92
Token:  93
Token:  94
Token:  95
Token:  96
Token:  97
Token:  98
Token:  99
Token:  100
Token:  101
Token:  102
Token:  103
Token:  104
Token:  105
Token:  106
Token:  107
Token:  108
Token:  109
Token:  110
Token:  111
Token:  112
Token:  113
Token:  114
Token:  115
Token:  116
Token:  117
Token:  118
Token:  119
Token:  120
Token:  121
Token:  122
Token:  123
Token:  124
Token:  125
Token:  126
Token:  127
Token:  128
Token:  129
Token:  130
Token:  131
Token:  132
Token:  133
Token:  134
Token:  135
Token:  136
Token:  137
Token:  138
Token:  139
Token:  140
Token:  141
Token:  142
Token:  143
Token:  144
Token:  145
Token:  146
Token:  147
Token:  148
Token:  149
Token:  150
Token:  151
Token:  152
Token:  153
Token:  154
Token:  155
Token:  156
Token:  157
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7,c8;
  adder_8 A1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
  adder_8 A2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
  adder_8 A3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
  adder_8 A4(sum[31:24], cout, in1[31:24], in2[31:24], c3);
endmodule
Path:  output_files/3084873_adder_32/3084873_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  158
LLM generates return in:  56.706067  seconds
Running getPromptScore: 
adder_32
output_files/3084873_adder_32/synth_script.sh
Running bash in x seconds:  0.89286

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.5
Backpropogation: incorporating estimates.
Current runs:  7.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [8.86747716e-01 1.09367992e-01 2.10850152e-03 1.21449284e-03
 5.85682447e-04 3.86087057e-04 5.77791302e-01 2.61333254e-04
 2.50659186e-04 2.08974087e-04]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [1.0088011  0.03045001 0.01174445 0.00967939 0.00587851 0.00519779
 0.00427816 0.00233414 0.0017489  0.00130857]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [1.0444032e+00 9.8409176e-02 1.0055394e-02 9.2094839e-03 4.2433236e-03
 3.4243744e-03 2.6865613e-03 1.5512012e-03 1.0097516e-03 9.9998456e-04]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [8.9747280e-01 8.6582905e-01 6.0187798e-02 4.7670078e-02 2.9001168e-03
 2.2973164e-03 1.4148875e-03 1.2084460e-03 9.1151497e-04 7.4866571e-04]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [1.2214204  0.02754205 0.02186799 0.01561464 0.00773919 0.00265265
 0.00223241 0.00207658 0.00183877 0.00140073]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [1.43084288e+00 2.49217097e-02 1.37402478e-03 5.20618574e-04
 4.88837191e-04 3.18930746e-04 1.51559507e-04 1.05335224e-04
 4.95386557e-05 4.88395126e-05]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [1.6160582e+00 3.0819958e-01 2.4974847e-02 1.0806603e-03 1.3850933e-04
 8.9894864e-05 5.4453736e-05 5.3569034e-05 4.3727774e-05 4.3513784e-05]  taking action:  0
Adding child.
Leaf selection - depth:  7
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  17
Getting rollout return of leaf.
Token:  0
Token:  1
Token:  2
Token:  3
Token:  4
Token:  5
Token:  6
Token:  7
Token:  8
Token:  9
Token:  10
Token:  11
Token:  12
Token:  13
Token:  14
Token:  15
Token:  16
Token:  17
Token:  18
Token:  19
Token:  20
Token:  21
Token:  22
Token:  23
Token:  24
Token:  25
Token:  26
Token:  27
Token:  28
Token:  29
Token:  30
Token:  31
Token:  32
Token:  33
Token:  34
Token:  35
Token:  36
Token:  37
Token:  38
Token:  39
Token:  40
Token:  41
Token:  42
Token:  43
Token:  44
Token:  45
Token:  46
Token:  47
Token:  48
Token:  49
Token:  50
Token:  51
Token:  52
Token:  53
Token:  54
Token:  55
Token:  56
Token:  57
Token:  58
Token:  59
Token:  60
Token:  61
Token:  62
Token:  63
Token:  64
Token:  65
Token:  66
Token:  67
Token:  68
Token:  69
Token:  70
Token:  71
Token:  72
Token:  73
Token:  74
Token:  75
Token:  76
Token:  77
Token:  78
Token:  79
Token:  80
Token:  81
Token:  82
Token:  83
Token:  84
Token:  85
Token:  86
Token:  87
Token:  88
Token:  89
Token:  90
Token:  91
Token:  92
Token:  93
Token:  94
Token:  95
Token:  96
Token:  97
Token:  98
Token:  99
Token:  100
Token:  101
Token:  102
Token:  103
Token:  104
Token:  105
Token:  106
Token:  107
Token:  108
Token:  109
Token:  110
Token:  111
Token:  112
Token:  113
Token:  114
Token:  115
Token:  116
Token:  117
Token:  118
Token:  119
Token:  120
Token:  121
Token:  122
Token:  123
Token:  124
Token:  125
Token:  126
Token:  127
Token:  128
Token:  129
Token:  130
Token:  131
Token:  132
Token:  133
Token:  134
Token:  135
Token:  136
Token:  137
Token:  138
Token:  139
Token:  140
Token:  141
Token:  142
Token:  143
Token:  144
Token:  145
Token:  146
Token:  147
Token:  148
Token:  149
Token:  150
Token:  151
Token:  152
Token:  153
Token:  154
Token:  155
Token:  156
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7,c8;
  adder_8 A1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
  adder_8 A2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
  adder_8 A3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
  adder_8 A4(sum[31:24], cout, in1[31:24], in2[31:24], c3);
endmodule
Path:  output_files/3084873_adder_32/3084873_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  157
LLM generates return in:  56.437585  seconds
Running getPromptScore: 
adder_32
output_files/3084873_adder_32/synth_script.sh
Running bash in x seconds:  0.88716

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.5
Backpropogation: incorporating estimates.
Current runs:  8.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [8.62723168e-01 1.16002273e-01 2.23640358e-03 1.28816418e-03
 6.21210045e-04 4.09507164e-04 6.12840222e-01 2.77185774e-04
 2.65864215e-04 2.21650491e-04]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [0.9711586  0.03255242 0.01255534 0.0103477  0.00628439 0.00555667
 0.00457355 0.0024953  0.00186965 0.00139892]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.9966959  0.10629407 0.01086107 0.00994738 0.00458331 0.00369875
 0.00290182 0.00167549 0.00109066 0.00108011]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [8.5787225e-01 9.4846821e-01 6.5932430e-02 5.2219953e-02 3.1769187e-03
 2.5165840e-03 1.5499316e-03 1.3237862e-03 9.9851459e-04 8.2012219e-04]  taking action:  1
Adding child.
Leaf selection - depth:  4
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  22
Getting rollout return of leaf.
Token:  0
Token:  1
Token:  2
Token:  3
Token:  4
Token:  5
Token:  6
Token:  7
Token:  8
Token:  9
Token:  10
Token:  11
Token:  12
Token:  13
Token:  14
Token:  15
Token:  16
Token:  17
Token:  18
Token:  19
Token:  20
Token:  21
Token:  22
Token:  23
Token:  24
Token:  25
Token:  26
Token:  27
Token:  28
Token:  29
Token:  30
Token:  31
Token:  32
Token:  33
Token:  34
Token:  35
Token:  36
Token:  37
Token:  38
Token:  39
Token:  40
Token:  41
Token:  42
Token:  43
Token:  44
Token:  45
Token:  46
Token:  47
Token:  48
Token:  49
Token:  50
Token:  51
Token:  52
Token:  53
Token:  54
Token:  55
Token:  56
Token:  57
Token:  58
Token:  59
Token:  60
Token:  61
Token:  62
Token:  63
Token:  64
Token:  65
Token:  66
Token:  67
Token:  68
Token:  69
Token:  70
Token:  71
Token:  72
Token:  73
Token:  74
Token:  75
Token:  76
Token:  77
Token:  78
Token:  79
Token:  80
Token:  81
Token:  82
Token:  83
Token:  84
Token:  85
Token:  86
Token:  87
Token:  88
Token:  89
Token:  90
Token:  91
Token:  92
Token:  93
Token:  94
Token:  95
Token:  96
Token:  97
Token:  98
Token:  99
Token:  100
Token:  101
Token:  102
Token:  103
Token:  104
Token:  105
Token:  106
Token:  107
Token:  108
Token:  109
Token:  110
Token:  111
Token:  112
Token:  113
Token:  114
Token:  115
Token:  116
Token:  117
Token:  118
Token:  119
Token:  120
Token:  121
Token:  122
Token:  123
Token:  124
Token:  125
Token:  126
Token:  127
Token:  128
Token:  129
Token:  130
Token:  131
Token:  132
Token:  133
Token:  134
Token:  135
Token:  136
Token:  137
Token:  138
Token:  139
Token:  140
Token:  141
Token:  142
Token:  143
Token:  144
Token:  145
Token:  146
Token:  147
Token:  148
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
  wire [7:0] c;
  adder_8 A1(sum[7:0], c[0], in1[7:0], in2[7:0], cin);
  adder_8 A2(sum[15:8], c[1], in1[15:8], in2[15:8], c[0]);
  adder_8 A3(sum[23:16], c[2], in1[23:16], in2[23:16], c[1]);
  adder_8 A4(sum[31:24], cout, in1[31:24], in2[31:24], c[2]);
endmodule
Path:  output_files/3084873_adder_32/3084873_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  149
LLM generates return in:  52.933503  seconds
Running getPromptScore: 
adder_32
output_files/3084873_adder_32/synth_script.sh
Running bash in x seconds:  0.905071

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.5
Backpropogation: incorporating estimates.
Current runs:  9.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [8.42866292e-01 1.22277133e-01 2.35737636e-03 1.35784427e-03
 6.54812882e-04 4.31658452e-04 6.45990314e-01 2.92179460e-04
 2.80245490e-04 2.33640132e-04]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [0.941063   0.03452706 0.01331695 0.01097539 0.0066656  0.00589374
 0.00485098 0.00264666 0.00198306 0.00148378]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.9600662  0.11363313 0.01161097 0.0106342  0.00489977 0.00395413
 0.00310217 0.00179117 0.00116596 0.00115468]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [8.9455855e-01 7.6223141e-01 7.1215168e-02 5.6403998e-02 3.4314648e-03
 2.7182216e-03 1.6741175e-03 1.4298526e-03 1.0785190e-03 8.8583329e-04]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [1.1196836  0.03079295 0.02444916 0.0174577  0.00865268 0.00296575
 0.00249591 0.00232169 0.0020558  0.00156606]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [1.24234653e+00 2.87771113e-02 1.58658717e-03 6.01158536e-04
 5.64460526e-04 3.68269510e-04 1.75005829e-04 1.21630634e-04
 5.72023091e-05 5.63950125e-05]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [1.2396295e+00 3.7746587e-01 3.0587815e-02 1.3235331e-03 1.6963859e-04
 1.1009828e-04 6.6691937e-05 6.5608401e-05 5.3555366e-05 5.3293286e-05]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [1.9484183e+00 2.1421453e-03 7.2642445e-04 1.0226847e-04 5.9526283e-05
 4.8572445e-05 2.7267259e-05 1.4497008e-05 1.0407922e-05 5.9217555e-06]  taking action:  0
Adding child.
Leaf selection - depth:  8
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  11
Getting rollout return of leaf.
Token:  0
Token:  1
Token:  2
Token:  3
Token:  4
Token:  5
Token:  6
Token:  7
Token:  8
Token:  9
Token:  10
Token:  11
Token:  12
Token:  13
Token:  14
Token:  15
Token:  16
Token:  17
Token:  18
Token:  19
Token:  20
Token:  21
Token:  22
Token:  23
Token:  24
Token:  25
Token:  26
Token:  27
Token:  28
Token:  29
Token:  30
Token:  31
Token:  32
Token:  33
Token:  34
Token:  35
Token:  36
Token:  37
Token:  38
Token:  39
Token:  40
Token:  41
Token:  42
Token:  43
Token:  44
Token:  45
Token:  46
Token:  47
Token:  48
Token:  49
Token:  50
Token:  51
Token:  52
Token:  53
Token:  54
Token:  55
Token:  56
Token:  57
Token:  58
Token:  59
Token:  60
Token:  61
Token:  62
Token:  63
Token:  64
Token:  65
Token:  66
Token:  67
Token:  68
Token:  69
Token:  70
Token:  71
Token:  72
Token:  73
Token:  74
Token:  75
Token:  76
Token:  77
Token:  78
Token:  79
Token:  80
Token:  81
Token:  82
Token:  83
Token:  84
Token:  85
Token:  86
Token:  87
Token:  88
Token:  89
Token:  90
Token:  91
Token:  92
Token:  93
Token:  94
Token:  95
Token:  96
Token:  97
Token:  98
Token:  99
Token:  100
Token:  101
Token:  102
Token:  103
Token:  104
Token:  105
Token:  106
Token:  107
Token:  108
Token:  109
Token:  110
Token:  111
Token:  112
Token:  113
Token:  114
Token:  115
Token:  116
Token:  117
Token:  118
Token:  119
Token:  120
Token:  121
Token:  122
Token:  123
Token:  124
Token:  125
Token:  126
Token:  127
Token:  128
Token:  129
Token:  130
Token:  131
Token:  132
Token:  133
Token:  134
Token:  135
Token:  136
Token:  137
Token:  138
Token:  139
Token:  140
Token:  141
Token:  142
Token:  143
Token:  144
Token:  145
Token:  146
Token:  147
Token:  148
Token:  149
Token:  150
Token:  151
Token:  152
Token:  153
Token:  154
Token:  155
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7,c8;
  adder_8 A1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
  adder_8 A2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
  adder_8 A3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
  adder_8 A4(sum[31:24], cout, in1[31:24], in2[31:24], c3);
endmodule
Path:  output_files/3084873_adder_32/3084873_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  156
LLM generates return in:  56.185928  seconds
Running getPromptScore: 
adder_32
output_files/3084873_adder_32/synth_script.sh
Running bash in x seconds:  0.890022

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.5
Backpropogation: incorporating estimates.
Current runs:  10.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [8.26081508e-01 1.28245339e-01 2.47243719e-03 1.42411909e-03
 6.86773545e-04 4.52727204e-04 6.77520358e-01 3.06440403e-04
 2.93923949e-04 2.45043838e-04]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [0.91626847 0.03639472 0.0140373  0.01156908 0.00702616 0.00621255
 0.00511338 0.00278983 0.00209033 0.00156405]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.93076843 0.12052613 0.01231529 0.01127927 0.00519699 0.00419398
 0.00329035 0.00189983 0.00123669 0.00122473]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.8572544  0.7975984  0.07613222 0.06029841 0.00366839 0.0029059
 0.00178971 0.00152858 0.00115299 0.000947  ]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [1.052608   0.03373199 0.02678271 0.01912395 0.00947853 0.00324881
 0.00273413 0.00254328 0.00225202 0.00171553]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [1.1372308e+00 3.2173786e-02 1.7738583e-03 6.7211571e-04 6.3108600e-04
 4.1173780e-04 1.9566246e-04 1.3598718e-04 6.3954125e-05 6.3051535e-05]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [1.0951505e+00 4.3586004e-01 3.5319764e-02 1.5282844e-03 1.9588177e-04
 1.2713054e-04 7.7009208e-05 7.5758056e-05 6.1840408e-05 6.1537787e-05]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [1.44315767e+00 2.62358133e-03 8.89684597e-04 1.25252787e-04
 7.29045132e-05 5.94888552e-05 3.33954376e-05 1.77551374e-05
 1.27470485e-05 7.25263999e-06]  taking action:  0
Leaf selection - depth:  8
Leaf selection - action scores:  [1.9274362e+00 2.3182519e-02 3.5469845e-04 2.2651177e-04 1.6616139e-04
 2.7094284e-05 2.6166283e-05 1.6977694e-05 1.6746006e-05 1.6411337e-05]  taking action:  0
Adding child.
Leaf selection - depth:  9
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  66
Getting rollout return of leaf.
Token:  0
Token:  1
Token:  2
Token:  3
Token:  4
Token:  5
Token:  6
Token:  7
Token:  8
Token:  9
Token:  10
Token:  11
Token:  12
Token:  13
Token:  14
Token:  15
Token:  16
Token:  17
Token:  18
Token:  19
Token:  20
Token:  21
Token:  22
Token:  23
Token:  24
Token:  25
Token:  26
Token:  27
Token:  28
Token:  29
Token:  30
Token:  31
Token:  32
Token:  33
Token:  34
Token:  35
Token:  36
Token:  37
Token:  38
Token:  39
Token:  40
Token:  41
Token:  42
Token:  43
Token:  44
Token:  45
Token:  46
Token:  47
Token:  48
Token:  49
Token:  50
Token:  51
Token:  52
Token:  53
Token:  54
Token:  55
Token:  56
Token:  57
Token:  58
Token:  59
Token:  60
Token:  61
Token:  62
Token:  63
Token:  64
Token:  65
Token:  66
Token:  67
Token:  68
Token:  69
Token:  70
Token:  71
Token:  72
Token:  73
Token:  74
Token:  75
Token:  76
Token:  77
Token:  78
Token:  79
Token:  80
Token:  81
Token:  82
Token:  83
Token:  84
Token:  85
Token:  86
Token:  87
Token:  88
Token:  89
Token:  90
Token:  91
Token:  92
Token:  93
Token:  94
Token:  95
Token:  96
Token:  97
Token:  98
Token:  99
Token:  100
Token:  101
Token:  102
Token:  103
Token:  104
Token:  105
Token:  106
Token:  107
Token:  108
Token:  109
Token:  110
Token:  111
Token:  112
Token:  113
Token:  114
Token:  115
Token:  116
Token:  117
Token:  118
Token:  119
Token:  120
Token:  121
Token:  122
Token:  123
Token:  124
Token:  125
Token:  126
Token:  127
Token:  128
Token:  129
Token:  130
Token:  131
Token:  132
Token:  133
Token:  134
Token:  135
Token:  136
Token:  137
Token:  138
Token:  139
Token:  140
Token:  141
Token:  142
Token:  143
Token:  144
Token:  145
Token:  146
Token:  147
Token:  148
Token:  149
Token:  150
Token:  151
Token:  152
Token:  153
Token:  154
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7,c8;
  adder_8 A1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
  adder_8 A2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
  adder_8 A3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
  adder_8 A4(sum[31:24], cout, in1[31:24], in2[31:24], c3);
endmodule
Path:  output_files/3084873_adder_32/3084873_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  155
LLM generates return in:  55.816664  seconds
Running getPromptScore: 
adder_32
output_files/3084873_adder_32/synth_script.sh
Running bash in x seconds:  0.887779

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.5
Backpropogation: incorporating estimates.
Current runs:  11.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [8.11640320e-01 1.33947888e-01 2.58237642e-03 1.48744387e-03
 7.17311573e-04 4.72858142e-04 7.07646934e-01 3.20066562e-04
 3.06993553e-04 2.55939942e-04]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [0.89536786 0.03817111 0.01472245 0.01213375 0.0073691  0.00651577
 0.00536296 0.002926   0.00219236 0.00164038]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.90662277 0.1270457  0.01298146 0.01188939 0.00547811 0.00442085
 0.00346834 0.00200259 0.00130358 0.00129097]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.8291261  0.8308158  0.08075041 0.06395612 0.00389092 0.00308217
 0.00189827 0.0016213  0.00122293 0.00100444]  taking action:  1
Leaf selection - depth:  4
Leaf selection - action scores:  [1.3115     0.4650361  0.06371799 0.0275797  0.01136038 0.00964026
 0.00962754 0.00903879 0.00548322 0.00537676]  taking action:  0
Adding child.
Leaf selection - depth:  5
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  25
Getting rollout return of leaf.
Token:  0
Token:  1
Token:  2
Token:  3
Token:  4
Token:  5
Token:  6
Token:  7
Token:  8
Token:  9
Token:  10
Token:  11
Token:  12
Token:  13
Token:  14
Token:  15
Token:  16
Token:  17
Token:  18
Token:  19
Token:  20
Token:  21
Token:  22
Token:  23
Token:  24
Token:  25
Token:  26
Token:  27
Token:  28
Token:  29
Token:  30
Token:  31
Token:  32
Token:  33
Token:  34
Token:  35
Token:  36
Token:  37
Token:  38
Token:  39
Token:  40
Token:  41
Token:  42
Token:  43
Token:  44
Token:  45
Token:  46
Token:  47
Token:  48
Token:  49
Token:  50
Token:  51
Token:  52
Token:  53
Token:  54
Token:  55
Token:  56
Token:  57
Token:  58
Token:  59
Token:  60
Token:  61
Token:  62
Token:  63
Token:  64
Token:  65
Token:  66
Token:  67
Token:  68
Token:  69
Token:  70
Token:  71
Token:  72
Token:  73
Token:  74
Token:  75
Token:  76
Token:  77
Token:  78
Token:  79
Token:  80
Token:  81
Token:  82
Token:  83
Token:  84
Token:  85
Token:  86
Token:  87
Token:  88
Token:  89
Token:  90
Token:  91
Token:  92
Token:  93
Token:  94
Token:  95
Token:  96
Token:  97
Token:  98
Token:  99
Token:  100
Token:  101
Token:  102
Token:  103
Token:  104
Token:  105
Token:  106
Token:  107
Token:  108
Token:  109
Token:  110
Token:  111
Token:  112
Token:  113
Token:  114
Token:  115
Token:  116
Token:  117
Token:  118
Token:  119
Token:  120
Token:  121
Token:  122
Token:  123
Token:  124
Token:  125
Token:  126
Token:  127
Token:  128
Token:  129
Token:  130
Token:  131
Token:  132
Token:  133
Token:  134
Token:  135
Token:  136
Token:  137
Token:  138
Token:  139
Token:  140
Token:  141
Token:  142
Token:  143
Token:  144
Token:  145
Token:  146
Token:  147
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
  wire [7:0] c;
  adder_8 A1(sum[7:0], c[0], in1[7:0], in2[7:0], cin);
  adder_8 A2(sum[15:8], c[1], in1[15:8], in2[15:8], c[0]);
  adder_8 A3(sum[23:16], c[2], in1[23:16], in2[23:16], c[1]);
  adder_8 A4(sum[31:24], cout, in1[31:24], in2[31:24], c[2]);
endmodule
Path:  output_files/3084873_adder_32/3084873_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  148
LLM generates return in:  52.671306  seconds
Running getPromptScore: 
adder_32
output_files/3084873_adder_32/synth_script.sh
Running bash in x seconds:  0.895296

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.5
Backpropogation: incorporating estimates.
Current runs:  12.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [7.99036440e-01 1.39417382e-01 2.68782259e-03 1.54818067e-03
 7.46601556e-04 4.92166359e-04 7.36542281e-01 3.33135840e-04
 3.19529020e-04 2.66390737e-04]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [0.87742877 0.03986842 0.01537709 0.01267329 0.00769678 0.0068055
 0.00560143 0.0030561  0.00228984 0.00171333]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.886263   0.13324668 0.01361507 0.0124697  0.00574549 0.00463662
 0.00363762 0.00210034 0.00136721 0.00135399]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.8507932  0.74148905 0.0851184  0.06741567 0.00410138 0.0032489
 0.00200095 0.001709   0.00128908 0.00105877]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [1.0040811  0.03643471 0.02892864 0.02065623 0.01023799 0.00350912
 0.0029532  0.00274706 0.00243246 0.00185299]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [1.0679855e+00 3.5244618e-02 1.9431644e-03 7.3626585e-04 6.9132011e-04
 4.5103618e-04 2.1433749e-04 1.4896649e-04 7.0058231e-05 6.9069501e-05]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [1.0138030e+00 4.8730633e-01 3.9488699e-02 1.7086738e-03 2.1900247e-04
 1.4213625e-04 8.6098909e-05 8.4700077e-05 6.9139678e-05 6.8801332e-05]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [1.2518264e+00 3.0294508e-03 1.0273192e-03 1.4462945e-04 8.4182873e-05
 6.8691807e-05 3.8561728e-05 2.0501866e-05 1.4719023e-05 8.3746272e-06]  taking action:  0
Leaf selection - depth:  8
Leaf selection - action scores:  [1.4303088e+00 2.8392671e-02 4.3441512e-04 2.7741914e-04 2.0350532e-04
 3.3183584e-05 3.2047021e-05 2.0793343e-05 2.0509584e-05 2.0099702e-05]  taking action:  0
Leaf selection - depth:  9
Leaf selection - action scores:  [1.9336914e+00 1.4737131e-02 1.2911594e-03 1.1459566e-03 1.0538895e-04
 8.1039725e-05 7.7148914e-05 2.5628033e-05 2.5390211e-05 2.2340550e-05]  taking action:  0
Adding child.
Leaf selection - depth:  10
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  18
Getting rollout return of leaf.
Token:  0
Token:  1
Token:  2
Token:  3
Token:  4
Token:  5
Token:  6
Token:  7
Token:  8
Token:  9
Token:  10
Token:  11
Token:  12
Token:  13
Token:  14
Token:  15
Token:  16
Token:  17
Token:  18
Token:  19
Token:  20
Token:  21
Token:  22
Token:  23
Token:  24
Token:  25
Token:  26
Token:  27
Token:  28
Token:  29
Token:  30
Token:  31
Token:  32
Token:  33
Token:  34
Token:  35
Token:  36
Token:  37
Token:  38
Token:  39
Token:  40
Token:  41
Token:  42
Token:  43
Token:  44
Token:  45
Token:  46
Token:  47
Token:  48
Token:  49
Token:  50
Token:  51
Token:  52
Token:  53
Token:  54
Token:  55
Token:  56
Token:  57
Token:  58
Token:  59
Token:  60
Token:  61
Token:  62
Token:  63
Token:  64
Token:  65
Token:  66
Token:  67
Token:  68
Token:  69
Token:  70
Token:  71
Token:  72
Token:  73
Token:  74
Token:  75
Token:  76
Token:  77
Token:  78
Token:  79
Token:  80
Token:  81
Token:  82
Token:  83
Token:  84
Token:  85
Token:  86
Token:  87
Token:  88
Token:  89
Token:  90
Token:  91
Token:  92
Token:  93
Token:  94
Token:  95
Token:  96
Token:  97
Token:  98
Token:  99
Token:  100
Token:  101
Token:  102
Token:  103
Token:  104
Token:  105
Token:  106
Token:  107
Token:  108
Token:  109
Token:  110
Token:  111
Token:  112
Token:  113
Token:  114
Token:  115
Token:  116
Token:  117
Token:  118
Token:  119
Token:  120
Token:  121
Token:  122
Token:  123
Token:  124
Token:  125
Token:  126
Token:  127
Token:  128
Token:  129
Token:  130
Token:  131
Token:  132
Token:  133
Token:  134
Token:  135
Token:  136
Token:  137
Token:  138
Token:  139
Token:  140
Token:  141
Token:  142
Token:  143
Token:  144
Token:  145
Token:  146
Token:  147
Token:  148
Token:  149
Token:  150
Token:  151
Token:  152
Token:  153
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7,c8;
  adder_8 A1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
  adder_8 A2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
  adder_8 A3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
  adder_8 A4(sum[31:24], cout, in1[31:24], in2[31:24], c3);
endmodule
Path:  output_files/3084873_adder_32/3084873_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  154
LLM generates return in:  55.500627  seconds
Running getPromptScore: 
adder_32
output_files/3084873_adder_32/synth_script.sh
Running bash in x seconds:  0.887753

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.5
Backpropogation: incorporating estimates.
Current runs:  13.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [7.87905522e-01 1.44680254e-01 2.78928533e-03 1.60662301e-03
 7.74785051e-04 5.10745168e-04 7.64346048e-01 3.45711399e-04
 3.31590935e-04 2.76446733e-04]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [0.86180496 0.04149636 0.01600499 0.01319078 0.00801106 0.00708339
 0.00583015 0.0031809  0.00238334 0.00178329]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.86878353 0.1391716  0.01422048 0.01302418 0.00600097 0.0048428
 0.00379937 0.00219373 0.001428   0.00141419]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.8249762  0.7614107  0.08927294 0.07070616 0.00430157 0.00340747
 0.00209862 0.00179242 0.001352   0.00111045]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.9668335  0.03895035 0.03092601 0.02208244 0.01094487 0.00375141
 0.0031571  0.00293673 0.00260041 0.00198093]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [1.0179224e+00 3.8068540e-02 2.0988577e-03 7.9525803e-04 7.4671110e-04
 4.8717475e-04 2.3151096e-04 1.6090221e-04 7.5671545e-05 7.4603588e-05]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [9.5981896e-01 5.3381735e-01 4.3257702e-02 1.8717584e-03 2.3990519e-04
 1.5570247e-04 9.4316631e-05 9.2784285e-05 7.5738724e-05 7.5368087e-05]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [1.1451800e+00 3.3870288e-03 1.1485778e-03 1.6170063e-04 9.4119314e-05
 7.6799777e-05 4.3113319e-05 2.2921782e-05 1.6456368e-05 9.3631170e-06]  taking action:  0
Leaf selection - depth:  8
Leaf selection - action scores:  [1.2419354e+00 3.2785032e-02 5.0161936e-04 3.2033600e-04 2.3498769e-04
 3.8317103e-05 3.7004713e-05 2.4010084e-05 2.3682427e-05 2.3209135e-05]  taking action:  0
Leaf selection - depth:  9
Leaf selection - action scores:  [1.4341393e+00 1.8049225e-02 1.5813409e-03 1.4035044e-03 1.2907457e-04
 9.9252982e-05 9.4487739e-05 3.1387801e-05 3.1096530e-05 2.7361475e-05]  taking action:  0
Leaf selection - depth:  10
Leaf selection - action scores:  [1.94591105e+00 2.51973909e-03 2.14139721e-03 2.80688837e-04
 1.82597549e-04 1.02785685e-04 6.85672712e-05 6.02901309e-05
 5.11246471e-05 3.52386305e-05]  taking action:  0
Adding child.
Leaf selection - depth:  11
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  11
Getting rollout return of leaf.
Token:  0
Token:  1
Token:  2
Token:  3
Token:  4
Token:  5
Token:  6
Token:  7
Token:  8
Token:  9
Token:  10
Token:  11
Token:  12
Token:  13
Token:  14
Token:  15
Token:  16
Token:  17
Token:  18
Token:  19
Token:  20
Token:  21
Token:  22
Token:  23
Token:  24
Token:  25
Token:  26
Token:  27
Token:  28
Token:  29
Token:  30
Token:  31
Token:  32
Token:  33
Token:  34
Token:  35
Token:  36
Token:  37
Token:  38
Token:  39
Token:  40
Token:  41
Token:  42
Token:  43
Token:  44
Token:  45
Token:  46
Token:  47
Token:  48
Token:  49
Token:  50
Token:  51
Token:  52
Token:  53
Token:  54
Token:  55
Token:  56
Token:  57
Token:  58
Token:  59
Token:  60
Token:  61
Token:  62
Token:  63
Token:  64
Token:  65
Token:  66
Token:  67
Token:  68
Token:  69
Token:  70
Token:  71
Token:  72
Token:  73
Token:  74
Token:  75
Token:  76
Token:  77
Token:  78
Token:  79
Token:  80
Token:  81
Token:  82
Token:  83
Token:  84
Token:  85
Token:  86
Token:  87
Token:  88
Token:  89
Token:  90
Token:  91
Token:  92
Token:  93
Token:  94
Token:  95
Token:  96
Token:  97
Token:  98
Token:  99
Token:  100
Token:  101
Token:  102
Token:  103
Token:  104
Token:  105
Token:  106
Token:  107
Token:  108
Token:  109
Token:  110
Token:  111
Token:  112
Token:  113
Token:  114
Token:  115
Token:  116
Token:  117
Token:  118
Token:  119
Token:  120
Token:  121
Token:  122
Token:  123
Token:  124
Token:  125
Token:  126
Token:  127
Token:  128
Token:  129
Token:  130
Token:  131
Token:  132
Token:  133
Token:  134
Token:  135
Token:  136
Token:  137
Token:  138
Token:  139
Token:  140
Token:  141
Token:  142
Token:  143
Token:  144
Token:  145
Token:  146
Token:  147
Token:  148
Token:  149
Token:  150
Token:  151
Token:  152
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7,c8;
  adder_8 A1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
  adder_8 A2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
  adder_8 A3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
  adder_8 A4(sum[31:24], cout, in1[31:24], in2[31:24], c3);
endmodule
Path:  output_files/3084873_adder_32/3084873_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  153
LLM generates return in:  55.132288  seconds
Running getPromptScore: 
adder_32
output_files/3084873_adder_32/synth_script.sh
Running bash in x seconds:  0.896009

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.5
Backpropogation: incorporating estimates.
Current runs:  14.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [7.77977558e-01 1.49758291e-01 2.88718461e-03 1.66301281e-03
 8.01978719e-04 5.28671475e-04 7.91173325e-01 3.57845295e-04
 3.43229226e-04 2.86149554e-04]  taking action:  6
Adding child.
Leaf selection - depth:  1
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  198
Getting rollout return of leaf.
Token:  0
Token:  1
Token:  2
Token:  3
Token:  4
Token:  5
Token:  6
Token:  7
Token:  8
Token:  9
Token:  10
Token:  11
Token:  12
Token:  13
Token:  14
Token:  15
Token:  16
Token:  17
Token:  18
Token:  19
Token:  20
Token:  21
Token:  22
Token:  23
Token:  24
Token:  25
Token:  26
Token:  27
Token:  28
Token:  29
Token:  30
Token:  31
Token:  32
Token:  33
Token:  34
Token:  35
Token:  36
Token:  37
Token:  38
Token:  39
Token:  40
Token:  41
Token:  42
Token:  43
Token:  44
Token:  45
Token:  46
Token:  47
Token:  48
Token:  49
Token:  50
Token:  51
Token:  52
Token:  53
Token:  54
Token:  55
Token:  56
Token:  57
Token:  58
Token:  59
Token:  60
Token:  61
Token:  62
Token:  63
Token:  64
Token:  65
Token:  66
Token:  67
Token:  68
Token:  69
Token:  70
Token:  71
Token:  72
Token:  73
Token:  74
Token:  75
Token:  76
Token:  77
Token:  78
Token:  79
Token:  80
Token:  81
Token:  82
Token:  83
Token:  84
Token:  85
Token:  86
Token:  87
Token:  88
Token:  89
Token:  90
Token:  91
Token:  92
Token:  93
Token:  94
Token:  95
Token:  96
Token:  97
Token:  98
Token:  99
Token:  100
Token:  101
Token:  102
Token:  103
Token:  104
Token:  105
Token:  106
Token:  107
Token:  108
Token:  109
Token:  110
Token:  111
Token:  112
Token:  113
Token:  114
Token:  115
Token:  116
Token:  117
Token:  118
Token:  119
Token:  120
Token:  121
Token:  122
Token:  123
Token:  124
Token:  125
Token:  126
Token:  127
Token:  128
Token:  129
Token:  130
Token:  131
Token:  132
Token:  133
Token:  134
Token:  135
Token:  136
Token:  137
Token:  138
Token:  139
Token:  140
Token:  141
Token:  142
Token:  143
Token:  144
Token:  145
Token:  146
Token:  147
Token:  148
Token:  149
Token:  150
Token:  151
Token:  152
Token:  153
Token:  154
Token:  155
Token:  156
Token:  157
Token:  158
Token:  159
Token:  160
Token:  161
Token:  162
Token:  163
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);                      
  wire c1,c2,c3,c4,c5,c6,c7,c8;
  adder_8 A1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
  adder_8 A2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
  adder_8 A3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
  adder_8 A4(sum[31:24], cout, in1[31:24], in2[31:24], c3);
endmodule
Path:  output_files/3084873_adder_32/3084873_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  164
LLM generates return in:  58.70547  seconds
Running getPromptScore: 
adder_32
output_files/3084873_adder_32/synth_script.sh
Running bash in x seconds:  0.888858

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.5
Backpropogation: incorporating estimates.
Current runs:  15.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [7.88265258e-01 1.54669698e-01 2.98187144e-03 1.71755224e-03
 8.28280059e-04 5.46009552e-04 6.58560148e-01 3.69581032e-04
 3.54485621e-04 2.95533988e-04]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [0.8480329  0.04306281 0.01660916 0.01368872 0.00831347 0.00735078
 0.00605024 0.00330097 0.00247331 0.0018506 ]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.85355663 0.1448544  0.01480114 0.01355599 0.006246   0.00504054
 0.00395451 0.00228331 0.00148631 0.00147194]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.8041829  0.7804456  0.09324254 0.07385017 0.00449284 0.00355899
 0.00219193 0.00187212 0.00141211 0.00115983]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.937049   0.04131308 0.03280199 0.02342196 0.01160879 0.00397897
 0.00334861 0.00311487 0.00275815 0.00210109]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [9.7951663e-01 4.0696982e-02 2.2437731e-03 8.5016660e-04 7.9826772e-04
 5.2081171e-04 2.4749563e-04 1.7201170e-04 8.0896280e-05 7.9754594e-05]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [9.20561314e-01 5.76588631e-01 4.67236601e-02 2.02173018e-03
 2.59127235e-04 1.68177896e-04 1.01873615e-04 1.00218487e-04
 8.18071785e-05 8.14068408e-05]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [1.0749519e+00 3.7103042e-03 1.2582040e-03 1.7713418e-04 1.0310254e-04
 8.4129941e-05 4.7228277e-05 2.5109553e-05 1.8027047e-05 1.0256781e-05]  taking action:  0
Leaf selection - depth:  8
Leaf selection - action scores:  [1.1368860e+00 3.6654778e-02 5.6082750e-04 3.5814653e-04 2.6272424e-04
 4.2839823e-05 4.1372525e-05 2.6844089e-05 2.6477757e-05 2.5948602e-05]  taking action:  0
Leaf selection - depth:  9
Leaf selection - action scores:  [1.2448841e+00 2.0841449e-02 1.8259751e-03 1.6206274e-03 1.4904248e-04
 1.1460747e-04 1.0910504e-04 3.6243509e-05 3.5907178e-05 3.1594307e-05]  taking action:  0
Leaf selection - depth:  10
Leaf selection - action scores:  [1.4416224e+00 3.0860375e-03 2.6226654e-03 3.4377223e-04 2.2363542e-04
 1.2588625e-04 8.3977415e-05 7.3840034e-05 6.2614650e-05 4.3158332e-05]  taking action:  0
Leaf selection - depth:  11
Leaf selection - action scores:  [1.8584203e+00 9.2638299e-02 1.2661218e-04 1.2654555e-04 1.2311718e-04
 2.4357414e-05 1.3623923e-05 1.2403020e-05 1.2231801e-05 8.1334783e-06]  taking action:  0
Adding child.
Leaf selection - depth:  12
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  66
Getting rollout return of leaf.
Token:  0
Token:  1
Token:  2
Token:  3
Token:  4
Token:  5
Token:  6
Token:  7
Token:  8
Token:  9
Token:  10
Token:  11
Token:  12
Token:  13
Token:  14
Token:  15
Token:  16
Token:  17
Token:  18
Token:  19
Token:  20
Token:  21
Token:  22
Token:  23
Token:  24
Token:  25
Token:  26
Token:  27
Token:  28
Token:  29
Token:  30
Token:  31
Token:  32
Token:  33
Token:  34
Token:  35
Token:  36
Token:  37
Token:  38
Token:  39
Token:  40
Token:  41
Token:  42
Token:  43
Token:  44
Token:  45
Token:  46
Token:  47
Token:  48
Token:  49
Token:  50
Token:  51
Token:  52
Token:  53
Token:  54
Token:  55
Token:  56
Token:  57
Token:  58
Token:  59
Token:  60
Token:  61
Token:  62
Token:  63
Token:  64
Token:  65
Token:  66
Token:  67
Token:  68
Token:  69
Token:  70
Token:  71
Token:  72
Token:  73
Token:  74
Token:  75
Token:  76
Token:  77
Token:  78
Token:  79
Token:  80
Token:  81
Token:  82
Token:  83
Token:  84
Token:  85
Token:  86
Token:  87
Token:  88
Token:  89
Token:  90
Token:  91
Token:  92
Token:  93
Token:  94
Token:  95
Token:  96
Token:  97
Token:  98
Token:  99
Token:  100
Token:  101
Token:  102
Token:  103
Token:  104
Token:  105
Token:  106
Token:  107
Token:  108
Token:  109
Token:  110
Token:  111
Token:  112
Token:  113
Token:  114
Token:  115
Token:  116
Token:  117
Token:  118
Token:  119
Token:  120
Token:  121
Token:  122
Token:  123
Token:  124
Token:  125
Token:  126
Token:  127
Token:  128
Token:  129
Token:  130
Token:  131
Token:  132
Token:  133
Token:  134
Token:  135
Token:  136
Token:  137
Token:  138
Token:  139
Token:  140
Token:  141
Token:  142
Token:  143
Token:  144
Token:  145
Token:  146
Token:  147
Token:  148
Token:  149
Token:  150
Token:  151
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7,c8;
  adder_8 A1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
  adder_8 A2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
  adder_8 A3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
  adder_8 A4(sum[31:24], cout, in1[31:24], in2[31:24], c3);
endmodule
Path:  output_files/3084873_adder_32/3084873_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  152
LLM generates return in:  54.838693  seconds
Running getPromptScore: 
adder_32
output_files/3084873_adder_32/synth_script.sh
Running bash in x seconds:  0.897388

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.5
Backpropogation: incorporating estimates.
Current runs:  16.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [7.78353786e-01 1.59429875e-01 3.07364273e-03 1.77041233e-03
 8.53771543e-04 5.62813763e-04 6.71134161e-01 3.80955408e-04
 3.65395414e-04 3.04629462e-04]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [0.8357698  0.04457425 0.01719211 0.01416917 0.00860526 0.00760878
 0.00626259 0.00341683 0.00256012 0.00191556]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.8401316  0.1503225  0.01535987 0.01406772 0.00648178 0.00523082
 0.00410379 0.0023695  0.00154242 0.0015275 ]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.7869848  0.7987025  0.09704991 0.07686569 0.0046763  0.00370431
 0.00228144 0.00194856 0.00146977 0.00120719]  taking action:  1
Leaf selection - depth:  4
Leaf selection - action scores:  [1.0531265  0.5695506  0.07803828 0.03377809 0.01391357 0.01180685
 0.01179128 0.01107021 0.00671555 0.00658516]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [1.9365441e+00 1.4931138e-02 2.2614886e-05 1.6567195e-05 1.5597316e-05
 8.2566348e-06 7.2762891e-06 6.5614790e-06 6.4799415e-06 6.3842995e-06]  taking action:  0
Adding child.
Leaf selection - depth:  6
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  15
Getting rollout return of leaf.
Token:  0
Token:  1
Token:  2
Token:  3
Token:  4
Token:  5
Token:  6
Token:  7
Token:  8
Token:  9
Token:  10
Token:  11
Token:  12
Token:  13
Token:  14
Token:  15
Token:  16
Token:  17
Token:  18
Token:  19
Token:  20
Token:  21
Token:  22
Token:  23
Token:  24
Token:  25
Token:  26
Token:  27
Token:  28
Token:  29
Token:  30
Token:  31
Token:  32
Token:  33
Token:  34
Token:  35
Token:  36
Token:  37
Token:  38
Token:  39
Token:  40
Token:  41
Token:  42
Token:  43
Token:  44
Token:  45
Token:  46
Token:  47
Token:  48
Token:  49
Token:  50
Token:  51
Token:  52
Token:  53
Token:  54
Token:  55
Token:  56
Token:  57
Token:  58
Token:  59
Token:  60
Token:  61
Token:  62
Token:  63
Token:  64
Token:  65
Token:  66
Token:  67
Token:  68
Token:  69
Token:  70
Token:  71
Token:  72
Token:  73
Token:  74
Token:  75
Token:  76
Token:  77
Token:  78
Token:  79
Token:  80
Token:  81
Token:  82
Token:  83
Token:  84
Token:  85
Token:  86
Token:  87
Token:  88
Token:  89
Token:  90
Token:  91
Token:  92
Token:  93
Token:  94
Token:  95
Token:  96
Token:  97
Token:  98
Token:  99
Token:  100
Token:  101
Token:  102
Token:  103
Token:  104
Token:  105
Token:  106
Token:  107
Token:  108
Token:  109
Token:  110
Token:  111
Token:  112
Token:  113
Token:  114
Token:  115
Token:  116
Token:  117
Token:  118
Token:  119
Token:  120
Token:  121
Token:  122
Token:  123
Token:  124
Token:  125
Token:  126
Token:  127
Token:  128
Token:  129
Token:  130
Token:  131
Token:  132
Token:  133
Token:  134
Token:  135
Token:  136
Token:  137
Token:  138
Token:  139
Token:  140
Token:  141
Token:  142
Token:  143
Token:  144
Token:  145
Token:  146
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
  wire [7:0] c;
  adder_8 A1(sum[7:0], c[0], in1[7:0], in2[7:0], cin);
  adder_8 A2(sum[15:8], c[1], in1[15:8], in2[15:8], c[0]);
  adder_8 A3(sum[23:16], c[2], in1[23:16], in2[23:16], c[1]);
  adder_8 A4(sum[31:24], cout, in1[31:24], in2[31:24], c[2]);
endmodule
Path:  output_files/3084873_adder_32/3084873_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  147
LLM generates return in:  52.318598  seconds
Running getPromptScore: 
adder_32
output_files/3084873_adder_32/synth_script.sh
Running bash in x seconds:  0.887741

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.5
Backpropogation: incorporating estimates.
Current runs:  17.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [7.69428186e-01 1.64051988e-01 3.16275227e-03 1.82173926e-03
 8.78523670e-04 5.79130585e-04 6.83343477e-01 3.91999881e-04
 3.75988779e-04 3.13461131e-04]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [0.8247559  0.04603608 0.01775594 0.01463386 0.00888747 0.00785832
 0.00646797 0.00352889 0.00264408 0.00197838]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.8281753  0.15559858 0.01589897 0.01456147 0.00670928 0.00541441
 0.00424783 0.00245266 0.00159656 0.00158111]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.7997056  0.7372023  0.10071345 0.07976729 0.00485282 0.00384415
 0.00236756 0.00202212 0.00152526 0.00125276]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.9125074  0.04354781 0.03457633 0.02468892 0.01223674 0.0041942
 0.00352974 0.00328336 0.00290734 0.00221475]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [9.4881994e-01 4.3165665e-02 2.3798808e-03 9.0173783e-04 8.4669079e-04
 5.5240421e-04 2.6250875e-04 1.8244595e-04 8.5803462e-05 8.4592517e-05]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [8.9030236e-01 6.1639917e-01 4.9949694e-02 2.1613205e-03 2.7701867e-04
 1.7978973e-04 1.0890747e-04 1.0713807e-04 8.7455548e-05 8.7027569e-05]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [1.0241928e+00 4.0075867e-03 1.3590157e-03 1.9132678e-04 1.1136348e-04
 9.0870722e-05 5.1012372e-05 2.7121419e-05 1.9471438e-05 1.1078590e-05]  taking action:  0
Leaf selection - depth:  8
Leaf selection - action scores:  [1.0676835e+00 4.0153299e-02 6.1435573e-04 3.9232988e-04 2.8779998e-04
 4.6928675e-05 4.5321329e-05 2.9406227e-05 2.9004930e-05 2.8425269e-05]  taking action:  0
Leaf selection - depth:  9
Leaf selection - action scores:  [1.1393585e+00 2.3301449e-02 2.0415022e-03 1.8119164e-03 1.6663455e-04
 1.2813504e-04 1.2198314e-04 4.0521474e-05 4.0145445e-05 3.5323508e-05]  taking action:  0
Leaf selection - depth:  10
Leaf selection - action scores:  [1.2506446e+00 3.5634490e-03 3.0283930e-03 3.9695395e-04 2.5823194e-04
 1.4536091e-04 9.6968761e-05 8.5263120e-05 7.2301169e-05 4.9834947e-05]  taking action:  0
Leaf selection - depth:  11
Leaf selection - action scores:  [1.3880453e+00 1.1345828e-01 1.5506762e-04 1.5498600e-04 1.5078712e-04
 2.9831617e-05 1.6685830e-05 1.5190536e-05 1.4980836e-05 9.9614363e-06]  taking action:  0
Leaf selection - depth:  12
Leaf selection - action scores:  [1.9397826e+00 8.6394362e-03 1.1278307e-03 9.2925131e-04 2.2978043e-04
 1.5314386e-04 1.0607966e-04 4.7425114e-05 4.4893997e-05 3.9076964e-05]  taking action:  0
Adding child.
Leaf selection - depth:  13
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  19
Getting rollout return of leaf.
Token:  0
Token:  1
Token:  2
Token:  3
Token:  4
Token:  5
Token:  6
Token:  7
Token:  8
Token:  9
Token:  10
Token:  11
Token:  12
Token:  13
Token:  14
Token:  15
Token:  16
Token:  17
Token:  18
Token:  19
Token:  20
Token:  21
Token:  22
Token:  23
Token:  24
Token:  25
Token:  26
Token:  27
Token:  28
Token:  29
Token:  30
Token:  31
Token:  32
Token:  33
Token:  34
Token:  35
Token:  36
Token:  37
Token:  38
Token:  39
Token:  40
Token:  41
Token:  42
Token:  43
Token:  44
Token:  45
Token:  46
Token:  47
Token:  48
Token:  49
Token:  50
Token:  51
Token:  52
Token:  53
Token:  54
Token:  55
Token:  56
Token:  57
Token:  58
Token:  59
Token:  60
Token:  61
Token:  62
Token:  63
Token:  64
Token:  65
Token:  66
Token:  67
Token:  68
Token:  69
Token:  70
Token:  71
Token:  72
Token:  73
Token:  74
Token:  75
Token:  76
Token:  77
Token:  78
Token:  79
Token:  80
Token:  81
Token:  82
Token:  83
Token:  84
Token:  85
Token:  86
Token:  87
Token:  88
Token:  89
Token:  90
Token:  91
Token:  92
Token:  93
Token:  94
Token:  95
Token:  96
Token:  97
Token:  98
Token:  99
Token:  100
Token:  101
Token:  102
Token:  103
Token:  104
Token:  105
Token:  106
Token:  107
Token:  108
Token:  109
Token:  110
Token:  111
Token:  112
Token:  113
Token:  114
Token:  115
Token:  116
Token:  117
Token:  118
Token:  119
Token:  120
Token:  121
Token:  122
Token:  123
Token:  124
Token:  125
Token:  126
Token:  127
Token:  128
Token:  129
Token:  130
Token:  131
Token:  132
Token:  133
Token:  134
Token:  135
Token:  136
Token:  137
Token:  138
Token:  139
Token:  140
Token:  141
Token:  142
Token:  143
Token:  144
Token:  145
Token:  146
Token:  147
Token:  148
Token:  149
Token:  150
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7,c8;
  adder_8 A1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
  adder_8 A2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
  adder_8 A3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
  adder_8 A4(sum[31:24], cout, in1[31:24], in2[31:24], c3);
endmodule
Path:  output_files/3084873_adder_32/3084873_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  151
LLM generates return in:  54.576336  seconds
Running getPromptScore: 
adder_32
output_files/3084873_adder_32/synth_script.sh
Running bash in x seconds:  0.879357

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.5
Backpropogation: incorporating estimates.
Current runs:  18.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [7.61334091e-01 1.68547396e-01 3.24941907e-03 1.87165916e-03
 9.02597269e-04 5.95000114e-04 6.95218099e-01 4.02741592e-04
 3.86291749e-04 3.22050697e-04]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [0.8147906  0.0474529  0.0183024  0.01508423 0.00916099 0.00810017
 0.00666703 0.00363749 0.00272546 0.00203927]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.8174353  0.16070151 0.01642039 0.01503902 0.00692932 0.00559198
 0.00438714 0.0025331  0.00164892 0.00163297]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.783618   0.749915   0.10424832 0.082567   0.00502315 0.00397907
 0.00245066 0.00209309 0.00157879 0.00129673]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.89181775 0.04567333 0.03626397 0.02589396 0.012834   0.00439892
 0.00370203 0.00344362 0.00304925 0.00232285]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [9.2353642e-01 4.5500606e-02 2.5086144e-03 9.5051515e-04 8.9249044e-04
 5.8228523e-04 2.7670851e-04 1.9231492e-04 9.0444788e-05 8.9168345e-05]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [8.6602211e-01 6.5379000e-01 5.2979648e-02 2.2924265e-03 2.9382264e-04
 1.9069579e-04 1.1551381e-04 1.1363708e-04 9.2760616e-05 9.2306676e-05]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [9.85262394e-01 4.28429060e-03 1.45284890e-03 2.04536933e-04
 1.19052565e-04 9.71448899e-05 5.45345174e-05 2.89940162e-05
 2.08158435e-05 1.18435109e-05]  taking action:  0
Leaf selection - depth:  8
Leaf selection - action scores:  [1.0176505e+00 4.3370523e-02 6.6358008e-04 4.2376472e-04 3.1085950e-04
 5.0688763e-05 4.8952636e-05 3.1762356e-05 3.1328906e-05 3.0702802e-05]  taking action:  0
Leaf selection - depth:  9
Leaf selection - action scores:  [1.0698503e+00 2.5525458e-02 2.2363537e-03 1.9848549e-03 1.8253901e-04
 1.4036491e-04 1.3362584e-04 4.4389053e-05 4.3977132e-05 3.8694965e-05]  taking action:  0
Leaf selection - depth:  10
Leaf selection - action scores:  [1.14418888e+00 3.98405688e-03 3.38584627e-03 4.43808007e-04
 2.88712065e-04 1.62518438e-04 1.08414366e-04 9.53270646e-05
 8.08351615e-05 5.57171625e-05]  taking action:  0
Leaf selection - depth:  11
Leaf selection - action scores:  [1.2094010e+00 1.3101034e-01 1.7905666e-04 1.7896242e-04 1.7411397e-04
 3.4446584e-05 1.9267136e-05 1.7540520e-05 1.7298378e-05 1.1502475e-05]  taking action:  0
Leaf selection - depth:  12
Leaf selection - action scores:  [1.4378694e+00 1.0581106e-02 1.3813049e-03 1.1380959e-03 2.8142240e-04
 1.8756217e-04 1.2992052e-04 5.8083668e-05 5.4983695e-05 4.7859310e-05]  taking action:  0
Leaf selection - depth:  13
Leaf selection - action scores:  [1.9470172e+00 2.9237180e-03 7.4799679e-04 3.0393375e-04 1.1762385e-04
 8.9975038e-05 7.3404117e-05 5.7951922e-05 4.8057027e-05 3.2739557e-05]  taking action:  0
Adding child.
Leaf selection - depth:  14
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  11
Getting rollout return of leaf.
Token:  0
Token:  1
Token:  2
Token:  3
Token:  4
Token:  5
Token:  6
Token:  7
Token:  8
Token:  9
Token:  10
Token:  11
Token:  12
Token:  13
Token:  14
Token:  15
Token:  16
Token:  17
Token:  18
Token:  19
Token:  20
Token:  21
Token:  22
Token:  23
Token:  24
Token:  25
Token:  26
Token:  27
Token:  28
Token:  29
Token:  30
Token:  31
Token:  32
Token:  33
Token:  34
Token:  35
Token:  36
Token:  37
Token:  38
Token:  39
Token:  40
Token:  41
Token:  42
Token:  43
Token:  44
Token:  45
Token:  46
Token:  47
Token:  48
Token:  49
Token:  50
Token:  51
Token:  52
Token:  53
Token:  54
Token:  55
Token:  56
Token:  57
Token:  58
Token:  59
Token:  60
Token:  61
Token:  62
Token:  63
Token:  64
Token:  65
Token:  66
Token:  67
Token:  68
Token:  69
Token:  70
Token:  71
Token:  72
Token:  73
Token:  74
Token:  75
Token:  76
Token:  77
Token:  78
Token:  79
Token:  80
Token:  81
Token:  82
Token:  83
Token:  84
Token:  85
Token:  86
Token:  87
Token:  88
Token:  89
Token:  90
Token:  91
Token:  92
Token:  93
Token:  94
Token:  95
Token:  96
Token:  97
Token:  98
Token:  99
Token:  100
Token:  101
Token:  102
Token:  103
Token:  104
Token:  105
Token:  106
Token:  107
Token:  108
Token:  109
Token:  110
Token:  111
Token:  112
Token:  113
Token:  114
Token:  115
Token:  116
Token:  117
Token:  118
Token:  119
Token:  120
Token:  121
Token:  122
Token:  123
Token:  124
Token:  125
Token:  126
Token:  127
Token:  128
Token:  129
Token:  130
Token:  131
Token:  132
Token:  133
Token:  134
Token:  135
Token:  136
Token:  137
Token:  138
Token:  139
Token:  140
Token:  141
Token:  142
Token:  143
Token:  144
Token:  145
Token:  146
Token:  147
Token:  148
Token:  149
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7,c8;
  adder_8 A1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
  adder_8 A2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
  adder_8 A3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
  adder_8 A4(sum[31:24], cout, in1[31:24], in2[31:24], c3);
endmodule
Path:  output_files/3084873_adder_32/3084873_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  150
LLM generates return in:  54.29221  seconds
Running getPromptScore: 
adder_32
output_files/3084873_adder_32/synth_script.sh
Running bash in x seconds:  0.946201

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.5
Backpropogation: incorporating estimates.
Current runs:  19.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [7.53948997e-01 1.72925979e-01 3.33383362e-03 1.92028178e-03
 9.26045259e-04 6.10457237e-04 7.06784132e-01 4.13204155e-04
 3.96326972e-04 3.30417044e-04]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [0.8057156  0.04882864 0.01883302 0.01552155 0.00942659 0.00833501
 0.00686032 0.00374295 0.00280447 0.00209839]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.8077163  0.16564733 0.01692575 0.01550187 0.00714258 0.00576408
 0.00452216 0.00261106 0.00169967 0.00168322]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.7698759  0.76221055 0.10766721 0.08527483 0.00518789 0.00410956
 0.00253103 0.00216173 0.00163057 0.00133925]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.8740578  0.04770424 0.03787648 0.02704535 0.01340467 0.00459452
 0.00386664 0.00359674 0.00318484 0.00242613]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [9.0222836e-01 4.7721442e-02 2.6310573e-03 9.9690876e-04 9.3605195e-04
 6.1070593e-04 2.9021438e-04 2.0170161e-04 9.4859301e-05 9.3520553e-05]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [8.45957339e-01 6.89155221e-01 5.58454543e-02 2.41642981e-03
 3.09716270e-04 2.01011018e-04 1.21762248e-04 1.19783996e-04
 9.77782693e-05 9.72997805e-05]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [9.5415241e-01 4.5441762e-03 1.5409788e-03 2.1694417e-04 1.2627430e-04
 1.0303771e-04 5.7842590e-05 3.0752795e-05 2.2078535e-05 1.2561940e-05]  taking action:  0
Leaf selection - depth:  8
Leaf selection - action scores:  [9.7926748e-01 4.6365038e-02 7.0939690e-04 4.5302353e-04 3.3232279e-04
 5.4188567e-05 5.2332565e-05 3.3955388e-05 3.3492011e-05 3.2822674e-05]  taking action:  0
Leaf selection - depth:  9
Leaf selection - action scores:  [1.0196009e+00 2.7570648e-02 2.4155381e-03 2.1438885e-03 1.9716467e-04
 1.5161144e-04 1.4433241e-04 4.7945658e-05 4.7500736e-05 4.1795342e-05]  taking action:  0
Leaf selection - depth:  10
Leaf selection - action scores:  [1.0740833e+00 4.3643159e-03 3.7090087e-03 4.8616732e-04 3.1626824e-04
 1.7803002e-04 1.1876199e-04 1.0442557e-04 8.8550485e-05 6.1035094e-05]  taking action:  0
Leaf selection - depth:  11
Leaf selection - action scores:  [1.1096051e+00 1.4647400e-01 2.0019143e-04 2.0008607e-04 1.9466534e-04
 3.8512451e-05 2.1541313e-05 1.9610896e-05 1.9340176e-05 1.2860158e-05]  taking action:  0
Leaf selection - depth:  12
Leaf selection - action scores:  [1.2477556e+00 1.2218009e-02 1.5949935e-03 1.3141598e-03 3.2495859e-04
 2.1657813e-04 1.5001929e-04 6.7069239e-05 6.3489701e-05 5.5263172e-05]  taking action:  0
Leaf selection - depth:  13
Leaf selection - action scores:  [1.44229972e+00 3.58080864e-03 9.16105288e-04 3.72241280e-04
 1.44059217e-04 1.10196466e-04 8.99013103e-05 7.09763190e-05
 5.88575967e-05 4.00976023e-05]  taking action:  0
Leaf selection - depth:  14
Leaf selection - action scores:  [1.9276286e+00 2.3744430e-02 9.8874232e-05 2.6303007e-05 1.5319132e-05
 1.5288773e-05 1.4956731e-05 1.0602594e-05 9.9611261e-06 5.8420555e-06]  taking action:  0
Adding child.
Leaf selection - depth:  15
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  66
Getting rollout return of leaf.
Token:  0
Token:  1
Token:  2
Token:  3
Token:  4
Token:  5
Token:  6
Token:  7
Token:  8
Token:  9
Token:  10
Token:  11
Token:  12
Token:  13
Token:  14
Token:  15
Token:  16
Token:  17
Token:  18
Token:  19
Token:  20
Token:  21
Token:  22
Token:  23
Token:  24
Token:  25
Token:  26
Token:  27
Token:  28
Token:  29
Token:  30
Token:  31
Token:  32
Token:  33
Token:  34
Token:  35
Token:  36
Token:  37
Token:  38
Token:  39
Token:  40
Token:  41
Token:  42
Token:  43
Token:  44
Token:  45
Token:  46
Token:  47
Token:  48
Token:  49
Token:  50
Token:  51
Token:  52
Token:  53
Token:  54
Token:  55
Token:  56
Token:  57
Token:  58
Token:  59
Token:  60
Token:  61
Token:  62
Token:  63
Token:  64
Token:  65
Token:  66
Token:  67
Token:  68
Token:  69
Token:  70
Token:  71
Token:  72
Token:  73
Token:  74
Token:  75
Token:  76
Token:  77
Token:  78
Token:  79
Token:  80
Token:  81
Token:  82
Token:  83
Token:  84
Token:  85
Token:  86
Token:  87
Token:  88
Token:  89
Token:  90
Token:  91
Token:  92
Token:  93
Token:  94
Token:  95
Token:  96
Token:  97
Token:  98
Token:  99
Token:  100
Token:  101
Token:  102
Token:  103
Token:  104
Token:  105
Token:  106
Token:  107
Token:  108
Token:  109
Token:  110
Token:  111
Token:  112
Token:  113
Token:  114
Token:  115
Token:  116
Token:  117
Token:  118
Token:  119
Token:  120
Token:  121
Token:  122
Token:  123
Token:  124
Token:  125
Token:  126
Token:  127
Token:  128
Token:  129
Token:  130
Token:  131
Token:  132
Token:  133
Token:  134
Token:  135
Token:  136
Token:  137
Token:  138
Token:  139
Token:  140
Token:  141
Token:  142
Token:  143
Token:  144
Token:  145
Token:  146
Token:  147
Token:  148
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7,c8;
  adder_8 A1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
  adder_8 A2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
  adder_8 A3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
  adder_8 A4(sum[31:24], cout, in1[31:24], in2[31:24], c3);
endmodule
Path:  output_files/3084873_adder_32/3084873_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  149
LLM generates return in:  53.987557  seconds
Running getPromptScore: 
adder_32
output_files/3084873_adder_32/synth_script.sh
Running bash in x seconds:  0.951388

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.5
Backpropogation: incorporating estimates.
Current runs:  20.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [7.47174377e-01 1.77196400e-01 3.41616290e-03 1.96770329e-03
 9.48914017e-04 6.25532525e-04 7.18064451e-01 4.23408263e-04
 4.06114297e-04 3.38576718e-04]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [0.7974045  0.05016666 0.01934909 0.01594688 0.0096849  0.0085634
 0.00704831 0.00384551 0.00288132 0.00215589]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.7988644  0.1704497  0.01741645 0.01595129 0.00734965 0.00593119
 0.00465326 0.00268676 0.00174894 0.00173202]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.7579669  0.7741275  0.11098082 0.08789928 0.00534755 0.00423604
 0.00260892 0.00222826 0.00168075 0.00138047]  taking action:  1
Leaf selection - depth:  4
Leaf selection - action scores:  [0.9515803  0.65766037 0.09011085 0.03900358 0.01606601 0.01363338
 0.0136154  0.01278278 0.00775445 0.00760388]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [1.4358863e+00 1.8286835e-02 2.7697466e-05 2.0290587e-05 1.9102732e-05
 1.0112271e-05 8.9115983e-06 8.0361378e-06 7.9362753e-06 7.8191379e-06]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [1.9505991e+00 9.8632171e-04 1.4982962e-05 3.5544510e-06 1.8374665e-06
 1.3360882e-06 1.3296714e-06 1.0444039e-06 6.4207285e-07 5.9748544e-07]  taking action:  0
Adding child.
Leaf selection - depth:  7
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  60
Getting rollout return of leaf.
Token:  0
Token:  1
Token:  2
Token:  3
Token:  4
Token:  5
Token:  6
Token:  7
Token:  8
Token:  9
Token:  10
Token:  11
Token:  12
Token:  13
Token:  14
Token:  15
Token:  16
Token:  17
Token:  18
Token:  19
Token:  20
Token:  21
Token:  22
Token:  23
Token:  24
Token:  25
Token:  26
Token:  27
Token:  28
Token:  29
Token:  30
Token:  31
Token:  32
Token:  33
Token:  34
Token:  35
Token:  36
Token:  37
Token:  38
Token:  39
Token:  40
Token:  41
Token:  42
Token:  43
Token:  44
Token:  45
Token:  46
Token:  47
Token:  48
Token:  49
Token:  50
Token:  51
Token:  52
Token:  53
Token:  54
Token:  55
Token:  56
Token:  57
Token:  58
Token:  59
Token:  60
Token:  61
Token:  62
Token:  63
Token:  64
Token:  65
Token:  66
Token:  67
Token:  68
Token:  69
Token:  70
Token:  71
Token:  72
Token:  73
Token:  74
Token:  75
Token:  76
Token:  77
Token:  78
Token:  79
Token:  80
Token:  81
Token:  82
Token:  83
Token:  84
Token:  85
Token:  86
Token:  87
Token:  88
Token:  89
Token:  90
Token:  91
Token:  92
Token:  93
Token:  94
Token:  95
Token:  96
Token:  97
Token:  98
Token:  99
Token:  100
Token:  101
Token:  102
Token:  103
Token:  104
Token:  105
Token:  106
Token:  107
Token:  108
Token:  109
Token:  110
Token:  111
Token:  112
Token:  113
Token:  114
Token:  115
Token:  116
Token:  117
Token:  118
Token:  119
Token:  120
Token:  121
Token:  122
Token:  123
Token:  124
Token:  125
Token:  126
Token:  127
Token:  128
Token:  129
Token:  130
Token:  131
Token:  132
Token:  133
Token:  134
Token:  135
Token:  136
Token:  137
Token:  138
Token:  139
Token:  140
Token:  141
Token:  142
Token:  143
Token:  144
Token:  145
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
  wire [7:0] c;
  adder_8 A1(sum[7:0], c[0], in1[7:0], in2[7:0], cin);
  adder_8 A2(sum[15:8], c[1], in1[15:8], in2[15:8], c[0]);
  adder_8 A3(sum[23:16], c[2], in1[23:16], in2[23:16], c[1]);
  adder_8 A4(sum[31:24], cout, in1[31:24], in2[31:24], c[2]);
endmodule
Path:  output_files/3084873_adder_32/3084873_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  146
LLM generates return in:  52.120991  seconds
Running getPromptScore: 
adder_32
output_files/3084873_adder_32/synth_script.sh
Running bash in x seconds:  0.889735

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.5
Backpropogation: incorporating estimates.
Current runs:  21.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [7.40929787e-01 1.81366297e-01 3.49655420e-03 2.01400853e-03
 9.71244461e-04 6.40252951e-04 7.29079239e-01 4.33372174e-04
 4.15671235e-04 3.46544319e-04]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [0.7897547  0.0514699  0.01985174 0.01636115 0.00993649 0.00878587
 0.00723141 0.00394541 0.00295617 0.00221189]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.79075664 0.17512043 0.01789371 0.0163884  0.00755105 0.00609372
 0.00478077 0.00276038 0.00179687 0.00177949]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.76656073 0.728559   0.11419832 0.09044761 0.00550258 0.00435885
 0.00268456 0.00229286 0.00172948 0.00142049]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.8585888  0.04965214 0.03942309 0.0281497  0.01395203 0.00478212
 0.00402453 0.00374361 0.00331488 0.0025252 ]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [8.8394284e-01 4.9843419e-02 2.7480496e-03 1.0412371e-03 9.7767438e-04
 6.3786149e-04 3.0311901e-04 2.1067045e-04 9.9077311e-05 9.7679025e-05]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [8.2899928e-01 7.2279215e-01 5.8571208e-02 2.5343730e-03 3.2483318e-04
 2.1082215e-04 1.2770534e-04 1.2563053e-04 1.0255072e-04 1.0204888e-04]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [9.2853284e-01 4.7899820e-03 1.6243344e-03 2.2867923e-04 1.3310481e-04
 1.0861129e-04 6.0971444e-05 3.2416294e-05 2.3272820e-05 1.3241448e-05]  taking action:  0
Leaf selection - depth:  8
Leaf selection - action scores:  [9.4858867e-01 4.9177546e-02 7.5242901e-04 4.8050398e-04 3.5248153e-04
 5.7475652e-05 5.5507066e-05 3.6015124e-05 3.5523641e-05 3.4813704e-05]  taking action:  0
Leaf selection - depth:  9
Leaf selection - action scores:  [9.8105466e-01 2.9474262e-02 2.5823188e-03 2.2919131e-03 2.1077790e-04
 1.6207945e-04 1.5429783e-04 5.1256065e-05 5.0780422e-05 4.4681099e-05]  taking action:  0
Leaf selection - depth:  10
Leaf selection - action scores:  [1.0234110e+00 4.7140000e-03 4.0061874e-03 5.2512076e-04 3.4160874e-04
 1.9229442e-04 1.2827762e-04 1.1279251e-04 9.5645461e-05 6.5925437e-05]  taking action:  0
Leaf selection - depth:  11
Leaf selection - action scores:  [1.0437757e+00 1.6045424e-01 2.1929873e-04 2.1918330e-04 2.1324519e-04
 4.2188276e-05 2.3597326e-05 2.1482661e-05 2.1186101e-05 1.4087597e-05]  taking action:  0
Leaf selection - depth:  12
Leaf selection - action scores:  [1.1417663e+00 1.3660148e-02 1.7832569e-03 1.4692753e-03 3.6331476e-04
 2.4214170e-04 1.6772666e-04 7.4985684e-05 7.0983639e-05 6.1786101e-05]  taking action:  0
Leaf selection - depth:  13
Leaf selection - action scores:  [1.2511660e+00 4.1347616e-03 1.0578273e-03 4.2982720e-04 1.6634524e-04
 1.2724391e-04 1.0380909e-04 8.1956394e-05 6.7962894e-05 4.6300724e-05]  taking action:  0
Leaf selection - depth:  14
Leaf selection - action scores:  [1.43042672e+00 2.90808696e-02 1.21095705e-04 3.22144733e-05
 1.87620280e-05 1.87248479e-05 1.83181801e-05 1.29854725e-05
 1.21998382e-05 7.15502802e-06]  taking action:  0
Leaf selection - depth:  15
Leaf selection - action scores:  [1.9473600e+00 3.1287104e-03 3.2765954e-04 2.7123754e-04 2.5166266e-04
 4.9759143e-05 2.0615378e-05 1.5346135e-05 1.2622327e-05 1.0759609e-05]  taking action:  0
Adding child.
Leaf selection - depth:  16
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  20
Getting rollout return of leaf.
Token:  0
Token:  1
Token:  2
Token:  3
Token:  4
Token:  5
Token:  6
Token:  7
Token:  8
Token:  9
Token:  10
Token:  11
Token:  12
Token:  13
Token:  14
Token:  15
Token:  16
Token:  17
Token:  18
Token:  19
Token:  20
Token:  21
Token:  22
Token:  23
Token:  24
Token:  25
Token:  26
Token:  27
Token:  28
Token:  29
Token:  30
Token:  31
Token:  32
Token:  33
Token:  34
Token:  35
Token:  36
Token:  37
Token:  38
Token:  39
Token:  40
Token:  41
Token:  42
Token:  43
Token:  44
Token:  45
Token:  46
Token:  47
Token:  48
Token:  49
Token:  50
Token:  51
Token:  52
Token:  53
Token:  54
Token:  55
Token:  56
Token:  57
Token:  58
Token:  59
Token:  60
Token:  61
Token:  62
Token:  63
Token:  64
Token:  65
Token:  66
Token:  67
Token:  68
Token:  69
Token:  70
Token:  71
Token:  72
Token:  73
Token:  74
Token:  75
Token:  76
Token:  77
Token:  78
Token:  79
Token:  80
Token:  81
Token:  82
Token:  83
Token:  84
Token:  85
Token:  86
Token:  87
Token:  88
Token:  89
Token:  90
Token:  91
Token:  92
Token:  93
Token:  94
Token:  95
Token:  96
Token:  97
Token:  98
Token:  99
Token:  100
Token:  101
Token:  102
Token:  103
Token:  104
Token:  105
Token:  106
Token:  107
Token:  108
Token:  109
Token:  110
Token:  111
Token:  112
Token:  113
Token:  114
Token:  115
Token:  116
Token:  117
Token:  118
Token:  119
Token:  120
Token:  121
Token:  122
Token:  123
Token:  124
Token:  125
Token:  126
Token:  127
Token:  128
Token:  129
Token:  130
Token:  131
Token:  132
Token:  133
Token:  134
Token:  135
Token:  136
Token:  137
Token:  138
Token:  139
Token:  140
Token:  141
Token:  142
Token:  143
Token:  144
Token:  145
Token:  146
Token:  147
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7,c8;
  adder_8 A1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
  adder_8 A2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
  adder_8 A3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
  adder_8 A4(sum[31:24], cout, in1[31:24], in2[31:24], c3);
endmodule
Path:  output_files/3084873_adder_32/3084873_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  148
LLM generates return in:  53.696742  seconds
Running getPromptScore: 
adder_32
output_files/3084873_adder_32/synth_script.sh
Running bash in x seconds:  0.889212

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.5
Backpropogation: incorporating estimates.
Current runs:  22.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [7.35149039e-01 1.85442453e-01 3.57513826e-03 2.05927280e-03
 9.93072905e-04 6.54642455e-04 7.39846409e-01 4.43112091e-04
 4.25013328e-04 3.54332804e-04]  taking action:  6
Leaf selection - depth:  1
Leaf selection - action scores:  [1.8661820e+00 3.8546242e-02 6.6548522e-04 6.2444096e-04 2.1462541e-04
 1.4358679e-04 1.0935348e-04 1.0685780e-04 9.8888398e-05 9.1997783e-05]  taking action:  0
Adding child.
Leaf selection - depth:  2
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  50286
Getting rollout return of leaf.
Token:  0
Token:  1
Token:  2
Token:  3
Token:  4
Token:  5
Token:  6
Token:  7
Token:  8
Token:  9
Token:  10
Token:  11
Token:  12
Token:  13
Token:  14
Token:  15
Token:  16
Token:  17
Token:  18
Token:  19
Token:  20
Token:  21
Token:  22
Token:  23
Token:  24
Token:  25
Token:  26
Token:  27
Token:  28
Token:  29
Token:  30
Token:  31
Token:  32
Token:  33
Token:  34
Token:  35
Token:  36
Token:  37
Token:  38
Token:  39
Token:  40
Token:  41
Token:  42
Token:  43
Token:  44
Token:  45
Token:  46
Token:  47
Token:  48
Token:  49
Token:  50
Token:  51
Token:  52
Token:  53
Token:  54
Token:  55
Token:  56
Token:  57
Token:  58
Token:  59
Token:  60
Token:  61
Token:  62
Token:  63
Token:  64
Token:  65
Token:  66
Token:  67
Token:  68
Token:  69
Token:  70
Token:  71
Token:  72
Token:  73
Token:  74
Token:  75
Token:  76
Token:  77
Token:  78
Token:  79
Token:  80
Token:  81
Token:  82
Token:  83
Token:  84
Token:  85
Token:  86
Token:  87
Token:  88
Token:  89
Token:  90
Token:  91
Token:  92
Token:  93
Token:  94
Token:  95
Token:  96
Token:  97
Token:  98
Token:  99
Token:  100
Token:  101
Token:  102
Token:  103
Token:  104
Token:  105
Token:  106
Token:  107
Token:  108
Token:  109
Token:  110
Token:  111
Token:  112
Token:  113
Token:  114
Token:  115
Token:  116
Token:  117
Token:  118
Token:  119
Token:  120
Token:  121
Token:  122
Token:  123
Token:  124
Token:  125
Token:  126
Token:  127
Token:  128
Token:  129
Token:  130
Token:  131
Token:  132
Token:  133
Token:  134
Token:  135
Token:  136
Token:  137
Token:  138
Token:  139
Token:  140
Token:  141
Token:  142
Token:  143
Token:  144
Token:  145
Token:  146
Token:  147
Token:  148
Token:  149
Token:  150
Token:  151
Token:  152
Token:  153
Token:  154
Token:  155
Token:  156
Token:  157
Token:  158
Token:  159
Token:  160
Token:  161
Token:  162
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);                      
  wire c1,c2,c3,c4,c5,c6,c7,c8;
  adder_8 A1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
  adder_8 A2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
  adder_8 A3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
  adder_8 A4(sum[31:24], cout, in1[31:24], in2[31:24], c3);
endmodule
Path:  output_files/3084873_adder_32/3084873_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  163
LLM generates return in:  58.458345  seconds
Running getPromptScore: 
adder_32
output_files/3084873_adder_32/synth_script.sh
Running bash in x seconds:  0.89599

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.5
Backpropogation: incorporating estimates.
Current runs:  23.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [7.40718678e-01 1.89430919e-01 3.65203175e-03 2.10356330e-03
 1.01443175e-03 6.68722398e-04 6.66921307e-01 4.52642473e-04
 4.34154446e-04 3.61953736e-04]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [0.78268206 0.05274096 0.02034198 0.01676519 0.01018188 0.00900284
 0.00741    0.00404285 0.00302918 0.00226652]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.7832931  0.17966975 0.01835855 0.01681414 0.00774721 0.00625202
 0.00490497 0.00283209 0.00184355 0.00182571]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.755282   0.7375623  0.11732762 0.09292609 0.00565337 0.00447829
 0.00275812 0.0023557  0.00177687 0.00145942]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.84495205 0.05152646 0.04091127 0.02921232 0.0144787  0.00496265
 0.00417645 0.00388493 0.00344002 0.00262052]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [8.6802006e-01 5.1878676e-02 2.8602607e-03 1.0837540e-03 1.0175956e-03
 6.6390727e-04 3.1549626e-04 2.1927276e-04 1.0312293e-04 1.0166755e-04]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [8.1441075e-01 7.5493175e-01 6.1175629e-02 2.6470663e-03 3.3927718e-04
 2.2019655e-04 1.3338387e-04 1.3121680e-04 1.0711073e-04 1.0658657e-04]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [9.06944633e-01 5.02377609e-03 1.70361635e-03 2.39840825e-04
 1.39601514e-04 1.13912487e-04 6.39473947e-05 3.39984981e-05
 2.44087405e-05 1.38877485e-05]  taking action:  0
Leaf selection - depth:  8
Leaf selection - action scores:  [9.2331982e-01 5.1837686e-02 7.9312985e-04 5.0649571e-04 3.7154817e-04
 6.0584658e-05 5.8509588e-05 3.7963277e-05 3.7445203e-05 3.6696863e-05]  taking action:  0
Leaf selection - depth:  9
Leaf selection - action scores:  [9.5024735e-01 3.1262174e-02 2.7389626e-03 2.4309410e-03 2.2356371e-04
 1.7191120e-04 1.6365756e-04 5.4365264e-05 5.3860767e-05 4.7391462e-05]  taking action:  0
Leaf selection - depth:  10
Leaf selection - action scores:  [9.84546065e-01 5.03947819e-03 4.28279443e-03 5.61377674e-04
 3.65195097e-04 2.05571370e-04 1.37134542e-04 1.20580262e-04
 1.02249294e-04 7.04772610e-05]  taking action:  0
Leaf selection - depth:  11
Leaf selection - action scores:  [9.9613094e-01 1.7331040e-01 2.3686970e-04 2.3674504e-04 2.3033113e-04
 4.5568548e-05 2.5488027e-05 2.3203927e-05 2.2883605e-05 1.5216345e-05]  taking action:  0
Leaf selection - depth:  12
Leaf selection - action scores:  [1.0719603e+00 1.4963943e-02 1.9534600e-03 1.6095105e-03 3.9799136e-04
 2.6525295e-04 1.8373535e-04 8.2142702e-05 7.7758683e-05 6.7683286e-05]  taking action:  0
Leaf selection - depth:  13
Leaf selection - action scores:  [1.1446261e+00 4.6228035e-03 1.1826868e-03 4.8056140e-04 1.8597963e-04
 1.4226302e-04 1.1606209e-04 9.1630027e-05 7.5984826e-05 5.1765779e-05]  taking action:  0
Leaf selection - depth:  14
Leaf selection - action scores:  [1.2420262e+00 3.3579696e-02 1.3982927e-04 3.7198068e-05 2.1664524e-05
 2.1621590e-05 2.1152013e-05 1.4994332e-05 1.4087160e-05 8.2619144e-06]  taking action:  0
Leaf selection - depth:  15
Leaf selection - action scores:  [1.4425097e+00 3.8318720e-03 4.0129933e-04 3.3219680e-04 3.0822257e-04
 6.0942257e-05 2.5248579e-05 1.8795099e-05 1.5459131e-05 1.3177776e-05]  taking action:  0
Leaf selection - depth:  16
Leaf selection - action scores:  [1.94984245e+00 1.22776569e-03 1.64170298e-04 1.00982019e-04
 6.38671336e-05 6.27332265e-05 3.56307719e-05 2.64286919e-05
 2.30061851e-05 1.45488375e-05]  taking action:  0
Adding child.
Leaf selection - depth:  17
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  11
Getting rollout return of leaf.
Token:  0
Token:  1
Token:  2
Token:  3
Token:  4
Token:  5
Token:  6
Token:  7
Token:  8
Token:  9
Token:  10
Token:  11
Token:  12
Token:  13
Token:  14
Token:  15
Token:  16
Token:  17
Token:  18
Token:  19
Token:  20
Token:  21
Token:  22
Token:  23
Token:  24
Token:  25
Token:  26
Token:  27
Token:  28
Token:  29
Token:  30
Token:  31
Token:  32
Token:  33
Token:  34
Token:  35
Token:  36
Token:  37
Token:  38
Token:  39
Token:  40
Token:  41
Token:  42
Token:  43
Token:  44
Token:  45
Token:  46
Token:  47
Token:  48
Token:  49
Token:  50
Token:  51
Token:  52
Token:  53
Token:  54
Token:  55
Token:  56
Token:  57
Token:  58
Token:  59
Token:  60
Token:  61
Token:  62
Token:  63
Token:  64
Token:  65
Token:  66
Token:  67
Token:  68
Token:  69
Token:  70
Token:  71
Token:  72
Token:  73
Token:  74
Token:  75
Token:  76
Token:  77
Token:  78
Token:  79
Token:  80
Token:  81
Token:  82
Token:  83
Token:  84
Token:  85
Token:  86
Token:  87
Token:  88
Token:  89
Token:  90
Token:  91
Token:  92
Token:  93
Token:  94
Token:  95
Token:  96
Token:  97
Token:  98
Token:  99
Token:  100
Token:  101
Token:  102
Token:  103
Token:  104
Token:  105
Token:  106
Token:  107
Token:  108
Token:  109
Token:  110
Token:  111
Token:  112
Token:  113
Token:  114
Token:  115
Token:  116
Token:  117
Token:  118
Token:  119
Token:  120
Token:  121
Token:  122
Token:  123
Token:  124
Token:  125
Token:  126
Token:  127
Token:  128
Token:  129
Token:  130
Token:  131
Token:  132
Token:  133
Token:  134
Token:  135
Token:  136
Token:  137
Token:  138
Token:  139
Token:  140
Token:  141
Token:  142
Token:  143
Token:  144
Token:  145
Token:  146
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7,c8;
  adder_8 A1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
  adder_8 A2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
  adder_8 A3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
  adder_8 A4(sum[31:24], cout, in1[31:24], in2[31:24], c3);
endmodule
Path:  output_files/3084873_adder_32/3084873_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  147
LLM generates return in:  53.352723  seconds
Running getPromptScore: 
adder_32
output_files/3084873_adder_32/synth_script.sh
Running bash in x seconds:  0.888439

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.5
Backpropogation: incorporating estimates.
Current runs:  24.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [7.34983730e-01 1.93337122e-01 3.72733930e-03 2.14694030e-03
 1.03535007e-03 6.82511940e-04 6.73800133e-01 4.61976290e-04
 4.43107026e-04 3.69417485e-04]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [0.77611685 0.05398209 0.02082068 0.01715972 0.01042148 0.0092147
 0.00758437 0.00413799 0.00310046 0.00231985]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.776392   0.18410672 0.01881192 0.01722937 0.00793853 0.00640642
 0.0050261  0.00290203 0.00188907 0.0018708 ]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.74531883 0.74633163 0.1203756  0.09534016 0.00580023 0.00459463
 0.00282977 0.00241689 0.00182303 0.00149733]  taking action:  1
Leaf selection - depth:  4
Leaf selection - action scores:  [0.89341587 0.7352866  0.10074699 0.04360733 0.01796234 0.01524258
 0.01522248 0.01429158 0.00866973 0.0085014 ]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [1.2462289e+00 2.1115817e-02 3.1982279e-05 2.3429551e-05 2.2057935e-05
 1.1676644e-05 1.0290227e-05 9.2793325e-06 9.1640213e-06 9.0287622e-06]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [1.4444932e+00 1.2079924e-03 1.8350307e-05 4.3532959e-06 2.2504275e-06
 1.6363671e-06 1.6285082e-06 1.2791284e-06 7.8637544e-07 7.3176722e-07]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [1.9511843e+00 2.2384904e-04 1.0980006e-04 3.2673484e-05 2.4464498e-05
 1.3274100e-05 8.1860499e-06 2.7607073e-06 1.5505790e-06 1.5133027e-06]  taking action:  0
Adding child.
Leaf selection - depth:  8
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  269
Getting rollout return of leaf.
Token:  0
Token:  1
Token:  2
Token:  3
Token:  4
Token:  5
Token:  6
Token:  7
Token:  8
Token:  9
Token:  10
Token:  11
Token:  12
Token:  13
Token:  14
Token:  15
Token:  16
Token:  17
Token:  18
Token:  19
Token:  20
Token:  21
Token:  22
Token:  23
Token:  24
Token:  25
Token:  26
Token:  27
Token:  28
Token:  29
Token:  30
Token:  31
Token:  32
Token:  33
Token:  34
Token:  35
Token:  36
Token:  37
Token:  38
Token:  39
Token:  40
Token:  41
Token:  42
Token:  43
Token:  44
Token:  45
Token:  46
Token:  47
Token:  48
Token:  49
Token:  50
Token:  51
Token:  52
Token:  53
Token:  54
Token:  55
Token:  56
Token:  57
Token:  58
Token:  59
Token:  60
Token:  61
Token:  62
Token:  63
Token:  64
Token:  65
Token:  66
Token:  67
Token:  68
Token:  69
Token:  70
Token:  71
Token:  72
Token:  73
Token:  74
Token:  75
Token:  76
Token:  77
Token:  78
Token:  79
Token:  80
Token:  81
Token:  82
Token:  83
Token:  84
Token:  85
Token:  86
Token:  87
Token:  88
Token:  89
Token:  90
Token:  91
Token:  92
Token:  93
Token:  94
Token:  95
Token:  96
Token:  97
Token:  98
Token:  99
Token:  100
Token:  101
Token:  102
Token:  103
Token:  104
Token:  105
Token:  106
Token:  107
Token:  108
Token:  109
Token:  110
Token:  111
Token:  112
Token:  113
Token:  114
Token:  115
Token:  116
Token:  117
Token:  118
Token:  119
Token:  120
Token:  121
Token:  122
Token:  123
Token:  124
Token:  125
Token:  126
Token:  127
Token:  128
Token:  129
Token:  130
Token:  131
Token:  132
Token:  133
Token:  134
Token:  135
Token:  136
Token:  137
Token:  138
Token:  139
Token:  140
Token:  141
Token:  142
Token:  143
Token:  144
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
  wire [7:0] c;
  adder_8 A1(sum[7:0], c[0], in1[7:0], in2[7:0], cin);
  adder_8 A2(sum[15:8], c[1], in1[15:8], in2[15:8], c[0]);
  adder_8 A3(sum[23:16], c[2], in1[23:16], in2[23:16], c[1]);
  adder_8 A4(sum[31:24], cout, in1[31:24], in2[31:24], c[2]);
endmodule
Path:  output_files/3084873_adder_32/3084873_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  145
LLM generates return in:  51.8166  seconds
Running getPromptScore: 
adder_32
output_files/3084873_adder_32/synth_script.sh
Running bash in x seconds:  0.90405

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.5
Backpropogation: incorporating estimates.
Current runs:  25.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [7.29648844e-01 1.97165952e-01 3.80115517e-03 2.18945810e-03
 1.05585405e-03 6.96028340e-04 6.80542704e-01 4.71125223e-04
 4.51882274e-04 3.76733393e-04]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [0.7700004  0.05519532 0.02128862 0.01754538 0.0106557  0.00942179
 0.00775483 0.00423099 0.00317014 0.00237199]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.76998526 0.18843924 0.01925461 0.01763482 0.00812535 0.00655718
 0.00514437 0.00297032 0.00193353 0.00191482]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.7522001  0.7124036  0.12334829 0.09769459 0.00594347 0.0047081
 0.00289966 0.00247658 0.00186805 0.00153431]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.83280855 0.05333496 0.04234719 0.03023762 0.01498688 0.00513683
 0.00432304 0.00402128 0.00356076 0.0027125 ]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [8.53986442e-01 5.38370423e-02 2.96823261e-03 1.12466468e-03
 1.05600886e-03 6.88969099e-04 3.27405927e-04 2.27550074e-04
 1.07015716e-04 1.05505402e-04]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [8.0167973e-01 7.8575784e-01 6.3673615e-02 2.7551539e-03 3.5313089e-04
 2.2918783e-04 1.3883034e-04 1.3657477e-04 1.1148438e-04 1.1093882e-04]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [8.8842100e-01 5.2471627e-03 1.7793692e-03 2.5050557e-04 1.4580903e-04
 1.1897771e-04 6.6790875e-05 3.5510275e-05 2.5494097e-05 1.4505280e-05]  taking action:  0
Leaf selection - depth:  8
Leaf selection - action scores:  [9.0202391e-01 5.4367829e-02 8.3184167e-04 5.3121720e-04 3.8968303e-04
 6.3541731e-05 6.1365376e-05 3.9816223e-05 3.9272865e-05 3.8488000e-05]  taking action:  0
Leaf selection - depth:  9
Leaf selection - action scores:  [9.2487389e-01 3.2953225e-02 2.8871200e-03 2.5624367e-03 2.3565684e-04
 1.8121033e-04 1.7251022e-04 5.7306021e-05 5.6774235e-05 4.9954986e-05]  taking action:  0
Leaf selection - depth:  10
Leaf selection - action scores:  [9.5348758e-01 5.3451732e-03 4.5425897e-03 5.9543090e-04 3.8734789e-04
 2.1804136e-04 1.4545314e-04 1.2789467e-04 1.0845175e-04 7.4752417e-05]  taking action:  0
Leaf selection - depth:  11
Leaf selection - action scores:  [9.5954859e-01 1.8527660e-01 2.5322437e-04 2.5309110e-04 2.4623435e-04
 4.8714828e-05 2.7247846e-05 2.4806041e-05 2.4463601e-05 1.6266957e-05]  taking action:  0
Leaf selection - depth:  12
Leaf selection - action scores:  [1.0215001e+00 1.6162906e-02 2.1099781e-03 1.7384700e-03 4.2987982e-04
 2.8650594e-04 1.9845687e-04 8.8724264e-05 8.3988984e-05 7.3106305e-05]  taking action:  0
Leaf selection - depth:  13
Leaf selection - action scores:  [1.0744665e+00 5.0640278e-03 1.2955684e-03 5.2642863e-04 2.0373048e-04
 1.5584134e-04 1.2713965e-04 1.0037567e-04 8.3237210e-05 5.6706573e-05]  taking action:  0
Leaf selection - depth:  14
Leaf selection - action scores:  [1.1369622e+00 3.7543237e-02 1.5633387e-04 4.1588704e-05 2.4221672e-05
 2.4173673e-05 2.3648669e-05 1.6764172e-05 1.5749923e-05 9.2371010e-06]  taking action:  0
Leaf selection - depth:  15
Leaf selection - action scores:  [1.2513276e+00 4.4246647e-03 4.6338054e-04 3.8358782e-04 3.5590475e-04
 7.0370050e-05 2.9154548e-05 2.1702712e-05 1.7850665e-05 1.5216384e-05]  taking action:  0
Leaf selection - depth:  16
Leaf selection - action scores:  [1.4440298e+00 1.5036997e-03 2.0106674e-04 1.2367721e-04 7.8220946e-05
 7.6832199e-05 4.3638607e-05 3.2368403e-05 2.8176708e-05 1.7818615e-05]  taking action:  0
Leaf selection - depth:  17
Leaf selection - action scores:  [1.9486903e+00 2.7027922e-03 6.6031658e-05 5.0478578e-05 3.7990310e-05
 1.1551261e-05 9.4617317e-06 7.3484812e-06 4.7521430e-06 4.0177360e-06]  taking action:  0
Adding child.
Leaf selection - depth:  18
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  66
Getting rollout return of leaf.
Token:  0
Token:  1
Token:  2
Token:  3
Token:  4
Token:  5
Token:  6
Token:  7
Token:  8
Token:  9
Token:  10
Token:  11
Token:  12
Token:  13
Token:  14
Token:  15
Token:  16
Token:  17
Token:  18
Token:  19
Token:  20
Token:  21
Token:  22
Token:  23
Token:  24
Token:  25
Token:  26
Token:  27
Token:  28
Token:  29
Token:  30
Token:  31
Token:  32
Token:  33
Token:  34
Token:  35
Token:  36
Token:  37
Token:  38
Token:  39
Token:  40
Token:  41
Token:  42
Token:  43
Token:  44
Token:  45
Token:  46
Token:  47
Token:  48
Token:  49
Token:  50
Token:  51
Token:  52
Token:  53
Token:  54
Token:  55
Token:  56
Token:  57
Token:  58
Token:  59
Token:  60
Token:  61
Token:  62
Token:  63
Token:  64
Token:  65
Token:  66
Token:  67
Token:  68
Token:  69
Token:  70
Token:  71
Token:  72
Token:  73
Token:  74
Token:  75
Token:  76
Token:  77
Token:  78
Token:  79
Token:  80
Token:  81
Token:  82
Token:  83
Token:  84
Token:  85
Token:  86
Token:  87
Token:  88
Token:  89
Token:  90
Token:  91
Token:  92
Token:  93
Token:  94
Token:  95
Token:  96
Token:  97
Token:  98
Token:  99
Token:  100
Token:  101
Token:  102
Token:  103
Token:  104
Token:  105
Token:  106
Token:  107
Token:  108
Token:  109
Token:  110
Token:  111
Token:  112
Token:  113
Token:  114
Token:  115
Token:  116
Token:  117
Token:  118
Token:  119
Token:  120
Token:  121
Token:  122
Token:  123
Token:  124
Token:  125
Token:  126
Token:  127
Token:  128
Token:  129
Token:  130
Token:  131
Token:  132
Token:  133
Token:  134
Token:  135
Token:  136
Token:  137
Token:  138
Token:  139
Token:  140
Token:  141
Token:  142
Token:  143
Token:  144
Token:  145
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7,c8;
  adder_8 A1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
  adder_8 A2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
  adder_8 A3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
  adder_8 A4(sum[31:24], cout, in1[31:24], in2[31:24], c3);
endmodule
Path:  output_files/3084873_adder_32/3084873_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  146
LLM generates return in:  53.023289  seconds
Running getPromptScore: 
adder_32
output_files/3084873_adder_32/synth_script.sh
Running bash in x seconds:  0.888179

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.5
Backpropogation: incorporating estimates.
Current runs:  26.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [7.24669367e-01 2.00921831e-01 3.87356463e-03 2.23116581e-03
 1.07596736e-03 7.09287214e-04 6.87156810e-01 4.80099844e-04
 4.60490329e-04 3.83909912e-04]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [0.7642835  0.05638245 0.0217465  0.01792274 0.01088488 0.00962444
 0.00792162 0.00432198 0.00323833 0.00242301]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.76401603 0.19267435 0.01968736 0.01803116 0.00830796 0.00670455
 0.00525999 0.00303708 0.00197698 0.00195786]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.74273705 0.71936303 0.12625098 0.09999359 0.00608334 0.00481889
 0.00296789 0.00253486 0.00191201 0.00157041]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.8219015  0.05508411 0.04373598 0.03122929 0.01547838 0.00530529
 0.00446481 0.00415316 0.00367753 0.00280146]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [8.4149206e-01 5.5726636e-02 3.0724129e-03 1.1641385e-03 1.0930732e-03
 7.1315083e-04 3.3889734e-04 2.3553672e-04 1.1077180e-04 1.0920847e-04]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [7.9043758e-01 8.1541944e-01 6.6077225e-02 2.8591582e-03 3.6646120e-04
 2.3783944e-04 1.4407103e-04 1.4173033e-04 1.1569281e-04 1.1512665e-04]  taking action:  1
Adding child.
Leaf selection - depth:  7
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  17
Getting rollout return of leaf.
Token:  0
Token:  1
Token:  2
Token:  3
Token:  4
Token:  5
Token:  6
Token:  7
Token:  8
Token:  9
Token:  10
Token:  11
Token:  12
Token:  13
Token:  14
Token:  15
Token:  16
Token:  17
Token:  18
Token:  19
Token:  20
Token:  21
Token:  22
Token:  23
Token:  24
Token:  25
Token:  26
Token:  27
Token:  28
Token:  29
Token:  30
Token:  31
Token:  32
Token:  33
Token:  34
Token:  35
Token:  36
Token:  37
Token:  38
Token:  39
Token:  40
Token:  41
Token:  42
Token:  43
Token:  44
Token:  45
Token:  46
Token:  47
Token:  48
Token:  49
Token:  50
Token:  51
Token:  52
Token:  53
Token:  54
Token:  55
Token:  56
Token:  57
Token:  58
Token:  59
Token:  60
Token:  61
Token:  62
Token:  63
Token:  64
Token:  65
Token:  66
Token:  67
Token:  68
Token:  69
Token:  70
Token:  71
Token:  72
Token:  73
Token:  74
Token:  75
Token:  76
Token:  77
Token:  78
Token:  79
Token:  80
Token:  81
Token:  82
Token:  83
Token:  84
Token:  85
Token:  86
Token:  87
Token:  88
Token:  89
Token:  90
Token:  91
Token:  92
Token:  93
Token:  94
Token:  95
Token:  96
Token:  97
Token:  98
Token:  99
Token:  100
Token:  101
Token:  102
Token:  103
Token:  104
Token:  105
Token:  106
Token:  107
Token:  108
Token:  109
Token:  110
Token:  111
Token:  112
Token:  113
Token:  114
Token:  115
Token:  116
Token:  117
Token:  118
Token:  119
Token:  120
Token:  121
Token:  122
Token:  123
Token:  124
Token:  125
Token:  126
Token:  127
Token:  128
Token:  129
Token:  130
Token:  131
Token:  132
Token:  133
Token:  134
Token:  135
Token:  136
Token:  137
Token:  138
Token:  139
Token:  140
Token:  141
Token:  142
Token:  143
Token:  144
Token:  145
Token:  146
Token:  147
Token:  148
Token:  149
Token:  150
Token:  151
Token:  152
Token:  153
Token:  154
Token:  155
Token:  156
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
  wire c1, c2, c3, c4, c5, c6, c7, c8;
  adder_8 A1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
  adder_8 A2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
  adder_8 A3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
  adder_8 A4(sum[31:24], cout, in1[31:24], in2[31:24], c3);
endmodule
Path:  output_files/3084873_adder_32/3084873_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  157
LLM generates return in:  56.434703  seconds
Running getPromptScore: 
adder_32
output_files/3084873_adder_32/synth_script.sh
Running bash in x seconds:  0.889709

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.5
Backpropogation: incorporating estimates.
Current runs:  27.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [7.20007403e-01 2.04608778e-01 3.94464514e-03 2.27210805e-03
 1.09571153e-03 7.22302744e-04 6.93649526e-01 4.88909750e-04
 4.68940398e-04 3.90954718e-04]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [0.7589239  0.0575451  0.02219492 0.01829232 0.01110934 0.0098229
 0.00808497 0.00441111 0.0033051  0.00247297]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.7584362  0.19681835 0.02011079 0.01841897 0.00848665 0.00684875
 0.00537312 0.0031024  0.0020195  0.00199997]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.73425394 0.72616607 0.12908845 0.10224093 0.00622006 0.00492719
 0.0030346  0.00259183 0.00195498 0.00160571]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.8120322  0.0567794  0.04508202 0.03219041 0.01595475 0.00546857
 0.00460222 0.00428098 0.00379071 0.00288768]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [8.30271959e-01 5.75542226e-02 3.17317434e-03 1.20231707e-03
 1.12892105e-03 7.36539019e-04 3.50011658e-04 2.43261267e-04
 1.14404618e-04 1.12790025e-04]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [8.01981390e-01 6.72019660e-01 6.83964342e-02 2.95950985e-03
 3.79323406e-04 2.46187235e-04 1.49127693e-04 1.46704842e-04
 1.19753444e-04 1.19167409e-04]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [8.7229264e-01 5.4614199e-03 1.8520262e-03 2.6073444e-04 1.5176284e-04
 1.2383593e-04 6.9518144e-05 3.6960264e-05 2.6535097e-05 1.5097574e-05]  taking action:  0
Leaf selection - depth:  8
Leaf selection - action scores:  [8.8374865e-01 5.6785341e-02 8.6883025e-04 5.5483828e-04 4.0701064e-04
 6.6367167e-05 6.4094042e-05 4.1586685e-05 4.1019168e-05 4.0199404e-05]  taking action:  0
Leaf selection - depth:  9
Leaf selection - action scores:  [9.0349078e-01 3.4561638e-02 3.0280373e-03 2.6875064e-03 2.4715901e-04
 1.9005500e-04 1.8093025e-04 6.0103066e-05 5.9545324e-05 5.2393236e-05]  taking action:  0
Leaf selection - depth:  10
Leaf selection - action scores:  [9.2790991e-01 5.6343074e-03 4.7883098e-03 6.2763930e-04 4.0830055e-04
 2.2983579e-04 1.5332107e-04 1.3481283e-04 1.1431819e-04 7.8795965e-05]  taking action:  0
Leaf selection - depth:  11
Leaf selection - action scores:  [9.3028808e-01 1.9651550e-01 2.6858499e-04 2.6844363e-04 2.6117094e-04
 5.1669875e-05 2.8900704e-05 2.6310778e-05 2.5947567e-05 1.7253713e-05]  taking action:  0
Leaf selection - depth:  12
Leaf selection - action scores:  [9.8279500e-01 1.7278872e-02 2.2556614e-03 1.8585026e-03 4.5956086e-04
 3.0628772e-04 2.1215931e-04 9.4850227e-05 8.9787995e-05 7.8153927e-05]  taking action:  0
Leaf selection - depth:  13
Leaf selection - action scores:  [1.0237559e+00 5.4697753e-03 1.3993739e-03 5.6860794e-04 2.2005408e-04
 1.6832788e-04 1.3732653e-04 1.0841812e-04 8.9906462e-05 6.1250103e-05]  taking action:  0
Leaf selection - depth:  14
Leaf selection - action scores:  [1.0677501e+00 4.1126557e-02 1.7125517e-04 4.5558143e-05 2.6533513e-05
 2.6480931e-05 2.5905818e-05 1.8364230e-05 1.7253176e-05 1.0118737e-05]  taking action:  0
Leaf selection - depth:  15
Leaf selection - action scores:  [1.1447616e+00 4.9469252e-03 5.1807519e-04 4.2886421e-04 3.9791359e-04
 7.8676108e-05 3.2595774e-05 2.4264367e-05 1.9957650e-05 1.7012435e-05]  taking action:  0
Leaf selection - depth:  16
Leaf selection - action scores:  [1.2524978e+00 1.7363228e-03 2.3217186e-04 1.4281014e-04 9.0321766e-05
 8.8718181e-05 5.0389521e-05 3.7375812e-05 3.2535660e-05 2.0575164e-05]  taking action:  0
Leaf selection - depth:  17
Leaf selection - action scores:  [1.4433242e+00 3.3102310e-03 8.0871934e-05 6.1823383e-05 4.6528439e-05
 1.4147347e-05 1.1588208e-05 9.0000149e-06 5.8201631e-06 4.9207015e-06]  taking action:  0
Leaf selection - depth:  18
Leaf selection - action scores:  [1.94847298e+00 2.56603700e-03 1.75918060e-04 1.28594489e-04
 1.01602505e-04 2.99275143e-05 1.02365357e-05 8.52226549e-06
 7.67717120e-06 7.53678387e-06]  taking action:  0
Adding child.
Leaf selection - depth:  19
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  21
Getting rollout return of leaf.
Token:  0
Token:  1
Token:  2
Token:  3
Token:  4
Token:  5
Token:  6
Token:  7
Token:  8
Token:  9
Token:  10
Token:  11
Token:  12
Token:  13
Token:  14
Token:  15
Token:  16
Token:  17
Token:  18
Token:  19
Token:  20
Token:  21
Token:  22
Token:  23
Token:  24
Token:  25
Token:  26
Token:  27
Token:  28
Token:  29
Token:  30
Token:  31
Token:  32
Token:  33
Token:  34
Token:  35
Token:  36
Token:  37
Token:  38
Token:  39
Token:  40
Token:  41
Token:  42
Token:  43
Token:  44
Token:  45
Token:  46
Token:  47
Token:  48
Token:  49
Token:  50
Token:  51
Token:  52
Token:  53
Token:  54
Token:  55
Token:  56
Token:  57
Token:  58
Token:  59
Token:  60
Token:  61
Token:  62
Token:  63
Token:  64
Token:  65
Token:  66
Token:  67
Token:  68
Token:  69
Token:  70
Token:  71
Token:  72
Token:  73
Token:  74
Token:  75
Token:  76
Token:  77
Token:  78
Token:  79
Token:  80
Token:  81
Token:  82
Token:  83
Token:  84
Token:  85
Token:  86
Token:  87
Token:  88
Token:  89
Token:  90
Token:  91
Token:  92
Token:  93
Token:  94
Token:  95
Token:  96
Token:  97
Token:  98
Token:  99
Token:  100
Token:  101
Token:  102
Token:  103
Token:  104
Token:  105
Token:  106
Token:  107
Token:  108
Token:  109
Token:  110
Token:  111
Token:  112
Token:  113
Token:  114
Token:  115
Token:  116
Token:  117
Token:  118
Token:  119
Token:  120
Token:  121
Token:  122
Token:  123
Token:  124
Token:  125
Token:  126
Token:  127
Token:  128
Token:  129
Token:  130
Token:  131
Token:  132
Token:  133
Token:  134
Token:  135
Token:  136
Token:  137
Token:  138
Token:  139
Token:  140
Token:  141
Token:  142
Token:  143
Token:  144
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7,c8;
  adder_8 A1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
  adder_8 A2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
  adder_8 A3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
  adder_8 A4(sum[31:24], cout, in1[31:24], in2[31:24], c3);
endmodule
Path:  output_files/3084873_adder_32/3084873_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  145
LLM generates return in:  52.67901  seconds
Running getPromptScore: 
adder_32
output_files/3084873_adder_32/synth_script.sh
Running bash in x seconds:  0.887005

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.5
Backpropogation: incorporating estimates.
Current runs:  28.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [7.15630431e-01 2.08230453e-01 4.01446729e-03 2.31232547e-03
 1.11510616e-03 7.35087855e-04 7.00027298e-01 4.97563692e-04
 4.77240872e-04 3.97874808e-04]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [0.7538856  0.05868472 0.02263447 0.01865458 0.01132935 0.01001743
 0.00824508 0.00449846 0.00337056 0.00252195]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.7532047  0.2008769  0.02052549 0.01879878 0.00866165 0.00698997
 0.00548392 0.00316638 0.00206115 0.00204121]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.72659564 0.7328227  0.13186486 0.10443991 0.00635384 0.00503317
 0.00309986 0.00264757 0.00199703 0.00164024]  taking action:  1
Leaf selection - depth:  4
Leaf selection - action scores:  [0.85431695 0.8054661  0.1103628  0.04776944 0.01967676 0.01669741
 0.01667539 0.01565564 0.00949722 0.00931282]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [1.14048624e+00 2.36082003e-02 3.57572717e-05 2.61950336e-05
 2.46615200e-05 1.30548851e-05 1.15048233e-05 1.03746088e-05
 1.02456870e-05 1.00944635e-05]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [1.2528546e+00 1.3948695e-03 2.1189107e-05 5.0267527e-06 2.5985698e-06
 1.8895139e-06 1.8804392e-06 1.4770102e-06 9.0802814e-07 8.4497202e-07]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [1.4448514e+00 2.7415797e-04 1.3447706e-04 4.0016683e-05 2.9962770e-05
 1.6257385e-05 1.0025823e-05 3.3811623e-06 1.8990637e-06 1.8534098e-06]  taking action:  0
Leaf selection - depth:  8
Leaf selection - action scores:  [0.37910587 0.298869   0.27556852 0.1824895  0.09816837 0.07890939
 0.07166989 0.06406888 0.0435054  0.04087477]  taking action:  0
Adding child.
Leaf selection - depth:  9
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  26
Getting rollout return of leaf.
Token:  0
Token:  1
Token:  2
Token:  3
Token:  4
Token:  5
Token:  6
Token:  7
Token:  8
Token:  9
Token:  10
Token:  11
Token:  12
Token:  13
Token:  14
Token:  15
Token:  16
Token:  17
Token:  18
Token:  19
Token:  20
Token:  21
Token:  22
Token:  23
Token:  24
Token:  25
Token:  26
Token:  27
Token:  28
Token:  29
Token:  30
Token:  31
Token:  32
Token:  33
Token:  34
Token:  35
Token:  36
Token:  37
Token:  38
Token:  39
Token:  40
Token:  41
Token:  42
Token:  43
Token:  44
Token:  45
Token:  46
Token:  47
Token:  48
Token:  49
Token:  50
Token:  51
Token:  52
Token:  53
Token:  54
Token:  55
Token:  56
Token:  57
Token:  58
Token:  59
Token:  60
Token:  61
Token:  62
Token:  63
Token:  64
Token:  65
Token:  66
Token:  67
Token:  68
Token:  69
Token:  70
Token:  71
Token:  72
Token:  73
Token:  74
Token:  75
Token:  76
Token:  77
Token:  78
Token:  79
Token:  80
Token:  81
Token:  82
Token:  83
Token:  84
Token:  85
Token:  86
Token:  87
Token:  88
Token:  89
Token:  90
Token:  91
Token:  92
Token:  93
Token:  94
Token:  95
Token:  96
Token:  97
Token:  98
Token:  99
Token:  100
Token:  101
Token:  102
Token:  103
Token:  104
Token:  105
Token:  106
Token:  107
Token:  108
Token:  109
Token:  110
Token:  111
Token:  112
Token:  113
Token:  114
Token:  115
Token:  116
Token:  117
Token:  118
Token:  119
Token:  120
Token:  121
Token:  122
Token:  123
Token:  124
Token:  125
Token:  126
Token:  127
Token:  128
Token:  129
Token:  130
Token:  131
Token:  132
Token:  133
Token:  134
Token:  135
Token:  136
Token:  137
Token:  138
Token:  139
Token:  140
Token:  141
Token:  142
Token:  143
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
  wire [7:0] c;
  adder_8 A1(sum[7:0], c[0], in1[7:0], in2[7:0], cin);
  adder_8 A2(sum[15:8], c[1], in1[15:8], in2[15:8], c[0]);
  adder_8 A3(sum[23:16], c[2], in1[23:16], in2[23:16], c[1]);
  adder_8 A4(sum[31:24], cout, in1[31:24], in2[31:24], c[2]);
endmodule
Path:  output_files/3084873_adder_32/3084873_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  144
LLM generates return in:  51.426054  seconds
Running getPromptScore: 
adder_32
output_files/3084873_adder_32/synth_script.sh
Running bash in x seconds:  0.899352

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.5
Backpropogation: incorporating estimates.
Current runs:  29.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [7.11510452e-01 2.11790206e-01 4.08309563e-03 2.35185527e-03
 1.13416918e-03 7.47654370e-04 7.06296025e-01 5.06069670e-04
 4.85399427e-04 4.04676580e-04]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [0.74913746 0.05980263 0.02306564 0.01900994 0.01154516 0.01020826
 0.00840214 0.00458416 0.00343476 0.00256999]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.7482864  0.20485504 0.02093197 0.01917107 0.00883318 0.0071284
 0.00559252 0.00322908 0.00210197 0.00208163]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.731841   0.70515037 0.13458401 0.10659353 0.00648486 0.00513696
 0.00316378 0.00270217 0.00203821 0.00167407]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.8030442  0.05842552 0.04638902 0.03312366 0.0164173  0.00562711
 0.00473565 0.00440509 0.00390061 0.00297139]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [8.2012105e-01 5.9325535e-02 3.2708331e-03 1.2393201e-03 1.1636652e-03
 7.5920700e-04 3.6078377e-04 2.5074798e-04 1.1792558e-04 1.1626129e-04]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [7.9077876e-01 6.8586004e-01 7.0639528e-02 3.0565688e-03 3.9176355e-04
 2.5426107e-04 1.5401842e-04 1.5151611e-04 1.2368082e-04 1.2307557e-04]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [8.5807920e-01 5.6675831e-03 1.9219383e-03 2.7057691e-04 1.5749173e-04
 1.2851060e-04 7.2142386e-05 3.8355476e-05 2.7536771e-05 1.5667492e-05]  taking action:  0
Leaf selection - depth:  8
Leaf selection - action scores:  [8.6783481e-01 5.9104059e-02 9.0430718e-04 5.7749392e-04 4.2363009e-04
 6.9077141e-05 6.6711196e-05 4.3284796e-05 4.2694104e-05 4.1840864e-05]  taking action:  0
Leaf selection - depth:  9
Leaf selection - action scores:  [8.8514155e-01 3.6098450e-02 3.1626818e-03 2.8070088e-03 2.5814914e-04
 1.9850596e-04 1.8897548e-04 6.2775602e-05 6.2193059e-05 5.4722950e-05]  taking action:  0
Leaf selection - depth:  10
Leaf selection - action scores:  [9.0635657e-01 5.9093121e-03 5.0220219e-03 6.5827370e-04 4.2822925e-04
 2.4105381e-04 1.6080451e-04 1.4139290e-04 1.1989793e-04 8.2641913e-05]  taking action:  0
Leaf selection - depth:  11
Leaf selection - action scores:  [9.0617263e-01 2.0714553e-01 2.8311345e-04 2.8296444e-04 2.7529834e-04
 5.4464832e-05 3.0464018e-05 2.7733997e-05 2.7351138e-05 1.8187009e-05]  taking action:  0
Leaf selection - depth:  12
Leaf selection - action scores:  [9.5186251e-01 1.8327013e-02 2.3924902e-03 1.9712397e-03 4.8743788e-04
 3.2486717e-04 2.2502893e-04 1.0060386e-04 9.5234551e-05 8.2894752e-05]  taking action:  0
Leaf selection - depth:  13
Leaf selection - action scores:  [9.84862089e-01 5.84743591e-03 1.49599358e-03 6.07867492e-04
 2.35247702e-04 1.79950075e-04 1.46808234e-04 1.15903844e-04
 9.61140540e-05 6.54791147e-05]  taking action:  0
Leaf selection - depth:  14
Leaf selection - action scores:  [1.0177106e+00 4.4421762e-02 1.8497674e-04 4.9208418e-05 2.8659471e-05
 2.8602677e-05 2.7981483e-05 1.9835636e-05 1.8635561e-05 1.0929485e-05]  taking action:  0
Leaf selection - depth:  15
Leaf selection - action scores:  [1.0745853e+00 5.4190853e-03 5.6752295e-04 4.6979720e-04 4.3589249e-04
 8.6185362e-05 3.5706882e-05 2.6580283e-05 2.1862510e-05 1.8636189e-05]  taking action:  0
Leaf selection - depth:  16
Leaf selection - action scores:  [1.14574289e+00 1.94126787e-03 2.59576016e-04 1.59666582e-04
 1.00982805e-04 9.91899360e-05 5.63371941e-05 4.17874289e-05
 3.63759718e-05 2.30037313e-05]  taking action:  0
Leaf selection - depth:  17
Leaf selection - action scores:  [1.2519547e+00 3.8223255e-03 9.3382863e-05 7.1387491e-05 5.3726413e-05
 1.6335949e-05 1.3380910e-05 1.0392322e-05 6.7205451e-06 5.6819363e-06]  taking action:  0
Leaf selection - depth:  18
Leaf selection - action scores:  [1.4431912e+00 3.1427406e-03 2.1545475e-04 1.5749544e-04 1.2443715e-04
 3.6653568e-05 1.2537144e-05 1.0437601e-05 9.4025754e-06 9.2306373e-06]  taking action:  0
Leaf selection - depth:  19
Leaf selection - action scores:  [1.9504691e+00 9.8813511e-04 4.5049808e-05 1.8151706e-05 1.4595044e-05
 1.2815291e-05 1.1709701e-05 1.0568347e-05 9.1294787e-06 8.8613297e-06]  taking action:  0
Adding child.
Leaf selection - depth:  20
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  11
Getting rollout return of leaf.
Token:  0
Token:  1
Token:  2
Token:  3
Token:  4
Token:  5
Token:  6
Token:  7
Token:  8
Token:  9
Token:  10
Token:  11
Token:  12
Token:  13
Token:  14
Token:  15
Token:  16
Token:  17
Token:  18
Token:  19
Token:  20
Token:  21
Token:  22
Token:  23
Token:  24
Token:  25
Token:  26
Token:  27
Token:  28
Token:  29
Token:  30
Token:  31
Token:  32
Token:  33
Token:  34
Token:  35
Token:  36
Token:  37
Token:  38
Token:  39
Token:  40
Token:  41
Token:  42
Token:  43
Token:  44
Token:  45
Token:  46
Token:  47
Token:  48
Token:  49
Token:  50
Token:  51
Token:  52
Token:  53
Token:  54
Token:  55
Token:  56
Token:  57
Token:  58
Token:  59
Token:  60
Token:  61
Token:  62
Token:  63
Token:  64
Token:  65
Token:  66
Token:  67
Token:  68
Token:  69
Token:  70
Token:  71
Token:  72
Token:  73
Token:  74
Token:  75
Token:  76
Token:  77
Token:  78
Token:  79
Token:  80
Token:  81
Token:  82
Token:  83
Token:  84
Token:  85
Token:  86
Token:  87
Token:  88
Token:  89
Token:  90
Token:  91
Token:  92
Token:  93
Token:  94
Token:  95
Token:  96
Token:  97
Token:  98
Token:  99
Token:  100
Token:  101
Token:  102
Token:  103
Token:  104
Token:  105
Token:  106
Token:  107
Token:  108
Token:  109
Token:  110
Token:  111
Token:  112
Token:  113
Token:  114
Token:  115
Token:  116
Token:  117
Token:  118
Token:  119
Token:  120
Token:  121
Token:  122
Token:  123
Token:  124
Token:  125
Token:  126
Token:  127
Token:  128
Token:  129
Token:  130
Token:  131
Token:  132
Token:  133
Token:  134
Token:  135
Token:  136
Token:  137
Token:  138
Token:  139
Token:  140
Token:  141
Token:  142
Token:  143
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7,c8;
  adder_8 A1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
  adder_8 A2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
  adder_8 A3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
  adder_8 A4(sum[31:24], cout, in1[31:24], in2[31:24], c3);
endmodule
Path:  output_files/3084873_adder_32/3084873_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  144
LLM generates return in:  52.370537  seconds
Running getPromptScore: 
adder_32
output_files/3084873_adder_32/synth_script.sh
Running bash in x seconds:  0.88365

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.5
Backpropogation: incorporating estimates.
Current runs:  30.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [7.07623094e-01 2.15291108e-01 4.15058939e-03 2.39073154e-03
 1.15291705e-03 7.60013131e-04 7.12461115e-01 5.14435025e-04
 4.93423101e-04 4.11365902e-04]  taking action:  6
Leaf selection - depth:  1
Leaf selection - action scores:  [1.39279842e+00 4.72093150e-02 8.15049629e-04 7.64780911e-04
 2.62861373e-04 1.75857189e-04 1.33930123e-04 1.30873537e-04
 1.21113066e-04 1.12673813e-04]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [1.8715149e+00 1.0853407e-02 7.2880229e-03 5.1853200e-03 4.9287281e-03
 4.8972415e-03 3.9494815e-03 3.0442949e-03 1.9974876e-03 1.5371459e-03]  taking action:  0
Adding child.
Leaf selection - depth:  3
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  21809
Getting rollout return of leaf.
Token:  0
Token:  1
Token:  2
Token:  3
Token:  4
Token:  5
Token:  6
Token:  7
Token:  8
Token:  9
Token:  10
Token:  11
Token:  12
Token:  13
Token:  14
Token:  15
Token:  16
Token:  17
Token:  18
Token:  19
Token:  20
Token:  21
Token:  22
Token:  23
Token:  24
Token:  25
Token:  26
Token:  27
Token:  28
Token:  29
Token:  30
Token:  31
Token:  32
Token:  33
Token:  34
Token:  35
Token:  36
Token:  37
Token:  38
Token:  39
Token:  40
Token:  41
Token:  42
Token:  43
Token:  44
Token:  45
Token:  46
Token:  47
Token:  48
Token:  49
Token:  50
Token:  51
Token:  52
Token:  53
Token:  54
Token:  55
Token:  56
Token:  57
Token:  58
Token:  59
Token:  60
Token:  61
Token:  62
Token:  63
Token:  64
Token:  65
Token:  66
Token:  67
Token:  68
Token:  69
Token:  70
Token:  71
Token:  72
Token:  73
Token:  74
Token:  75
Token:  76
Token:  77
Token:  78
Token:  79
Token:  80
Token:  81
Token:  82
Token:  83
Token:  84
Token:  85
Token:  86
Token:  87
Token:  88
Token:  89
Token:  90
Token:  91
Token:  92
Token:  93
Token:  94
Token:  95
Token:  96
Token:  97
Token:  98
Token:  99
Token:  100
Token:  101
Token:  102
Token:  103
Token:  104
Token:  105
Token:  106
Token:  107
Token:  108
Token:  109
Token:  110
Token:  111
Token:  112
Token:  113
Token:  114
Token:  115
Token:  116
Token:  117
Token:  118
Token:  119
Token:  120
Token:  121
Token:  122
Token:  123
Token:  124
Token:  125
Token:  126
Token:  127
Token:  128
Token:  129
Token:  130
Token:  131
Token:  132
Token:  133
Token:  134
Token:  135
Token:  136
Token:  137
Token:  138
Token:  139
Token:  140
Token:  141
Token:  142
Token:  143
Token:  144
Token:  145
Token:  146
Token:  147
Token:  148
Token:  149
Token:  150
Token:  151
Token:  152
Token:  153
Token:  154
Token:  155
Token:  156
Token:  157
Token:  158
Token:  159
Token:  160
Token:  161
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);                      
  wire c1,c2,c3,c4,c5,c6,c7,c8;
  adder_8 A1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
  adder_8 A2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
  adder_8 A3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
  adder_8 A4(sum[31:24], cout, in1[31:24], in2[31:24], c3);
endmodule
Path:  output_files/3084873_adder_32/3084873_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  162
LLM generates return in:  58.169762  seconds
Running getPromptScore: 
adder_32
output_files/3084873_adder_32/synth_script.sh
Running bash in x seconds:  0.891863

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.5
Backpropogation: incorporating estimates.
Current runs:  31.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [7.11231007e-01 2.18735984e-01 4.21700303e-03 2.42898568e-03
 1.17136489e-03 7.72174113e-04 6.63895651e-01 5.22666508e-04
 5.01318372e-04 4.17948174e-04]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [0.7446524  0.06090001 0.0234889  0.01935877 0.01175702 0.01039558
 0.00855633 0.00466828 0.00349779 0.00261715]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.74365103 0.2087574  0.02133071 0.01953627 0.00900145 0.0072642
 0.00569906 0.00329059 0.00214201 0.00212129]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.7245097  0.71062773 0.13724929 0.1087045  0.00661328 0.00523869
 0.00322644 0.00275568 0.00207857 0.00170722]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.7948124  0.06002652 0.04766019 0.03403132 0.01686718 0.00578131
 0.00486542 0.0045258  0.0040075  0.00305282]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [8.10877919e-01 6.10454716e-02 3.36565962e-03 1.27524987e-03
 1.19740155e-03 7.81217590e-04 3.71243426e-04 2.58017535e-04
 1.21344419e-04 1.19631884e-04]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [7.8077191e-01 6.9927418e-01 7.2813563e-02 3.1506389e-03 4.0382060e-04
 2.6208631e-04 1.5875854e-04 1.5617923e-04 1.2748726e-04 1.2686339e-04]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [8.4542596e-01 5.8665061e-03 1.9893951e-03 2.8007373e-04 1.6301943e-04
 1.3302112e-04 7.4674463e-05 3.9701692e-05 2.8503266e-05 1.6217395e-05]  taking action:  0
Leaf selection - depth:  8
Leaf selection - action scores:  [8.5380900e-01 6.1335176e-02 9.3844387e-04 5.9929374e-04 4.3962171e-04
 7.1684735e-05 6.9229471e-05 4.4918754e-05 4.4305762e-05 4.3420314e-05]  taking action:  0
Leaf selection - depth:  9
Leaf selection - action scores:  [8.6916375e-01 3.7572458e-02 3.2918234e-03 2.9216274e-03 2.6869014e-04
 2.0661156e-04 1.9669191e-04 6.5338914e-05 6.4732587e-05 5.6957451e-05]  taking action:  0
Leaf selection - depth:  10
Leaf selection - action scores:  [8.8786268e-01 6.1720749e-03 5.2453307e-03 6.8754447e-04 4.4727084e-04
 2.5177249e-04 1.6795483e-04 1.4768007e-04 1.2522930e-04 8.6316664e-05]  taking action:  0
Leaf selection - depth:  11
Leaf selection - action scores:  [8.8583821e-01 2.1725608e-01 2.9693189e-04 2.9677563e-04 2.8873538e-04
 5.7123201e-05 3.1950934e-05 2.9087661e-05 2.8686118e-05 1.9074698e-05]  taking action:  0
Leaf selection - depth:  12
Leaf selection - action scores:  [9.2638731e-01 1.9318366e-02 2.5219060e-03 2.0778691e-03 5.1380467e-04
 3.4244009e-04 2.3720133e-04 1.0604577e-04 1.0038603e-04 8.7378743e-05]  taking action:  0
Leaf selection - depth:  13
Leaf selection - action scores:  [9.53780890e-01 6.20214222e-03 1.58674072e-03 6.44740765e-04
 2.49517849e-04 1.90865874e-04 1.55713627e-04 1.22934580e-04
 1.01944344e-04 6.94510818e-05]  taking action:  0
Leaf selection - depth:  14
Leaf selection - action scores:  [9.7932243e-01 4.7488861e-02 1.9774846e-04 5.2606014e-05 3.0638264e-05
 3.0577547e-05 2.9913463e-05 2.1205187e-05 1.9922252e-05 1.1684111e-05]  taking action:  0
Leaf selection - depth:  15
Leaf selection - action scores:  [1.0238628e+00 5.8532814e-03 6.1299483e-04 5.0743902e-04 4.7081773e-04
 9.3090835e-05 3.8567840e-05 2.8709988e-05 2.3614211e-05 2.0129384e-05]  taking action:  0
Leaf selection - depth:  16
Leaf selection - action scores:  [1.0754452e+00 2.1265524e-03 2.8435129e-04 1.7490599e-04 1.1062112e-04
 1.0865713e-04 6.1714309e-05 4.5775836e-05 3.9847881e-05 2.5199324e-05]  taking action:  0
Leaf selection - depth:  17
Leaf selection - action scores:  [1.14528751e+00 4.27348958e-03 1.04405211e-04 7.98136389e-05
 6.00679523e-05 1.82641470e-05 1.49603111e-05 1.16189685e-05
 7.51379775e-06 6.35259767e-06]  taking action:  0
Leaf selection - depth:  18
Leaf selection - action scores:  [1.2518523e+00 3.6289240e-03 2.4878571e-04 1.8186006e-04 1.4368763e-04
 4.2323896e-05 1.4476646e-05 1.2052303e-05 1.0857159e-05 1.0658622e-05]  taking action:  0
Leaf selection - depth:  19
Leaf selection - action scores:  [1.4444135e+00 1.2102135e-03 5.5174522e-05 2.2231210e-05 1.7875205e-05
 1.5695461e-05 1.4341395e-05 1.2943528e-05 1.1181283e-05 1.0852868e-05]  taking action:  0
Leaf selection - depth:  20
Leaf selection - action scores:  [1.9361372e+00 1.5377441e-02 3.7919053e-05 2.4663295e-05 5.6536064e-06
 4.3465270e-06 2.9990817e-06 2.2639811e-06 1.5508544e-06 1.2274168e-06]  taking action:  0
Adding child.
Leaf selection - depth:  21
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  66
Getting rollout return of leaf.
Token:  0
Token:  1
Token:  2
Token:  3
Token:  4
Token:  5
Token:  6
Token:  7
Token:  8
Token:  9
Token:  10
Token:  11
Token:  12
Token:  13
Token:  14
Token:  15
Token:  16
Token:  17
Token:  18
Token:  19
Token:  20
Token:  21
Token:  22
Token:  23
Token:  24
Token:  25
Token:  26
Token:  27
Token:  28
Token:  29
Token:  30
Token:  31
Token:  32
Token:  33
Token:  34
Token:  35
Token:  36
Token:  37
Token:  38
Token:  39
Token:  40
Token:  41
Token:  42
Token:  43
Token:  44
Token:  45
Token:  46
Token:  47
Token:  48
Token:  49
Token:  50
Token:  51
Token:  52
Token:  53
Token:  54
Token:  55
Token:  56
Token:  57
Token:  58
Token:  59
Token:  60
Token:  61
Token:  62
Token:  63
Token:  64
Token:  65
Token:  66
Token:  67
Token:  68
Token:  69
Token:  70
Token:  71
Token:  72
Token:  73
Token:  74
Token:  75
Token:  76
Token:  77
Token:  78
Token:  79
Token:  80
Token:  81
Token:  82
Token:  83
Token:  84
Token:  85
Token:  86
Token:  87
Token:  88
Token:  89
Token:  90
Token:  91
Token:  92
Token:  93
Token:  94
Token:  95
Token:  96
Token:  97
Token:  98
Token:  99
Token:  100
Token:  101
Token:  102
Token:  103
Token:  104
Token:  105
Token:  106
Token:  107
Token:  108
Token:  109
Token:  110
Token:  111
Token:  112
Token:  113
Token:  114
Token:  115
Token:  116
Token:  117
Token:  118
Token:  119
Token:  120
Token:  121
Token:  122
Token:  123
Token:  124
Token:  125
Token:  126
Token:  127
Token:  128
Token:  129
Token:  130
Token:  131
Token:  132
Token:  133
Token:  134
Token:  135
Token:  136
Token:  137
Token:  138
Token:  139
Token:  140
Token:  141
Token:  142
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7,c8;
  adder_8 A1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
  adder_8 A2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
  adder_8 A3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
  adder_8 A4(sum[31:24], cout, in1[31:24], in2[31:24], c3);
endmodule
Path:  output_files/3084873_adder_32/3084873_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  143
LLM generates return in:  52.075172  seconds
Running getPromptScore: 
adder_32
output_files/3084873_adder_32/synth_script.sh
Running bash in x seconds:  0.893638

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.5
Backpropogation: incorporating estimates.
Current runs:  32.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [7.07376646e-01 2.22127442e-01 4.28238682e-03 2.46664661e-03
 1.18952667e-03 7.84146519e-04 6.68374921e-01 5.30770348e-04
 5.09091214e-04 4.24428377e-04]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [0.74040663 0.06197797 0.02390467 0.01970143 0.01196512 0.01057959
 0.00870778 0.00475091 0.0035597  0.00266347]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.73927224 0.21258813 0.02172213 0.01989476 0.00916663 0.00739749
 0.00580364 0.00335098 0.00218131 0.00216021]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.7178234  0.71600074 0.1398638  0.11077525 0.00673926 0.00533848
 0.0032879  0.00280817 0.00211817 0.00173974]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.78723526 0.0615859  0.04889832 0.0349154  0.01730536 0.0059315
 0.00499181 0.00464338 0.00411161 0.00313212]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [8.0241358e-01 6.2718265e-02 3.4578866e-03 1.3101947e-03 1.2302132e-03
 8.0262480e-04 3.8141638e-04 2.6508785e-04 1.2466955e-04 1.2291009e-04]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [7.7176094e-01 7.1229935e-01 7.4924536e-02 3.2419807e-03 4.1552799e-04
 2.6968459e-04 1.6336120e-04 1.6070710e-04 1.3118332e-04 1.3054136e-04]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [8.3406389e-01 6.0589015e-03 2.0546385e-03 2.8925890e-04 1.6836575e-04
 1.3738361e-04 7.7123455e-05 4.1003732e-05 2.9438046e-05 1.6749254e-05]  taking action:  0
Leaf selection - depth:  8
Leaf selection - action scores:  [8.4132153e-01 6.3487940e-02 9.7138173e-04 6.2032801e-04 4.5505172e-04
 7.4200754e-05 7.1659320e-05 4.6495330e-05 4.5860823e-05 4.4944296e-05]  taking action:  0
Leaf selection - depth:  9
Leaf selection - action scores:  [8.5508204e-01 3.8990781e-02 3.4160865e-03 3.0319160e-03 2.7883294e-04
 2.1441095e-04 2.0411683e-04 6.7805398e-05 6.7176181e-05 5.9107537e-05]  taking action:  0
Leaf selection - depth:  10
Leaf selection - action scores:  [8.7175995e-01 6.4240992e-03 5.4595130e-03 7.1561895e-04 4.6553425e-04
 2.6205310e-04 1.7481293e-04 1.5371028e-04 1.3034279e-04 8.9841225e-05]  taking action:  0
Leaf selection - depth:  11
Leaf selection - action scores:  [8.6838013e-01 2.2691657e-01 3.1013525e-04 3.0997201e-04 3.0157424e-04
 5.9663234e-05 3.3371660e-05 3.0381072e-05 2.9961671e-05 1.9922873e-05]  taking action:  0
Leaf selection - depth:  12
Leaf selection - action scores:  [9.0491933e-01 2.0261277e-02 2.6449976e-03 2.1792876e-03 5.3888292e-04
 3.5915422e-04 2.4877887e-04 1.1122176e-04 1.0528576e-04 9.1643604e-05]  taking action:  0
Leaf selection - depth:  13
Leaf selection - action scores:  [9.2818475e-01 6.5376316e-03 1.6725716e-03 6.7961647e-04 2.6301492e-04
 2.0119030e-04 1.6413658e-04 1.2958443e-04 1.0745877e-04 7.3207870e-05]  taking action:  0
Leaf selection - depth:  14
Leaf selection - action scores:  [9.4863975e-01 5.0369538e-02 2.0974390e-04 5.5797100e-05 3.2496784e-05
 3.2432385e-05 3.1728017e-05 2.2491497e-05 2.1130738e-05 1.2392871e-05]  taking action:  0
Leaf selection - depth:  15
Leaf selection - action scores:  [9.8495996e-01 6.2574209e-03 6.5531908e-04 5.4247509e-04 5.0332531e-04
 9.9518285e-05 4.1230756e-05 3.0692270e-05 2.5244653e-05 2.1519218e-05]  taking action:  0
Leaf selection - depth:  16
Leaf selection - action scores:  [1.0246369e+00 2.2969393e-03 3.0713453e-04 1.8892006e-04 1.1948447e-04
 1.1736312e-04 6.6659071e-05 4.9443555e-05 4.3040629e-05 2.7218382e-05]  taking action:  0
Leaf selection - depth:  17
Leaf selection - action scores:  [1.0750461e+00 4.6813735e-03 1.1437018e-04 8.7431457e-05 6.5801149e-05
 2.0007370e-05 1.6388200e-05 1.2727943e-05 8.2309534e-06 6.9589223e-06]  taking action:  0
Leaf selection - depth:  18
Leaf selection - action scores:  [1.1452016e+00 4.0572602e-03 2.7815087e-04 2.0332572e-04 1.6064766e-04
 4.7319551e-05 1.6185382e-05 1.3474884e-05 1.2138673e-05 1.1916702e-05]  taking action:  0
Leaf selection - depth:  19
Leaf selection - action scores:  [1.2527933e+00 1.3974342e-03 6.3710046e-05 2.5670390e-05 2.0640509e-05
 1.8123557e-05 1.6560018e-05 1.4945898e-05 1.2911033e-05 1.2531813e-05]  taking action:  0
Leaf selection - depth:  20
Leaf selection - action scores:  [1.4356371e+00 1.8833444e-02 4.6441168e-05 3.0206244e-05 6.9242260e-06
 5.3233866e-06 3.6731101e-06 2.7727995e-06 1.8994011e-06 1.5032724e-06]  taking action:  0
Leaf selection - depth:  21
Leaf selection - action scores:  [1.9493107e+00 1.8414113e-03 1.3286828e-04 1.2703169e-04 7.7108009e-05
 2.7131342e-05 5.8062888e-06 5.3538624e-06 5.2827754e-06 3.8272256e-06]  taking action:  0
Adding child.
Leaf selection - depth:  22
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  22
Getting rollout return of leaf.
Token:  0
Token:  1
Token:  2
Token:  3
Token:  4
Token:  5
Token:  6
Token:  7
Token:  8
Token:  9
Token:  10
Token:  11
Token:  12
Token:  13
Token:  14
Token:  15
Token:  16
Token:  17
Token:  18
Token:  19
Token:  20
Token:  21
Token:  22
Token:  23
Token:  24
Token:  25
Token:  26
Token:  27
Token:  28
Token:  29
Token:  30
Token:  31
Token:  32
Token:  33
Token:  34
Token:  35
Token:  36
Token:  37
Token:  38
Token:  39
Token:  40
Token:  41
Token:  42
Token:  43
Token:  44
Token:  45
Token:  46
Token:  47
Token:  48
Token:  49
Token:  50
Token:  51
Token:  52
Token:  53
Token:  54
Token:  55
Token:  56
Token:  57
Token:  58
Token:  59
Token:  60
Token:  61
Token:  62
Token:  63
Token:  64
Token:  65
Token:  66
Token:  67
Token:  68
Token:  69
Token:  70
Token:  71
Token:  72
Token:  73
Token:  74
Token:  75
Token:  76
Token:  77
Token:  78
Token:  79
Token:  80
Token:  81
Token:  82
Token:  83
Token:  84
Token:  85
Token:  86
Token:  87
Token:  88
Token:  89
Token:  90
Token:  91
Token:  92
Token:  93
Token:  94
Token:  95
Token:  96
Token:  97
Token:  98
Token:  99
Token:  100
Token:  101
Token:  102
Token:  103
Token:  104
Token:  105
Token:  106
Token:  107
Token:  108
Token:  109
Token:  110
Token:  111
Token:  112
Token:  113
Token:  114
Token:  115
Token:  116
Token:  117
Token:  118
Token:  119
Token:  120
Token:  121
Token:  122
Token:  123
Token:  124
Token:  125
Token:  126
Token:  127
Token:  128
Token:  129
Token:  130
Token:  131
Token:  132
Token:  133
Token:  134
Token:  135
Token:  136
Token:  137
Token:  138
Token:  139
Token:  140
Token:  141
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7,c8;
  adder_8 A1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
  adder_8 A2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
  adder_8 A3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
  adder_8 A4(sum[31:24], cout, in1[31:24], in2[31:24], c3);
endmodule
Path:  output_files/3084873_adder_32/3084873_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  142
LLM generates return in:  51.813376  seconds
Running getPromptScore: 
adder_32
output_files/3084873_adder_32/synth_script.sh
Running bash in x seconds:  0.881401

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.5
Backpropogation: incorporating estimates.
Current runs:  33.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [7.03729394e-01 2.25467892e-01 4.34678723e-03 2.50374113e-03
 1.20741530e-03 7.95938857e-04 6.72786821e-01 5.38752304e-04
 5.16747150e-04 4.30811117e-04]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [0.7363796  0.0630375  0.02431332 0.02003823 0.01216967 0.01076045
 0.00885664 0.00483213 0.00362056 0.00270901]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.73512685 0.21635105 0.02210663 0.02024691 0.00932888 0.00752843
 0.00590636 0.00341029 0.00221992 0.00219845]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.71169454 0.7212751  0.14243034 0.112808   0.00686293 0.00543644
 0.00334824 0.00285971 0.00215704 0.00177167]  taking action:  1
Leaf selection - depth:  4
Leaf selection - action scores:  [0.8255986  0.8700029  0.11920545 0.05159689 0.02125333 0.01803527
 0.01801148 0.01691002 0.01025817 0.01005899]  taking action:  1
Adding child.
Leaf selection - depth:  5
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  25
Getting rollout return of leaf.
Token:  0
Token:  1
Token:  2
Token:  3
Token:  4
Token:  5
Token:  6
Token:  7
Token:  8
Token:  9
Token:  10
Token:  11
Token:  12
Token:  13
Token:  14
Token:  15
Token:  16
Token:  17
Token:  18
Token:  19
Token:  20
Token:  21
Token:  22
Token:  23
Token:  24
Token:  25
Token:  26
Token:  27
Token:  28
Token:  29
Token:  30
Token:  31
Token:  32
Token:  33
Token:  34
Token:  35
Token:  36
Token:  37
Token:  38
Token:  39
Token:  40
Token:  41
Token:  42
Token:  43
Token:  44
Token:  45
Token:  46
Token:  47
Token:  48
Token:  49
Token:  50
Token:  51
Token:  52
Token:  53
Token:  54
Token:  55
Token:  56
Token:  57
Token:  58
Token:  59
Token:  60
Token:  61
Token:  62
Token:  63
Token:  64
Token:  65
Token:  66
Token:  67
Token:  68
Token:  69
Token:  70
Token:  71
Token:  72
Token:  73
Token:  74
Token:  75
Token:  76
Token:  77
Token:  78
Token:  79
Token:  80
Token:  81
Token:  82
Token:  83
Token:  84
Token:  85
Token:  86
Token:  87
Token:  88
Token:  89
Token:  90
Token:  91
Token:  92
Token:  93
Token:  94
Token:  95
Token:  96
Token:  97
Token:  98
Token:  99
Token:  100
Token:  101
Token:  102
Token:  103
Token:  104
Token:  105
Token:  106
Token:  107
Token:  108
Token:  109
Token:  110
Token:  111
Token:  112
Token:  113
Token:  114
Token:  115
Token:  116
Token:  117
Token:  118
Token:  119
Token:  120
Token:  121
Token:  122
Token:  123
Token:  124
Token:  125
Token:  126
Token:  127
Token:  128
Token:  129
Token:  130
Token:  131
Token:  132
Token:  133
Token:  134
Token:  135
Token:  136
Token:  137
Token:  138
Token:  139
Token:  140
Token:  141
Token:  142
Token:  143
Token:  144
Token:  145
Token:  146
Token:  147
Token:  148
Token:  149
Token:  150
Token:  151
Token:  152
Token:  153
Token:  154
Token:  155
Token:  156
Token:  157
Token:  158
Token:  159
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
  wire [31:0] carry;
  adder_8 A1(sum[7:0], carry[7:0], in1[7:0], in2[7:0], cin);
  adder_8 A2(sum[15:8], carry[15:8], in1[15:8], in2[15:8], carry[7:0]);
  adder_8 A3(sum[23:16], carry[23:16], in1[23:16], in2[23:16], carry[15:8]);
  adder_8 A4(sum[31:24], cout, in1[31:24], in2[31:24], carry[23:16]);
endmodule
Path:  output_files/3084873_adder_32/3084873_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  160
LLM generates return in:  57.556034  seconds
Running getPromptScore: 
adder_32
output_files/3084873_adder_32/synth_script.sh
Running bash in x seconds:  0.891947

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.5
Backpropogation: incorporating estimates.
Current runs:  34.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [7.00271314e-01 2.28759568e-01 4.41024734e-03 2.54029402e-03
 1.22504273e-03 8.07559017e-04 6.77134304e-01 5.46617718e-04
 5.24291303e-04 4.37100663e-04]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [0.7325529  0.06407951 0.02471522 0.02036946 0.01237084 0.01093832
 0.00900304 0.004912   0.00368041 0.00275379]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.73119473 0.22004962 0.02248454 0.02059303 0.00948836 0.00765713
 0.00600733 0.00346859 0.00225787 0.00223603]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.71586305 0.6981491  0.14495142 0.11480475 0.00698441 0.00553267
 0.0034075  0.00291032 0.00219522 0.00180303]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.78022945 0.06310678 0.05010587 0.03577764 0.01773272 0.00607797
 0.00511508 0.00475804 0.00421314 0.00320947]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [7.9462349e-01 6.4347573e-02 3.5477167e-03 1.3442314e-03 1.2621720e-03
 8.2347560e-04 3.9132492e-04 2.7197436e-04 1.2790825e-04 1.2610307e-04]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [7.6358974e-01 7.2496748e-01 7.6977648e-02 3.3308186e-03 4.2691443e-04
 2.7707458e-04 1.6783769e-04 1.6511086e-04 1.3477805e-04 1.3411850e-04]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [8.2378542e-01 6.2453728e-03 2.1178729e-03 2.9816123e-04 1.7354744e-04
 1.4161179e-04 7.9497033e-05 4.2265678e-05 3.0344043e-05 1.7264736e-05]  taking action:  0
Leaf selection - depth:  8
Leaf selection - action scores:  [8.3010751e-01 6.5570064e-02 1.0032387e-03 6.4067199e-04 4.6997538e-04
 7.6634205e-05 7.4009426e-05 4.8020167e-05 4.7364854e-05 4.6418270e-05]  taking action:  0
Leaf selection - depth:  9
Leaf selection - action scores:  [8.4254515e-01 4.0359296e-02 3.5359857e-03 3.1383312e-03 2.8861951e-04
 2.2193641e-04 2.1128100e-04 7.0185255e-05 6.9533955e-05 6.1182116e-05]  taking action:  0
Leaf selection - depth:  10
Leaf selection - action scores:  [8.5756898e-01 6.6666021e-03 5.6656045e-03 7.4263284e-04 4.8310769e-04
 2.7194535e-04 1.8141193e-04 1.5951268e-04 1.3526309e-04 9.3232644e-05]  taking action:  0
Leaf selection - depth:  11
Leaf selection - action scores:  [8.5317171e-01 2.3618226e-01 3.2279899e-04 3.2262909e-04 3.1388842e-04
 6.2099462e-05 3.4734323e-05 3.1621621e-05 3.1185096e-05 2.0736383e-05]  taking action:  0
Leaf selection - depth:  12
Leaf selection - action scores:  [8.86497974e-01 2.11622119e-02 2.76260986e-03 2.27619172e-03
 5.62844798e-04 3.75124335e-04 2.59841036e-04 1.16167335e-04
 1.09967390e-04 9.57186203e-05]  taking action:  0
Leaf selection - depth:  13
Leaf selection - action scores:  [9.0661597e-01 6.8567265e-03 1.7542081e-03 7.1278779e-04 2.7585239e-04
 2.1101018e-04 1.7214791e-04 1.3590931e-04 1.1270372e-04 7.6781063e-05]  taking action:  0
Leaf selection - depth:  14
Leaf selection - action scores:  [9.2336762e-01 5.3094160e-02 2.2108949e-04 5.8815309e-05 3.4254619e-05
 3.4186738e-05 3.3444267e-05 2.3708119e-05 2.2273754e-05 1.3063233e-05]  taking action:  0
Leaf selection - depth:  15
Leaf selection - action scores:  [9.53871787e-01 6.63699675e-03 6.95070776e-04 5.75381680e-04
 5.33857092e-04 1.05555075e-04 4.37318195e-05 3.25540641e-05
 2.67759970e-05 2.28245754e-05]  taking action:  0
Leaf selection - depth:  16
Leaf selection - action scores:  [9.8566926e-01 2.4555314e-03 3.2834060e-04 2.0196404e-04 1.2773427e-04
 1.2546645e-04 7.1261544e-05 5.2857384e-05 4.6012370e-05 2.9097675e-05]  taking action:  0
Leaf selection - depth:  17
Leaf selection - action scores:  [1.0242777e+00 5.0564613e-03 1.2353392e-04 9.4436771e-05 7.1073366e-05
 2.1610431e-05 1.7701281e-05 1.3747750e-05 8.8904462e-06 7.5164958e-06]  taking action:  0
Leaf selection - depth:  18
Leaf selection - action scores:  [1.0749708e+00 4.4445060e-03 3.0469900e-04 2.2273217e-04 1.7598069e-04
 5.1835974e-05 1.7730199e-05 1.4760996e-05 1.3297250e-05 1.3054092e-05]  taking action:  0
Leaf selection - depth:  19
Leaf selection - action scores:  [1.1459906e+00 1.5623788e-03 7.1229995e-05 2.8700368e-05 2.3076789e-05
 2.0262753e-05 1.8514662e-05 1.6710022e-05 1.4434973e-05 1.4010991e-05]  taking action:  0
Leaf selection - depth:  20
Leaf selection - action scores:  [1.2460371e+00 2.1746986e-02 5.3625638e-05 3.4879165e-05 7.9954070e-06
 6.1469173e-06 4.2413421e-06 3.2017529e-06 2.1932394e-06 1.7358294e-06]  taking action:  0
Leaf selection - depth:  21
Leaf selection - action scores:  [1.4437041e+00 2.2552591e-03 1.6272976e-04 1.5558141e-04 9.4437637e-05
 3.3228971e-05 7.1112227e-06 6.5571157e-06 6.4700521e-06 4.6873752e-06]  taking action:  0
Leaf selection - depth:  22
Leaf selection - action scores:  [1.9510841e+00 2.3021289e-04 8.8165776e-05 8.0163867e-05 6.8023284e-05
 8.9635159e-06 7.1004683e-06 6.3989505e-06 4.9345499e-06 4.8626080e-06]  taking action:  0
Adding child.
Leaf selection - depth:  23
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  11
Getting rollout return of leaf.
Token:  0
Token:  1
Token:  2
Token:  3
Token:  4
Token:  5
Token:  6
Token:  7
Token:  8
Token:  9
Token:  10
Token:  11
Token:  12
Token:  13
Token:  14
Token:  15
Token:  16
Token:  17
Token:  18
Token:  19
Token:  20
Token:  21
Token:  22
Token:  23
Token:  24
Token:  25
Token:  26
Token:  27
Token:  28
Token:  29
Token:  30
Token:  31
Token:  32
Token:  33
Token:  34
Token:  35
Token:  36
Token:  37
Token:  38
Token:  39
Token:  40
Token:  41
Token:  42
Token:  43
Token:  44
Token:  45
Token:  46
Token:  47
Token:  48
Token:  49
Token:  50
Token:  51
Token:  52
Token:  53
Token:  54
Token:  55
Token:  56
Token:  57
Token:  58
Token:  59
Token:  60
Token:  61
Token:  62
Token:  63
Token:  64
Token:  65
Token:  66
Token:  67
Token:  68
Token:  69
Token:  70
Token:  71
Token:  72
Token:  73
Token:  74
Token:  75
Token:  76
Token:  77
Token:  78
Token:  79
Token:  80
Token:  81
Token:  82
Token:  83
Token:  84
Token:  85
Token:  86
Token:  87
Token:  88
Token:  89
Token:  90
Token:  91
Token:  92
Token:  93
Token:  94
Token:  95
Token:  96
Token:  97
Token:  98
Token:  99
Token:  100
Token:  101
Token:  102
Token:  103
Token:  104
Token:  105
Token:  106
Token:  107
Token:  108
Token:  109
Token:  110
Token:  111
Token:  112
Token:  113
Token:  114
Token:  115
Token:  116
Token:  117
Token:  118
Token:  119
Token:  120
Token:  121
Token:  122
Token:  123
Token:  124
Token:  125
Token:  126
Token:  127
Token:  128
Token:  129
Token:  130
Token:  131
Token:  132
Token:  133
Token:  134
Token:  135
Token:  136
Token:  137
Token:  138
Token:  139
Token:  140
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7,c8;
  adder_8 A1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
  adder_8 A2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
  adder_8 A3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
  adder_8 A4(sum[31:24], cout, in1[31:24], in2[31:24], c3);
endmodule
Path:  output_files/3084873_adder_32/3084873_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  141
LLM generates return in:  51.412156  seconds
Running getPromptScore: 
adder_32
output_files/3084873_adder_32/synth_script.sh
Running bash in x seconds:  0.888934

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.5
Backpropogation: incorporating estimates.
Current runs:  35.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [6.96986584e-01 2.32004547e-01 4.47280716e-03 2.57632836e-03
 1.24242009e-03 8.19014327e-04 6.81420111e-01 5.54371548e-04
 5.31728431e-04 4.43300982e-04]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [0.7289103  0.06510485 0.02511069 0.0206954  0.01256878 0.01111334
 0.0091471  0.0049906  0.0037393  0.00279785]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.727458   0.22368704 0.02285622 0.02093344 0.0096452  0.00778371
 0.00610664 0.00352593 0.0022952  0.002273  ]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.7099621  0.7026049  0.14742939 0.11676737 0.00710381 0.00562725
 0.00346575 0.00296008 0.00223275 0.00183385]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.773726   0.06459184 0.05128499 0.03661958 0.01815001 0.00622101
 0.00523546 0.00487001 0.00431229 0.003285  ]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [7.8742164e-01 6.5936647e-02 3.6353280e-03 1.3774274e-03 1.2933415e-03
 8.4381143e-04 4.0098876e-04 2.7869080e-04 1.3106696e-04 1.2921721e-04]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [7.5613469e-01 7.3730636e-01 7.8977399e-02 3.4173476e-03 4.3800494e-04
 2.8427251e-04 1.7219782e-04 1.6940015e-04 1.3827936e-04 1.3760266e-04]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [8.1442672e-01 6.4264354e-03 2.1792732e-03 3.0680539e-04 1.7857885e-04
 1.4571733e-04 8.1801772e-05 4.3491022e-05 3.1223764e-05 1.7765266e-05]  taking action:  0
Leaf selection - depth:  8
Leaf selection - action scores:  [8.1996214e-01 6.7588076e-02 1.0341147e-03 6.6038955e-04 4.8443954e-04
 7.8992729e-05 7.6287164e-05 4.9498056e-05 4.8822574e-05 4.7846857e-05]  taking action:  0
Leaf selection - depth:  9
Leaf selection - action scores:  [8.3128703e-01 4.1682899e-02 3.6519503e-03 3.2412547e-03 2.9808495e-04
 2.2921494e-04 2.1821009e-04 7.2487019e-05 7.1814356e-05 6.3188614e-05]  taking action:  0
Leaf selection - depth:  10
Leaf selection - action scores:  [8.4493548e-01 6.9005894e-03 5.8644582e-03 7.6869805e-04 5.0006399e-04
 2.8149021e-04 1.8777919e-04 1.6511133e-04 1.4001061e-04 9.6504962e-05]  taking action:  0
Leaf selection - depth:  11
Leaf selection - action scores:  [8.3976287e-01 2.4509789e-01 3.3498433e-04 3.3480802e-04 3.2573740e-04
 6.4443659e-05 3.6045509e-05 3.2815307e-05 3.2362303e-05 2.1519159e-05]  taking action:  0
Leaf selection - depth:  12
Leaf selection - action scores:  [8.70457888e-01 2.20263284e-02 2.87541538e-03 2.36913539e-03
 5.85827453e-04 3.90441768e-04 2.70451128e-04 1.20910794e-04
 1.14457689e-04 9.96270974e-05]  taking action:  0
Leaf selection - depth:  13
Leaf selection - action scores:  [8.8810897e-01 7.1616173e-03 1.8322106e-03 7.4448256e-04 2.8811843e-04
 2.2039293e-04 1.7980262e-04 1.4195264e-04 1.1771519e-04 8.0195205e-05]  taking action:  0
Leaf selection - depth:  14
Leaf selection - action scores:  [9.0206897e-01 5.5685628e-02 2.3188064e-04 6.1686020e-05 3.5926550e-05
 3.5855355e-05 3.5076646e-05 2.4865287e-05 2.3360913e-05 1.3700836e-05]  taking action:  0
Leaf selection - depth:  15
Leaf selection - action scores:  [9.28269923e-01 6.99600903e-03 7.32668967e-04 6.06505608e-04
 5.62734785e-04 1.11264824e-04 4.60973861e-05 3.43149986e-05
 2.82243800e-05 2.40592162e-05]  taking action:  0
Leaf selection - depth:  16
Leaf selection - action scores:  [9.5453000e-01 2.6044841e-03 3.4825780e-04 2.1421521e-04 1.3548265e-04
 1.3307726e-04 7.5584278e-05 5.6063720e-05 4.8803486e-05 3.0862742e-05]  taking action:  0
Leaf selection - depth:  17
Leaf selection - action scores:  [9.8534012e-01 5.4055844e-03 1.3206332e-04 1.0095716e-04 7.5980621e-05
 2.3102522e-05 1.8923463e-05 1.4696962e-05 9.5042860e-06 8.0354721e-06]  taking action:  0
Leaf selection - depth:  18
Leaf selection - action scores:  [1.0242099e+00 4.8006154e-03 3.2911258e-04 2.4057826e-04 1.9008089e-04
 5.5989251e-05 1.9150804e-05 1.5943699e-05 1.4362672e-05 1.4100032e-05]  taking action:  0
Leaf selection - depth:  19
Leaf selection - action scores:  [1.0756624e+00 1.7115002e-03 7.8028548e-05 3.1439678e-05 2.5279356e-05
 2.2196733e-05 2.0281796e-05 1.8304912e-05 1.5812720e-05 1.5348272e-05]  taking action:  0
Leaf selection - depth:  20
Leaf selection - action scores:  [1.1403253e+00 2.4313869e-02 5.9955284e-05 3.8996091e-05 8.9391369e-06
 6.8724626e-06 4.7419644e-06 3.5796684e-06 2.4521162e-06 1.9407162e-06]  taking action:  0
Leaf selection - depth:  21
Leaf selection - action scores:  [1.25224721e+00 2.60414882e-03 1.87904137e-04 1.79649942e-04
 1.09047185e-04 3.83695115e-05 8.21133199e-06 7.57150474e-06
 7.47097238e-06 5.41251438e-06]  taking action:  0
Leaf selection - depth:  22
Leaf selection - action scores:  [1.4447902e+00 2.8195206e-04 1.0798058e-04 9.8180288e-05 8.3311170e-05
 1.0978019e-05 8.6962618e-06 7.8370822e-06 6.0435646e-06 5.9554541e-06]  taking action:  0
Leaf selection - depth:  23
Leaf selection - action scores:  [1.6556425e+00 2.9550943e-01 1.5541786e-04 1.1396015e-04 3.5643672e-05
 2.2290269e-05 1.5071825e-05 1.4495154e-05 7.7173108e-06 7.0213073e-06]  taking action:  0
Adding child.
Leaf selection - depth:  24
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  66
Getting rollout return of leaf.
Token:  0
Token:  1
Token:  2
Token:  3
Token:  4
Token:  5
Token:  6
Token:  7
Token:  8
Token:  9
Token:  10
Token:  11
Token:  12
Token:  13
Token:  14
Token:  15
Token:  16
Token:  17
Token:  18
Token:  19
Token:  20
Token:  21
Token:  22
Token:  23
Token:  24
Token:  25
Token:  26
Token:  27
Token:  28
Token:  29
Token:  30
Token:  31
Token:  32
Token:  33
Token:  34
Token:  35
Token:  36
Token:  37
Token:  38
Token:  39
Token:  40
Token:  41
Token:  42
Token:  43
Token:  44
Token:  45
Token:  46
Token:  47
Token:  48
Token:  49
Token:  50
Token:  51
Token:  52
Token:  53
Token:  54
Token:  55
Token:  56
Token:  57
Token:  58
Token:  59
Token:  60
Token:  61
Token:  62
Token:  63
Token:  64
Token:  65
Token:  66
Token:  67
Token:  68
Token:  69
Token:  70
Token:  71
Token:  72
Token:  73
Token:  74
Token:  75
Token:  76
Token:  77
Token:  78
Token:  79
Token:  80
Token:  81
Token:  82
Token:  83
Token:  84
Token:  85
Token:  86
Token:  87
Token:  88
Token:  89
Token:  90
Token:  91
Token:  92
Token:  93
Token:  94
Token:  95
Token:  96
Token:  97
Token:  98
Token:  99
Token:  100
Token:  101
Token:  102
Token:  103
Token:  104
Token:  105
Token:  106
Token:  107
Token:  108
Token:  109
Token:  110
Token:  111
Token:  112
Token:  113
Token:  114
Token:  115
Token:  116
Token:  117
Token:  118
Token:  119
Token:  120
Token:  121
Token:  122
Token:  123
Token:  124
Token:  125
Token:  126
Token:  127
Token:  128
Token:  129
Token:  130
Token:  131
Token:  132
Token:  133
Token:  134
Token:  135
Token:  136
Token:  137
Token:  138
Token:  139
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7,c8;
  adder_8 A1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
  adder_8 A2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
  adder_8 A3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
  adder_8 A4(sum[31:24], cout, in1[31:24], in2[31:24], c3);
endmodule
Path:  output_files/3084873_adder_32/3084873_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  140
LLM generates return in:  51.043606  seconds
Running getPromptScore: 
adder_32
output_files/3084873_adder_32/synth_script.sh
Running bash in x seconds:  0.910474

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.5
Backpropogation: incorporating estimates.
Current runs:  36.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [6.93861150e-01 2.35204761e-01 4.53450397e-03 2.61186561e-03
 1.25955773e-03 8.30311610e-04 6.85646795e-01 5.62018413e-04
 5.39062963e-04 4.49415768e-04]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [0.72543746 0.06611429 0.02550003 0.02101628 0.01276366 0.01128565
 0.00928892 0.00506798 0.00379727 0.00284123]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.72390085 0.22726627 0.02322194 0.02126839 0.00979954 0.00790825
 0.00620435 0.00358235 0.00233192 0.00230937]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.7045125  0.70698714 0.1498664  0.11869753 0.00722123 0.00572027
 0.00352304 0.00300901 0.00226965 0.00186416]  taking action:  1
Leaf selection - depth:  4
Leaf selection - action scores:  [0.8538333  0.7150361  0.12743598 0.0551594  0.02272077 0.01928051
 0.01925508 0.01807757 0.01096644 0.01075351]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [1.07083857e+00 2.58614887e-02 3.91701287e-05 2.86952218e-05
 2.70153432e-05 1.43009102e-05 1.26029017e-05 1.13648148e-05
 1.12235875e-05 1.10579304e-05]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [1.1460420e+00 1.5595114e-03 2.3690141e-05 5.6200802e-06 2.9052894e-06
 2.1125406e-06 2.1023950e-06 1.6513475e-06 1.0152063e-06 9.4470738e-07]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [1.25313032e+00 3.16570367e-04 1.55280737e-04 4.62072821e-05
 3.45980261e-05 1.87724108e-05 1.15768225e-05 3.90422974e-06
 2.19284993e-06 2.14013312e-06]  taking action:  0
Leaf selection - depth:  8
Leaf selection - action scores:  [0.482154   0.3660383  0.3375011  0.22350307 0.12023121 0.09664387
 0.08777734 0.07846803 0.05328302 0.05006117]  taking action:  0
Leaf selection - depth:  9
Leaf selection - action scores:  [0.7363486  0.23013529 0.21575134 0.20051175 0.10220844 0.08185515
 0.0392353  0.0273286  0.02200477 0.02138698]  taking action:  0
Adding child.
Leaf selection - depth:  10
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  198
Getting rollout return of leaf.
Token:  0
Token:  1
Token:  2
Token:  3
Token:  4
Token:  5
Token:  6
Token:  7
Token:  8
Token:  9
Token:  10
Token:  11
Token:  12
Token:  13
Token:  14
Token:  15
Token:  16
Token:  17
Token:  18
Token:  19
Token:  20
Token:  21
Token:  22
Token:  23
Token:  24
Token:  25
Token:  26
Token:  27
Token:  28
Token:  29
Token:  30
Token:  31
Token:  32
Token:  33
Token:  34
Token:  35
Token:  36
Token:  37
Token:  38
Token:  39
Token:  40
Token:  41
Token:  42
Token:  43
Token:  44
Token:  45
Token:  46
Token:  47
Token:  48
Token:  49
Token:  50
Token:  51
Token:  52
Token:  53
Token:  54
Token:  55
Token:  56
Token:  57
Token:  58
Token:  59
Token:  60
Token:  61
Token:  62
Token:  63
Token:  64
Token:  65
Token:  66
Token:  67
Token:  68
Token:  69
Token:  70
Token:  71
Token:  72
Token:  73
Token:  74
Token:  75
Token:  76
Token:  77
Token:  78
Token:  79
Token:  80
Token:  81
Token:  82
Token:  83
Token:  84
Token:  85
Token:  86
Token:  87
Token:  88
Token:  89
Token:  90
Token:  91
Token:  92
Token:  93
Token:  94
Token:  95
Token:  96
Token:  97
Token:  98
Token:  99
Token:  100
Token:  101
Token:  102
Token:  103
Token:  104
Token:  105
Token:  106
Token:  107
Token:  108
Token:  109
Token:  110
Token:  111
Token:  112
Token:  113
Token:  114
Token:  115
Token:  116
Token:  117
Token:  118
Token:  119
Token:  120
Token:  121
Token:  122
Token:  123
Token:  124
Token:  125
Token:  126
Token:  127
Token:  128
Token:  129
Token:  130
Token:  131
Token:  132
Token:  133
Token:  134
Token:  135
Token:  136
Token:  137
Token:  138
Token:  139
Token:  140
Token:  141
Token:  142
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
  wire [7:0] c;
  adder_8 A1(sum[7:0], c[0], in1[7:0], in2[7:0], cin);
  adder_8 A2(sum[15:8], c[1], in1[15:8], in2[15:8], c[0]);
  adder_8 A3(sum[23:16], c[2], in1[23:16], in2[23:16], c[1]);
  adder_8 A4(sum[31:24], cout, in1[31:24], in2[31:24], c[2]);
endmodule
Path:  output_files/3084873_adder_32/3084873_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  143
LLM generates return in:  51.154069  seconds
Running getPromptScore: 
adder_32
output_files/3084873_adder_32/synth_script.sh
Running bash in x seconds:  0.928167

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.5
Backpropogation: incorporating estimates.
Current runs:  37.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [6.90882468e-01 2.38362013e-01 4.59537252e-03 2.64692577e-03
 1.27646530e-03 8.41457231e-04 6.89816737e-01 5.69562622e-04
 5.46299031e-04 4.55448464e-04]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [0.72212136 0.06710855 0.02588351 0.02133233 0.0129556  0.01145537
 0.00942861 0.00514419 0.00385438 0.00288396]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.7205093  0.23078999 0.02358199 0.02159815 0.00995148 0.00803087
 0.00630054 0.00363789 0.00236808 0.00234517]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.70813274 0.6878215  0.15226443 0.12059682 0.00733678 0.0058118
 0.00357941 0.00305715 0.00230597 0.00189399]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.767667   0.06604353 0.0524376  0.0374426  0.01855793 0.00636082
 0.00535312 0.00497947 0.00440921 0.00335883]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [7.8073692e-01 6.7488305e-02 3.7208765e-03 1.4098417e-03 1.3237773e-03
 8.6366851e-04 4.1042504e-04 2.8524912e-04 1.3415130e-04 1.3225802e-04]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [7.4929619e-01 7.4934042e-01 8.0927752e-02 3.5017394e-03 4.4882152e-04
 2.9129267e-04 1.7645027e-04 1.7358351e-04 1.4169418e-04 1.4100078e-04]  taking action:  1
Leaf selection - depth:  7
Leaf selection - action scores:  [1.94482923e+00 3.65210394e-03 1.04284671e-03 3.33179079e-04
 2.57865759e-04 2.29763886e-04 2.15481225e-04 1.18794116e-04
 1.13509916e-04 6.42138257e-05]  taking action:  0
Adding child.
Leaf selection - depth:  8
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  11
Getting rollout return of leaf.
Token:  0
Token:  1
Token:  2
Token:  3
Token:  4
Token:  5
Token:  6
Token:  7
Token:  8
Token:  9
Token:  10
Token:  11
Token:  12
Token:  13
Token:  14
Token:  15
Token:  16
Token:  17
Token:  18
Token:  19
Token:  20
Token:  21
Token:  22
Token:  23
Token:  24
Token:  25
Token:  26
Token:  27
Token:  28
Token:  29
Token:  30
Token:  31
Token:  32
Token:  33
Token:  34
Token:  35
Token:  36
Token:  37
Token:  38
Token:  39
Token:  40
Token:  41
Token:  42
Token:  43
Token:  44
Token:  45
Token:  46
Token:  47
Token:  48
Token:  49
Token:  50
Token:  51
Token:  52
Token:  53
Token:  54
Token:  55
Token:  56
Token:  57
Token:  58
Token:  59
Token:  60
Token:  61
Token:  62
Token:  63
Token:  64
Token:  65
Token:  66
Token:  67
Token:  68
Token:  69
Token:  70
Token:  71
Token:  72
Token:  73
Token:  74
Token:  75
Token:  76
Token:  77
Token:  78
Token:  79
Token:  80
Token:  81
Token:  82
Token:  83
Token:  84
Token:  85
Token:  86
Token:  87
Token:  88
Token:  89
Token:  90
Token:  91
Token:  92
Token:  93
Token:  94
Token:  95
Token:  96
Token:  97
Token:  98
Token:  99
Token:  100
Token:  101
Token:  102
Token:  103
Token:  104
Token:  105
Token:  106
Token:  107
Token:  108
Token:  109
Token:  110
Token:  111
Token:  112
Token:  113
Token:  114
Token:  115
Token:  116
Token:  117
Token:  118
Token:  119
Token:  120
Token:  121
Token:  122
Token:  123
Token:  124
Token:  125
Token:  126
Token:  127
Token:  128
Token:  129
Token:  130
Token:  131
Token:  132
Token:  133
Token:  134
Token:  135
Token:  136
Token:  137
Token:  138
Token:  139
Token:  140
Token:  141
Token:  142
Token:  143
Token:  144
Token:  145
Token:  146
Token:  147
Token:  148
Token:  149
Token:  150
Token:  151
Token:  152
Token:  153
Token:  154
Token:  155
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
  wire c1, c2, c3, c4, c5, c6, c7, c8;
  adder_8 A1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
  adder_8 A2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
  adder_8 A3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
  adder_8 A4(sum[31:24], cout, in1[31:24], in2[31:24], c3);
endmodule
Path:  output_files/3084873_adder_32/3084873_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  156
LLM generates return in:  56.2008  seconds
Running getPromptScore: 
adder_32
output_files/3084873_adder_32/synth_script.sh
Running bash in x seconds:  0.893748

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.5
Backpropogation: incorporating estimates.
Current runs:  38.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [6.88039455e-01 2.41477988e-01 4.65544530e-03 2.68152758e-03
 1.29315183e-03 8.52457139e-04 6.93932163e-01 5.77008201e-04
 5.53440498e-04 4.61402291e-04]  taking action:  6
Leaf selection - depth:  1
Leaf selection - action scores:  [1.2130599e+00 5.4512620e-02 9.4113825e-04 8.8309287e-04 3.0352615e-04
 2.0306239e-04 1.5464917e-04 1.5111975e-04 1.3984932e-04 1.3010451e-04]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [1.3960642  0.01329265 0.00892597 0.00635069 0.00603643 0.00599787
 0.00483711 0.00372848 0.00244641 0.00188261]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [1.7435958e+00 1.4882331e-01 1.3382886e-02 7.1791820e-03 4.6278788e-03
 4.2941193e-03 1.5826557e-03 1.4282786e-03 8.7463256e-04 7.3873455e-04]  taking action:  0
Adding child.
Leaf selection - depth:  4
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  269
Getting rollout return of leaf.
Token:  0
Token:  1
Token:  2
Token:  3
Token:  4
Token:  5
Token:  6
Token:  7
Token:  8
Token:  9
Token:  10
Token:  11
Token:  12
Token:  13
Token:  14
Token:  15
Token:  16
Token:  17
Token:  18
Token:  19
Token:  20
Token:  21
Token:  22
Token:  23
Token:  24
Token:  25
Token:  26
Token:  27
Token:  28
Token:  29
Token:  30
Token:  31
Token:  32
Token:  33
Token:  34
Token:  35
Token:  36
Token:  37
Token:  38
Token:  39
Token:  40
Token:  41
Token:  42
Token:  43
Token:  44
Token:  45
Token:  46
Token:  47
Token:  48
Token:  49
Token:  50
Token:  51
Token:  52
Token:  53
Token:  54
Token:  55
Token:  56
Token:  57
Token:  58
Token:  59
Token:  60
Token:  61
Token:  62
Token:  63
Token:  64
Token:  65
Token:  66
Token:  67
Token:  68
Token:  69
Token:  70
Token:  71
Token:  72
Token:  73
Token:  74
Token:  75
Token:  76
Token:  77
Token:  78
Token:  79
Token:  80
Token:  81
Token:  82
Token:  83
Token:  84
Token:  85
Token:  86
Token:  87
Token:  88
Token:  89
Token:  90
Token:  91
Token:  92
Token:  93
Token:  94
Token:  95
Token:  96
Token:  97
Token:  98
Token:  99
Token:  100
Token:  101
Token:  102
Token:  103
Token:  104
Token:  105
Token:  106
Token:  107
Token:  108
Token:  109
Token:  110
Token:  111
Token:  112
Token:  113
Token:  114
Token:  115
Token:  116
Token:  117
Token:  118
Token:  119
Token:  120
Token:  121
Token:  122
Token:  123
Token:  124
Token:  125
Token:  126
Token:  127
Token:  128
Token:  129
Token:  130
Token:  131
Token:  132
Token:  133
Token:  134
Token:  135
Token:  136
Token:  137
Token:  138
Token:  139
Token:  140
Token:  141
Token:  142
Token:  143
Token:  144
Token:  145
Token:  146
Token:  147
Token:  148
Token:  149
Token:  150
Token:  151
Token:  152
Token:  153
Token:  154
Token:  155
Token:  156
Token:  157
Token:  158
Token:  159
Token:  160
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);                      
  wire c1,c2,c3,c4,c5,c6,c7,c8;
  adder_8 A1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
  adder_8 A2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
  adder_8 A3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
  adder_8 A4(sum[31:24], cout, in1[31:24], in2[31:24], c3);
endmodule
Path:  output_files/3084873_adder_32/3084873_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  161
LLM generates return in:  57.835601  seconds
Running getPromptScore: 
adder_32
output_files/3084873_adder_32/synth_script.sh
Running bash in x seconds:  0.906862

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.5
Backpropogation: incorporating estimates.
Current runs:  39.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [6.90616949e-01 2.44554265e-01 4.71475272e-03 2.71568854e-03
 1.30962576e-03 8.63316904e-04 6.58396132e-01 5.84358920e-04
 5.60490979e-04 4.67280264e-04]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [0.7189505  0.06808829 0.02626139 0.02164377 0.01314475 0.01162261
 0.00956626 0.00521929 0.00391065 0.00292606]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.7172707  0.23426071 0.02393663 0.02192296 0.01010113 0.00815164
 0.0063953  0.0036926  0.00240369 0.00238044]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.70287615 0.691595   0.15462525 0.12246665 0.00745054 0.00590191
 0.00363491 0.00310455 0.00234172 0.00192336]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.76200354 0.06746398 0.05356542 0.03824791 0.01895707 0.00649763
 0.00546825 0.00508656 0.00450404 0.00343107]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [7.7450961e-01 6.9005087e-02 3.8045023e-03 1.4415276e-03 1.3535288e-03
 8.8307925e-04 4.1964927e-04 2.9166002e-04 1.3716632e-04 1.3523048e-04]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [7.5578201e-01 6.7406082e-01 8.2832187e-02 3.5841444e-03 4.5938345e-04
 2.9814753e-04 1.8060260e-04 1.7766838e-04 1.4502861e-04 1.4431890e-04]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [8.0585712e-01 6.6025350e-03 2.2389905e-03 3.1521259e-04 1.8347232e-04
 1.4971034e-04 8.4043342e-05 4.4682780e-05 3.2079370e-05 1.8252076e-05]  taking action:  0
Leaf selection - depth:  8
Leaf selection - action scores:  [8.1072402e-01 6.9547556e-02 1.0640953e-03 6.7953527e-04 4.9848418e-04
 8.1282851e-05 7.8498852e-05 5.0933078e-05 5.0238014e-05 4.9234011e-05]  taking action:  0
Leaf selection - depth:  9
Leaf selection - action scores:  [8.2110190e-01 4.2965747e-02 3.7643441e-03 3.3410087e-03 3.0725895e-04
 2.3626935e-04 2.2492580e-04 7.4717907e-05 7.4024545e-05 6.5133332e-05]  taking action:  0
Leaf selection - depth:  10
Leaf selection - action scores:  [8.3359116e-01 7.1268980e-03 6.0567860e-03 7.9390791e-04 5.1646389e-04
 2.9072183e-04 1.9393752e-04 1.7052624e-04 1.4460234e-04 9.9669895e-05]  taking action:  0
Leaf selection - depth:  11
Leaf selection - action scores:  [8.2782090e-01 2.5370044e-01 3.4674173e-04 3.4655925e-04 3.3717026e-04
 6.6705521e-05 3.7310649e-05 3.3967070e-05 3.3498167e-05 2.2274447e-05]  taking action:  0
Leaf selection - depth:  12
Leaf selection - action scores:  [8.5632169e-01 2.2857800e-02 2.9839594e-03 2.4585677e-03 6.0794182e-04
 4.0518056e-04 2.8066037e-04 1.2547505e-04 1.1877835e-04 1.0338792e-04]  taking action:  0
Leaf selection - depth:  13
Leaf selection - action scores:  [8.7199497e-01 7.4540474e-03 1.9070251e-03 7.7488204e-04 2.9988316e-04
 2.2939223e-04 1.8714450e-04 1.4774899e-04 1.2252186e-04 8.3469815e-05]  taking action:  0
Leaf selection - depth:  14
Leaf selection - action scores:  [8.8379157e-01 5.8161739e-02 2.4219141e-04 6.4428947e-05 3.7524056e-05
 3.7449696e-05 3.6636360e-05 2.5970945e-05 2.4399676e-05 1.4310056e-05]  taking action:  0
Leaf selection - depth:  15
Leaf selection - action scores:  [9.0669644e-01 7.3374766e-03 7.6842972e-04 6.3610845e-04 5.9020129e-04
 1.1669554e-04 4.8347349e-05 3.5989877e-05 2.9601981e-05 2.5233519e-05]  taking action:  0
Leaf selection - depth:  16
Leaf selection - action scores:  [9.2888665e-01 2.7453674e-03 3.6709596e-04 2.2580265e-04 1.4281126e-04
 1.4027575e-04 7.9672827e-05 5.9096350e-05 5.1443392e-05 3.2532189e-05]  taking action:  0
Leaf selection - depth:  17
Leaf selection - action scores:  [9.5422453e-01 5.7334881e-03 1.4007429e-04 1.0708123e-04 8.0589620e-05
 2.4503925e-05 2.0071364e-05 1.5588483e-05 1.0080817e-05 8.5229049e-06]  taking action:  0
Leaf selection - depth:  18
Leaf selection - action scores:  [9.8527801e-01 5.1320740e-03 3.5183612e-04 2.5718898e-04 2.0320501e-04
 5.9855029e-05 2.0473071e-05 1.7044531e-05 1.5354342e-05 1.5073568e-05]  taking action:  0
Leaf selection - depth:  19
Leaf selection - action scores:  [1.0248322e+00 1.8486317e-03 8.4280473e-05 3.3958735e-05 2.7304826e-05
 2.3975213e-05 2.1906844e-05 1.9771565e-05 1.7079692e-05 1.6578029e-05]  taking action:  0
Leaf selection - depth:  20
Leaf selection - action scores:  [1.0706975e+00 2.6634509e-02 6.5677727e-05 4.2718078e-05 9.7923339e-06
 7.5284056e-06 5.1945617e-06 3.9213301e-06 2.6861587e-06 2.1259482e-06]  taking action:  0
Leaf selection - depth:  21
Leaf selection - action scores:  [1.14553261e+00 2.91152694e-03 2.10083206e-04 2.00854731e-04
 1.21918456e-04 4.28984167e-05 9.18054866e-06 8.46519924e-06
 8.35280116e-06 6.05137484e-06]  taking action:  0
Leaf selection - depth:  22
Leaf selection - action scores:  [1.2530832e+00 3.2557017e-04 1.2468523e-04 1.1336883e-04 9.6199452e-05
 1.2676325e-05 1.0041578e-05 9.0494823e-06 6.9785069e-06 6.8767658e-06]  taking action:  0
Leaf selection - depth:  23
Leaf selection - action scores:  [1.2638699e+00 3.6192366e-01 1.9034723e-04 1.3957212e-04 4.3654407e-05
 2.7299891e-05 1.8459141e-05 1.7752865e-05 9.4517372e-06 8.5993097e-06]  taking action:  0
Leaf selection - depth:  24
Leaf selection - action scores:  [1.9236925e+00 2.1251278e-02 4.2236922e-03 9.1244839e-04 7.0128712e-04
 1.9405669e-04 5.3014519e-05 4.5600715e-05 4.1703745e-05 2.9601499e-05]  taking action:  0
Adding child.
Leaf selection - depth:  25
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  23
Getting rollout return of leaf.
Token:  0
Token:  1
Token:  2
Token:  3
Token:  4
Token:  5
Token:  6
Token:  7
Token:  8
Token:  9
Token:  10
Token:  11
Token:  12
Token:  13
Token:  14
Token:  15
Token:  16
Token:  17
Token:  18
Token:  19
Token:  20
Token:  21
Token:  22
Token:  23
Token:  24
Token:  25
Token:  26
Token:  27
Token:  28
Token:  29
Token:  30
Token:  31
Token:  32
Token:  33
Token:  34
Token:  35
Token:  36
Token:  37
Token:  38
Token:  39
Token:  40
Token:  41
Token:  42
Token:  43
Token:  44
Token:  45
Token:  46
Token:  47
Token:  48
Token:  49
Token:  50
Token:  51
Token:  52
Token:  53
Token:  54
Token:  55
Token:  56
Token:  57
Token:  58
Token:  59
Token:  60
Token:  61
Token:  62
Token:  63
Token:  64
Token:  65
Token:  66
Token:  67
Token:  68
Token:  69
Token:  70
Token:  71
Token:  72
Token:  73
Token:  74
Token:  75
Token:  76
Token:  77
Token:  78
Token:  79
Token:  80
Token:  81
Token:  82
Token:  83
Token:  84
Token:  85
Token:  86
Token:  87
Token:  88
Token:  89
Token:  90
Token:  91
Token:  92
Token:  93
Token:  94
Token:  95
Token:  96
Token:  97
Token:  98
Token:  99
Token:  100
Token:  101
Token:  102
Token:  103
Token:  104
Token:  105
Token:  106
Token:  107
Token:  108
Token:  109
Token:  110
Token:  111
Token:  112
Token:  113
Token:  114
Token:  115
Token:  116
Token:  117
Token:  118
Token:  119
Token:  120
Token:  121
Token:  122
Token:  123
Token:  124
Token:  125
Token:  126
Token:  127
Token:  128
Token:  129
Token:  130
Token:  131
Token:  132
Token:  133
Token:  134
Token:  135
Token:  136
Token:  137
Token:  138
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7,c8;
  adder_8 A1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
  adder_8 A2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
  adder_8 A3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
  adder_8 A4(sum[31:24], cout, in1[31:24], in2[31:24], c3);
endmodule
Path:  output_files/3084873_adder_32/3084873_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  139
LLM generates return in:  50.695539  seconds
Running getPromptScore: 
adder_32
output_files/3084873_adder_32/synth_script.sh
Running bash in x seconds:  0.909223

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.5
Backpropogation: incorporating estimates.
Current runs:  40.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [6.87796791e-01 2.47592323e-01 4.77332332e-03 2.74942510e-03
 1.32589503e-03 8.74041748e-04 6.61606145e-01 5.91618316e-04
 5.67453867e-04 4.73085211e-04]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [0.7159145  0.06905412 0.02663391 0.02195078 0.01333121 0.01178748
 0.00970196 0.00529333 0.00396612 0.00296757]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.71417373 0.23768076 0.02428609 0.02224302 0.0102486  0.00827065
 0.00648866 0.00374651 0.00243878 0.00241519]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.6979908  0.6953118  0.15695058 0.12430836 0.00756258 0.00599067
 0.00368958 0.00315124 0.00237694 0.00195228]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.75669384 0.06885514 0.05466998 0.03903661 0.01934798 0.00663161
 0.00558101 0.00519145 0.00459692 0.00350182]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [7.6868939e-01 7.0489235e-02 3.8863288e-03 1.4725317e-03 1.3826402e-03
 9.0207235e-04 4.2867498e-04 2.9793297e-04 1.4011646e-04 1.3813900e-04]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [7.4901599e-01 6.8171859e-01 8.4693827e-02 3.6646971e-03 4.6970797e-04
 3.0484830e-04 1.8466159e-04 1.8166142e-04 1.4828809e-04 1.4756243e-04]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [7.9797053e-01 6.7740576e-03 2.2971556e-03 3.2340127e-04 1.8823863e-04
 1.5359955e-04 8.6226639e-05 4.5843564e-05 3.2912736e-05 1.8726234e-05]  taking action:  0
Leaf selection - depth:  8
Leaf selection - action scores:  [8.0226427e-01 7.1453325e-02 1.0932541e-03 6.9815613e-04 5.1214383e-04
 8.3510189e-05 8.0649901e-05 5.2328767e-05 5.1614654e-05 5.0583141e-05]  taking action:  0
Leaf selection - depth:  9
Leaf selection - action scores:  [8.1182790e-01 4.4211391e-02 3.8734782e-03 3.4378697e-03 3.1616684e-04
 2.4311917e-04 2.3144674e-04 7.6884091e-05 7.6170632e-05 6.7021647e-05]  taking action:  0
Leaf selection - depth:  10
Leaf selection - action scores:  [8.2332855e-01 7.3462380e-03 6.2431921e-03 8.1834150e-04 5.3235877e-04
 2.9966919e-04 1.9990622e-04 1.7577442e-04 1.4905268e-04 1.0273737e-04]  taking action:  0
Leaf selection - depth:  11
Leaf selection - action scores:  [8.1709373e-01 2.6202068e-01 3.5811332e-04 3.5792484e-04 3.4822794e-04
 6.8893169e-05 3.8534272e-05 3.5081041e-05 3.4596756e-05 2.3004950e-05]  taking action:  0
Leaf selection - depth:  12
Leaf selection - action scores:  [8.4373665e-01 2.3660071e-02 3.0886917e-03 2.5448597e-03 6.2927965e-04
 4.1940174e-04 2.9051112e-04 1.2987902e-04 1.2294728e-04 1.0701667e-04]  taking action:  0
Leaf selection - depth:  13
Leaf selection - action scores:  [8.5779405e-01 7.7354298e-03 1.9790134e-03 8.0413301e-04 3.1120345e-04
 2.3805157e-04 1.9420902e-04 1.5332637e-04 1.2714694e-04 8.6620719e-05]  taking action:  0
Leaf selection - depth:  14
Leaf selection - action scores:  [8.6787570e-01 6.0536657e-02 2.5208082e-04 6.7059773e-05 3.9056275e-05
 3.8978877e-05 3.8132333e-05 2.7031416e-05 2.5395988e-05 1.4894378e-05]  taking action:  0
Leaf selection - depth:  15
Leaf selection - action scores:  [8.88185382e-01 7.66374404e-03 8.02598661e-04 6.64393592e-04
 6.16445148e-04 1.21884514e-04 5.04971576e-05 3.75901982e-05
 3.09182615e-05 2.63555521e-05]  taking action:  0
Leaf selection - depth:  16
Leaf selection - action scores:  [9.0727854e-01 2.8793658e-03 3.8501350e-04 2.3682383e-04 1.4978171e-04
 1.4712247e-04 8.3561572e-05 6.1980776e-05 5.3954289e-05 3.4120050e-05]  taking action:  0
Leaf selection - depth:  17
Leaf selection - action scores:  [9.2860043e-01 6.0436269e-03 1.4765127e-04 1.1287353e-04 8.4948915e-05
 2.5829404e-05 2.1157075e-05 1.6431703e-05 1.0626115e-05 8.9839305e-06]  taking action:  0
Leaf selection - depth:  18
Leaf selection - action scores:  [9.5416689e-01 5.4433863e-03 3.7317857e-04 2.7279009e-04 2.1553146e-04
 6.3485837e-05 2.1714970e-05 1.8078454e-05 1.6285738e-05 1.5987933e-05]  taking action:  0
Leaf selection - depth:  19
Leaf selection - action scores:  [9.8584831e-01 1.9762702e-03 9.0099617e-05 3.6303412e-05 2.9190089e-05
 2.5630581e-05 2.3419401e-05 2.1136693e-05 1.8258957e-05 1.7722659e-05]  taking action:  0
Leaf selection - depth:  20
Leaf selection - action scores:  [1.02036345e+00 2.87685599e-02 7.09400556e-05 4.61408017e-05
 1.05769295e-05 8.13160750e-06 5.61076831e-06 4.23552092e-06
 2.90138314e-06 2.29628654e-06]  taking action:  0
Leaf selection - depth:  21
Leaf selection - action scores:  [1.0752610e+00 3.1894180e-03 2.3013462e-04 2.2002534e-04 1.3355498e-04
 4.6992860e-05 1.0056787e-05 9.2731616e-06 9.1500351e-06 6.6289490e-06]  taking action:  0
Leaf selection - depth:  22
Leaf selection - action scores:  [1.1462337e+00 3.6399852e-04 1.3940233e-04 1.2675019e-04 1.0755425e-04
 1.4172561e-05 1.1226825e-05 1.0117628e-05 7.8022076e-06 7.6884580e-06]  taking action:  0
Leaf selection - depth:  23
Leaf selection - action scores:  [1.1138107e+00 4.1791344e-01 2.1979405e-04 1.6116399e-04 5.0407765e-05
 3.1523199e-05 2.1314780e-05 2.0499241e-05 1.0913926e-05 9.9296276e-06]  taking action:  0
Leaf selection - depth:  24
Leaf selection - action scores:  [1.4280163e+00 2.6027394e-02 5.1729456e-03 1.1175165e-03 8.5889787e-04
 2.3766994e-04 6.4929263e-05 5.5849243e-05 5.1076448e-05 3.6254285e-05]  taking action:  0
Leaf selection - depth:  25
Leaf selection - action scores:  [1.9475212e+00 2.4203716e-03 1.2515597e-03 1.6938406e-04 4.0486888e-05
 2.5189758e-05 1.9230803e-05 1.5583442e-05 1.3835111e-05 1.1065587e-05]  taking action:  0
Adding child.
Leaf selection - depth:  26
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  26
Getting rollout return of leaf.
Token:  0
Token:  1
Token:  2
Token:  3
Token:  4
Token:  5
Token:  6
Token:  7
Token:  8
Token:  9
Token:  10
Token:  11
Token:  12
Token:  13
Token:  14
Token:  15
Token:  16
Token:  17
Token:  18
Token:  19
Token:  20
Token:  21
Token:  22
Token:  23
Token:  24
Token:  25
Token:  26
Token:  27
Token:  28
Token:  29
Token:  30
Token:  31
Token:  32
Token:  33
Token:  34
Token:  35
Token:  36
Token:  37
Token:  38
Token:  39
Token:  40
Token:  41
Token:  42
Token:  43
Token:  44
Token:  45
Token:  46
Token:  47
Token:  48
Token:  49
Token:  50
Token:  51
Token:  52
Token:  53
Token:  54
Token:  55
Token:  56
Token:  57
Token:  58
Token:  59
Token:  60
Token:  61
Token:  62
Token:  63
Token:  64
Token:  65
Token:  66
Token:  67
Token:  68
Token:  69
Token:  70
Token:  71
Token:  72
Token:  73
Token:  74
Token:  75
Token:  76
Token:  77
Token:  78
Token:  79
Token:  80
Token:  81
Token:  82
Token:  83
Token:  84
Token:  85
Token:  86
Token:  87
Token:  88
Token:  89
Token:  90
Token:  91
Token:  92
Token:  93
Token:  94
Token:  95
Token:  96
Token:  97
Token:  98
Token:  99
Token:  100
Token:  101
Token:  102
Token:  103
Token:  104
Token:  105
Token:  106
Token:  107
Token:  108
Token:  109
Token:  110
Token:  111
Token:  112
Token:  113
Token:  114
Token:  115
Token:  116
Token:  117
Token:  118
Token:  119
Token:  120
Token:  121
Token:  122
Token:  123
Token:  124
Token:  125
Token:  126
Token:  127
Token:  128
Token:  129
Token:  130
Token:  131
Token:  132
Token:  133
Token:  134
Token:  135
Token:  136
Token:  137
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7,c8;
  adder_8 A1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
  adder_8 A2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
  adder_8 A3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
  adder_8 A4(sum[31:24], cout, in1[31:24], in2[31:24], c3);
endmodule
Path:  output_files/3084873_adder_32/3084873_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  138
LLM generates return in:  50.319705  seconds
Running getPromptScore: 
adder_32
output_files/3084873_adder_32/synth_script.sh
Running bash in x seconds:  0.890438

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.5
Backpropogation: incorporating estimates.
Current runs:  41.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [6.85099906e-01 2.50593551e-01 4.83118390e-03 2.78275268e-03
 1.34196707e-03 8.84636581e-04 6.64777244e-01 5.98789709e-04
 5.74332347e-04 4.78819786e-04]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [0.713004   0.07000664 0.02700129 0.02225357 0.01351509 0.01195007
 0.00983579 0.00536634 0.00402083 0.0030085 ]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.71120846 0.24105227 0.02463058 0.02255854 0.01039398 0.00838797
 0.0065807  0.00379965 0.00247338 0.00244945]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.69343585 0.69897425 0.15924194 0.12612318 0.00767299 0.00607813
 0.00374344 0.00319725 0.00241164 0.00198078]  taking action:  1
Leaf selection - depth:  4
Leaf selection - action scores:  [0.82601595 0.74324524 0.13516627 0.05850537 0.02409901 0.02045007
 0.0204231  0.01917416 0.01163167 0.01140582]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [1.0204904e+00 2.7933601e-02 4.2308577e-05 3.0994383e-05 2.9179906e-05
 1.5446749e-05 1.3612691e-05 1.2275404e-05 1.2122860e-05 1.1943930e-05]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [1.0757073e+00 1.7083592e-03 2.5951251e-05 6.1564897e-06 3.1825850e-06
 2.3141724e-06 2.3030582e-06 1.8089606e-06 1.1121027e-06 1.0348751e-06]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [1.1462733e+00 3.5393640e-04 1.7360914e-04 5.1661311e-05 3.8681766e-05
 2.0988193e-05 1.2943280e-05 4.3650616e-06 2.4516805e-06 2.3927416e-06]  taking action:  0
Leaf selection - depth:  8
Leaf selection - action scores:  [0.51204556 0.4226646  0.38971272 0.2580791  0.13883103 0.11159473
 0.10135654 0.09060708 0.06152593 0.05780565]  taking action:  0
Leaf selection - depth:  9
Leaf selection - action scores:  [0.7009196  0.281857   0.26424035 0.24557576 0.12517926 0.10025167
 0.04805323 0.03347057 0.02695023 0.0261936 ]  taking action:  0
Leaf selection - depth:  10
Leaf selection - action scores:  [1.8803122e+00 1.3687025e-02 1.3209564e-02 1.0855533e-02 2.4707245e-03
 1.0209854e-03 9.1360771e-04 8.0150279e-04 6.3836569e-04 2.8686595e-04]  taking action:  0
Adding child.
Leaf selection - depth:  11
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  50286
Getting rollout return of leaf.
Token:  0
Token:  1
Token:  2
Token:  3
Token:  4
Token:  5
Token:  6
Token:  7
Token:  8
Token:  9
Token:  10
Token:  11
Token:  12
Token:  13
Token:  14
Token:  15
Token:  16
Token:  17
Token:  18
Token:  19
Token:  20
Token:  21
Token:  22
Token:  23
Token:  24
Token:  25
Token:  26
Token:  27
Token:  28
Token:  29
Token:  30
Token:  31
Token:  32
Token:  33
Token:  34
Token:  35
Token:  36
Token:  37
Token:  38
Token:  39
Token:  40
Token:  41
Token:  42
Token:  43
Token:  44
Token:  45
Token:  46
Token:  47
Token:  48
Token:  49
Token:  50
Token:  51
Token:  52
Token:  53
Token:  54
Token:  55
Token:  56
Token:  57
Token:  58
Token:  59
Token:  60
Token:  61
Token:  62
Token:  63
Token:  64
Token:  65
Token:  66
Token:  67
Token:  68
Token:  69
Token:  70
Token:  71
Token:  72
Token:  73
Token:  74
Token:  75
Token:  76
Token:  77
Token:  78
Token:  79
Token:  80
Token:  81
Token:  82
Token:  83
Token:  84
Token:  85
Token:  86
Token:  87
Token:  88
Token:  89
Token:  90
Token:  91
Token:  92
Token:  93
Token:  94
Token:  95
Token:  96
Token:  97
Token:  98
Token:  99
Token:  100
Token:  101
Token:  102
Token:  103
Token:  104
Token:  105
Token:  106
Token:  107
Token:  108
Token:  109
Token:  110
Token:  111
Token:  112
Token:  113
Token:  114
Token:  115
Token:  116
Token:  117
Token:  118
Token:  119
Token:  120
Token:  121
Token:  122
Token:  123
Token:  124
Token:  125
Token:  126
Token:  127
Token:  128
Token:  129
Token:  130
Token:  131
Token:  132
Token:  133
Token:  134
Token:  135
Token:  136
Token:  137
Token:  138
Token:  139
Token:  140
Token:  141
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
  wire [7:0] c;
  adder_8 A1(sum[7:0], c[0], in1[7:0], in2[7:0], cin);
  adder_8 A2(sum[15:8], c[1], in1[15:8], in2[15:8], c[0]);
  adder_8 A3(sum[23:16], c[2], in1[23:16], in2[23:16], c[1]);
  adder_8 A4(sum[31:24], cout, in1[31:24], in2[31:24], c[2]);
endmodule
Path:  output_files/3084873_adder_32/3084873_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  142
LLM generates return in:  50.754034  seconds
Running getPromptScore: 
adder_32
output_files/3084873_adder_32/synth_script.sh
Running bash in x seconds:  0.898666

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.5
Backpropogation: incorporating estimates.
Current runs:  42.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [6.82517519e-01 2.53559259e-01 4.88835967e-03 2.81568581e-03
 1.35784889e-03 8.95106017e-04 6.67910811e-01 6.05876224e-04
 5.81129416e-04 4.84486490e-04]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [0.71021056 0.07094637 0.02736374 0.02255229 0.01369651 0.01211048
 0.00996782 0.00543838 0.0040748  0.00304889]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.70836556 0.24437732 0.02497033 0.02286971 0.01053735 0.00850367
 0.00667148 0.00385206 0.00250749 0.00248324]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.6964525  0.6823263  0.16150081 0.12791224 0.00778183 0.00616435
 0.00379654 0.0032426  0.00244585 0.00200888]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.7517024  0.07021873 0.05575266 0.03980968 0.01973114 0.00676295
 0.00569154 0.00529426 0.00468795 0.00357117]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [7.6323330e-01 7.1942776e-02 3.9664679e-03 1.5028964e-03 1.4111514e-03
 9.2067377e-04 4.3751459e-04 3.0407659e-04 1.4300577e-04 1.4098753e-04]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [7.4277091e-01 6.8921161e-01 8.6515404e-02 3.7435167e-03 4.7981038e-04
 3.1140493e-04 1.8863326e-04 1.8556857e-04 1.5147745e-04 1.5073617e-04]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [7.9067981e-01 6.9413441e-03 2.3538843e-03 3.3138771e-04 1.9288721e-04
 1.5739271e-04 8.8356021e-05 4.6975674e-05 3.3725519e-05 1.9188681e-05]  taking action:  0
Leaf selection - depth:  8
Leaf selection - action scores:  [7.9447830e-01 7.3309556e-02 1.1216550e-03 7.1629306e-04 5.2544847e-04
 8.5679647e-05 8.2745049e-05 5.3688178e-05 5.2955515e-05 5.1897205e-05]  taking action:  0
Leaf selection - depth:  9
Leaf selection - action scores:  [8.0333543e-01 4.5422889e-02 3.9796205e-03 3.5320753e-03 3.2483056e-04
 2.4978121e-04 2.3778893e-04 7.8990903e-05 7.8257886e-05 6.8858200e-05]  taking action:  0
Leaf selection - depth:  10
Leaf selection - action scores:  [8.1398427e-01 7.5592166e-03 6.4241919e-03 8.4206648e-04 5.4779265e-04
 3.0835706e-04 2.0570180e-04 1.8087040e-04 1.5337394e-04 1.0571589e-04]  taking action:  0
Leaf selection - depth:  11
Leaf selection - action scores:  [8.0738622e-01 2.7008474e-01 3.6913477e-04 3.6894047e-04 3.5894514e-04
 7.1013448e-05 3.9720220e-05 3.6160705e-05 3.5661520e-05 2.3712959e-05]  taking action:  0
Leaf selection - depth:  12
Leaf selection - action scores:  [8.3243561e-01 2.4436017e-02 3.1899870e-03 2.6283197e-03 6.4991717e-04
 4.3315627e-04 3.0003858e-04 1.3413848e-04 1.2697940e-04 1.1052634e-04]  taking action:  0
Leaf selection - depth:  13
Leaf selection - action scores:  [8.4515184e-01 8.0069313e-03 2.0484736e-03 8.3235680e-04 3.2212617e-04
 2.4640679e-04 2.0102544e-04 1.5870787e-04 1.3160959e-04 8.9660964e-05]  taking action:  0
Leaf selection - depth:  14
Leaf selection - action scores:  [8.5384810e-01 6.2821850e-02 2.6159661e-04 6.9591209e-05 4.0530609e-05
 4.0450290e-05 3.9571791e-05 2.8051825e-05 2.6354661e-05 1.5456626e-05]  taking action:  0
Leaf selection - depth:  15
Leaf selection - action scores:  [8.7206781e-01 7.9766773e-03 8.3537115e-04 6.9152279e-04 6.4161641e-04
 1.2686141e-04 5.2559106e-05 3.9125120e-05 3.2180746e-05 2.7431726e-05]  taking action:  0
Leaf selection - depth:  16
Leaf selection - action scores:  [8.8873816e-01 3.0073994e-03 4.0213348e-04 2.4735442e-04 1.5644189e-04
 1.5366440e-04 8.7277214e-05 6.4736807e-05 5.6353416e-05 3.5637229e-05]  taking action:  0
Leaf selection - depth:  17
Leaf selection - action scores:  [9.0700841e-01 6.3386098e-03 1.5485796e-04 1.1838276e-04 8.9095178e-05
 2.7090109e-05 2.2189730e-05 1.7233717e-05 1.1144764e-05 9.4224260e-06]  taking action:  0
Leaf selection - depth:  18
Leaf selection - action scores:  [9.2854643e-01 5.7378327e-03 3.9336475e-04 2.8754599e-04 2.2719010e-04
 6.6919951e-05 2.2889588e-05 1.9056364e-05 1.7166676e-05 1.6852760e-05]  taking action:  0
Leaf selection - depth:  19
Leaf selection - action scores:  [9.5469624e-01 2.0961512e-03 9.5565068e-05 3.8505583e-05 3.0960764e-05
 2.7185335e-05 2.4840025e-05 2.2418846e-05 1.9366549e-05 1.8797718e-05]  taking action:  0
Leaf selection - depth:  20
Leaf selection - action scores:  [9.8175347e-01 3.0754883e-02 7.5838107e-05 4.9326591e-05 1.1307213e-05
 8.6930540e-06 5.9981635e-06 4.5279621e-06 3.1017089e-06 2.4548335e-06]  taking action:  0
Leaf selection - depth:  21
Leaf selection - action scores:  [1.0244710e+00 3.4449652e-03 2.4857381e-04 2.3765453e-04 1.4425587e-04
 5.0758092e-05 1.0862572e-05 1.0016160e-05 9.8831679e-06 7.1600834e-06]  taking action:  0
Leaf selection - depth:  22
Leaf selection - action scores:  [1.07587540e+00 3.98740405e-04 1.52707595e-04 1.38847885e-04
 1.17819785e-04 1.55252637e-05 1.22983711e-05 1.10833071e-05
 8.54689097e-06 8.42228383e-06]  taking action:  0
Leaf selection - depth:  23
Leaf selection - action scores:  [1.0294502e+00 4.6724141e-01 2.4573720e-04 1.8018682e-04 5.6357592e-05
 3.5244007e-05 2.3830646e-05 2.2918848e-05 1.2202140e-05 1.1101661e-05]  taking action:  0
Leaf selection - depth:  24
Leaf selection - action scores:  [1.2401706e+00 3.0053847e-02 5.9732026e-03 1.2903969e-03 9.9176972e-04
 2.7443760e-04 7.4973846e-05 6.4489148e-05 5.8977999e-05 4.1862841e-05]  taking action:  0
Leaf selection - depth:  25
Leaf selection - action scores:  [1.44260836e+00 2.96433782e-03 1.53284136e-03 2.07452249e-04
 4.95861095e-05 3.08510280e-05 2.35528296e-05 1.90857409e-05
 1.69444811e-05 1.35525215e-05]  taking action:  0
Leaf selection - depth:  26
Leaf selection - action scores:  [1.15660667e+00 7.92631149e-01 1.65873300e-03 3.02838074e-04
 1.43270663e-04 5.71254932e-05 3.49188485e-05 2.23406478e-05
 1.44658625e-05 1.01252808e-05]  taking action:  0
Adding child.
Leaf selection - depth:  27
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  198
Getting rollout return of leaf.
Token:  0
Token:  1
Token:  2
Token:  3
Token:  4
Token:  5
Token:  6
Token:  7
Token:  8
Token:  9
Token:  10
Token:  11
Token:  12
Token:  13
Token:  14
Token:  15
Token:  16
Token:  17
Token:  18
Token:  19
Token:  20
Token:  21
Token:  22
Token:  23
Token:  24
Token:  25
Token:  26
Token:  27
Token:  28
Token:  29
Token:  30
Token:  31
Token:  32
Token:  33
Token:  34
Token:  35
Token:  36
Token:  37
Token:  38
Token:  39
Token:  40
Token:  41
Token:  42
Token:  43
Token:  44
Token:  45
Token:  46
Token:  47
Token:  48
Token:  49
Token:  50
Token:  51
Token:  52
Token:  53
Token:  54
Token:  55
Token:  56
Token:  57
Token:  58
Token:  59
Token:  60
Token:  61
Token:  62
Token:  63
Token:  64
Token:  65
Token:  66
Token:  67
Token:  68
Token:  69
Token:  70
Token:  71
Token:  72
Token:  73
Token:  74
Token:  75
Token:  76
Token:  77
Token:  78
Token:  79
Token:  80
Token:  81
Token:  82
Token:  83
Token:  84
Token:  85
Token:  86
Token:  87
Token:  88
Token:  89
Token:  90
Token:  91
Token:  92
Token:  93
Token:  94
Token:  95
Token:  96
Token:  97
Token:  98
Token:  99
Token:  100
Token:  101
Token:  102
Token:  103
Token:  104
Token:  105
Token:  106
Token:  107
Token:  108
Token:  109
Token:  110
Token:  111
Token:  112
Token:  113
Token:  114
Token:  115
Token:  116
Token:  117
Token:  118
Token:  119
Token:  120
Token:  121
Token:  122
Token:  123
Token:  124
Token:  125
Token:  126
Token:  127
Token:  128
Token:  129
Token:  130
Token:  131
Token:  132
Token:  133
Token:  134
Token:  135
Token:  136
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7,c8;
  adder_8 A1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
  adder_8 A2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
  adder_8 A3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
  adder_8 A4(sum[31:24], cout, in1[31:24], in2[31:24], c3);
endmodule
Path:  output_files/3084873_adder_32/3084873_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  137
LLM generates return in:  50.034848  seconds
Running getPromptScore: 
adder_32
output_files/3084873_adder_32/synth_script.sh
Running bash in x seconds:  0.898839

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.5
Backpropogation: incorporating estimates.
Current runs:  43.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [6.80041806e-01 2.56490677e-01 4.94487437e-03 2.84823817e-03
 1.37354709e-03 9.05454407e-04 6.71008149e-01 6.12880806e-04
 5.87847899e-04 4.90087676e-04]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [0.7075263  0.07187381 0.02772145 0.0228471  0.01387556 0.0122688
 0.01009812 0.00550947 0.00412807 0.00308874]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.70563686 0.24765767 0.02530552 0.02317669 0.0106788  0.00861782
 0.00676103 0.00390377 0.00254115 0.00251657]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.69204146 0.685531   0.16372852 0.12967664 0.00788917 0.00624938
 0.00384891 0.00328733 0.00247959 0.00203659]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.7469982  0.07155636 0.05681472 0.04056803 0.02010701 0.00689178
 0.00579996 0.00539511 0.00477725 0.0036392 ]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [7.5810456e-01 7.3367529e-02 4.0450194e-03 1.5326596e-03 1.4390976e-03
 9.3890668e-04 4.4617907e-04 3.1009849e-04 1.4583784e-04 1.4377963e-04]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [7.3698312e-01 6.9655001e-01 8.8299416e-02 3.8207110e-03 4.8970443e-04
 3.1782634e-04 1.9252303e-04 1.8939514e-04 1.5460103e-04 1.5384446e-04]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [7.8391296e-01 7.1046916e-03 2.4092773e-03 3.3918611e-04 1.9742634e-04
 1.6109657e-04 9.0435264e-05 4.8081136e-05 3.4519169e-05 1.9640240e-05]  taking action:  0
Leaf selection - depth:  8
Leaf selection - action scores:  [7.8728032e-01 7.5119950e-02 1.1493544e-03 7.3398201e-04 5.3842447e-04
 8.7795517e-05 8.4788451e-05 5.5014014e-05 5.4263259e-05 5.3178810e-05]  taking action:  0
Leaf selection - depth:  9
Leaf selection - action scores:  [7.9551941e-01 4.6602897e-02 4.0830043e-03 3.6238327e-03 3.3326910e-04
 2.5627008e-04 2.4396628e-04 8.1042948e-05 8.0290891e-05 7.0647016e-05]  taking action:  0
Leaf selection - depth:  10
Leaf selection - action scores:  [8.0542779e-01 7.7663572e-03 6.6002300e-03 8.6514110e-04 5.6280347e-04
 3.1680678e-04 2.1133853e-04 1.8582668e-04 1.5757675e-04 1.0861275e-04]  taking action:  0
Leaf selection - depth:  11
Leaf selection - action scores:  [7.9854476e-01 2.7791491e-01 3.7983654e-04 3.7963662e-04 3.6935150e-04
 7.3072239e-05 4.0871768e-05 3.7209062e-05 3.6695401e-05 2.4400435e-05]  taking action:  0
Leaf selection - depth:  12
Leaf selection - action scores:  [8.2221186e-01 2.5188068e-02 3.2881633e-03 2.7092099e-03 6.6991930e-04
 4.4648725e-04 3.0927270e-04 1.3826677e-04 1.3088736e-04 1.1392794e-04]  taking action:  0
Leaf selection - depth:  13
Leaf selection - action scores:  [8.3379972e-01 8.2695233e-03 2.1156545e-03 8.5965439e-04 3.3269048e-04
 2.5448782e-04 2.0761818e-04 1.6391279e-04 1.3592579e-04 9.2601447e-05]  taking action:  0
Leaf selection - depth:  14
Leaf selection - action scores:  [8.4135914e-01 6.5026797e-02 2.7077823e-04 7.2033748e-05 4.1953168e-05
 4.1870033e-05 4.0960695e-05 2.9036399e-05 2.7279668e-05 1.5999129e-05]  taking action:  0
Leaf selection - depth:  15
Leaf selection - action scores:  [8.5786390e-01 8.2777888e-03 8.6690555e-04 7.1762706e-04 6.6583679e-04
 1.3165030e-04 5.4543161e-05 4.0602052e-05 3.3395536e-05 2.8467248e-05]  taking action:  0
Leaf selection - depth:  16
Leaf selection - action scores:  [8.7259519e-01 3.1302006e-03 4.1855380e-04 2.5745464e-04 1.6282988e-04
 1.5993897e-04 9.0841000e-05 6.7380206e-05 5.8654492e-05 3.7092403e-05]  taking action:  0
Leaf selection - depth:  17
Leaf selection - action scores:  [8.8848156e-01 6.6204621e-03 1.6174387e-04 1.2364677e-04 9.3056879e-05
 2.8294695e-05 2.3176415e-05 1.8000030e-05 1.1640326e-05 9.8414030e-06]  taking action:  0
Leaf selection - depth:  18
Leaf selection - action scores:  [9.0695739e-01 6.0178903e-03 4.1256446e-04 3.0158082e-04 2.3827901e-04
 7.0186245e-05 2.4006804e-05 1.9986484e-05 1.8004563e-05 1.7675326e-05]  taking action:  0
Leaf selection - depth:  19
Leaf selection - action scores:  [9.29042399e-01 2.20953743e-03 1.00734425e-04 4.05884493e-05
 3.26355112e-05 2.86558588e-05 2.61836849e-05 2.36315391e-05
 2.04141361e-05 1.98145353e-05]  taking action:  0
Leaf selection - depth:  20
Leaf selection - action scores:  [9.5089591e-01 3.2620478e-02 8.0438454e-05 5.2318748e-05 1.1993110e-05
 9.2203763e-06 6.3620132e-06 4.8026291e-06 3.2898590e-06 2.6037442e-06]  taking action:  0
Leaf selection - depth:  21
Leaf selection - action scores:  [9.85517383e-01 3.68282269e-03 2.65736569e-04 2.54063372e-04
 1.54216017e-04 5.42626840e-05 1.16125775e-05 1.07077249e-05
 1.05655508e-05 7.65445111e-06]  taking action:  0
Leaf selection - depth:  22
Leaf selection - action scores:  [1.02502406e+00 4.30688873e-04 1.64943063e-04 1.49972868e-04
 1.27259918e-04 1.67692015e-05 1.32837595e-05 1.19713404e-05
 9.23169773e-06 9.09710616e-06]  taking action:  0
Leaf selection - depth:  23
Leaf selection - action scores:  [9.73531365e-01 5.11837304e-01 2.69191631e-04 1.97384768e-04
 6.17366532e-05 3.86078755e-05 2.61051646e-05 2.51063411e-05
 1.33667745e-05 1.21612602e-05]  taking action:  0
Leaf selection - depth:  24
Leaf selection - action scores:  [1.1354063e+00 3.3601221e-02 6.6782436e-03 1.4427075e-03 1.1088323e-03
 3.0683057e-04 8.3823310e-05 7.2101058e-05 6.5939406e-05 4.6804078e-05]  taking action:  0
Leaf selection - depth:  25
Leaf selection - action scores:  [1.2514037e+00 3.4229225e-03 1.7699727e-03 2.3954522e-04 5.7257108e-05
 3.5623696e-05 2.7196464e-05 2.2038315e-05 1.9565801e-05 1.5649104e-05]  taking action:  0
Leaf selection - depth:  26
Leaf selection - action scores:  [9.5827407e-01 9.7077096e-01 2.0315249e-03 3.7089939e-04 1.7547001e-04
 6.9964153e-05 4.2766682e-05 2.7361593e-05 1.7716991e-05 1.2400887e-05]  taking action:  1
Adding child.
Leaf selection - depth:  27
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  66
Getting rollout return of leaf.
Token:  0
Token:  1
Token:  2
Token:  3
Token:  4
Token:  5
Token:  6
Token:  7
Token:  8
Token:  9
Token:  10
Token:  11
Token:  12
Token:  13
Token:  14
Token:  15
Token:  16
Token:  17
Token:  18
Token:  19
Token:  20
Token:  21
Token:  22
Token:  23
Token:  24
Token:  25
Token:  26
Token:  27
Token:  28
Token:  29
Token:  30
Token:  31
Token:  32
Token:  33
Token:  34
Token:  35
Token:  36
Token:  37
Token:  38
Token:  39
Token:  40
Token:  41
Token:  42
Token:  43
Token:  44
Token:  45
Token:  46
Token:  47
Token:  48
Token:  49
Token:  50
Token:  51
Token:  52
Token:  53
Token:  54
Token:  55
Token:  56
Token:  57
Token:  58
Token:  59
Token:  60
Token:  61
Token:  62
Token:  63
Token:  64
Token:  65
Token:  66
Token:  67
Token:  68
Token:  69
Token:  70
Token:  71
Token:  72
Token:  73
Token:  74
Token:  75
Token:  76
Token:  77
Token:  78
Token:  79
Token:  80
Token:  81
Token:  82
Token:  83
Token:  84
Token:  85
Token:  86
Token:  87
Token:  88
Token:  89
Token:  90
Token:  91
Token:  92
Token:  93
Token:  94
Token:  95
Token:  96
Token:  97
Token:  98
Token:  99
Token:  100
Token:  101
Token:  102
Token:  103
Token:  104
Token:  105
Token:  106
Token:  107
Token:  108
Token:  109
Token:  110
Token:  111
Token:  112
Token:  113
Token:  114
Token:  115
Token:  116
Token:  117
Token:  118
Token:  119
Token:  120
Token:  121
Token:  122
Token:  123
Token:  124
Token:  125
Token:  126
Token:  127
Token:  128
Token:  129
Token:  130
Token:  131
Token:  132
Token:  133
Token:  134
Token:  135
Token:  136
Token:  137
Token:  138
Token:  139
Token:  140
Token:  141
Token:  142
Token:  143
Token:  144
Token:  145
Token:  146
Token:  147
Token:  148
Token:  149
Token:  150
Token:  151
Token:  152
Token:  153
Token:  154
Token:  155
Token:  156
Token:  157
Token:  158
Token:  159
Token:  160
Token:  161
Token:  162
Token:  163
Token:  164
Token:  165
Token:  166
Token:  167
Token:  168
Token:  169
Token:  170
Token:  171
Token:  172
Token:  173
Token:  174
Token:  175
Token:  176
Token:  177
Token:  178
Token:  179
Token:  180
Token:  181
Token:  182
Token:  183
Token:  184
Token:  185
Token:  186
Token:  187
Token:  188
Token:  189
Token:  190
Token:  191
Token:  192
Token:  193
Token:  194
Token:  195
Token:  196
Token:  197
Token:  198
Token:  199
Token:  200
Token:  201
Token:  202
Token:  203
Token:  204
Token:  205
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31;
  adder_8 A1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
  adder_8 A2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
  adder_8 A3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
  adder_8 A4(sum[31:24], cout, in1[31:24], in2[31:24], c3);
endmodule
Path:  output_files/3084873_adder_32/3084873_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  206
LLM generates return in:  78.851306  seconds
Running getPromptScore: 
adder_32
output_files/3084873_adder_32/synth_script.sh
Running bash in x seconds:  0.88872

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.5
Backpropogation: incorporating estimates.
Current runs:  44.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [6.77665594e-01 2.59388969e-01 5.00075043e-03 2.88042268e-03
 1.38906789e-03 9.15685855e-04 6.74070485e-01 6.19806233e-04
 5.94490459e-04 4.95625566e-04]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [0.70494443 0.07278944 0.02807461 0.02313816 0.01405232 0.01242509
 0.01022676 0.00557966 0.00418066 0.00312809]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.70301473 0.25089517 0.02563633 0.02347967 0.01081839 0.00873048
 0.00684941 0.0039548  0.00257437 0.00254947]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.6879083  0.68869257 0.1659263  0.13141733 0.00799507 0.00633326
 0.00390058 0.00333146 0.00251287 0.00206393]  taking action:  1
Leaf selection - depth:  4
Leaf selection - action scores:  [0.80407536 0.76992613 0.14247775 0.06167008 0.02540259 0.02155627
 0.02152784 0.02021134 0.01226086 0.01202279]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [9.8186970e-01 2.9862275e-02 4.5229772e-05 3.3134391e-05 3.1194631e-05
 1.6513270e-05 1.4552578e-05 1.3122958e-05 1.2959883e-05 1.2768599e-05]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [1.0248728e+00 1.8452390e-03 2.8030556e-05 6.6497691e-06 3.4375851e-06
 2.4995920e-06 2.4875874e-06 1.9539009e-06 1.2012083e-06 1.1177929e-06]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [1.0759100e+00 3.8771791e-04 1.9017927e-04 5.6592133e-05 4.2373751e-05
 2.2991415e-05 1.4178653e-05 4.7816852e-06 2.6856815e-06 2.6211171e-06]  taking action:  0
Leaf selection - depth:  8
Leaf selection - action scores:  [0.5248548  0.4725534  0.43571204 0.2885412  0.15521781 0.1247667
 0.11332005 0.10130179 0.06878808 0.06462868]  taking action:  0
Leaf selection - depth:  9
Leaf selection - action scores:  [0.6804514  0.32546043 0.30511844 0.28356645 0.14454456 0.11576066
 0.05548709 0.03864848 0.03111944 0.03024576]  taking action:  0
Leaf selection - depth:  10
Leaf selection - action scores:  [1.4014513e+00 1.6763113e-02 1.6178345e-02 1.3295259e-02 3.0260072e-03
 1.2504467e-03 1.1189365e-03 9.8163646e-04 7.8183506e-04 3.5133760e-04]  taking action:  0
Leaf selection - depth:  11
Leaf selection - action scores:  [1.94324327e+00 2.65709776e-03 2.04747380e-03 9.94514907e-04
 3.77476710e-04 3.04591144e-04 2.47586460e-04 1.59143179e-04
 1.10096575e-04 6.69192304e-05]  taking action:  0
Adding child.
Leaf selection - depth:  12
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  26676
Getting rollout return of leaf.
Token:  0
Token:  1
Token:  2
Token:  3
Token:  4
Token:  5
Token:  6
Token:  7
Token:  8
Token:  9
Token:  10
Token:  11
Token:  12
Token:  13
Token:  14
Token:  15
Token:  16
Token:  17
Token:  18
Token:  19
Token:  20
Token:  21
Token:  22
Token:  23
Token:  24
Token:  25
Token:  26
Token:  27
Token:  28
Token:  29
Token:  30
Token:  31
Token:  32
Token:  33
Token:  34
Token:  35
Token:  36
Token:  37
Token:  38
Token:  39
Token:  40
Token:  41
Token:  42
Token:  43
Token:  44
Token:  45
Token:  46
Token:  47
Token:  48
Token:  49
Token:  50
Token:  51
Token:  52
Token:  53
Token:  54
Token:  55
Token:  56
Token:  57
Token:  58
Token:  59
Token:  60
Token:  61
Token:  62
Token:  63
Token:  64
Token:  65
Token:  66
Token:  67
Token:  68
Token:  69
Token:  70
Token:  71
Token:  72
Token:  73
Token:  74
Token:  75
Token:  76
Token:  77
Token:  78
Token:  79
Token:  80
Token:  81
Token:  82
Token:  83
Token:  84
Token:  85
Token:  86
Token:  87
Token:  88
Token:  89
Token:  90
Token:  91
Token:  92
Token:  93
Token:  94
Token:  95
Token:  96
Token:  97
Token:  98
Token:  99
Token:  100
Token:  101
Token:  102
Token:  103
Token:  104
Token:  105
Token:  106
Token:  107
Token:  108
Token:  109
Token:  110
Token:  111
Token:  112
Token:  113
Token:  114
Token:  115
Token:  116
Token:  117
Token:  118
Token:  119
Token:  120
Token:  121
Token:  122
Token:  123
Token:  124
Token:  125
Token:  126
Token:  127
Token:  128
Token:  129
Token:  130
Token:  131
Token:  132
Token:  133
Token:  134
Token:  135
Token:  136
Token:  137
Token:  138
Token:  139
Token:  140
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
  wire [7:0] c;
  adder_8 A1(sum[7:0], c[0], in1[7:0], in2[7:0], cin);
  adder_8 A2(sum[15:8], c[1], in1[15:8], in2[15:8], c[0]);
  adder_8 A3(sum[23:16], c[2], in1[23:16], in2[23:16], c[1]);
  adder_8 A4(sum[31:24], cout, in1[31:24], in2[31:24], c[2]);
endmodule
Path:  output_files/3084873_adder_32/3084873_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  141
LLM generates return in:  50.434112  seconds
Running getPromptScore: 
adder_32
output_files/3084873_adder_32/synth_script.sh
Running bash in x seconds:  0.895549

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.5
Backpropogation: incorporating estimates.
Current runs:  45.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [6.75382375e-01 2.62255232e-01 5.05600902e-03 2.91225152e-03
 1.40441717e-03 9.25804238e-04 6.77098980e-01 6.26655128e-04
 6.01059613e-04 5.01102257e-04]  taking action:  6
Leaf selection - depth:  1
Leaf selection - action scores:  [1.1126732e+00 6.0946960e-02 1.0522245e-03 9.8732789e-04 3.3935255e-04
 2.2703064e-04 1.7290303e-04 1.6895701e-04 1.5635628e-04 1.4546125e-04]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [1.2155739  0.01534904 0.01030682 0.00733315 0.00697027 0.00692575
 0.00558541 0.00430528 0.00282487 0.00217385]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [1.3177301e+00 1.8227059e-01 1.6390620e-02 8.7926667e-03 5.6679705e-03
 5.2592009e-03 1.9383496e-03 1.7492770e-03 1.0712018e-03 9.0476137e-04]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [1.2131385e+00 6.4831412e-01 3.5664927e-02 3.4788020e-02 2.1522634e-03
 2.1258097e-03 1.3912235e-03 1.1488112e-03 1.0857036e-03 6.7926827e-04]  taking action:  0
Adding child.
Leaf selection - depth:  5
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  16
Getting rollout return of leaf.
Token:  0
Token:  1
Token:  2
Token:  3
Token:  4
Token:  5
Token:  6
Token:  7
Token:  8
Token:  9
Token:  10
Token:  11
Token:  12
Token:  13
Token:  14
Token:  15
Token:  16
Token:  17
Token:  18
Token:  19
Token:  20
Token:  21
Token:  22
Token:  23
Token:  24
Token:  25
Token:  26
Token:  27
Token:  28
Token:  29
Token:  30
Token:  31
Token:  32
Token:  33
Token:  34
Token:  35
Token:  36
Token:  37
Token:  38
Token:  39
Token:  40
Token:  41
Token:  42
Token:  43
Token:  44
Token:  45
Token:  46
Token:  47
Token:  48
Token:  49
Token:  50
Token:  51
Token:  52
Token:  53
Token:  54
Token:  55
Token:  56
Token:  57
Token:  58
Token:  59
Token:  60
Token:  61
Token:  62
Token:  63
Token:  64
Token:  65
Token:  66
Token:  67
Token:  68
Token:  69
Token:  70
Token:  71
Token:  72
Token:  73
Token:  74
Token:  75
Token:  76
Token:  77
Token:  78
Token:  79
Token:  80
Token:  81
Token:  82
Token:  83
Token:  84
Token:  85
Token:  86
Token:  87
Token:  88
Token:  89
Token:  90
Token:  91
Token:  92
Token:  93
Token:  94
Token:  95
Token:  96
Token:  97
Token:  98
Token:  99
Token:  100
Token:  101
Token:  102
Token:  103
Token:  104
Token:  105
Token:  106
Token:  107
Token:  108
Token:  109
Token:  110
Token:  111
Token:  112
Token:  113
Token:  114
Token:  115
Token:  116
Token:  117
Token:  118
Token:  119
Token:  120
Token:  121
Token:  122
Token:  123
Token:  124
Token:  125
Token:  126
Token:  127
Token:  128
Token:  129
Token:  130
Token:  131
Token:  132
Token:  133
Token:  134
Token:  135
Token:  136
Token:  137
Token:  138
Token:  139
Token:  140
Token:  141
Token:  142
Token:  143
Token:  144
Token:  145
Token:  146
Token:  147
Token:  148
Token:  149
Token:  150
Token:  151
Token:  152
Token:  153
Token:  154
Token:  155
Token:  156
Token:  157
Token:  158
Token:  159
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);                      
  wire c1,c2,c3,c4,c5,c6,c7,c8;
  adder_8 A1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
  adder_8 A2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
  adder_8 A3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
  adder_8 A4(sum[31:24], cout, in1[31:24], in2[31:24], c3);
endmodule
Path:  output_files/3084873_adder_32/3084873_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  160
LLM generates return in:  57.443325  seconds
Running getPromptScore: 
adder_32
output_files/3084873_adder_32/synth_script.sh
Running bash in x seconds:  0.889019

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.5
Backpropogation: incorporating estimates.
Current runs:  46.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [6.77410299e-01 2.65090506e-01 5.11067017e-03 2.94373623e-03
 1.41960050e-03 9.35813224e-04 6.50078928e-01 6.33429975e-04
 6.07557744e-04 5.06519737e-04]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [0.70245844 0.07369369 0.02842337 0.0234256  0.01422689 0.01257945
 0.01035381 0.00564897 0.0042326  0.00316695]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.70049256 0.2540914  0.02596292 0.02377879 0.01095621 0.0088417
 0.00693667 0.00400518 0.00260717 0.00258195]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.6905982  0.67437536 0.16809538 0.13313529 0.00809959 0.00641606
 0.00395157 0.00337501 0.00254572 0.00209091]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.74255455 0.07286943 0.05785727 0.04131246 0.02047598 0.00701824
 0.00590639 0.00549412 0.00486492 0.00370598]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [7.5327146e-01 7.4765131e-02 4.1220742e-03 1.5618558e-03 1.4665115e-03
 9.5679227e-04 4.5467852e-04 3.1600567e-04 1.4861596e-04 1.4651855e-04]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [7.3159921e-01 7.0374316e-01 9.0048090e-02 3.8963759e-03 4.9940246e-04
 3.2412054e-04 1.9633574e-04 1.9314590e-04 1.5766273e-04 1.5689118e-04]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [7.7760947e-01 7.2643678e-03 2.4634250e-03 3.4680925e-04 2.0186344e-04
 1.6471717e-04 9.2467773e-05 4.9161747e-05 3.5294979e-05 2.0081650e-05]  taking action:  0
Leaf selection - depth:  8
Leaf selection - action scores:  [7.8059918e-01 7.6887712e-02 1.1764016e-03 7.5125450e-04 5.5109500e-04
 8.9861569e-05 8.6783737e-05 5.6308636e-05 5.5540215e-05 5.4430246e-05]  taking action:  0
Leaf selection - depth:  9
Leaf selection - action scores:  [7.8829384e-01 4.7753762e-02 4.1838349e-03 3.7133237e-03 3.4149922e-04
 2.6259871e-04 2.4999108e-04 8.3044317e-05 8.2273684e-05 7.2391653e-05]  taking action:  0
Leaf selection - depth:  10
Leaf selection - action scores:  [7.97553182e-01 7.96811376e-03 6.77169254e-03 8.87616014e-04
 5.77424129e-04 3.25036875e-04 2.16828732e-04 1.90654129e-04
 1.61670323e-04 1.11434325e-04]  taking action:  0
Leaf selection - depth:  11
Leaf selection - action scores:  [7.9044640e-01 2.8553042e-01 3.9024497e-04 3.9003955e-04 3.7947262e-04
 7.5074589e-05 4.1991752e-05 3.8228678e-05 3.7700942e-05 2.5069065e-05]  taking action:  0
Leaf selection - depth:  12
Leaf selection - action scores:  [8.12902808e-01 2.59183086e-02 3.38349212e-03 2.78775394e-03
 6.89341279e-04 4.59431583e-04 3.18238977e-04 1.42275341e-04
 1.34681992e-04 1.17230884e-04]  taking action:  0
Leaf selection - depth:  13
Leaf selection - action scores:  [8.2353008e-01 8.5240286e-03 2.1807665e-03 8.8611146e-04 3.4292950e-04
 2.6232004e-04 2.1400792e-04 1.6895743e-04 1.4010910e-04 9.5451382e-05]  taking action:  0
Leaf selection - depth:  14
Leaf selection - action scores:  [8.3014381e-01 6.7159392e-02 2.7965853e-04 7.4396135e-05 4.3329048e-05
 4.3243181e-05 4.2304026e-05 2.9988663e-05 2.8174320e-05 1.6523829e-05]  taking action:  0
Leaf selection - depth:  15
Leaf selection - action scores:  [8.4521890e-01 8.5683260e-03 8.9733256e-04 7.4281462e-04 6.8920659e-04
 1.3627102e-04 5.6457538e-05 4.2027121e-05 3.4567664e-05 2.9466402e-05]  taking action:  0
Leaf selection - depth:  16
Leaf selection - action scores:  [8.5836905e-01 3.2483623e-03 4.3435377e-04 2.6717331e-04 1.6897655e-04
 1.6597651e-04 9.4270159e-05 6.9923743e-05 6.0868639e-05 3.8492602e-05]  taking action:  0
Leaf selection - depth:  17
Leaf selection - action scores:  [8.7235045e-01 6.8907952e-03 1.6834836e-04 1.2869562e-04 9.6856667e-05
 2.9450053e-05 2.4122777e-05 1.8735025e-05 1.2115635e-05 1.0243257e-05]  taking action:  0
Leaf selection - depth:  18
Leaf selection - action scores:  [8.8843316e-01 6.2854812e-03 4.3090951e-04 3.1499087e-04 2.4887430e-04
 7.3307136e-05 2.5074289e-05 2.0875203e-05 1.8805151e-05 1.8461275e-05]  taking action:  0
Leaf selection - depth:  19
Leaf selection - action scores:  [9.0742558e-01 2.3173825e-03 1.0565117e-04 4.2569525e-05 3.4228415e-05
 3.0054522e-05 2.7461683e-05 2.4784969e-05 2.1410528e-05 2.0781661e-05]  taking action:  0
Leaf selection - depth:  20
Leaf selection - action scores:  [9.2548156e-01 3.4385003e-02 8.4789579e-05 5.5148801e-05 1.2641848e-05
 9.7191296e-06 6.7061505e-06 5.0624158e-06 3.4678160e-06 2.7445874e-06]  taking action:  0
Leaf selection - depth:  21
Leaf selection - action scores:  [9.5438904e-01 3.9062232e-03 2.8185619e-04 2.6947490e-04 1.6357077e-04
 5.7554265e-05 1.2316998e-05 1.1357257e-05 1.1206458e-05 8.1187709e-06]  taking action:  0
Leaf selection - depth:  22
Leaf selection - action scores:  [9.8602402e-01 4.6042577e-04 1.7633155e-04 1.6032773e-04 1.3604657e-04
 1.7927032e-05 1.4200937e-05 1.2797901e-05 9.8690998e-06 9.7252159e-06]  taking action:  0
Leaf selection - depth:  23
Leaf selection - action scores:  [9.3290389e-01 5.5284750e-01 2.9076019e-04 2.1319992e-04 6.6683206e-05
 4.1701274e-05 2.8196802e-05 2.7117949e-05 1.4437767e-05 1.3135663e-05]  taking action:  0
Leaf selection - depth:  24
Leaf selection - action scores:  [1.0663866e+00 3.6808293e-02 7.3156492e-03 1.5804069e-03 1.2146649e-03
 3.3611603e-04 9.1823837e-05 7.8982754e-05 7.2233001e-05 5.1271298e-05]  taking action:  0
Leaf selection - depth:  25
Leaf selection - action scores:  [1.1448253e+00 3.8269435e-03 1.9788896e-03 2.6781971e-04 6.4015388e-05
 3.9828505e-05 3.0406571e-05 2.4639585e-05 2.1875230e-05 1.7496230e-05]  taking action:  0
Leaf selection - depth:  26
Leaf selection - action scores:  [1.0678444e+00 8.1047481e-01 2.3458027e-03 4.2827771e-04 2.0261531e-04
 8.0787649e-05 4.9382706e-05 3.1594445e-05 2.0457819e-05 1.4319309e-05]  taking action:  0
Leaf selection - depth:  27
Leaf selection - action scores:  [1.9204714e+00 2.0009529e-02 4.4867201e-03 2.3699335e-03 2.7069918e-04
 2.1179931e-04 1.5648827e-04 8.8331508e-05 8.0873477e-05 7.7839381e-05]  taking action:  0
Adding child.
Leaf selection - depth:  28
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  50286
Getting rollout return of leaf.
Token:  0
Token:  1
Token:  2
Token:  3
Token:  4
Token:  5
Token:  6
Token:  7
Token:  8
Token:  9
Token:  10
Token:  11
Token:  12
Token:  13
Token:  14
Token:  15
Token:  16
Token:  17
Token:  18
Token:  19
Token:  20
Token:  21
Token:  22
Token:  23
Token:  24
Token:  25
Token:  26
Token:  27
Token:  28
Token:  29
Token:  30
Token:  31
Token:  32
Token:  33
Token:  34
Token:  35
Token:  36
Token:  37
Token:  38
Token:  39
Token:  40
Token:  41
Token:  42
Token:  43
Token:  44
Token:  45
Token:  46
Token:  47
Token:  48
Token:  49
Token:  50
Token:  51
Token:  52
Token:  53
Token:  54
Token:  55
Token:  56
Token:  57
Token:  58
Token:  59
Token:  60
Token:  61
Token:  62
Token:  63
Token:  64
Token:  65
Token:  66
Token:  67
Token:  68
Token:  69
Token:  70
Token:  71
Token:  72
Token:  73
Token:  74
Token:  75
Token:  76
Token:  77
Token:  78
Token:  79
Token:  80
Token:  81
Token:  82
Token:  83
Token:  84
Token:  85
Token:  86
Token:  87
Token:  88
Token:  89
Token:  90
Token:  91
Token:  92
Token:  93
Token:  94
Token:  95
Token:  96
Token:  97
Token:  98
Token:  99
Token:  100
Token:  101
Token:  102
Token:  103
Token:  104
Token:  105
Token:  106
Token:  107
Token:  108
Token:  109
Token:  110
Token:  111
Token:  112
Token:  113
Token:  114
Token:  115
Token:  116
Token:  117
Token:  118
Token:  119
Token:  120
Token:  121
Token:  122
Token:  123
Token:  124
Token:  125
Token:  126
Token:  127
Token:  128
Token:  129
Token:  130
Token:  131
Token:  132
Token:  133
Token:  134
Token:  135
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7,c8;
  adder_8 A1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
  adder_8 A2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
  adder_8 A3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
  adder_8 A4(sum[31:24], cout, in1[31:24], in2[31:24], c3);
endmodule
Path:  output_files/3084873_adder_32/3084873_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  136
LLM generates return in:  49.642497  seconds
Running getPromptScore: 
adder_32
output_files/3084873_adder_32/synth_script.sh
Running bash in x seconds:  0.88359

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.5
Backpropogation: incorporating estimates.
Current runs:  47.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [6.75144908e-01 2.67895775e-01 5.16475284e-03 2.97488775e-03
 1.43462315e-03 9.45716285e-04 6.52548968e-01 6.40133125e-04
 6.13987105e-04 5.11879883e-04]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [0.7000626  0.07458698 0.02876791 0.02370956 0.01439935 0.01273193
 0.01047932 0.00571745 0.0042839  0.00320534]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.69806397 0.25724795 0.02628545 0.02407419 0.01109232 0.00895154
 0.00702284 0.00405494 0.00263956 0.00261402]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.68658984 0.6771759  0.1702368  0.13483134 0.00820277 0.00649779
 0.00400191 0.003418   0.00257815 0.00211755]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.738348   0.07415925 0.05888138 0.04204371 0.02083841 0.00714247
 0.00601094 0.00559136 0.00495103 0.00377158]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [7.4870622e-01 7.6137081e-02 4.1977153e-03 1.5905161e-03 1.4934222e-03
 9.7434950e-04 4.6302192e-04 3.2180443e-04 1.5134309e-04 1.4920718e-04]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [7.2657406e-01 7.1079922e-01 9.1763444e-02 3.9705993e-03 5.0891575e-04
 3.3029483e-04 2.0007580e-04 1.9682520e-04 1.6066611e-04 1.5987986e-04]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [7.7171820e-01 7.4206083e-03 2.5164080e-03 3.5426836e-04 2.0620508e-04
 1.6825988e-04 9.4456555e-05 5.0219107e-05 3.6054094e-05 2.0513562e-05]  taking action:  0
Leaf selection - depth:  8
Leaf selection - action scores:  [7.7437520e-01 7.8615747e-02 1.2028409e-03 7.6813874e-04 5.6348072e-04
 9.1881186e-05 8.8734181e-05 5.7574161e-05 5.6788467e-05 5.5653552e-05]  taking action:  0
Leaf selection - depth:  9
Leaf selection - action scores:  [7.8158706e-01 4.8877530e-02 4.2822910e-03 3.8007079e-03 3.4953558e-04
 2.6877833e-04 2.5587401e-04 8.4998559e-05 8.4209802e-05 7.4095216e-05]  taking action:  0
Leaf selection - depth:  10
Leaf selection - action scores:  [7.9027361e-01 8.1648873e-03 6.9389204e-03 9.0953580e-04 5.9168373e-04
 3.3306371e-04 2.2218336e-04 1.9536236e-04 1.6566280e-04 1.1418621e-04]  taking action:  0
Leaf selection - depth:  11
Leaf selection - action scores:  [7.8299165e-01 2.9294801e-01 4.0038285e-04 4.0017214e-04 3.8933067e-04
 7.7024903e-05 4.3082626e-05 3.9221792e-05 3.8680351e-05 2.5720316e-05]  taking action:  0
Leaf selection - depth:  12
Leaf selection - action scores:  [8.0437839e-01 2.6628533e-02 3.4762078e-03 2.8641450e-03 7.0823089e-04
 4.7202111e-04 3.2695947e-04 1.4617402e-04 1.3837260e-04 1.2044329e-04]  taking action:  0
Leaf selection - depth:  13
Leaf selection - action scores:  [8.1417954e-01 8.7711532e-03 2.2439903e-03 9.1180118e-04 3.5287155e-04
 2.6992511e-04 2.2021233e-04 1.7385576e-04 1.4417108e-04 9.8218668e-05]  taking action:  0
Leaf selection - depth:  14
Leaf selection - action scores:  [8.1999719e-01 6.9226310e-02 2.8826544e-04 7.6685777e-05 4.4662556e-05
 4.4574052e-05 4.3605989e-05 3.0911604e-05 2.9041423e-05 1.7032373e-05]  taking action:  0
Leaf selection - depth:  15
Leaf selection - action scores:  [8.3386439e-01 8.8493293e-03 9.2676107e-04 7.6717563e-04 7.1180949e-04
 1.4074010e-04 5.8309095e-05 4.3405424e-05 3.5701330e-05 3.0432768e-05]  taking action:  0
Leaf selection - depth:  16
Leaf selection - action scores:  [8.4570450e-01 3.3623746e-03 4.4959888e-04 2.7655065e-04 1.7490736e-04
 1.7180202e-04 9.7578886e-05 7.2377952e-05 6.3005034e-05 3.9843631e-05]  taking action:  0
Leaf selection - depth:  17
Leaf selection - action scores:  [8.5813463e-01 7.1509159e-03 1.7470334e-04 1.3355375e-04 1.0051291e-04
 3.0561761e-05 2.5033389e-05 1.9442254e-05 1.2572988e-05 1.0629929e-05]  taking action:  0
Leaf selection - depth:  18
Leaf selection - action scores:  [8.7230426e-01 6.5421360e-03 4.4850481e-04 3.2785290e-04 2.5903658e-04
 7.6300486e-05 2.6098147e-05 2.1727599e-05 1.9573023e-05 1.9215104e-05]  taking action:  0
Leaf selection - depth:  19
Leaf selection - action scores:  [8.8887763e-01 2.4204270e-03 1.1034904e-04 4.4462420e-05 3.5750410e-05
 3.1390922e-05 2.8682791e-05 2.5887057e-05 2.2362567e-05 2.1705737e-05]  taking action:  0
Leaf selection - depth:  20
Leaf selection - action scores:  [9.0406442e-01 3.6063299e-02 8.8928064e-05 5.7840556e-05 1.3258883e-05
 1.0193510e-05 7.0334704e-06 5.3095068e-06 3.6370764e-06 2.8785475e-06]  taking action:  0
Leaf selection - depth:  21
Leaf selection - action scores:  [9.28754568e-01 4.11752099e-03 2.97102524e-04 2.84051494e-04
 1.72418746e-04 6.06675239e-05 1.29832561e-05 1.19716005e-05
 1.18126445e-05 8.55793587e-06]  taking action:  0
Leaf selection - depth:  22
Leaf selection - action scores:  [9.5485932e-01 4.8835523e-04 1.8702785e-04 1.7005323e-04 1.4429918e-04
 1.9014487e-05 1.5062367e-05 1.3574223e-05 1.0467760e-05 1.0315149e-05]  taking action:  0
Leaf selection - depth:  23
Leaf selection - action scores:  [9.0161216e-01 5.9101886e-01 3.1083572e-04 2.2792030e-04 7.1287344e-05
 4.4580538e-05 3.0143650e-05 2.8990307e-05 1.5434622e-05 1.4042615e-05]  taking action:  0
Leaf selection - depth:  24
Leaf selection - action scores:  [1.0164832e+00 3.9757501e-02 7.9018045e-03 1.7070347e-03 1.3119881e-03
 3.6304683e-04 9.9181081e-05 8.5311127e-05 7.8020559e-05 5.5379332e-05]  taking action:  0
Leaf selection - depth:  25
Leaf selection - action scores:  [1.0746411e+00 4.1922065e-03 2.1677651e-03 2.9338177e-04 7.0125345e-05
 4.3629942e-05 3.3308730e-05 2.6991313e-05 2.3963114e-05 1.9166158e-05]  taking action:  0
Leaf selection - depth:  26
Leaf selection - action scores:  [9.4291854e-01 8.7662989e-01 2.6226870e-03 4.7882902e-04 2.2653078e-04
 9.0323330e-05 5.5211545e-05 3.5323665e-05 2.2872537e-05 1.6009475e-05]  taking action:  0
Leaf selection - depth:  27
Leaf selection - action scores:  [1.42604375e+00 2.45065670e-02 5.49508771e-03 2.90256413e-03
 3.31537420e-04 2.59400113e-04 1.91658211e-04 1.08183565e-04
 9.90493791e-05 9.53333802e-05]  taking action:  0
Leaf selection - depth:  28
Leaf selection - action scores:  [1.9498051e+00 5.7373906e-04 2.5306238e-04 1.7908019e-04 1.2512165e-04
 6.3330976e-05 3.1443327e-05 2.5815882e-05 1.7985029e-05 1.3881116e-05]  taking action:  0
Adding child.
Leaf selection - depth:  29
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  26676
Getting rollout return of leaf.
Token:  0
Token:  1
Token:  2
Token:  3
Token:  4
Token:  5
Token:  6
Token:  7
Token:  8
Token:  9
Token:  10
Token:  11
Token:  12
Token:  13
Token:  14
Token:  15
Token:  16
Token:  17
Token:  18
Token:  19
Token:  20
Token:  21
Token:  22
Token:  23
Token:  24
Token:  25
Token:  26
Token:  27
Token:  28
Token:  29
Token:  30
Token:  31
Token:  32
Token:  33
Token:  34
Token:  35
Token:  36
Token:  37
Token:  38
Token:  39
Token:  40
Token:  41
Token:  42
Token:  43
Token:  44
Token:  45
Token:  46
Token:  47
Token:  48
Token:  49
Token:  50
Token:  51
Token:  52
Token:  53
Token:  54
Token:  55
Token:  56
Token:  57
Token:  58
Token:  59
Token:  60
Token:  61
Token:  62
Token:  63
Token:  64
Token:  65
Token:  66
Token:  67
Token:  68
Token:  69
Token:  70
Token:  71
Token:  72
Token:  73
Token:  74
Token:  75
Token:  76
Token:  77
Token:  78
Token:  79
Token:  80
Token:  81
Token:  82
Token:  83
Token:  84
Token:  85
Token:  86
Token:  87
Token:  88
Token:  89
Token:  90
Token:  91
Token:  92
Token:  93
Token:  94
Token:  95
Token:  96
Token:  97
Token:  98
Token:  99
Token:  100
Token:  101
Token:  102
Token:  103
Token:  104
Token:  105
Token:  106
Token:  107
Token:  108
Token:  109
Token:  110
Token:  111
Token:  112
Token:  113
Token:  114
Token:  115
Token:  116
Token:  117
Token:  118
Token:  119
Token:  120
Token:  121
Token:  122
Token:  123
Token:  124
Token:  125
Token:  126
Token:  127
Token:  128
Token:  129
Token:  130
Token:  131
Token:  132
Token:  133
Token:  134
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7,c8;
  adder_8 A1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
  adder_8 A2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
  adder_8 A3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
  adder_8 A4(sum[31:24], cout, in1[31:24], in2[31:24], c3);
endmodule
Path:  output_files/3084873_adder_32/3084873_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  135
LLM generates return in:  49.31601  seconds
Running getPromptScore: 
adder_32
output_files/3084873_adder_32/synth_script.sh
Running bash in x seconds:  0.888748

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.5
Backpropogation: incorporating estimates.
Current runs:  48.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [6.72965091e-01 2.70671971e-01 5.21827502e-03 3.00571642e-03
 1.44949010e-03 9.55516715e-04 6.54993410e-01 6.46766806e-04
 6.20349836e-04 5.17184479e-04]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [0.69775134 0.07546969 0.02910837 0.02399015 0.01456976 0.01288261
 0.01060333 0.00578511 0.0043346  0.00324327]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.6957233  0.26036623 0.02660407 0.02436601 0.01122678 0.00906004
 0.00710797 0.00410409 0.00267155 0.00264571]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.68281794 0.6799416  0.17235163 0.13650633 0.00830467 0.00657851
 0.00405162 0.00346046 0.00261018 0.00214385]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.73435795 0.07542702 0.05988796 0.04276246 0.02119465 0.00726457
 0.00611369 0.00568695 0.00503567 0.00383605]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [7.4438500e-01 7.7484749e-02 4.2720167e-03 1.6186690e-03 1.5198565e-03
 9.9159603e-04 4.7121765e-04 3.2750051e-04 1.5402194e-04 1.5184822e-04]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [7.2186947e-01 7.1772575e-01 9.3447320e-02 4.0434604e-03 5.1825447e-04
 3.3635579e-04 2.0374723e-04 2.0043697e-04 1.6361436e-04 1.6281368e-04]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [7.6619577e-01 7.5736269e-03 2.5682983e-03 3.6157362e-04 2.1045719e-04
 1.7172952e-04 9.6404321e-05 5.1254665e-05 3.6797559e-05 2.0936568e-05]  taking action:  0
Leaf selection - depth:  8
Leaf selection - action scores:  [7.6855803e-01 8.0306597e-02 1.2287115e-03 7.8465976e-04 5.7559996e-04
 9.3857350e-05 9.0642658e-05 5.8812453e-05 5.8009860e-05 5.6850538e-05]  taking action:  0
Leaf selection - depth:  9
Leaf selection - action scores:  [7.7533937e-01 4.9976043e-02 4.3785344e-03 3.8861278e-03 3.5739131e-04
 2.7481906e-04 2.6162469e-04 8.6908884e-05 8.6102395e-05 7.5760487e-05]  taking action:  0
Leaf selection - depth:  10
Leaf selection - action scores:  [7.8351700e-01 8.3570285e-03 7.1022110e-03 9.3093951e-04 6.0560758e-04
 3.4090155e-04 2.2741190e-04 1.9995974e-04 1.6956127e-04 1.1687331e-04]  taking action:  0
Leaf selection - depth:  11
Leaf selection - action scores:  [7.7609849e-01 3.0018240e-01 4.1027035e-04 4.1005443e-04 3.9894524e-04
 7.8927042e-05 4.4146556e-05 4.0190378e-05 3.9635564e-05 2.6355483e-05]  taking action:  0
Leaf selection - depth:  12
Leaf selection - action scores:  [7.9653323e-01 2.7320296e-02 3.5665138e-03 2.9385507e-03 7.2662951e-04
 4.8428340e-04 3.3545331e-04 1.4997137e-04 1.4196728e-04 1.2357220e-04]  taking action:  0
Leaf selection - depth:  13
Leaf selection - action scores:  [8.0561721e-01 9.0115042e-03 2.3054811e-03 9.3678670e-04 3.6254106e-04
 2.7732170e-04 2.2624667e-04 1.7861983e-04 1.4812170e-04 1.0091009e-04]  taking action:  0
Leaf selection - depth:  14
Leaf selection - action scores:  [8.1075799e-01 7.1233287e-02 2.9662269e-04 7.8909019e-05 4.5957393e-05
 4.5866320e-05 4.4870194e-05 3.1807780e-05 2.9883378e-05 1.7526167e-05]  taking action:  0
Leaf selection - depth:  15
Leaf selection - action scores:  [8.2359254e-01 9.1216797e-03 9.5528341e-04 7.9078652e-04 7.3371641e-04
 1.4507158e-04 6.0103637e-05 4.4741282e-05 3.6800087e-05 3.1369378e-05]  taking action:  0
Leaf selection - depth:  16
Leaf selection - action scores:  [8.3433247e-01 3.4726455e-03 4.6434373e-04 2.8562028e-04 1.8064353e-04
 1.7743636e-04 1.0077904e-04 7.4751624e-05 6.5071319e-05 4.1150328e-05]  taking action:  0
Leaf selection - depth:  17
Leaf selection - action scores:  [8.4547913e-01 7.4019013e-03 1.8083514e-04 1.3824127e-04 1.0404075e-04
 3.1634430e-05 2.5912021e-05 2.0124644e-05 1.3014280e-05 1.1003022e-05]  taking action:  0
Leaf selection - depth:  18
Leaf selection - action scores:  [8.5809040e-01 6.7890952e-03 4.6543541e-04 3.4022902e-04 2.6881494e-04
 7.9180754e-05 2.7083324e-05 2.2547792e-05 2.0311883e-05 1.9940455e-05]  taking action:  0
Leaf selection - depth:  19
Leaf selection - action scores:  [8.7272835e-01 2.5192602e-03 1.1485492e-04 4.6277954e-05 3.7210208e-05
 3.2672709e-05 2.9853994e-05 2.6944103e-05 2.3275696e-05 2.2592047e-05]  taking action:  0
Leaf selection - depth:  20
Leaf selection - action scores:  [8.8568628e-01 3.7666887e-02 9.2882336e-05 6.0412487e-05 1.3848452e-05
 1.0646773e-05 7.3462202e-06 5.5455989e-06 3.7988023e-06 3.0065448e-06]  taking action:  0
Leaf selection - depth:  21
Leaf selection - action scores:  [9.0715384e-01 4.3184925e-03 3.1160377e-04 2.9791574e-04 1.8083431e-04
 6.3628642e-05 1.3616955e-05 1.2555921e-05 1.2389207e-05 8.9756395e-06]  taking action:  0
Leaf selection - depth:  22
Leaf selection - action scores:  [9.2919517e-01 5.1477167e-04 1.9714466e-04 1.7925185e-04 1.5210469e-04
 2.0043030e-05 1.5877129e-05 1.4308488e-05 1.1033989e-05 1.0873122e-05]  taking action:  0
Leaf selection - depth:  23
Leaf selection - action scores:  [8.7651849e-01 6.2687016e-01 3.2969104e-04 2.4174598e-04 7.5611642e-05
 4.7284797e-05 3.1972166e-05 3.0748863e-05 1.6370888e-05 1.4894441e-05]  taking action:  0
Leaf selection - depth:  24
Leaf selection - action scores:  [9.7819781e-01 4.2502556e-02 8.4473845e-03 1.8248968e-03 1.4025742e-03
 3.8811337e-04 1.0602904e-04 9.1201429e-05 8.3407489e-05 5.9202997e-05]  taking action:  0
Leaf selection - depth:  25
Leaf selection - action scores:  [1.0239131e+00 4.5281011e-03 2.3414539e-03 3.1688856e-04 7.5744036e-05
 4.7125723e-05 3.5977540e-05 2.9153951e-05 2.5883122e-05 2.0701818e-05]  taking action:  0
Leaf selection - depth:  26
Leaf selection - action scores:  [8.7582535e-01 9.3643868e-01 2.8730098e-03 5.2453089e-04 2.4815204e-04
 9.8944256e-05 6.0481216e-05 3.8695136e-05 2.5055608e-05 1.7537501e-05]  taking action:  1
Leaf selection - depth:  27
Leaf selection - action scores:  [1.9342645e+00 9.7493380e-03 4.0747458e-03 1.1937250e-03 9.0828369e-04
 2.3982071e-04 8.9656860e-05 6.7819208e-05 6.2338004e-05 4.5495552e-05]  taking action:  0
Adding child.
Leaf selection - depth:  28
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  24
Getting rollout return of leaf.
Token:  0
Token:  1
Token:  2
Token:  3
Token:  4
Token:  5
Token:  6
Token:  7
Token:  8
Token:  9
Token:  10
Token:  11
Token:  12
Token:  13
Token:  14
Token:  15
Token:  16
Token:  17
Token:  18
Token:  19
Token:  20
Token:  21
Token:  22
Token:  23
Token:  24
Token:  25
Token:  26
Token:  27
Token:  28
Token:  29
Token:  30
Token:  31
Token:  32
Token:  33
Token:  34
Token:  35
Token:  36
Token:  37
Token:  38
Token:  39
Token:  40
Token:  41
Token:  42
Token:  43
Token:  44
Token:  45
Token:  46
Token:  47
Token:  48
Token:  49
Token:  50
Token:  51
Token:  52
Token:  53
Token:  54
Token:  55
Token:  56
Token:  57
Token:  58
Token:  59
Token:  60
Token:  61
Token:  62
Token:  63
Token:  64
Token:  65
Token:  66
Token:  67
Token:  68
Token:  69
Token:  70
Token:  71
Token:  72
Token:  73
Token:  74
Token:  75
Token:  76
Token:  77
Token:  78
Token:  79
Token:  80
Token:  81
Token:  82
Token:  83
Token:  84
Token:  85
Token:  86
Token:  87
Token:  88
Token:  89
Token:  90
Token:  91
Token:  92
Token:  93
Token:  94
Token:  95
Token:  96
Token:  97
Token:  98
Token:  99
Token:  100
Token:  101
Token:  102
Token:  103
Token:  104
Token:  105
Token:  106
Token:  107
Token:  108
Token:  109
Token:  110
Token:  111
Token:  112
Token:  113
Token:  114
Token:  115
Token:  116
Token:  117
Token:  118
Token:  119
Token:  120
Token:  121
Token:  122
Token:  123
Token:  124
Token:  125
Token:  126
Token:  127
Token:  128
Token:  129
Token:  130
Token:  131
Token:  132
Token:  133
Token:  134
Token:  135
Token:  136
Token:  137
Token:  138
Token:  139
Token:  140
Token:  141
Token:  142
Token:  143
Token:  144
Token:  145
Token:  146
Token:  147
Token:  148
Token:  149
Token:  150
Token:  151
Token:  152
Token:  153
Token:  154
Token:  155
Token:  156
Token:  157
Token:  158
Token:  159
Token:  160
Token:  161
Token:  162
Token:  163
Token:  164
Token:  165
Token:  166
Token:  167
Token:  168
Token:  169
Token:  170
Token:  171
Token:  172
Token:  173
Token:  174
Token:  175
Token:  176
Token:  177
Token:  178
Token:  179
Token:  180
Token:  181
Token:  182
Token:  183
Token:  184
Token:  185
Token:  186
Token:  187
Token:  188
Token:  189
Token:  190
Token:  191
Token:  192
Token:  193
Token:  194
Token:  195
Token:  196
Token:  197
Token:  198
Token:  199
Token:  200
Token:  201
Token:  202
Token:  203
Token:  204
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31;
  adder_8 A1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
  adder_8 A2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
  adder_8 A3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
  adder_8 A4(sum[31:24], cout, in1[31:24], in2[31:24], c3);
endmodule
Path:  output_files/3084873_adder_32/3084873_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  205
LLM generates return in:  78.459083  seconds
Running getPromptScore: 
adder_32
output_files/3084873_adder_32/synth_script.sh
Running bash in x seconds:  0.898596

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.5
Backpropogation: incorporating estimates.
Current runs:  49.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [6.70865578e-01 2.73419980e-01 5.27125379e-03 3.03623209e-03
 1.46420612e-03 9.65217641e-04 6.57413033e-01 6.53333135e-04
 6.26647965e-04 5.22435218e-04]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [0.6955199  0.07634221 0.0294449  0.02426751 0.0147382  0.01303155
 0.01072592 0.005852   0.00438471 0.00328077]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.69346523 0.26344758 0.02691892 0.02465437 0.01135964 0.00916727
 0.00719209 0.00415266 0.00270317 0.00267702]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.6792606  0.68267375 0.17444082 0.13816102 0.00840534 0.00665826
 0.00410073 0.00350241 0.00264182 0.00216984]  taking action:  1
Leaf selection - depth:  4
Leaf selection - action scores:  [0.7861934  0.79530317 0.14943194 0.06468013 0.02664246 0.0226084
 0.02257859 0.02119784 0.0128593  0.01260961]  taking action:  1
Leaf selection - depth:  5
Leaf selection - action scores:  [1.9514703e+00 1.0965165e-04 1.0541914e-05 3.9555939e-06 3.5390819e-06
 3.2524547e-06 3.0751362e-06 1.6587785e-06 1.5818638e-06 1.4403199e-06]  taking action:  0
Adding child.
Leaf selection - depth:  6
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  15
Getting rollout return of leaf.
Token:  0
Token:  1
Token:  2
Token:  3
Token:  4
Token:  5
Token:  6
Token:  7
Token:  8
Token:  9
Token:  10
Token:  11
Token:  12
Token:  13
Token:  14
Token:  15
Token:  16
Token:  17
Token:  18
Token:  19
Token:  20
Token:  21
Token:  22
Token:  23
Token:  24
Token:  25
Token:  26
Token:  27
Token:  28
Token:  29
Token:  30
Token:  31
Token:  32
Token:  33
Token:  34
Token:  35
Token:  36
Token:  37
Token:  38
Token:  39
Token:  40
Token:  41
Token:  42
Token:  43
Token:  44
Token:  45
Token:  46
Token:  47
Token:  48
Token:  49
Token:  50
Token:  51
Token:  52
Token:  53
Token:  54
Token:  55
Token:  56
Token:  57
Token:  58
Token:  59
Token:  60
Token:  61
Token:  62
Token:  63
Token:  64
Token:  65
Token:  66
Token:  67
Token:  68
Token:  69
Token:  70
Token:  71
Token:  72
Token:  73
Token:  74
Token:  75
Token:  76
Token:  77
Token:  78
Token:  79
Token:  80
Token:  81
Token:  82
Token:  83
Token:  84
Token:  85
Token:  86
Token:  87
Token:  88
Token:  89
Token:  90
Token:  91
Token:  92
Token:  93
Token:  94
Token:  95
Token:  96
Token:  97
Token:  98
Token:  99
Token:  100
Token:  101
Token:  102
Token:  103
Token:  104
Token:  105
Token:  106
Token:  107
Token:  108
Token:  109
Token:  110
Token:  111
Token:  112
Token:  113
Token:  114
Token:  115
Token:  116
Token:  117
Token:  118
Token:  119
Token:  120
Token:  121
Token:  122
Token:  123
Token:  124
Token:  125
Token:  126
Token:  127
Token:  128
Token:  129
Token:  130
Token:  131
Token:  132
Token:  133
Token:  134
Token:  135
Token:  136
Token:  137
Token:  138
Token:  139
Token:  140
Token:  141
Token:  142
Token:  143
Token:  144
Token:  145
Token:  146
Token:  147
Token:  148
Token:  149
Token:  150
Token:  151
Token:  152
Token:  153
Token:  154
Token:  155
Token:  156
Token:  157
Token:  158
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
  wire [31:0] carry;
  adder_8 A1(sum[7:0], carry[7:0], in1[7:0], in2[7:0], cin);
  adder_8 A2(sum[15:8], carry[15:8], in1[15:8], in2[15:8], carry[7:0]);
  adder_8 A3(sum[23:16], carry[23:16], in1[23:16], in2[23:16], carry[15:8]);
  adder_8 A4(sum[31:24], cout, in1[31:24], in2[31:24], carry[23:16]);
endmodule
Path:  output_files/3084873_adder_32/3084873_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  159
LLM generates return in:  57.144986  seconds
Running getPromptScore: 
adder_32
output_files/3084873_adder_32/synth_script.sh
Running bash in x seconds:  0.893148

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.5
Backpropogation: incorporating estimates.
Current runs:  50.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [6.68841531e-01 2.76140644e-01 5.32370537e-03 3.06644410e-03
 1.47877569e-03 9.74822034e-04 6.59808578e-01 6.59834122e-04
 6.32883422e-04 5.27633706e-04]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [0.69336385 0.07720485 0.02977762 0.02454172 0.01490474 0.0131788
 0.01084712 0.00591812 0.00443426 0.00331784]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.69128513 0.26649335 0.02723014 0.0249394  0.01149098 0.00927325
 0.00727524 0.00420067 0.00273442 0.00270797]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.68157303 0.6699258  0.17650527 0.13979611 0.00850481 0.00673705
 0.00414926 0.00354386 0.00267309 0.00219552]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.73056626 0.07667383 0.06087792 0.04346932 0.021545   0.00738465
 0.00621475 0.00578096 0.00511891 0.00389946]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [7.4028635e-01 7.8809366e-02 4.3450478e-03 1.6463406e-03 1.5458388e-03
 1.0085476e-03 4.7927324e-04 3.3309922e-04 1.5665498e-04 1.5444410e-04]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [7.1745253e-01 7.2452974e-01 9.5101386e-02 4.1150316e-03 5.2742782e-04
 3.4230945e-04 2.0735365e-04 2.0398480e-04 1.6651041e-04 1.6569556e-04]  taking action:  1
Leaf selection - depth:  7
Leaf selection - action scores:  [1.4409598e+00 4.4728955e-03 1.2772211e-03 4.0805936e-04 3.1581978e-04
 2.8140214e-04 2.6390952e-04 1.4549248e-04 1.3902069e-04 7.8645557e-05]  taking action:  0
Leaf selection - depth:  8
Leaf selection - action scores:  [1.8528683e+00 9.6073806e-02 7.9674029e-04 6.1035098e-04 5.0889852e-04
 1.1460369e-04 1.1248828e-04 9.2743787e-05 3.9534123e-05 2.6734009e-05]  taking action:  0
Adding child.
Leaf selection - depth:  9
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  269
Getting rollout return of leaf.
Token:  0
Token:  1
Token:  2
Token:  3
Token:  4
Token:  5
Token:  6
Token:  7
Token:  8
Token:  9
Token:  10
Token:  11
Token:  12
Token:  13
Token:  14
Token:  15
Token:  16
Token:  17
Token:  18
Token:  19
Token:  20
Token:  21
Token:  22
Token:  23
Token:  24
Token:  25
Token:  26
Token:  27
Token:  28
Token:  29
Token:  30
Token:  31
Token:  32
Token:  33
Token:  34
Token:  35
Token:  36
Token:  37
Token:  38
Token:  39
Token:  40
Token:  41
Token:  42
Token:  43
Token:  44
Token:  45
Token:  46
Token:  47
Token:  48
Token:  49
Token:  50
Token:  51
Token:  52
Token:  53
Token:  54
Token:  55
Token:  56
Token:  57
Token:  58
Token:  59
Token:  60
Token:  61
Token:  62
Token:  63
Token:  64
Token:  65
Token:  66
Token:  67
Token:  68
Token:  69
Token:  70
Token:  71
Token:  72
Token:  73
Token:  74
Token:  75
Token:  76
Token:  77
Token:  78
Token:  79
Token:  80
Token:  81
Token:  82
Token:  83
Token:  84
Token:  85
Token:  86
Token:  87
Token:  88
Token:  89
Token:  90
Token:  91
Token:  92
Token:  93
Token:  94
Token:  95
Token:  96
Token:  97
Token:  98
Token:  99
Token:  100
Token:  101
Token:  102
Token:  103
Token:  104
Token:  105
Token:  106
Token:  107
Token:  108
Token:  109
Token:  110
Token:  111
Token:  112
Token:  113
Token:  114
Token:  115
Token:  116
Token:  117
Token:  118
Token:  119
Token:  120
Token:  121
Token:  122
Token:  123
Token:  124
Token:  125
Token:  126
Token:  127
Token:  128
Token:  129
Token:  130
Token:  131
Token:  132
Token:  133
Token:  134
Token:  135
Token:  136
Token:  137
Token:  138
Token:  139
Token:  140
Token:  141
Token:  142
Token:  143
Token:  144
Token:  145
Token:  146
Token:  147
Token:  148
Token:  149
Token:  150
Token:  151
Token:  152
Token:  153
Token:  154
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
  wire c1, c2, c3, c4, c5, c6, c7, c8;
  adder_8 A1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
  adder_8 A2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
  adder_8 A3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
  adder_8 A4(sum[31:24], cout, in1[31:24], in2[31:24], c3);
endmodule
Path:  output_files/3084873_adder_32/3084873_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  155
LLM generates return in:  55.807851  seconds
Running getPromptScore: 
adder_32
output_files/3084873_adder_32/synth_script.sh
Running bash in x seconds:  0.887487

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.5
Backpropogation: incorporating estimates.
Current runs:  51.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [6.66888575e-01 2.78834763e-01 5.37564519e-03 3.09636134e-03
 1.49320311e-03 9.84332718e-04 6.62180751e-01 6.66271680e-04
 6.39058041e-04 5.32781474e-04]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [0.6912789  0.07805797 0.03010666 0.02481291 0.01506944 0.01332443
 0.01096698 0.00598352 0.00448326 0.0033545 ]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.6891785  0.26950464 0.02753783 0.02522121 0.01162082 0.00937804
 0.00735745 0.00424814 0.00276532 0.00273857]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.6781131  0.67237204 0.17854588 0.14141232 0.00860314 0.00681494
 0.00419723 0.00358483 0.00270399 0.0022209 ]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.726957   0.07790069 0.06185203 0.04416488 0.02188974 0.00750281
 0.0063142  0.00587346 0.00520082 0.00396186]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [7.3639190e-01 8.0112085e-02 4.4168718e-03 1.6735545e-03 1.5713916e-03
 1.0252189e-03 4.8719562e-04 3.3860534e-04 1.5924449e-04 1.5699706e-04]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [7.2149873e-01 6.7341298e-01 9.6727163e-02 4.1853790e-03 5.3644431e-04
 3.4816132e-04 2.1089840e-04 2.0747198e-04 1.6935694e-04 1.6852816e-04]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [7.6100487e-01 7.7236141e-03 2.6191603e-03 3.6873418e-04 2.1462506e-04
 1.7513044e-04 9.8313496e-05 5.2269705e-05 3.7526293e-05 2.1351192e-05]  taking action:  0
Leaf selection - depth:  8
Leaf selection - action scores:  [7.6310480e-01 8.1962578e-02 1.2540484e-03 8.0084003e-04 5.8746926e-04
 9.5792755e-05 9.2511778e-05 6.0025213e-05 5.9206068e-05 5.8022841e-05]  taking action:  0
Leaf selection - depth:  9
Leaf selection - action scores:  [7.6950014e-01 5.1050916e-02 4.4727074e-03 3.9697099e-03 3.6507801e-04
 2.8072982e-04 2.6725169e-04 8.8778106e-05 8.7954264e-05 7.7389930e-05]  taking action:  0
Leaf selection - depth:  10
Leaf selection - action scores:  [7.7722299e-01 8.5448502e-03 7.2618313e-03 9.5186214e-04 6.1921845e-04
 3.4856322e-04 2.3252293e-04 2.0445378e-04 1.7337211e-04 1.1950001e-04]  taking action:  0
Leaf selection - depth:  11
Leaf selection - action scores:  [7.6969916e-01 3.0724648e-01 4.1992508e-04 4.1970407e-04 4.0833344e-04
 8.0784397e-05 4.5185439e-05 4.1136162e-05 4.0568291e-05 2.6975695e-05]  taking action:  0
Leaf selection - depth:  12
Leaf selection - action scores:  [7.8928065e-01 2.7994975e-02 3.6545892e-03 3.0111184e-03 7.4457371e-04
 4.9624284e-04 3.4373740e-04 1.5367493e-04 1.4547318e-04 1.2662384e-04]  taking action:  0
Leaf selection - depth:  13
Leaf selection - action scores:  [7.9773730e-01 9.2456071e-03 2.3653735e-03 9.6112280e-04 3.7195926e-04
 2.8452603e-04 2.3212418e-04 1.8326005e-04 1.5196965e-04 1.0353156e-04]  taking action:  0
Leaf selection - depth:  14
Leaf selection - action scores:  [8.0229723e-01 7.3185250e-02 3.0475084e-04 8.1071310e-05 4.7216734e-05
 4.7123169e-05 4.6099743e-05 3.2679389e-05 3.0702253e-05 1.8006425e-05]  taking action:  0
Leaf selection - depth:  15
Leaf selection - action scores:  [8.1423998e-01 9.3861306e-03 9.8297850e-04 8.1371266e-04 7.5498800e-04
 1.4927742e-04 6.1846134e-05 4.6038404e-05 3.7866979e-05 3.2278826e-05]  taking action:  0
Leaf selection - depth:  16
Leaf selection - action scores:  [8.2404494e-01 3.5795211e-03 4.7863455e-04 2.9441065e-04 1.8620309e-04
 1.8289720e-04 1.0388066e-04 7.7052209e-05 6.7073976e-05 4.2416785e-05]  taking action:  0
Leaf selection - depth:  17
Leaf selection - action scores:  [8.34115207e-01 7.64465099e-03 1.86765727e-04 1.42774981e-04
 1.07452826e-04 3.26718982e-05 2.67618198e-05 2.07846442e-05
 1.34410902e-05 1.13638725e-05]  taking action:  0
Leaf selection - depth:  18
Leaf selection - action scores:  [8.4543663e-01 7.0273816e-03 4.8177145e-04 3.5217049e-04 2.7824991e-04
 8.1959872e-05 2.8033906e-05 2.3339184e-05 2.1024798e-05 2.0640333e-05]  taking action:  0
Leaf selection - depth:  19
Leaf selection - action scores:  [8.58496666e-01 2.61435984e-03 1.19190576e-04 4.80249000e-05
 3.86148531e-05 3.39060680e-05 3.09809548e-05 2.79612141e-05
 2.41543294e-05 2.34448726e-05]  taking action:  0
Leaf selection - depth:  20
Leaf selection - action scores:  [8.6968338e-01 3.9204936e-02 9.6674994e-05 6.2879313e-05 1.4413925e-05
 1.1081514e-05 7.6461884e-06 5.7720422e-06 3.9539186e-06 3.1293112e-06]  taking action:  0
Leaf selection - depth:  21
Leaf selection - action scores:  [8.88619661e-01 4.51051816e-03 3.25459521e-04 3.11162818e-04
 1.88875274e-04 6.64579420e-05 1.42224453e-05 1.31142315e-05
 1.29401042e-05 9.37475033e-06]  taking action:  0
Leaf selection - depth:  22
Leaf selection - action scores:  [9.0756983e-01 5.3989713e-04 2.0676709e-04 1.8800094e-04 1.5952876e-04
 2.1021307e-05 1.6652075e-05 1.5006870e-05 1.1572545e-05 1.1403827e-05]  taking action:  0
Leaf selection - depth:  23
Leaf selection - action scores:  [8.5579216e-01 6.6077912e-01 3.4752488e-04 2.5482263e-04 7.9701676e-05
 4.9842554e-05 3.3701624e-05 3.2412147e-05 1.7256432e-05 1.5700120e-05]  taking action:  0
Leaf selection - depth:  24
Leaf selection - action scores:  [9.4759595e-01 4.5080770e-02 8.9598037e-03 1.9355953e-03 1.4876546e-03
 4.1165639e-04 1.1246077e-04 9.6733718e-05 8.8466993e-05 6.2794257e-05]  taking action:  0
Leaf selection - depth:  25
Leaf selection - action scores:  [9.8500609e-01 4.8407433e-03 2.5031194e-03 3.3876812e-04 8.0973776e-05
 5.0379516e-05 3.8461607e-05 3.1166885e-05 2.7670221e-05 2.2131175e-05]  taking action:  0
Leaf selection - depth:  26
Leaf selection - action scores:  [9.15953219e-01 8.27625751e-01 3.10320547e-03 5.66558156e-04
 2.68034870e-04 1.06872016e-04 6.53271854e-05 4.17955234e-05
 2.70631499e-05 1.89426664e-05]  taking action:  0
Leaf selection - depth:  27
Leaf selection - action scores:  [1.23865223e+00 2.82977447e-02 6.34518033e-03 3.35159223e-03
 3.82826431e-04 2.99529464e-04 2.21307841e-04 1.24919621e-04
 1.14372364e-04 1.10081499e-04]  taking action:  0
Leaf selection - depth:  28
Leaf selection - action scores:  [1.4440069e+00 7.0268399e-04 3.0993685e-04 2.1932754e-04 1.5324210e-04
 7.7564291e-05 3.8510054e-05 3.1617870e-05 2.2027072e-05 1.7000826e-05]  taking action:  0
Leaf selection - depth:  29
Leaf selection - action scores:  [1.4951298e+00 3.6544117e-01 2.7427122e-02 1.2621500e-02 8.0339219e-03
 7.8462902e-03 2.8234767e-03 2.7199448e-03 1.1194444e-03 9.2536531e-04]  taking action:  0
Adding child.
Leaf selection - depth:  30
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  62
Getting rollout return of leaf.
Token:  0
Token:  1
Token:  2
Token:  3
Token:  4
Token:  5
Token:  6
Token:  7
Token:  8
Token:  9
Token:  10
Token:  11
Token:  12
Token:  13
Token:  14
Token:  15
Token:  16
Token:  17
Token:  18
Token:  19
Token:  20
Token:  21
Token:  22
Token:  23
Token:  24
Token:  25
Token:  26
Token:  27
Token:  28
Token:  29
Token:  30
Token:  31
Token:  32
Token:  33
Token:  34
Token:  35
Token:  36
Token:  37
Token:  38
Token:  39
Token:  40
Token:  41
Token:  42
Token:  43
Token:  44
Token:  45
Token:  46
Token:  47
Token:  48
Token:  49
Token:  50
Token:  51
Token:  52
Token:  53
Token:  54
Token:  55
Token:  56
Token:  57
Token:  58
Token:  59
Token:  60
Token:  61
Token:  62
Token:  63
Token:  64
Token:  65
Token:  66
Token:  67
Token:  68
Token:  69
Token:  70
Token:  71
Token:  72
Token:  73
Token:  74
Token:  75
Token:  76
Token:  77
Token:  78
Token:  79
Token:  80
Token:  81
Token:  82
Token:  83
Token:  84
Token:  85
Token:  86
Token:  87
Token:  88
Token:  89
Token:  90
Token:  91
Token:  92
Token:  93
Token:  94
Token:  95
Token:  96
Token:  97
Token:  98
Token:  99
Token:  100
Token:  101
Token:  102
Token:  103
Token:  104
Token:  105
Token:  106
Token:  107
Token:  108
Token:  109
Token:  110
Token:  111
Token:  112
Token:  113
Token:  114
Token:  115
Token:  116
Token:  117
Token:  118
Token:  119
Token:  120
Token:  121
Token:  122
Token:  123
Token:  124
Token:  125
Token:  126
Token:  127
Token:  128
Token:  129
Token:  130
Token:  131
Token:  132
Token:  133
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7,c8;
  adder_8 A1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
  adder_8 A2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
  adder_8 A3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
  adder_8 A4(sum[31:24], cout, in1[31:24], in2[31:24], c3);
endmodule
Path:  output_files/3084873_adder_32/3084873_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  134
LLM generates return in:  48.967621  seconds
Running getPromptScore: 
adder_32
output_files/3084873_adder_32/synth_script.sh
Running bash in x seconds:  0.898826

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.5
Backpropogation: incorporating estimates.
Current runs:  52.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [6.65002633e-01 2.81503099e-01 5.42708794e-03 3.12599227e-03
 1.50749246e-03 9.93752384e-04 6.64530221e-01 6.72647631e-04
 6.45173568e-04 5.37879978e-04]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [0.6892611  0.07890186 0.03043215 0.02508117 0.01523236 0.01346848
 0.01108555 0.00604821 0.00453173 0.00339077]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.6871413  0.2724827  0.02784212 0.02549991 0.01174923 0.00948166
 0.00743875 0.00429508 0.00279588 0.00276883]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.6748386  0.6747906  0.18056339 0.14301023 0.00870035 0.00689195
 0.00424466 0.00362534 0.00273454 0.002246  ]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.72351587 0.07910853 0.06281102 0.04484965 0.02222914 0.00761914
 0.0064121  0.00596452 0.00528145 0.00402329]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [7.3268491e-01 8.1393965e-02 4.4875462e-03 1.7003332e-03 1.5965354e-03
 1.0416234e-03 4.9499125e-04 3.4402340e-04 1.6179256e-04 1.5950919e-04]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [7.1712697e-01 6.7834574e-01 9.8326065e-02 4.2545637e-03 5.4531172e-04
 3.5391643e-04 2.1438456e-04 2.1090149e-04 1.7215642e-04 1.7131394e-04]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [7.56113291e-01 7.87074398e-03 2.66905385e-03 3.75758333e-04
 2.18713525e-04 1.78466566e-04 1.00186306e-04 5.32654085e-05
 3.82411454e-05 2.17579200e-05]  taking action:  0
Leaf selection - depth:  8
Leaf selection - action scores:  [7.5797880e-01 8.3585761e-02 1.2788834e-03 8.1669976e-04 5.9910340e-04
 9.7689823e-05 9.4343872e-05 6.1213941e-05 6.0378577e-05 5.9171918e-05]  taking action:  0
Leaf selection - depth:  9
Leaf selection - action scores:  [7.6402628e-01 5.2103627e-02 4.5649377e-03 4.0515685e-03 3.7260621e-04
 2.8651868e-04 2.7276261e-04 9.0608773e-05 8.9767949e-05 7.8985773e-05]  taking action:  0
Leaf selection - depth:  10
Leaf selection - action scores:  [7.7134061e-01 8.7286318e-03 7.4180174e-03 9.7233464e-04 6.3253648e-04
 3.5606005e-04 2.3752399e-04 2.0885114e-04 1.7710097e-04 1.2207019e-04]  taking action:  0
Leaf selection - depth:  11
Leaf selection - action scores:  [7.6373684e-01 3.1415176e-01 4.2936279e-04 4.2913682e-04 4.1751063e-04
 8.2600011e-05 4.6200970e-05 4.2060688e-05 4.1480056e-05 2.7581966e-05]  taking action:  0
Leaf selection - depth:  12
Leaf selection - action scores:  [7.8254908e-01 2.8653769e-02 3.7405912e-03 3.0819778e-03 7.6209544e-04
 5.0792075e-04 3.5182643e-04 1.5729130e-04 1.4889654e-04 1.2960362e-04]  taking action:  0
Leaf selection - depth:  13
Leaf selection - action scores:  [7.90452838e-01 9.47392918e-03 2.42378679e-03 9.84857907e-04
 3.81144841e-04 2.91552453e-04 2.37856511e-04 1.87785685e-04
 1.55722562e-04 1.06088286e-04]  taking action:  0
Leaf selection - depth:  14
Leaf selection - action scores:  [7.9451036e-01 7.5086474e-02 3.1266775e-04 8.3177409e-05 4.8443344e-05
 4.8347345e-05 4.7297337e-05 3.3528344e-05 3.1499847e-05 1.8474202e-05]  taking action:  0
Leaf selection - depth:  15
Leaf selection - action scores:  [8.0567592e-01 9.6433330e-03 1.0099146e-03 8.3601027e-04 7.7567645e-04
 1.5336798e-04 6.3540865e-05 4.7299964e-05 3.8904625e-05 3.3163342e-05]  taking action:  0
Leaf selection - depth:  16
Leaf selection - action scores:  [8.14678073e-01 3.68329673e-03 4.92510910e-04 3.02946049e-04
 1.91601401e-04 1.88199672e-04 1.06892316e-04 7.92860737e-05
 6.90185552e-05 4.36465125e-05]  taking action:  0
Leaf selection - depth:  17
Leaf selection - action scores:  [8.23835015e-01 7.87992589e-03 1.92513704e-04 1.47169078e-04
 1.10759836e-04 3.36774210e-05 2.75854509e-05 2.14243191e-05
 1.38547584e-05 1.17136115e-05]  taking action:  0
Leaf selection - depth:  18
Leaf selection - action scores:  [8.3407426e-01 7.2578480e-03 4.9757143e-04 3.6372012e-04 2.8737527e-04
 8.4647792e-05 2.8953293e-05 2.4104605e-05 2.1714319e-05 2.1317244e-05]  taking action:  0
Leaf selection - depth:  19
Leaf selection - action scores:  [8.4582710e-01 2.7061196e-03 1.2337397e-04 4.9710496e-05 3.9970175e-05
 3.5096116e-05 3.2068336e-05 2.8942608e-05 2.5002108e-05 2.4267751e-05]  taking action:  0
Leaf selection - depth:  20
Leaf selection - action scores:  [8.55579793e-01 4.06848826e-02 1.00324374e-04 6.52529416e-05
 1.49580364e-05 1.14998293e-05 7.93482468e-06 5.98993074e-06
 4.10317489e-06 3.24743951e-06]  taking action:  0
Leaf selection - depth:  21
Leaf selection - action scores:  [8.7248224e-01 4.6946961e-03 3.3874900e-04 3.2386853e-04 1.9658761e-04
 6.9171620e-05 1.4803190e-05 1.3649725e-05 1.3468487e-05 9.7575485e-06]  taking action:  0
Leaf selection - depth:  22
Leaf selection - action scores:  [8.8901466e-01 5.6390412e-04 2.1596116e-04 1.9636058e-04 1.6662234e-04
 2.1956039e-05 1.7392524e-05 1.5674164e-05 1.2087129e-05 1.1910908e-05]  taking action:  0
Leaf selection - depth:  23
Leaf selection - action scores:  [8.3828259e-01 6.9303107e-01 3.6448720e-04 2.6726027e-04 8.3591825e-05
 5.2275314e-05 3.5346562e-05 3.3994147e-05 1.8098701e-05 1.6466425e-05]  taking action:  0
Leaf selection - depth:  24
Leaf selection - action scores:  [9.22389627e-01 4.75193039e-02 9.44446307e-03 2.04029656e-03
 1.56812568e-03 4.33923939e-04 1.18544063e-04 1.01966296e-04
 9.32523981e-05 6.61909653e-05]  taking action:  0
Leaf selection - depth:  25
Leaf selection - action scores:  [9.5391452e-01 5.1343837e-03 2.6549590e-03 3.5931781e-04 8.5885658e-05
 5.3435546e-05 4.0794694e-05 3.3057473e-05 2.9348701e-05 2.3473654e-05]  taking action:  0
Leaf selection - depth:  26
Leaf selection - action scores:  [8.6264265e-01 8.6175406e-01 3.3174660e-03 6.0567615e-04 2.8654133e-04
 1.1425099e-04 6.9837697e-05 4.4681296e-05 2.8931725e-05 2.0250562e-05]  taking action:  0
Leaf selection - depth:  27
Leaf selection - action scores:  [1.1341330e+00 3.1637840e-02 7.0941271e-03 3.7471938e-03 4.2801295e-04
 3.3488410e-04 2.4742968e-04 1.3966438e-04 1.2787219e-04 1.2307486e-04]  taking action:  0
Leaf selection - depth:  28
Leaf selection - action scores:  [1.2524803e+00 8.1138953e-04 3.5788424e-04 2.5325763e-04 1.7694873e-04
 8.9563524e-05 4.4467579e-05 3.6509169e-05 2.5434671e-05 1.9630861e-05]  taking action:  0
Leaf selection - depth:  29
Leaf selection - action scores:  [1.1655762e+00 4.4757220e-01 3.3591226e-02 1.5458117e-02 9.8395040e-03
 9.6097030e-03 3.4580387e-03 3.3312386e-03 1.3710338e-03 1.1333365e-03]  taking action:  0
Leaf selection - depth:  30
Leaf selection - action scores:  [1.9510187e+00 2.3174351e-04 7.7971585e-05 3.1684875e-05 2.6585227e-05
 1.8484867e-05 1.7129652e-05 1.6344356e-05 1.4254604e-05 7.5050607e-06]  taking action:  0
Adding child.
Leaf selection - depth:  31
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  23
Getting rollout return of leaf.
Token:  0
Token:  1
Token:  2
Token:  3
Token:  4
Token:  5
Token:  6
Token:  7
Token:  8
Token:  9
Token:  10
Token:  11
Token:  12
Token:  13
Token:  14
Token:  15
Token:  16
Token:  17
Token:  18
Token:  19
Token:  20
Token:  21
Token:  22
Token:  23
Token:  24
Token:  25
Token:  26
Token:  27
Token:  28
Token:  29
Token:  30
Token:  31
Token:  32
Token:  33
Token:  34
Token:  35
Token:  36
Token:  37
Token:  38
Token:  39
Token:  40
Token:  41
Token:  42
Token:  43
Token:  44
Token:  45
Token:  46
Token:  47
Token:  48
Token:  49
Token:  50
Token:  51
Token:  52
Token:  53
Token:  54
Token:  55
Token:  56
Token:  57
Token:  58
Token:  59
Token:  60
Token:  61
Token:  62
Token:  63
Token:  64
Token:  65
Token:  66
Token:  67
Token:  68
Token:  69
Token:  70
Token:  71
Token:  72
Token:  73
Token:  74
Token:  75
Token:  76
Token:  77
Token:  78
Token:  79
Token:  80
Token:  81
Token:  82
Token:  83
Token:  84
Token:  85
Token:  86
Token:  87
Token:  88
Token:  89
Token:  90
Token:  91
Token:  92
Token:  93
Token:  94
Token:  95
Token:  96
Token:  97
Token:  98
Token:  99
Token:  100
Token:  101
Token:  102
Token:  103
Token:  104
Token:  105
Token:  106
Token:  107
Token:  108
Token:  109
Token:  110
Token:  111
Token:  112
Token:  113
Token:  114
Token:  115
Token:  116
Token:  117
Token:  118
Token:  119
Token:  120
Token:  121
Token:  122
Token:  123
Token:  124
Token:  125
Token:  126
Token:  127
Token:  128
Token:  129
Token:  130
Token:  131
Token:  132
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7,c8;
  adder_8 A1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
  adder_8 A2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
  adder_8 A3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
  adder_8 A4(sum[31:24], cout, in1[31:24], in2[31:24], c3);
endmodule
Path:  output_files/3084873_adder_32/3084873_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  133
LLM generates return in:  48.632475  seconds
Running getPromptScore: 
adder_32
output_files/3084873_adder_32/synth_script.sh
Running bash in x seconds:  0.890368

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.5
Backpropogation: incorporating estimates.
Current runs:  53.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [6.63179975e-01 2.84146379e-01 5.47804763e-03 3.15534495e-03
 1.52164763e-03 1.00308360e-03 6.66857630e-01 6.78963710e-04
 6.51231669e-04 5.42930605e-04]  taking action:  6
Leaf selection - depth:  1
Leaf selection - action scores:  [1.0464643e+00 6.6764049e-02 1.1526542e-03 1.0815634e-03 3.7174209e-04
 2.4869959e-04 1.8940578e-04 1.8508313e-04 1.7127972e-04 1.5934483e-04]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [1.1147811  0.01716074 0.01152338 0.00819871 0.007793   0.00774322
 0.00624468 0.00481345 0.00315831 0.00243044]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [1.1552724e+00 2.1046793e-01 1.8926257e-02 1.0152896e-02 6.5448084e-03
 6.0728020e-03 2.2382131e-03 2.0198910e-03 1.2369172e-03 1.0447284e-03]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [9.9289256e-01 7.9401940e-01 4.3680437e-02 4.2606451e-02 2.6359737e-03
 2.6035747e-03 1.7038939e-03 1.4070007e-03 1.3297099e-03 8.3193032e-04]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [1.8645282e+00 2.5379112e-02 1.7890390e-02 1.3847317e-02 9.1759395e-03
 2.8584495e-03 1.9591332e-03 1.9504682e-03 1.8328968e-03 1.4133734e-03]  taking action:  0
Adding child.
Leaf selection - depth:  6
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  11
Getting rollout return of leaf.
Token:  0
Token:  1
Token:  2
Token:  3
Token:  4
Token:  5
Token:  6
Token:  7
Token:  8
Token:  9
Token:  10
Token:  11
Token:  12
Token:  13
Token:  14
Token:  15
Token:  16
Token:  17
Token:  18
Token:  19
Token:  20
Token:  21
Token:  22
Token:  23
Token:  24
Token:  25
Token:  26
Token:  27
Token:  28
Token:  29
Token:  30
Token:  31
Token:  32
Token:  33
Token:  34
Token:  35
Token:  36
Token:  37
Token:  38
Token:  39
Token:  40
Token:  41
Token:  42
Token:  43
Token:  44
Token:  45
Token:  46
Token:  47
Token:  48
Token:  49
Token:  50
Token:  51
Token:  52
Token:  53
Token:  54
Token:  55
Token:  56
Token:  57
Token:  58
Token:  59
Token:  60
Token:  61
Token:  62
Token:  63
Token:  64
Token:  65
Token:  66
Token:  67
Token:  68
Token:  69
Token:  70
Token:  71
Token:  72
Token:  73
Token:  74
Token:  75
Token:  76
Token:  77
Token:  78
Token:  79
Token:  80
Token:  81
Token:  82
Token:  83
Token:  84
Token:  85
Token:  86
Token:  87
Token:  88
Token:  89
Token:  90
Token:  91
Token:  92
Token:  93
Token:  94
Token:  95
Token:  96
Token:  97
Token:  98
Token:  99
Token:  100
Token:  101
Token:  102
Token:  103
Token:  104
Token:  105
Token:  106
Token:  107
Token:  108
Token:  109
Token:  110
Token:  111
Token:  112
Token:  113
Token:  114
Token:  115
Token:  116
Token:  117
Token:  118
Token:  119
Token:  120
Token:  121
Token:  122
Token:  123
Token:  124
Token:  125
Token:  126
Token:  127
Token:  128
Token:  129
Token:  130
Token:  131
Token:  132
Token:  133
Token:  134
Token:  135
Token:  136
Token:  137
Token:  138
Token:  139
Token:  140
Token:  141
Token:  142
Token:  143
Token:  144
Token:  145
Token:  146
Token:  147
Token:  148
Token:  149
Token:  150
Token:  151
Token:  152
Token:  153
Token:  154
Token:  155
Token:  156
Token:  157
Token:  158
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);                      
  wire c1,c2,c3,c4,c5,c6,c7,c8;
  adder_8 A1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
  adder_8 A2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
  adder_8 A3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
  adder_8 A4(sum[31:24], cout, in1[31:24], in2[31:24], c3);
endmodule
Path:  output_files/3084873_adder_32/3084873_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  159
LLM generates return in:  57.14129  seconds
Running getPromptScore: 
adder_32
output_files/3084873_adder_32/synth_script.sh
Running bash in x seconds:  0.88394

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.5
Backpropogation: incorporating estimates.
Current runs:  54.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [6.64779977e-01 2.86765295e-01 5.52853762e-03 3.18442709e-03
 1.53567233e-03 1.01232880e-03 6.44997372e-01 6.85221572e-04
 6.57233931e-04 5.47934679e-04]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [0.68730706 0.07973684 0.03075419 0.02534658 0.01539355 0.01361101
 0.01120286 0.00611221 0.00457968 0.00342665]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.68516976 0.27542853 0.02814313 0.02577559 0.01187625 0.00958417
 0.00751917 0.00434152 0.0028261  0.00279877]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.6717339  0.6771825  0.18255863 0.1445905  0.00879649 0.00696811
 0.00429157 0.0036654  0.00276476 0.00227082]  taking action:  1
Leaf selection - depth:  4
Leaf selection - action scores:  [0.8013896  0.71303374 0.15607657 0.06755619 0.02782715 0.02361371
 0.02358256 0.02214042 0.0134311  0.01317031]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [9.5100379e-01 3.1673726e-02 4.7973415e-05 3.5144327e-05 3.3086901e-05
 1.7514967e-05 1.5435340e-05 1.3918998e-05 1.3746031e-05 1.3543144e-05]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [9.8588550e-01 1.9726434e-03 2.9965924e-05 7.1089021e-06 3.6749329e-06
 2.6721764e-06 2.6593427e-06 2.0888078e-06 1.2841457e-06 1.1949709e-06]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [1.0250553e+00 4.1878322e-04 2.0541711e-04 6.1126491e-05 4.5768888e-05
 2.4833567e-05 1.5314698e-05 5.1648108e-06 2.9008677e-06 2.8311301e-06]  taking action:  0
Leaf selection - depth:  8
Leaf selection - action scores:  [0.5313261  0.5176563  0.47729865 0.31608105 0.1700326  0.13667507
 0.1241359  0.11097055 0.07535357 0.07079718]  taking action:  0
Leaf selection - depth:  9
Leaf selection - action scores:  [0.66606736 0.36387584 0.3411328  0.3170369  0.16160572 0.12942435
 0.06203645 0.04321031 0.03479259 0.03381579]  taking action:  0
Leaf selection - depth:  10
Leaf selection - action scores:  [1.2197210e+00 1.9356376e-02 1.8681142e-02 1.5352042e-02 3.4941321e-03
 1.4438913e-03 1.2920365e-03 1.1334962e-03 9.0278534e-04 4.0568970e-04]  taking action:  0
Leaf selection - depth:  11
Leaf selection - action scores:  [1.4399886e+00 3.2542669e-03 2.5076331e-03 1.2180270e-03 4.6231269e-04
 3.7304644e-04 3.0323025e-04 1.9490979e-04 1.3484021e-04 8.1958991e-05]  taking action:  0
Leaf selection - depth:  12
Leaf selection - action scores:  [1.310054   0.45844638 0.04998741 0.0307724  0.02136475 0.00978666
 0.00465518 0.00421621 0.00383969 0.003477  ]  taking action:  0
Adding child.
Leaf selection - depth:  13
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  62
Getting rollout return of leaf.
Token:  0
Token:  1
Token:  2
Token:  3
Token:  4
Token:  5
Token:  6
Token:  7
Token:  8
Token:  9
Token:  10
Token:  11
Token:  12
Token:  13
Token:  14
Token:  15
Token:  16
Token:  17
Token:  18
Token:  19
Token:  20
Token:  21
Token:  22
Token:  23
Token:  24
Token:  25
Token:  26
Token:  27
Token:  28
Token:  29
Token:  30
Token:  31
Token:  32
Token:  33
Token:  34
Token:  35
Token:  36
Token:  37
Token:  38
Token:  39
Token:  40
Token:  41
Token:  42
Token:  43
Token:  44
Token:  45
Token:  46
Token:  47
Token:  48
Token:  49
Token:  50
Token:  51
Token:  52
Token:  53
Token:  54
Token:  55
Token:  56
Token:  57
Token:  58
Token:  59
Token:  60
Token:  61
Token:  62
Token:  63
Token:  64
Token:  65
Token:  66
Token:  67
Token:  68
Token:  69
Token:  70
Token:  71
Token:  72
Token:  73
Token:  74
Token:  75
Token:  76
Token:  77
Token:  78
Token:  79
Token:  80
Token:  81
Token:  82
Token:  83
Token:  84
Token:  85
Token:  86
Token:  87
Token:  88
Token:  89
Token:  90
Token:  91
Token:  92
Token:  93
Token:  94
Token:  95
Token:  96
Token:  97
Token:  98
Token:  99
Token:  100
Token:  101
Token:  102
Token:  103
Token:  104
Token:  105
Token:  106
Token:  107
Token:  108
Token:  109
Token:  110
Token:  111
Token:  112
Token:  113
Token:  114
Token:  115
Token:  116
Token:  117
Token:  118
Token:  119
Token:  120
Token:  121
Token:  122
Token:  123
Token:  124
Token:  125
Token:  126
Token:  127
Token:  128
Token:  129
Token:  130
Token:  131
Token:  132
Token:  133
Token:  134
Token:  135
Token:  136
Token:  137
Token:  138
Token:  139
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
  wire [7:0] c;
  adder_8 A1(sum[7:0], c[0], in1[7:0], in2[7:0], cin);
  adder_8 A2(sum[15:8], c[1], in1[15:8], in2[15:8], c[0]);
  adder_8 A3(sum[23:16], c[2], in1[23:16], in2[23:16], c[1]);
  adder_8 A4(sum[31:24], cout, in1[31:24], in2[31:24], c[2]);
endmodule
Path:  output_files/3084873_adder_32/3084873_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  140
LLM generates return in:  50.136311  seconds
Running getPromptScore: 
adder_32
output_files/3084873_adder_32/synth_script.sh
Running bash in x seconds:  0.886953

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.5
Backpropogation: incorporating estimates.
Current runs:  55.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [6.62970281e-01 2.89360509e-01 5.57857065e-03 3.21324602e-03
 1.54957010e-03 1.02149034e-03 6.46956018e-01 6.91422799e-04
 6.63181870e-04 5.52893465e-04]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [0.6854134  0.08056314 0.03107289 0.02560925 0.01555307 0.01375206
 0.01131895 0.00617555 0.00462714 0.00346216]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.6832604  0.2783432  0.02844095 0.02604836 0.01200193 0.00968559
 0.00759874 0.00438746 0.00285601 0.00282838]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.67374957 0.66573703 0.18453228 0.14615369 0.00889159 0.00704344
 0.00433796 0.00370503 0.00279465 0.00229537]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.72023    0.0802982  0.06375561 0.04552412 0.02256343 0.00773372
 0.00650853 0.00605422 0.00536088 0.00408379]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [7.2915077e-01 8.2655959e-02 4.5571248e-03 1.7266965e-03 1.6212894e-03
 1.0577736e-03 5.0266599e-04 3.4935740e-04 1.6430112e-04 1.6198235e-04]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [7.1300834e-01 6.8319958e-01 9.9899389e-02 4.3226411e-03 5.5403734e-04
 3.5957946e-04 2.1781494e-04 2.1427614e-04 1.7491110e-04 1.7405514e-04]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [7.51493096e-01 8.01517349e-03 2.71803141e-03 3.82653554e-04
 2.22726958e-04 1.81741445e-04 1.02024744e-04 5.42428388e-05
 3.89428751e-05 2.21571809e-05]  taking action:  0
Leaf selection - depth:  8
Leaf selection - action scores:  [7.5314820e-01 8.5178018e-02 1.3032453e-03 8.3225738e-04 6.1051594e-04
 9.9550758e-05 9.6141062e-05 6.2380030e-05 6.1528750e-05 6.0299106e-05]  taking action:  0
Leaf selection - depth:  9
Leaf selection - action scores:  [7.5888091e-01 5.3135481e-02 4.6553412e-03 4.1318052e-03 3.7998526e-04
 2.9219285e-04 2.7816437e-04 9.2403185e-05 9.1545706e-05 8.0549995e-05]  taking action:  0
Leaf selection - depth:  10
Leaf selection - action scores:  [7.6582646e-01 8.9086229e-03 7.5709829e-03 9.9238486e-04 6.4557983e-04
 3.6340227e-04 2.4242191e-04 2.1315781e-04 1.8075292e-04 1.2458737e-04]  taking action:  0
Leaf selection - depth:  11
Leaf selection - action scores:  [7.5816333e-01 3.2090849e-01 4.3859746e-04 4.3836661e-04 4.2649038e-04
 8.4376552e-05 4.7194651e-05 4.2965323e-05 4.2372201e-05 2.8175195e-05]  taking action:  0
Leaf selection - depth:  12
Leaf selection - action scores:  [7.7627826e-01 2.9297754e-02 3.8246601e-03 3.1512445e-03 7.7922334e-04
 5.1933608e-04 3.5973362e-04 1.6082638e-04 1.5224295e-04 1.3251643e-04]  taking action:  0
Leaf selection - depth:  13
Leaf selection - action scores:  [7.8369164e-01 9.6968748e-03 2.4808247e-03 1.0080341e-03 3.9011418e-04
 2.9841342e-04 2.4345389e-04 1.9220477e-04 1.5938711e-04 1.0858482e-04]  taking action:  0
Leaf selection - depth:  14
Leaf selection - action scores:  [7.8731155e-01 7.6940745e-02 3.2038911e-04 8.5231484e-05 4.9639661e-05
 4.9541290e-05 4.8465350e-05 3.4356330e-05 3.2277738e-05 1.8930425e-05]  taking action:  0
Leaf selection - depth:  15
Leaf selection - action scores:  [7.9779434e-01 9.8938504e-03 1.0361504e-03 8.5772842e-04 7.9582719e-04
 1.5735222e-04 6.5191547e-05 4.8528735e-05 3.9915300e-05 3.4024870e-05]  taking action:  0
Leaf selection - depth:  16
Leaf selection - action scores:  [8.0610096e-01 3.7842279e-03 5.0600688e-04 3.1124751e-04 1.9685173e-04
 1.9335680e-04 1.0982142e-04 8.1458697e-05 7.0909824e-05 4.4842531e-05]  taking action:  0
Leaf selection - depth:  17
Leaf selection - action scores:  [8.14474761e-01 8.10837653e-03 1.98094960e-04 1.51435728e-04
 1.13970927e-04 3.46537818e-05 2.83851950e-05 2.20454440e-05
 1.42564295e-05 1.20532077e-05]  taking action:  0
Leaf selection - depth:  18
Leaf selection - action scores:  [8.2379538e-01 7.4812188e-03 5.1288487e-04 3.7491412e-04 2.9621966e-04
 8.7252942e-05 2.9844372e-05 2.4846458e-05 2.2382606e-05 2.1973312e-05]  taking action:  0
Leaf selection - depth:  19
Leaf selection - action scores:  [8.3445066e-01 2.7948683e-03 1.2742009e-04 5.1340779e-05 4.1281019e-05
 3.6247115e-05 3.3120035e-05 2.9891797e-05 2.5822066e-05 2.5063626e-05]  taking action:  0
Leaf selection - depth:  20
Leaf selection - action scores:  [8.4302354e-01 4.2112857e-02 1.0384560e-04 6.7543217e-05 1.5483040e-05
 1.1903455e-05 8.2133238e-06 6.2001677e-06 4.2471897e-06 3.3614192e-06]  taking action:  0
Leaf selection - depth:  21
Leaf selection - action scores:  [8.5826087e-01 4.8719165e-03 3.5153644e-04 3.3609424e-04 2.0400860e-04
 7.1782779e-05 1.5361995e-05 1.4164988e-05 1.3976909e-05 1.0125887e-05]  taking action:  0
Leaf selection - depth:  22
Leaf selection - action scores:  [8.7285900e-01 5.8693002e-04 2.2477951e-04 2.0437856e-04 1.7342603e-04
 2.2852570e-05 1.8102714e-05 1.6314187e-05 1.2580683e-05 1.2397266e-05]  taking action:  0
Leaf selection - depth:  23
Leaf selection - action scores:  [8.2322544e-01 7.2384733e-01 3.8069446e-04 2.7914424e-04 8.7308814e-05
 5.4599783e-05 3.6918282e-05 3.5505731e-05 1.8903474e-05 1.7198619e-05]  taking action:  0
Leaf selection - depth:  24
Leaf selection - action scores:  [9.0114588e-01 4.9838670e-02 9.9054370e-03 2.1398813e-03 1.6446642e-03
 4.5510329e-04 1.2433006e-04 1.0694316e-04 9.7803953e-05 6.9421672e-05]  taking action:  0
Leaf selection - depth:  25
Leaf selection - action scores:  [9.2830998e-01 5.4121157e-03 2.7985726e-03 3.7875425e-04 9.0531430e-05
 5.6326011e-05 4.3001382e-05 3.4845634e-05 3.0936248e-05 2.4743405e-05]  taking action:  0
Leaf selection - depth:  26
Leaf selection - action scores:  [8.2558882e-01 8.9380813e-01 3.5187041e-03 6.4241653e-04 3.0392295e-04
 1.2118147e-04 7.4074058e-05 4.7391670e-05 3.0686726e-05 2.1478963e-05]  taking action:  1
Leaf selection - depth:  27
Leaf selection - action scores:  [1.4344903e+00 1.1940452e-02 4.9905241e-03 1.4620087e-03 1.1124158e-03
 2.9371920e-04 1.0980678e-04 8.3061226e-05 7.6348151e-05 5.5720444e-05]  taking action:  0
Leaf selection - depth:  28
Leaf selection - action scores:  [1.9458381e+00 4.6195099e-03 3.0882744e-04 1.5242762e-04 1.4933465e-04
 5.0195162e-05 4.5294648e-05 4.1943145e-05 3.2117001e-05 2.7000486e-05]  taking action:  0
Adding child.
Leaf selection - depth:  29
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  11
Getting rollout return of leaf.
Token:  0
Token:  1
Token:  2
Token:  3
Token:  4
Token:  5
Token:  6
Token:  7
Token:  8
Token:  9
Token:  10
Token:  11
Token:  12
Token:  13
Token:  14
Token:  15
Token:  16
Token:  17
Token:  18
Token:  19
Token:  20
Token:  21
Token:  22
Token:  23
Token:  24
Token:  25
Token:  26
Token:  27
Token:  28
Token:  29
Token:  30
Token:  31
Token:  32
Token:  33
Token:  34
Token:  35
Token:  36
Token:  37
Token:  38
Token:  39
Token:  40
Token:  41
Token:  42
Token:  43
Token:  44
Token:  45
Token:  46
Token:  47
Token:  48
Token:  49
Token:  50
Token:  51
Token:  52
Token:  53
Token:  54
Token:  55
Token:  56
Token:  57
Token:  58
Token:  59
Token:  60
Token:  61
Token:  62
Token:  63
Token:  64
Token:  65
Token:  66
Token:  67
Token:  68
Token:  69
Token:  70
Token:  71
Token:  72
Token:  73
Token:  74
Token:  75
Token:  76
Token:  77
Token:  78
Token:  79
Token:  80
Token:  81
Token:  82
Token:  83
Token:  84
Token:  85
Token:  86
Token:  87
Token:  88
Token:  89
Token:  90
Token:  91
Token:  92
Token:  93
Token:  94
Token:  95
Token:  96
Token:  97
Token:  98
Token:  99
Token:  100
Token:  101
Token:  102
Token:  103
Token:  104
Token:  105
Token:  106
Token:  107
Token:  108
Token:  109
Token:  110
Token:  111
Token:  112
Token:  113
Token:  114
Token:  115
Token:  116
Token:  117
Token:  118
Token:  119
Token:  120
Token:  121
Token:  122
Token:  123
Token:  124
Token:  125
Token:  126
Token:  127
Token:  128
Token:  129
Token:  130
Token:  131
Token:  132
Token:  133
Token:  134
Token:  135
Token:  136
Token:  137
Token:  138
Token:  139
Token:  140
Token:  141
Token:  142
Token:  143
Token:  144
Token:  145
Token:  146
Token:  147
Token:  148
Token:  149
Token:  150
Token:  151
Token:  152
Token:  153
Token:  154
Token:  155
Token:  156
Token:  157
Token:  158
Token:  159
Token:  160
Token:  161
Token:  162
Token:  163
Token:  164
Token:  165
Token:  166
Token:  167
Token:  168
Token:  169
Token:  170
Token:  171
Token:  172
Token:  173
Token:  174
Token:  175
Token:  176
Token:  177
Token:  178
Token:  179
Token:  180
Token:  181
Token:  182
Token:  183
Token:  184
Token:  185
Token:  186
Token:  187
Token:  188
Token:  189
Token:  190
Token:  191
Token:  192
Token:  193
Token:  194
Token:  195
Token:  196
Token:  197
Token:  198
Token:  199
Token:  200
Token:  201
Token:  202
Token:  203
//Design a 32-bit adder module (defined as adder_32 below).
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The adder_32 module should utilize the 8 bit adder defined below (adder_4).

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31;
  adder_8 A1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
  adder_8 A2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
  adder_8 A3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
  adder_8 A4(sum[31:24], cout, in1[31:24], in2[31:24], c3);
endmodule
Path:  output_files/3084873_adder_32/3084873_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  204
LLM generates return in:  77.973854  seconds
Running getPromptScore: 
adder_32
output_files/3084873_adder_32/synth_script.sh
Running bash in x seconds:  0.899789

Currently displaying area/delay scores for  adder_32  module.
Area of the chip design is:  298.718
Delay value for the chip design is:  1234.8
Product:  368856.9864
Score (1/chip area):  0.5
Backpropogation: incorporating estimates.
Current runs:  56.0
Selection: finding leaf node.
Leaf selection - depth:  0
Leaf selection - action scores:  [6.61219450e-01 2.91932653e-01 5.62815892e-03 3.24180877e-03
 1.56334433e-03 1.03057043e-03 6.48897252e-01 6.97568900e-04
 6.69076936e-04 5.57808170e-04]  taking action:  0
Leaf selection - depth:  1
Leaf selection - action scores:  [0.68357706 0.08138107 0.03138836 0.02586925 0.01571098 0.01389168
 0.01143387 0.00623825 0.00467412 0.00349731]  taking action:  0
Leaf selection - depth:  2
Leaf selection - action scores:  [0.68140996 0.28122765 0.02873568 0.02631829 0.01212631 0.00978597
 0.00767749 0.00443293 0.00288561 0.00285769]  taking action:  0
Leaf selection - depth:  3
Leaf selection - action scores:  [0.6707226  0.66789794 0.18648508 0.14770034 0.00898568 0.00711798
 0.00438387 0.00374423 0.00282423 0.00231966]  taking action:  0
Leaf selection - depth:  4
Leaf selection - action scores:  [0.717088   0.0814705  0.0646864  0.04618874 0.02289284 0.00784663
 0.00660355 0.00614261 0.00543914 0.00414341]  taking action:  0
Leaf selection - depth:  5
Leaf selection - action scores:  [7.2577631e-01 8.3898976e-02 4.6256566e-03 1.7526634e-03 1.6456711e-03
 1.0736809e-03 5.1022531e-04 3.5461120e-04 1.6677196e-04 1.6441831e-04]  taking action:  0
Leaf selection - depth:  6
Leaf selection - action scores:  [7.09119260e-01 6.87978148e-01 1.01448305e-01 4.38966276e-03
 5.62627567e-04 3.65154672e-04 2.21192109e-04 2.17598441e-04
 1.77623049e-04 1.76753834e-04]  taking action:  0
Leaf selection - depth:  7
Leaf selection - action scores:  [7.4711990e-01 8.1570465e-03 2.7661419e-03 3.8942671e-04 2.2666933e-04
 1.8495836e-04 1.0383063e-04 5.5202963e-05 3.9632185e-05 2.2549373e-05]  taking action:  0
Leaf selection - depth:  8
Leaf selection - action scores:  [7.48585403e-01 8.67410451e-02 1.32716016e-03 8.47529445e-04
 6.21718995e-04 1.01377525e-04 9.79052711e-05 6.35247125e-05
 6.26578112e-05 6.14056044e-05]  taking action:  0
Leaf selection - depth:  9
Leaf selection - action scores:  [7.5403214e-01 5.4147676e-02 4.7440226e-03 4.2105136e-03 3.8722373e-04
 2.9775896e-04 2.8346322e-04 9.4163406e-05 9.3289593e-05 8.2084422e-05]  taking action:  0
Leaf selection - depth:  10
Leaf selection - action scores:  [7.6064324e-01 9.0850480e-03 7.7209175e-03 1.0120380e-03 6.5836485e-04
 3.7059907e-04 2.4722281e-04 2.1737916e-04 1.8433253e-04 1.2705468e-04]  taking action:  0
Leaf selection - depth:  11
Leaf selection - action scores:  [7.5293779e-01 3.2752585e-01 4.4764168e-04 4.4740606e-04 4.3528492e-04
 8.6116459e-05 4.8167843e-05 4.3851298e-05 4.3245949e-05 2.8756189e-05]  taking action:  0
Leaf selection - depth:  12
Leaf selection - action scores:  [7.7041757e-01 2.9927885e-02 3.9069201e-03 3.2190210e-03 7.9598272e-04
 5.3050590e-04 3.6747070e-04 1.6428540e-04 1.5551737e-04 1.3536657e-04]  taking action:  0
Leaf selection - depth:  13
Leaf selection - action scores:  [7.77393460e-01 9.91480984e-03 2.53658067e-03 1.03068945e-03
 3.98881879e-04 3.05120193e-04 2.48925469e-04 1.96524532e-04
 1.62969300e-04 1.11025234e-04]  taking action:  0
Leaf selection - depth:  14
Leaf selection - action scores:  [7.8062958e-01 7.8751363e-02 3.2792869e-04 8.7237197e-05 5.0807808e-05
 5.0707124e-05 4.9605864e-05 3.5164823e-05 3.3037315e-05 1.9375906e-05]  taking action:  0
Leaf selection - depth:  15
Leaf selection - action scores:  [7.9050839e-01 1.0138180e-02 1.0617382e-03 8.7891013e-04 8.1548025e-04
 1.6123804e-04 6.6801462e-05 4.9727158e-05 4.0901014e-05 3.4865116e-05]  taking action:  0
Leaf selection - depth:  16
Leaf selection - action scores:  [7.9820752e-01 3.8825357e-03 5.1915203e-04 3.1933316e-04 2.0196561e-04
 1.9837987e-04 1.1267439e-04 8.3574858e-05 7.2751944e-05 4.6007463e-05]  taking action:  0
Leaf selection - depth:  17
Leaf selection - action scores:  [8.0590367e-01 8.3305659e-03 2.0352323e-04 1.5558543e-04 1.1709401e-04
 3.5603378e-05 2.9163017e-05 2.2649541e-05 1.4647089e-05 1.2383493e-05]  taking action:  0
Leaf selection - depth:  18
Leaf selection - action scores:  [8.1443644e-01 7.6981108e-03 5.2775419e-04 3.8578344e-04 3.0480750e-04
 8.9782538e-05 3.0709605e-05 2.5566795e-05 2.3031513e-05 2.2610351e-05]  taking action:  0
Leaf selection - depth:  19
Leaf selection - action scores:  [8.2415915e-01 2.8808841e-03 1.3134163e-04 5.2920863e-05 4.2551499e-05
 3.7362668e-05 3.4139350e-05 3.0811760e-05 2.6616775e-05 2.5834992e-05]  taking action:  0
Leaf selection - depth:  20
Leaf selection - action scores:  [8.31748188e-01 4.34939712e-02 1.07251275e-04 6.97583309e-05
 1.59908141e-05 1.22938345e-05 8.48268428e-06 6.40350572e-06
 4.38647885e-06 3.47165883e-06]  taking action:  0
Leaf selection - depth:  21
Leaf selection - action scores:  [8.4560049e-01 5.0429129e-03 3.6387480e-04 3.4789060e-04 2.1116897e-04
 7.4302239e-05 1.5901176e-05 1.4662156e-05 1.4467476e-05 1.0481289e-05]  taking action:  0
Leaf selection - depth:  22
Leaf selection - action scores:  [8.5862178e-01 6.0908601e-04 2.3326470e-04 2.1209364e-04 1.7997269e-04
 2.3715231e-05 1.8786071e-05 1.6930031e-05 1.3055591e-05 1.2865251e-05]  taking action:  0
Leaf selection - depth:  23
Leaf selection - action scores:  [8.1008977e-01 7.5340414e-01 3.9623934e-04 2.9054252e-04 9.0873895e-05
 5.6829256e-05 3.8425766e-05 3.6955535e-05 1.9675361e-05 1.7900891e-05]  taking action:  0
Leaf selection - depth:  24
Leaf selection - action scores:  [8.82915020e-01 5.20547889e-02 1.03458911e-02 2.23503308e-03
 1.71779573e-03 4.75339883e-04 1.29858527e-04 1.11698486e-04
 1.02152895e-04 7.25085702e-05]  taking action:  0
Leaf selection - depth:  25
Leaf selection - action scores:  [9.0673423e-01 5.6762751e-03 2.9351679e-03 3.9724083e-04 9.4950177e-05
 5.9075221e-05 4.5100234e-05 3.6546415e-05 3.2446213e-05 2.5951103e-05]  taking action:  0
Leaf selection - depth:  26
Leaf selection - action scores:  [8.4770846e-01 8.1809425e-01 3.7090397e-03 6.7716651e-04 3.2036292e-04
 1.2773648e-04 7.8080913e-05 4.9955204e-05 3.2346652e-05 2.2640816e-05]  taking action:  0
Leaf selection - depth:  27
Leaf selection - action scores:  [1.0652708e+00 3.4657519e-02 7.7712270e-03 4.1048452e-03 4.6886472e-04
 3.6684715e-04 2.7104563e-04 1.5299466e-04 1.4007697e-04 1.3482175e-04]  taking action:  0
Leaf selection - depth:  28
Leaf selection - action scores:  [1.1457281e+00 9.0716104e-04 4.0012674e-04 2.8315064e-04 1.9783470e-04
 1.0013506e-04 4.9716265e-05 4.0818493e-05 2.8436825e-05 2.1947970e-05]  taking action:  0
Leaf selection - depth:  29
Leaf selection - action scores:  [1.0381442  0.51681185 0.03878781 0.0178495  0.01136168 0.01109633
 0.003993   0.00384658 0.00158313 0.00130866]  taking action:  0
Leaf selection - depth:  30
Leaf selection - action scores:  [1.4447501e+00 2.8382670e-04 9.5495299e-05 3.8805887e-05 3.2560121e-05
 2.2639248e-05 2.0979453e-05 2.0017667e-05 1.7458253e-05 9.1917846e-06]  taking action:  0
Leaf selection - depth:  31
Leaf selection - action scores:  [1.9441998e+00 6.2809018e-03 5.2844285e-04 1.7396441e-04 1.1464358e-04
 8.1226273e-05 6.4424625e-05 2.2488364e-05 2.1374239e-05 2.0477297e-05]  taking action:  0
Adding child.
Leaf selection - depth:  32
Getting LLM token estimates (probs/ids).
Len original:  50295  Len new:  50278
Expansion: next action:  0  corresponding to state:  317
Getting rollout return of leaf.
Token:  0
Token:  1
Token:  2
Token:  3
Token:  4
Token:  5
Token:  6
Token:  7
Token:  8
Token:  9
Token:  10
Token:  11
Token:  12
Token:  13
Token:  14
Token:  15
Token:  16
Token:  17
Token:  18
Token:  19
Token:  20
Token:  21
Token:  22
Token:  23
Token:  24
Token:  25
Token:  26
Token:  27
Token:  28
Token:  29
Token:  30
Token:  31
Token:  32
Token:  33
Token:  34
Token:  35
Token:  36
Token:  37
Token:  38
Token:  39
Token:  40
Token:  41
Token:  42
Token:  43
Token:  44
Token:  45
Token:  46
Token:  47
Token:  48
Token:  49
Token:  50
Token:  51
Token:  52
Token:  53
Token:  54
Token:  55
Token:  56
Token:  57
Token:  58
Token:  59
Token:  60
Token:  61
Token:  62
Token:  63
Token:  64
Token:  65
Token:  66
Token:  67
Token:  68
Token:  69
Token:  70
Token:  71
Token:  72
Token:  73
Token:  74
Token:  75
Token:  76
Token:  77
Token:  78
Token:  79
Token:  80
Token:  81
Token:  82
Token:  83
Token:  84
Token:  85
Token:  86
Token:  87
Token:  88
Token:  89
Token:  90
Token:  91
Token:  92
Token:  93
Token:  94
Token:  95
Token:  96
Token:  97
Token:  98
Token:  99
Token:  100
Token:  101
Token:  102
Token:  103
Token:  104
Token:  105
Token:  106
Token:  107
Token:  108
Token:  109
Token:  110
Token:  111
Token:  112
Token:  113
Token:  114
Token:  115
Token:  116
Token:  117
Token:  118
Token:  119
Token:  120
Token:  121
Token:  122
Token:  123
Token:  124
Token:  125
Token:  126
Token:  127
Token:  128
Token:  129
Token:  130
Token:  131
