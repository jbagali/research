adders/ripple_carry/prompt1_adder_64.v
Prompt str:  //Design a 64-bit adder module (defined as adder_64 below).
//There are two 64 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 64 bit value, [63:0] sum, and a single carry-out output bit, cout.
//The adder_64 module should utilize the 8 bit adder defined below (adder_8) in its implementation.

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_64(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);

Loading LLM model...
Initializing MCTS tree/LLM env...
Episode not stated yet!
Simulations per episode:  100
********-- EPISODE-1--************
----GREEDY LLM OUTPUT - ITERATION:  0  ----
---------------
Env seed:  405530
Done setting up env.
Token:  0
Token:  1
Token:  2
Token:  3
Token:  4
Token:  5
Token:  6
Token:  7
Token:  8
Token:  9
Token:  10
Token:  11
Token:  12
Token:  13
Token:  14
Token:  15
Token:  16
Token:  17
Token:  18
Token:  19
Token:  20
Token:  21
Token:  22
Token:  23
Token:  24
Token:  25
Token:  26
Token:  27
Token:  28
Token:  29
Token:  30
Token:  31
Token:  32
Token:  33
Token:  34
Token:  35
Token:  36
Token:  37
Token:  38
Token:  39
Token:  40
Token:  41
Token:  42
Token:  43
Token:  44
Token:  45
Token:  46
Token:  47
Token:  48
Token:  49
Token:  50
Token:  51
Token:  52
Token:  53
Token:  54
Token:  55
Token:  56
Token:  57
Token:  58
Token:  59
Token:  60
Token:  61
Token:  62
Token:  63
Token:  64
Token:  65
Token:  66
Token:  67
Token:  68
Token:  69
Token:  70
Token:  71
Token:  72
Token:  73
Token:  74
Token:  75
Token:  76
Token:  77
Token:  78
Token:  79
Token:  80
Token:  81
Token:  82
Token:  83
Token:  84
Token:  85
Token:  86
Token:  87
Token:  88
Token:  89
Token:  90
Token:  91
Token:  92
Token:  93
Token:  94
Token:  95
Token:  96
Token:  97
Token:  98
Token:  99
Token:  100
Token:  101
Token:  102
Token:  103
Token:  104
Token:  105
Token:  106
Token:  107
Token:  108
Token:  109
Token:  110
Token:  111
Token:  112
Token:  113
Token:  114
Token:  115
Token:  116
Token:  117
Token:  118
Token:  119
Token:  120
Token:  121
Token:  122
Token:  123
Token:  124
Token:  125
Token:  126
Token:  127
Token:  128
Token:  129
Token:  130
Token:  131
Token:  132
Token:  133
Token:  134
Token:  135
Token:  136
Token:  137
Token:  138
Token:  139
Token:  140
Token:  141
Token:  142
Token:  143
Token:  144
Token:  145
Token:  146
Token:  147
Token:  148
Token:  149
Token:  150
Token:  151
Token:  152
Token:  153
Token:  154
Token:  155
Token:  156
Token:  157
Token:  158
Token:  159
Token:  160
Token:  161
Token:  162
Token:  163
Token:  164
Token:  165
Token:  166
Token:  167
Token:  168
Token:  169
Token:  170
Token:  171
Token:  172
Token:  173
Token:  174
Token:  175
Token:  176
Token:  177
Token:  178
Token:  179
Token:  180
Token:  181
Token:  182
Token:  183
Token:  184
Token:  185
Token:  186
Token:  187
Token:  188
Token:  189
Token:  190
Token:  191
Token:  192
Token:  193
Token:  194
Token:  195
Token:  196
Token:  197
Token:  198
Token:  199
Token:  200
Token:  201
Token:  202
Token:  203
Token:  204
Token:  205
Token:  206
Token:  207
Token:  208
Token:  209
Token:  210
Token:  211
Token:  212
Token:  213
Token:  214
Token:  215
Token:  216
Token:  217
Token:  218
Token:  219
Token:  220
Token:  221
Token:  222
Token:  223
Token:  224
Token:  225
Token:  226
Token:  227
Token:  228
Token:  229
Token:  230
Token:  231
Token:  232
Token:  233
Token:  234
Token:  235
Token:  236
Token:  237
Token:  238
Token:  239
Token:  240
Token:  241
Token:  242
Token:  243
Token:  244
Token:  245
Token:  246
Token:  247
Token:  248
Token:  249
Token:  250
Token:  251
Token:  252
Token:  253
Token:  254
Token:  255
Token:  256
Token:  257
Token:  258
Token:  259
Token:  260
Token:  261
Token:  262
Token:  263
Token:  264
Token:  265
Token:  266
Token:  267
Token:  268
Token:  269
Token:  270
Token:  271
Token:  272
Token:  273
Token:  274
Token:  275
Token:  276
Token:  277
Token:  278
Token:  279
Token:  280
Token:  281
Token:  282
Token:  283
Token:  284
Token:  285
Token:  286
Token:  287
Token:  288
Token:  289
Token:  290
Token:  291
Token:  292
Token:  293
Token:  294
Token:  295
Token:  296
Token:  297
Token:  298
Token:  299
Token:  300
Token:  301
Token:  302
Token:  303
Token:  304
Token:  305
Token:  306
Token:  307
Token:  308
Token:  309
Token:  310
Token:  311
Token:  312
Token:  313
Token:  314
Token:  315
Token:  316
Token:  317
Token:  318
Token:  319
Token:  320
Token:  321
Token:  322
Token:  323
Token:  324
Token:  325
Token:  326
Token:  327
Token:  328
Token:  329
Token:  330
Token:  331
Token:  332
Token:  333
Token:  334
Token:  335
Token:  336
Token:  337
Token:  338
Token:  339
Token:  340
Token:  341
Token:  342
Token:  343
Token:  344
Token:  345
Token:  346
Token:  347
Token:  348
Token:  349
Token:  350
Token:  351
Token:  352
Token:  353
Token:  354
Token:  355
Token:  356
Token:  357
Token:  358
Token:  359
Token:  360
Token:  361
Token:  362
Token:  363
Token:  364
Token:  365
Token:  366
Token:  367
Token:  368
Token:  369
Token:  370
Token:  371
Token:  372
Token:  373
Token:  374
Token:  375
Token:  376
Token:  377
Token:  378
Token:  379
Token:  380
Token:  381
Token:  382
Token:  383
Token:  384
Token:  385
Token:  386
Token:  387
Token:  388
Token:  389
Token:  390
Token:  391
Token:  392
Token:  393
Token:  394
Token:  395
Token:  396
Token:  397
Token:  398
Token:  399
Token:  400
Token:  401
Token:  402
Token:  403
Token:  404
Token:  405
Token:  406
Token:  407
Token:  408
Token:  409
Token:  410
Token:  411
Token:  412
Token:  413
Token:  414
Token:  415
Token:  416
Token:  417
Token:  418
Token:  419
Token:  420
Token:  421
Token:  422
Token:  423
Token:  424
Token:  425
Token:  426
Token:  427
Token:  428
Token:  429
Token:  430
Token:  431
Token:  432
Token:  433
Token:  434
Token:  435
Token:  436
Token:  437
Token:  438
Token:  439
Token:  440
Token:  441
Token:  442
Token:  443
Token:  444
Token:  445
Token:  446
Token:  447
Token:  448
Token:  449
Token:  450
Token:  451
Token:  452
Token:  453
Token:  454
Token:  455
Token:  456
Token:  457
Token:  458
Token:  459
Token:  460
Token:  461
Token:  462
Token:  463
Token:  464
//Design a 64-bit adder module (defined as adder_64 below).
//There are two 64 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 64 bit value, [63:0] sum, and a single carry-out output bit, cout.
//The adder_64 module should utilize the 8 bit adder defined below (adder_8) in its implementation.

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_64(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42,c43,c44,c45,c46,c47,c48,c49,c50,c51,c52,c53,c54,c55,c56,c57,c58,c59,c60,c61,c62,c63;
  adder_8 a1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
  adder_8 a3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
  adder_8 a4(sum[31:24], c4, in1[31:24], in2[31:24], c3);
  adder_8 a5(sum[39:32], c5, in1[39:32], in2[39:32], c4);
  adder_8 a6(sum[47:40], c6, in1[47:40], in2[47:40], c5);
  adder_8 a7(sum[55:48], c7, in1[55:48], in2[55:48], c6);
  adder_8 a8(sum[63:56], cout, in1[63:56], in2[63:56], c7);
endmodule
Path:  output_files/3080141_adder_64/3080141_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  465
LLM generates return in:  204.076215  seconds
Running getPromptScore: 
adder_64
output_files/3080141_adder_64/synth_script.sh
Running bash in x seconds:  1.134073

Currently displaying area/delay scores for  adder_64  module.
Area of the chip design is:  595.84
Delay value for the chip design is:  2418.77
Product:  1441199.9168
Score (1/chip area):  0.5
----GREEDY LLM OUTPUT - ITERATION:  1  ----
---------------
Env seed:  598680
Done setting up env.
Token:  0
Token:  1
Token:  2
Token:  3
Token:  4
Token:  5
Token:  6
Token:  7
Token:  8
Token:  9
Token:  10
Token:  11
Token:  12
Token:  13
Token:  14
Token:  15
Token:  16
Token:  17
Token:  18
Token:  19
Token:  20
Token:  21
Token:  22
Token:  23
Token:  24
Token:  25
Token:  26
Token:  27
Token:  28
Token:  29
Token:  30
Token:  31
Token:  32
Token:  33
Token:  34
Token:  35
Token:  36
Token:  37
Token:  38
Token:  39
Token:  40
Token:  41
Token:  42
Token:  43
Token:  44
Token:  45
Token:  46
Token:  47
Token:  48
Token:  49
Token:  50
Token:  51
Token:  52
Token:  53
Token:  54
Token:  55
Token:  56
Token:  57
Token:  58
Token:  59
Token:  60
Token:  61
Token:  62
Token:  63
Token:  64
Token:  65
Token:  66
Token:  67
Token:  68
Token:  69
Token:  70
Token:  71
Token:  72
Token:  73
Token:  74
Token:  75
Token:  76
Token:  77
Token:  78
Token:  79
Token:  80
Token:  81
Token:  82
Token:  83
Token:  84
Token:  85
Token:  86
Token:  87
Token:  88
Token:  89
Token:  90
Token:  91
Token:  92
Token:  93
Token:  94
Token:  95
Token:  96
Token:  97
Token:  98
Token:  99
Token:  100
Token:  101
Token:  102
Token:  103
Token:  104
Token:  105
Token:  106
Token:  107
Token:  108
Token:  109
Token:  110
Token:  111
Token:  112
Token:  113
Token:  114
Token:  115
Token:  116
Token:  117
Token:  118
Token:  119
Token:  120
Token:  121
Token:  122
Token:  123
Token:  124
Token:  125
Token:  126
Token:  127
Token:  128
Token:  129
Token:  130
Token:  131
Token:  132
Token:  133
Token:  134
Token:  135
Token:  136
Token:  137
Token:  138
Token:  139
Token:  140
Token:  141
Token:  142
Token:  143
Token:  144
Token:  145
Token:  146
Token:  147
Token:  148
Token:  149
Token:  150
Token:  151
Token:  152
Token:  153
Token:  154
Token:  155
Token:  156
Token:  157
Token:  158
Token:  159
Token:  160
Token:  161
Token:  162
Token:  163
Token:  164
Token:  165
Token:  166
Token:  167
Token:  168
Token:  169
Token:  170
Token:  171
Token:  172
Token:  173
Token:  174
Token:  175
Token:  176
Token:  177
Token:  178
Token:  179
Token:  180
Token:  181
Token:  182
Token:  183
Token:  184
Token:  185
Token:  186
Token:  187
Token:  188
Token:  189
Token:  190
Token:  191
Token:  192
Token:  193
Token:  194
Token:  195
Token:  196
Token:  197
Token:  198
Token:  199
Token:  200
Token:  201
Token:  202
Token:  203
Token:  204
Token:  205
Token:  206
Token:  207
Token:  208
Token:  209
Token:  210
Token:  211
Token:  212
Token:  213
Token:  214
Token:  215
Token:  216
Token:  217
Token:  218
Token:  219
Token:  220
Token:  221
Token:  222
Token:  223
Token:  224
Token:  225
Token:  226
Token:  227
Token:  228
Token:  229
Token:  230
Token:  231
Token:  232
Token:  233
Token:  234
Token:  235
Token:  236
Token:  237
Token:  238
Token:  239
Token:  240
Token:  241
Token:  242
Token:  243
Token:  244
Token:  245
Token:  246
Token:  247
Token:  248
Token:  249
Token:  250
Token:  251
Token:  252
Token:  253
Token:  254
Token:  255
Token:  256
Token:  257
Token:  258
Token:  259
Token:  260
Token:  261
Token:  262
Token:  263
Token:  264
Token:  265
Token:  266
Token:  267
Token:  268
Token:  269
Token:  270
Token:  271
Token:  272
Token:  273
Token:  274
Token:  275
Token:  276
Token:  277
Token:  278
Token:  279
Token:  280
Token:  281
Token:  282
Token:  283
Token:  284
Token:  285
Token:  286
Token:  287
Token:  288
Token:  289
Token:  290
Token:  291
Token:  292
Token:  293
Token:  294
Token:  295
Token:  296
Token:  297
Token:  298
Token:  299
Token:  300
Token:  301
Token:  302
Token:  303
Token:  304
Token:  305
Token:  306
Token:  307
Token:  308
Token:  309
Token:  310
Token:  311
Token:  312
Token:  313
Token:  314
Token:  315
Token:  316
Token:  317
Token:  318
Token:  319
Token:  320
Token:  321
Token:  322
Token:  323
Token:  324
Token:  325
Token:  326
Token:  327
Token:  328
Token:  329
Token:  330
Token:  331
Token:  332
Token:  333
Token:  334
Token:  335
Token:  336
Token:  337
Token:  338
Token:  339
Token:  340
Token:  341
Token:  342
Token:  343
Token:  344
Token:  345
Token:  346
Token:  347
Token:  348
Token:  349
Token:  350
Token:  351
Token:  352
Token:  353
Token:  354
Token:  355
Token:  356
Token:  357
Token:  358
Token:  359
Token:  360
Token:  361
Token:  362
Token:  363
Token:  364
Token:  365
Token:  366
Token:  367
Token:  368
Token:  369
Token:  370
Token:  371
Token:  372
Token:  373
Token:  374
Token:  375
Token:  376
Token:  377
Token:  378
Token:  379
Token:  380
Token:  381
Token:  382
Token:  383
Token:  384
Token:  385
Token:  386
Token:  387
Token:  388
Token:  389
Token:  390
Token:  391
Token:  392
Token:  393
Token:  394
Token:  395
Token:  396
Token:  397
Token:  398
Token:  399
Token:  400
Token:  401
Token:  402
Token:  403
Token:  404
Token:  405
Token:  406
Token:  407
Token:  408
Token:  409
Token:  410
Token:  411
Token:  412
Token:  413
Token:  414
Token:  415
Token:  416
Token:  417
Token:  418
Token:  419
Token:  420
Token:  421
Token:  422
Token:  423
Token:  424
Token:  425
Token:  426
Token:  427
Token:  428
Token:  429
Token:  430
Token:  431
Token:  432
Token:  433
Token:  434
Token:  435
Token:  436
Token:  437
Token:  438
Token:  439
Token:  440
Token:  441
Token:  442
Token:  443
Token:  444
Token:  445
Token:  446
Token:  447
Token:  448
Token:  449
Token:  450
Token:  451
Token:  452
Token:  453
Token:  454
Token:  455
Token:  456
Token:  457
Token:  458
Token:  459
Token:  460
Token:  461
Token:  462
Token:  463
Token:  464
//Design a 64-bit adder module (defined as adder_64 below).
//There are two 64 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 64 bit value, [63:0] sum, and a single carry-out output bit, cout.
//The adder_64 module should utilize the 8 bit adder defined below (adder_8) in its implementation.

module full_adder_1(output wire sum,
                     output wire cout,
                     input wire in1, in2, cin);
  wire t1, t2, t3;
  xor(t1, in1, in2);
  xor(sum, t1, cin);
  and(t2, t1, cin);
  and(t3, in1, in2);
  or(cout, t2, t3);
endmodule

module adder_8(output [7:0] sum,
                      output cout,
                      input [7:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7;
  full_adder_1 FA1(sum[0], c1, in1[0], in2[0], cin);
  full_adder_1 FA2(sum[1], c2, in1[1], in2[1], c1);
  full_adder_1 FA3(sum[2], c3, in1[2], in2[2], c2);
  full_adder_1 FA4(sum[3], c4, in1[3], in2[3], c3);
  full_adder_1 FA5(sum[4], c5, in1[4], in2[4], c4);
  full_adder_1 FA6(sum[5], c6, in1[5], in2[5], c5);
  full_adder_1 FA7(sum[6], c7, in1[6], in2[6], c6);
  full_adder_1 FA8(sum[7], cout, in1[7], in2[7], c7);
endmodule

module adder_64(output [63:0] sum,
                      output cout,
                      input [63:0] in1, in2,
                      input cin);
  wire c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42,c43,c44,c45,c46,c47,c48,c49,c50,c51,c52,c53,c54,c55,c56,c57,c58,c59,c60,c61,c62,c63;
  adder_8 a1(sum[7:0], c1, in1[7:0], in2[7:0], cin);
  adder_8 a2(sum[15:8], c2, in1[15:8], in2[15:8], c1);
  adder_8 a3(sum[23:16], c3, in1[23:16], in2[23:16], c2);
  adder_8 a4(sum[31:24], c4, in1[31:24], in2[31:24], c3);
  adder_8 a5(sum[39:32], c5, in1[39:32], in2[39:32], c4);
  adder_8 a6(sum[47:40], c6, in1[47:40], in2[47:40], c5);
  adder_8 a7(sum[55:48], c7, in1[55:48], in2[55:48], c6);
  adder_8 a8(sum[63:56], cout, in1[63:56], in2[63:56], c7);
endmodule
Path:  output_files/3080141_adder_64/3080141_simulation
Output Verilog module compiles successfully.
Verilog testbench simulation ran successfully.
Simulation output:  b'Test 1 passed\nTest 2 passed\nTest 3 passed\nTest 4 passed\nTest 5 passed\nTest 6 passed\nTest 7 passed\nTest 8 passed\nTest 9 passed\nTest 10 passed\nall tests passed\n'
All testbench tests passed!
Tokens:  465
LLM generates return in:  207.65888  seconds
Running getPromptScore: 
adder_64
output_files/3080141_adder_64/synth_script.sh
Running bash in x seconds:  1.138766

Currently displaying area/delay scores for  adder_64  module.
Area of the chip design is:  595.84
Delay value for the chip design is:  2418.77
Product:  1441199.9168
Score (1/chip area):  0.5
----GREEDY LLM OUTPUT - ITERATION:  2  ----
---------------
Env seed:  204382
Done setting up env.
Token:  0
Token:  1
Token:  2
Token:  3
Token:  4
Token:  5
Token:  6
Token:  7
Token:  8
Token:  9
Token:  10
Token:  11
Token:  12
Token:  13
Token:  14
Token:  15
Token:  16
Token:  17
Token:  18
Token:  19
Token:  20
Token:  21
Token:  22
Token:  23
Token:  24
Token:  25
Token:  26
Token:  27
Token:  28
Token:  29
Token:  30
Token:  31
Token:  32
Token:  33
Token:  34
Token:  35
Token:  36
Token:  37
Token:  38
Token:  39
Token:  40
Token:  41
Token:  42
Token:  43
Token:  44
Token:  45
Token:  46
Token:  47
Token:  48
Token:  49
Token:  50
Token:  51
Token:  52
Token:  53
Token:  54
Token:  55
Token:  56
Token:  57
Token:  58
Token:  59
Token:  60
Token:  61
Token:  62
Token:  63
Token:  64
Token:  65
Token:  66
Token:  67
Token:  68
Token:  69
Token:  70
Token:  71
Token:  72
Token:  73
Token:  74
Token:  75
Token:  76
Token:  77
Token:  78
Token:  79
Token:  80
Token:  81
Token:  82
Token:  83
Token:  84
Token:  85
Token:  86
Token:  87
Token:  88
Token:  89
Token:  90
Token:  91
Token:  92
Token:  93
Token:  94
Token:  95
Token:  96
Token:  97
Token:  98
Token:  99
Token:  100
Token:  101
Token:  102
Token:  103
Token:  104
Token:  105
Token:  106
Token:  107
Token:  108
Token:  109
Token:  110
Token:  111
Token:  112
Token:  113
Token:  114
Token:  115
Token:  116
Token:  117
Token:  118
Token:  119
Token:  120
Token:  121
Token:  122
Token:  123
Token:  124
Token:  125
Token:  126
Token:  127
Token:  128
Token:  129
Token:  130
Token:  131
Token:  132
Token:  133
Token:  134
Token:  135
Token:  136
Token:  137
Token:  138
Token:  139
Token:  140
Token:  141
Token:  142
Token:  143
Token:  144
Token:  145
Token:  146
Token:  147
Token:  148
Token:  149
Token:  150
Token:  151
Token:  152
Token:  153
Token:  154
Token:  155
Token:  156
Token:  157
Token:  158
Token:  159
Token:  160
Token:  161
Token:  162
Token:  163
Token:  164
Token:  165
Token:  166
Token:  167
Token:  168
Token:  169
Token:  170
Token:  171
Token:  172
Token:  173
Token:  174
Token:  175
Token:  176
Token:  177
Token:  178
Token:  179
Token:  180
Token:  181
Token:  182
Token:  183
Token:  184
Token:  185
Token:  186
Token:  187
Token:  188
Token:  189
Token:  190
Token:  191
Token:  192
Token:  193
Token:  194
Token:  195
Token:  196
Token:  197
Token:  198
Token:  199
Token:  200
Token:  201
Token:  202
Token:  203
Token:  204
Token:  205
Token:  206
Token:  207
Token:  208
Token:  209
