Area,Delay,Score,Current Run,Episode,Verilog
N/A,N/A,-1,0,0,"//Design a 32-bit adder.
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
  wire [31:0] sum;
  wire cout;
  wire [31:0] in1;
  wire [31:0] in2;
  wire cin;
  wire [31:0] carry;
  // Create wires for each input and output.
  wire [31:0] in1_w;
  wire [31:0] in2_w;
  wire cin_w;
  wire [31:0] carry_w;
  // Create wires for each adder.
  wire [31:0] sum_w;
  wire cout_w;
  // Create a carry look-ahead adder.
  adder_32_cout_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_"
N/A,N/A,-1,1,0,"//Design a 32-bit adder.
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
  wire [31:0] sum;
  wire cout;
  wire [31:0] in1;
  wire [31:0] in2;
  wire cin;
  wire [31:0] carry;
  // Create wires for each input and output.
  wire [31:0] in1_w;
  wire [31:0] in2_w;
  wire cin_w;
  wire [31:0] carry_w;
  // Create wires for each adder.
  wire [31:0] sum_w;
  wire cout_w;
  // Create a carry look-ahead adder.
  adder_32_cout_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_"
N/A,N/A,-1,2,0,"//Design a 32-bit adder.
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
  wire [31:0] sum;
  wire cout;
  wire [31:0] in1;
  wire [31:0] in2;
  wire cin;
  wire [31:0] carry;
  // Create wires for each input and output.
  wire [31:0] in1_w;
  wire [31:0] in2_w;
  wire cin_w;
  wire [31:0] carry_w;
  // Create wires for each adder.
  wire [31:0] sum_w;
  wire cout_w;
  // Create a carry look-ahead adder.
  adder_32_cout_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_"
N/A,N/A,-1,3,0,"//Design a 32-bit adder.
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
  wire [31:0] sum;
  wire cout;
  wire [31:0] in1;
  wire [31:0] in2;
  wire cin;
  wire [31:0] carry;
  // Create wires for each input and output.
  wire [31:0] in1_w;
  wire [31:0] in2_w;
  wire cin_w;
  wire [31:0] carry_w;
  // Create wires for each adder.
  wire [31:0] sum_w;
  wire cout_w;
  // Create a carry look-ahead adder.
  adder_32_cout_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_"
N/A,N/A,-1,4,0,"//Design a 32-bit adder.
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
  wire [31:0] sum;
  wire cout;
  wire [31:0] in1;
  wire [31:0] in2;
  wire cin;
  wire [31:0] carry;
  // Create wires for each input and output.
  wire [31:0] in1_w;
  wire [31:0] in2_w;
  wire cin_w;
  wire [31:0] carry_w;
  // Create wires for each adder.
  wire [31:0] sum_w;
  wire cout_w;
  // Create a carry look-ahead adder.
  adder_32_cout_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_"
N/A,N/A,-1,5,0,"//Design a 32-bit adder.
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
  wire [31:0] sum;
  wire cout;
  wire [31:0] in1;
  wire [31:0] in2;
  wire cin;
  wire [31:0] carry;
  // Create wires for each input and output.
  wire [31:0] in1_w;
  wire [31:0] in2_w;
  wire cin_w;
  wire [31:0] carry_w;
  // Create wires for each adder.
  wire [31:0] sum_w;
  wire cout_w;
  // Create a carry look-ahead adder.
  adder_32_cout_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_"
N/A,N/A,-1,6,0,"//Design a 32-bit adder.
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
  wire [31:0] sum;
  wire cout;
  wire [31:0] in1;
  wire [31:0] in2;
  wire cin;
  wire [31:0] carry;
  // Create wires for each input and output.
  wire [31:0] in1_w;
  wire [31:0] in2_w;
  wire cin_w;
  wire [31:0] carry_w;
  // Create wires for each adder.
  wire [31:0] sum_w;
  wire cout_w;
  // Create a carry look-ahead adder.
  adder_32_cout_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_"
N/A,N/A,-1,7,0,"//Design a 32-bit adder.
//There are two 32 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The outputs are a 32 bit value, [31:0] sum, and a single carry-out output bit, cout.
//The module should utilize the inputs (in1 and in2) and the cin bit to obtain the output sum and cout values.
module adder_32(output [31:0] sum,
                      output cout,
                      input [31:0] in1, in2,
                      input cin);
  wire [31:0] sum;
  wire cout;
  wire [31:0] in1;
  wire [31:0] in2;
  wire cin;
  wire [31:0] carry;
  // Create wires for each input and output.
  wire [31:0] in1_w;
  wire [31:0] in2_w;
  wire cin_w;
  wire [31:0] carry_w;
  // Create wires for each adder.
  wire [31:0] sum_w;
  wire cout_w;
  // Create a carry look-ahead adder.
  adder_32_cout_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_c_adder_32_"
