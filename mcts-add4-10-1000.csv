Area,Delay,Score,Current Run,Episode,Verilog
41.23,195.95,0.1,2.0,1,"//Design a 4-bit adder.
//There are two 4 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The adder should utilize the inputs (in1 and in2) and the cin bit to determine the output sum and cout.
//Please finish the module.

module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);

wire c1, c2, c3;

full_adder FA1(sum[0], c1, in1[0], in2[0], cin);
full_adder FA2(sum[1], c2, in1[1], in2[1], c1);
full_adder FA3(sum[2], c3, in1[2], in2[2], c2);
full_adder FA4(sum[3], cout, in1[3], in2[3], c3);

endmodule

module full_adder(output sum, output cout, input in1, in2, cin);

wire x, y, z;

xor(sum, in1, in2, cin);
and(x, in1, in2);
and(y, in1, cin);
and(z, in2, cin);
or(cout, x, y, z);

endmodule"
N/A,N/A,-0.1,3.0,1,"//Design a 4-bit adder.
//There are two 4 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The adder should utilize the inputs (in1 and in2) and the cin bit to determine the output sum and cout.
//Please finish the module.

module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);

	wire [3:0] sum;
	wire cout;
	wire [3:0] in1;
	wire [3:0] in2;
	wire cin;

	assign sum = in1 + in2 + cin;
	assign cout = (in1[3] & in2[3] & cin) | (in1[3] & cin) | (in2[3] & cin) | (cin & in1[3] & in2[3]);

endmodule"
41.23,195.95,0.1,4.0,1,"//Design a 4-bit adder.
//There are two 4 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The adder should utilize the inputs (in1 and in2) and the cin bit to determine the output sum and cout.
//Please finish the module.

module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);

wire c1, c2, c3;

full_adder FA1(sum[0], c1, in1[0], in2[0], cin);
full_adder FA2(sum[1], c2, in1[1], in2[1], c1);
full_adder FA3(sum[2], c3, in1[2], in2[2], c2);
full_adder FA4(sum[3], cout, in1[3], in2[3], c3);

endmodule

module full_adder(output sum, output cout, input in1, in2, cin);

wire x, y, z;

xor(sum, in1, in2, cin);
and(x, in1, in2);
and(y, in1, cin);
and(z, in2, cin);
or(cout, x, y, z);

endmodule"
N/A,N/A,-1,5.0,1,"//Design a 4-bit adder.
//There are two 4 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The adder should utilize the inputs (in1 and in2) and the cin bit to determine the output sum and cout.
//Please finish the module.

module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);
	wire [3:0] carry;
	
	fa_adder fa_adder_0(sum[0], carry[0], in1[0], in2[0], cin);
	fa_adder fa_adder_1(sum[1], carry[1], in1[1], in2[1], carry[0]);
	fa_adder fa_adder_2(sum[2], carry[2], in1[2], in2[2], carry[1]);
	fa_adder fa_adder_3(sum[3], cout, in1[3], in2[3], carry[2]);
	
endmodule

module fa_adder(output sum, carry, input a, b, cin);
	wire [3:0] carry_temp;
	
	fa_adder fa_adder_0(sum[0], carry_temp[0], a, b, cin);
	fa_adder fa_adder_1(sum[1], carry_temp[1], carry_temp[0], a, b);
	fa_adder fa_adder_2(sum[2], carry_temp[2], carry_temp[1], carry_temp[0], a);
	fa_adder fa_adder_3(sum[3], carry, carry_temp[2], carry_temp[1], carry_temp[0]);
	
endmodule"
41.23,196.03,0.09959173258484291,6.0,1,"//Design a 4-bit adder.
//There are two 4 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The adder should utilize the inputs (in1 and in2) and the cin bit to determine the output sum and cout.
//Please finish the module.

module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);   

wire c1, c2, c3;

full_adder FA1(sum[0], c1, in1[0], in2[0], cin);
full_adder FA2(sum[1], c2, in1[1], in2[1], c1);
full_adder FA3(sum[2], c3, in1[2], in2[2], c2);
full_adder FA4(sum[3], cout, in1[3], in2[3], c3);

endmodule

module full_adder(output sum, carry, input a, b, cin);

wire x, y, z;

xor(sum, a, b, cin);
and(x, a, b);
and(y, b, cin);
and(z, a, cin);
or(carry, x, y, z);

endmodule"
N/A,N/A,-0.1,7.0,1,"//Design a 4-bit adder.
//There are two 4 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The adder should utilize the inputs (in1 and in2) and the cin bit to determine the output sum and cout.
//Please finish the module.

module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);

	wire [3:0] sum;
	wire cout;
	wire [3:0] in1;
	wire [3:0] in2;
	wire cin;

	assign sum = in1 + in2 + cin;
	assign cout = (in1[3] & in2[3] & cin) | (in1[3] & cin) | (in2[3] & cin) | (cin & in1[3] & in2[3]);

endmodule"
41.23,196.03,0.09959173258484291,8.0,1,"//Design a 4-bit adder.
//There are two 4 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The adder should utilize the inputs (in1 and in2) and the cin bit to determine the output sum and cout.
//Please finish the module.

module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);   

wire c1, c2, c3;

full_adder FA1(sum[0], c1, in1[0], in2[0], cin);
full_adder FA2(sum[1], c2, in1[1], in2[1], c1);
full_adder FA3(sum[2], c3, in1[2], in2[2], c2);
full_adder FA4(sum[3], cout, in1[3], in2[3], c3);

endmodule

module full_adder(output sum, carry, input a, b, cin);

wire x, y, z;

xor(sum, a, b, cin);
and(x, a, b);
and(y, b, cin);
and(z, a, cin);
or(carry, x, y, z);

endmodule"
41.23,195.95,0.1,9.0,1,"//Design a 4-bit adder.
//There are two 4 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The adder should utilize the inputs (in1 and in2) and the cin bit to determine the output sum and cout.
//Please finish the module.

module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);

wire c1, c2, c3;

full_adder FA1(sum[0], c1, in1[0], in2[0], cin);
full_adder FA2(sum[1], c2, in1[1], in2[1], c1);
full_adder FA3(sum[2], c3, in1[2], in2[2], c2);
full_adder FA4(sum[3], cout, in1[3], in2[3], c3);

endmodule

module full_adder(output sum, output cout, input in1, in2, cin);

wire x, y, z;

xor(sum, in1, in2, cin);
and(x, in1, in2);
and(y, in1, cin);
and(z, in2, cin);
or(cout, x, y, z);

endmodule"
N/A,N/A,-1,10.0,1,"//Design a 4-bit adder.
//There are two 4 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The adder should utilize the inputs (in1 and in2) and the cin bit to determine the output sum and cout.
//Please finish the module.

module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);

    wire [3:0] sum;
    wire cout;
    wire [3:0] in1;
    wire [3:0] in2;
    wire cin;

    wire [3:0] temp1;
    wire [3:0] temp2;
    wire [3:0] temp3;
    wire [3:0] temp4;
    wire [3:0] temp5;
    wire [3:0] temp6;
    wire [3:0] temp7;
    wire [3:0] temp8;
    wire [3:0] temp9;
    wire [3:0] temp10;
    wire [3:0] temp11;
    wire [3:0] temp12;
    wire [3:0] temp13;
    wire [3:0] temp14;
    wire [3:0] temp15;
    wire [3:0] temp16;
    wire [3:0] temp17;
    wire [3:0] temp18;
    wire [3:0] temp19;
    wire [3:0] temp20;
    wire [3:0] temp21;
    wire [3:0] temp22;
    wire [3:0] temp23;
    wire [3:0] temp24;
    wire [3:0] temp25;
    wire [3:0] temp26;
    wire [3:0] temp27;
    wire [3:0] temp28;
    wire [3:0] temp29;
    wire [3:0] temp30;
    wire [3:0] temp31;
    wire [3:0] temp32;
    wire [3:0] temp33;
    wire [3:0] temp34;
    wire [3:0] temp35;
    wire [3:0] temp36;
    wire [3:0] temp37;
    wire [3:0] temp38;
    wire [3:0] temp39;
    wire [3:0] temp40;
    wire [3:0] temp41;
    wire [3:0] temp42;
    wire [3:0] temp43;
    wire [3:0] temp44;
    wire [3:0] temp45;
    wire [3:0] temp46;
    wire [3:0] temp47;
    wire [3:0] temp48;
    wire [3:0] temp49;
    wire [3:0] temp50;
    wire [3:0] temp51;
    wire [3:0] temp52;
    wire [3:0] temp53;
    wire [3:0] temp54;
    wire [3:0] temp55;
    wire [3:0] temp56;
    wire [3:0] temp57;
    wire [3:0] temp58;
    wire [3:0] temp59;
    wire [3:0] temp60;
    wire [3:0] temp61;
    wire [3:0] temp62;
    wire [3:0] temp63;
    wire [3:0] temp64;
    wire [3:0] temp65;
    wire [3:0] temp66;
    wire [3:0] temp67;
    wire [3:0] temp68;
    wire [3:0] temp69;
    wire [3:0] temp70;
    wire [3:0] temp71;
    wire [3:0] temp72;
    wire [3:0] temp73;
    wire [3:0] temp74;
    wire [3:0] temp75;
    wire [3:0] temp76;
    wire [3:0] temp77;
    wire [3:0] temp78;
    wire [3:0] temp79;
    wire [3:0] temp80;
    wire [3:0] temp81;
    wire [3:0] temp82;
    wire [3:0] temp83;
    wire [3:0] temp84;
    wire [3:0] temp85;
    wire [3:0] temp86;
    wire [3:0] temp87;"
41.23,195.95,0.1,11.0,1,"//Design a 4-bit adder.
//There are two 4 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The adder should utilize the inputs (in1 and in2) and the cin bit to determine the output sum and cout.
//Please finish the module.

module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);

wire c1, c2, c3;

full_adder FA1(sum[0], c1, in1[0], in2[0], cin);
full_adder FA2(sum[1], c2, in1[1], in2[1], c1);
full_adder FA3(sum[2], c3, in1[2], in2[2], c2);
full_adder FA4(sum[3], cout, in1[3], in2[3], c3);

endmodule

module full_adder(output sum, output cout, input in1, in2, cin);

wire x, y, z;

xor(sum, in1, in2, cin);
and(x, in1, in2);
and(y, in1, cin);
and(z, in2, cin);
or(cout, x, y, z);

endmodule"
41.23,195.95,0.1,12.0,1,"//Design a 4-bit adder.
//There are two 4 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The adder should utilize the inputs (in1 and in2) and the cin bit to determine the output sum and cout.
//Please finish the module.

module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);

wire [3:0] c;

assign c[0] = cin;

full_adder FA0(sum[0], c[1], in1[0], in2[0], c[0]);
full_adder FA1(sum[1], c[2], in1[1], in2[1], c[1]);
full_adder FA2(sum[2], c[3], in1[2], in2[2], c[2]);
full_adder FA3(sum[3], cout, in1[3], in2[3], c[3]);

endmodule

module full_adder(output sum, output cout, input in1, in2, cin);

wire x, y, z;

xor(sum, in1, in2, cin);
and(x, in1, in2);
and(y, in1, cin);
and(z, in2, cin);
or(cout, x, y, z);

endmodule"
41.23,196.03,0.09959173258484291,13.0,1,"//Design a 4-bit adder.
//There are two 4 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The adder should utilize the inputs (in1 and in2) and the cin bit to determine the output sum and cout.
//Please finish the module.

module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);   

wire c1, c2, c3;

full_adder FA1(sum[0], c1, in1[0], in2[0], cin);
full_adder FA2(sum[1], c2, in1[1], in2[1], c1);
full_adder FA3(sum[2], c3, in1[2], in2[2], c2);
full_adder FA4(sum[3], cout, in1[3], in2[3], c3);

endmodule

module full_adder(output sum, carry, input a, b, cin);

wire x, y, z;

xor(sum, a, b, cin);
and(x, a, b);
and(y, b, cin);
and(z, a, cin);
or(carry, x, y, z);

endmodule"
41.23,195.95,0.1,14.0,1,"//Design a 4-bit adder.
//There are two 4 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The adder should utilize the inputs (in1 and in2) and the cin bit to determine the output sum and cout.
//Please finish the module.

module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);

wire c1, c2, c3;

full_adder FA1(sum[0], c1, in1[0], in2[0], cin);
full_adder FA2(sum[1], c2, in1[1], in2[1], c1);
full_adder FA3(sum[2], c3, in1[2], in2[2], c2);
full_adder FA4(sum[3], cout, in1[3], in2[3], c3);

endmodule

module full_adder(output sum, output cout, input in1, in2, cin);

wire x, y, z;

xor(sum, in1, in2, cin);
and(x, in1, in2);
and(y, in1, cin);
and(z, in2, cin);
or(cout, x, y, z);

endmodule"
N/A,N/A,-0.1,15.0,1,"//Design a 4-bit adder.
//There are two 4 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The adder should utilize the inputs (in1 and in2) and the cin bit to determine the output sum and cout.
//Please finish the module.

module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);
    wire [3:0] sum;
    wire cout;
    wire [3:0] in1;
    wire [3:0] in2;
    wire cin;
    
    assign sum = in1 + in2 + cin;
    assign cout = (in1[3] & in2[3] & cin) | (in1[3] & cin) | (in2[3] & cin) | (cin & in1[3] & in2[3]);

endmodule"
N/A,N/A,-1,16.0,1,"//Design a 4-bit adder.
//There are two 4 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The adder should utilize the inputs (in1 and in2) and the cin bit to determine the output sum and cout.
//Please finish the module.

module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);   
	wire [3:0] carry;
	
	fa_adder fa_adder_0(sum[0], carry[0], in1[0], in2[0], cin);
	fa_adder fa_adder_1(sum[1], carry[1], in1[1], in2[1], carry[0]);
	fa_adder fa_adder_2(sum[2], carry[2], in1[2], in2[2], carry[1]);
	fa_adder fa_adder_3(sum[3], cout, in1[3], in2[3], carry[2]);
	
endmodule

module fa_adder(output sum, carry, input a, b, cin);
	wire [3:0] carry_temp;
	
	fa_adder fa_adder_0(sum[0], carry_temp[0], a, b, cin);
	fa_adder fa_adder_1(sum[1], carry_temp[1], carry_temp[0], a, b);
	fa_adder fa_adder_2(sum[2], carry_temp[2], carry_temp[1], carry_temp[0], a);
	fa_adder fa_adder_3(sum[3], carry, carry_temp[2], carry_temp[1], carry_temp[0]);
	
endmodule"
41.23,195.95,0.1,17.0,1,"//Design a 4-bit adder.
//There are two 4 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The adder should utilize the inputs (in1 and in2) and the cin bit to determine the output sum and cout.
//Please finish the module.

module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);

wire [3:0] c;

assign c[0] = cin;

full_adder FA0(sum[0], c[1], in1[0], in2[0], c[0]);
full_adder FA1(sum[1], c[2], in1[1], in2[1], c[1]);
full_adder FA2(sum[2], c[3], in1[2], in2[2], c[2]);
full_adder FA3(sum[3], cout, in1[3], in2[3], c[3]);

endmodule

module full_adder(output sum, output cout, input in1, in2, cin);

wire x, y, z;

xor(sum, in1, in2, cin);
and(x, in1, in2);
and(y, in1, cin);
and(z, in2, cin);
or(cout, x, y, z);

endmodule"
41.23,195.95,0.1,18.0,1,"//Design a 4-bit adder.
//There are two 4 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The adder should utilize the inputs (in1 and in2) and the cin bit to determine the output sum and cout.
//Please finish the module.

module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);

wire c1, c2, c3;

full_adder FA1(sum[0], c1, in1[0], in2[0], cin);
full_adder FA2(sum[1], c2, in1[1], in2[1], c1);
full_adder FA3(sum[2], c3, in1[2], in2[2], c2);
full_adder FA4(sum[3], cout, in1[3], in2[3], c3);

endmodule

module full_adder(output sum, output cout, input in1, in2, cin);

wire x, y, z;

xor(sum, in1, in2, cin);
and(x, in1, in2);
and(y, in1, cin);
and(z, in2, cin);
or(cout, x, y, z);

endmodule"
41.23,195.95,0.1,19.0,1,"//Design a 4-bit adder.
//There are two 4 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The adder should utilize the inputs (in1 and in2) and the cin bit to determine the output sum and cout.
//Please finish the module.

module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);

wire [3:0] c;

assign c[0] = cin;

full_adder FA0(sum[0], c[1], in1[0], in2[0], c[0]);
full_adder FA1(sum[1], c[2], in1[1], in2[1], c[1]);
full_adder FA2(sum[2], c[3], in1[2], in2[2], c[2]);
full_adder FA3(sum[3], cout, in1[3], in2[3], c[3]);

endmodule

module full_adder(output sum, output cout, input in1, in2, cin);

wire x, y, z;

xor(sum, in1, in2, cin);
and(x, in1, in2);
and(y, in1, cin);
and(z, in2, cin);
or(cout, x, y, z);

endmodule"
41.23,195.95,0.1,20.0,1,"//Design a 4-bit adder.
//There are two 4 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The adder should utilize the inputs (in1 and in2) and the cin bit to determine the output sum and cout.
//Please finish the module.

module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);

wire c1, c2, c3;

full_adder FA1(sum[0], c1, in1[0], in2[0], cin);
full_adder FA2(sum[1], c2, in1[1], in2[1], c1);
full_adder FA3(sum[2], c3, in1[2], in2[2], c2);
full_adder FA4(sum[3], cout, in1[3], in2[3], c3);

endmodule

module full_adder(output sum, output cout, input in1, in2, cin);

wire x, y, z;

xor(sum, in1, in2, cin);
and(x, in1, in2);
and(y, in1, cin);
and(z, in2, cin);
or(cout, x, y, z);

endmodule"
41.23,195.95,0.1,21.0,1,"//Design a 4-bit adder.
//There are two 4 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The adder should utilize the inputs (in1 and in2) and the cin bit to determine the output sum and cout.
//Please finish the module.

module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);

wire [3:0] c;

assign c[0] = cin;

full_adder FA0(sum[0], c[1], in1[0], in2[0], c[0]);
full_adder FA1(sum[1], c[2], in1[1], in2[1], c[1]);
full_adder FA2(sum[2], c[3], in1[2], in2[2], c[2]);
full_adder FA3(sum[3], cout, in1[3], in2[3], c[3]);

endmodule

module full_adder(output sum, output cout, input in1, in2, cin);

wire x, y, z;

xor(sum, in1, in2, cin);
and(x, in1, in2);
and(y, in1, cin);
and(z, in2, cin);
or(cout, x, y, z);

endmodule"
N/A,N/A,-0.1,22.0,1,"//Design a 4-bit adder.
//There are two 4 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The adder should utilize the inputs (in1 and in2) and the cin bit to determine the output sum and cout.
//Please finish the module.

module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);

endmodule"
N/A,N/A,-1,23.0,1,"//Design a 4-bit adder.
//There are two 4 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The adder should utilize the inputs (in1 and in2) and the cin bit to determine the output sum and cout.
//Please finish the module.

module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);
	wire [3:0] carry;
	
	fa_adder fa_adder_0(sum[0], carry[0], in1[0], in2[0], cin);
	fa_adder fa_adder_1(sum[1], carry[1], in1[1], in2[1], carry[0]);
	fa_adder fa_adder_2(sum[2], carry[2], in1[2], in2[2], carry[1]);
	fa_adder fa_adder_3(sum[3], cout, in1[3], in2[3], carry[2]);
	
endmodule

module fa_adder(output sum, carry, input a, b, cin);
	wire [3:0] carry_temp;
	
	fa_adder fa_adder_0(sum[0], carry_temp[0], a, b, cin);
	fa_adder fa_adder_1(sum[1], carry_temp[1], carry_temp[0], a, b);
	fa_adder fa_adder_2(sum[2], carry_temp[2], carry_temp[1], carry_temp[0], a);
	fa_adder fa_adder_3(sum[3], carry, carry_temp[2], carry_temp[1], carry_temp[0]);
	
endmodule"
N/A,N/A,-0.1,24.0,1,"//Design a 4-bit adder.
//There are two 4 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The adder should utilize the inputs (in1 and in2) and the cin bit to determine the output sum and cout.
//Please finish the module.

module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);

	wire [3:0] sum;
	wire cout;
	wire [3:0] in1;
	wire [3:0] in2;
	wire cin;

	assign sum = in1 + in2 + cin;
	assign cout = (in1[3] & in2[3] & cin) | (in1[3] & cin) | (in2[3] & cin) | (cin & in1[3] & in2[3]);

endmodule"
41.23,195.95,0.1,25.0,1,"//Design a 4-bit adder.
//There are two 4 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The adder should utilize the inputs (in1 and in2) and the cin bit to determine the output sum and cout.
//Please finish the module.

module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);

wire c1, c2, c3;

full_adder FA1(sum[0], c1, in1[0], in2[0], cin);
full_adder FA2(sum[1], c2, in1[1], in2[1], c1);
full_adder FA3(sum[2], c3, in1[2], in2[2], c2);
full_adder FA4(sum[3], cout, in1[3], in2[3], c3);

endmodule

module full_adder(output sum, output cout, input in1, in2, cin);

wire x, y, z;

xor(sum, in1, in2, cin);
and(x, in1, in2);
and(y, in1, cin);
and(z, in2, cin);
or(cout, x, y, z);

endmodule"
41.23,195.95,0.1,26.0,1,"//Design a 4-bit adder.
//There are two 4 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The adder should utilize the inputs (in1 and in2) and the cin bit to determine the output sum and cout.
//Please finish the module.

module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);

wire [3:0] c;

assign c[0] = cin;

full_adder FA0(sum[0], c[1], in1[0], in2[0], c[0]);
full_adder FA1(sum[1], c[2], in1[1], in2[1], c[1]);
full_adder FA2(sum[2], c[3], in1[2], in2[2], c[2]);
full_adder FA3(sum[3], cout, in1[3], in2[3], c[3]);

endmodule

module full_adder(output sum, output cout, input in1, in2, cin);

wire x, y, z;

xor(sum, in1, in2, cin);
and(x, in1, in2);
and(y, in1, cin);
and(z, in2, cin);
or(cout, x, y, z);

endmodule"
N/A,N/A,-0.1,27.0,1,"//Design a 4-bit adder.
//There are two 4 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The adder should utilize the inputs (in1 and in2) and the cin bit to determine the output sum and cout.
//Please finish the module.

module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);
  wire [3:0] in1;
  wire [3:0] in2;
  wire cin;
  wire [3:0] sum;
  wire cout;
  
  assign in1 = in1;
  assign in2 = in2;
  assign cin = cin;
  assign sum = sum;
  assign cout = cout;
  
endmodule"
N/A,N/A,-0.1,28.0,1,"//Design a 4-bit adder.
//There are two 4 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The adder should utilize the inputs (in1 and in2) and the cin bit to determine the output sum and cout.
//Please finish the module.

module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);

	wire [3:0] sum;
	wire cout;
	wire [3:0] in1;
	wire [3:0] in2;
	wire cin;

	assign sum = in1 + in2 + cin;
	assign cout = (in1[3] & in2[3] & cin) | (in1[3] & cin) | (in2[3] & cin) | (cin & in1[3] & in2[3]);

endmodule"
38.304,198.83,0.15731317238597722,29.0,1,"//Design a 4-bit adder.
//There are two 4 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The adder should utilize the inputs (in1 and in2) and the cin bit to determine the output sum and cout.
//Please finish the module.

module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);

assign {cout, sum} = in1 + in2 + cin;

endmodule"
N/A,N/A,-0.1,30.0,1,"//Design a 4-bit adder.
//There are two 4 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The adder should utilize the inputs (in1 and in2) and the cin bit to determine the output sum and cout.
//Please finish the module.

module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);
    wire [3:0] sum;
    wire cout;
    wire [3:0] in1;
    wire [3:0] in2;
    wire cin;
    
    assign sum = in1 + in2 + cin;
    assign cout = (in1[3] & in2[3] & cin) | (in1[3] & cin) | (in2[3] & cin) | (cin & in1[3] & in2[3]);

endmodule"
41.23,195.95,0.1,31.0,1,"//Design a 4-bit adder.
//There are two 4 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The adder should utilize the inputs (in1 and in2) and the cin bit to determine the output sum and cout.
//Please finish the module.

module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);

wire c1, c2, c3;

full_adder FA1(sum[0], c1, in1[0], in2[0], cin);
full_adder FA2(sum[1], c2, in1[1], in2[1], c1);
full_adder FA3(sum[2], c3, in1[2], in2[2], c2);
full_adder FA4(sum[3], cout, in1[3], in2[3], c3);

endmodule

module full_adder(output sum, output cout, input in1, in2, cin);

wire x, y, z;

xor(sum, in1, in2, cin);
and(x, in1, in2);
and(y, in1, cin);
and(z, in2, cin);
or(cout, x, y, z);

endmodule"
41.23,195.95,0.1,32.0,1,"//Design a 4-bit adder.
//There are two 4 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The adder should utilize the inputs (in1 and in2) and the cin bit to determine the output sum and cout.
//Please finish the module.

module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);

wire [3:0] c;

assign c[0] = cin;

full_adder FA0(sum[0], c[1], in1[0], in2[0], c[0]);
full_adder FA1(sum[1], c[2], in1[1], in2[1], c[1]);
full_adder FA2(sum[2], c[3], in1[2], in2[2], c[2]);
full_adder FA3(sum[3], cout, in1[3], in2[3], c[3]);

endmodule

module full_adder(output sum, output cout, input in1, in2, cin);

wire x, y, z;

xor(sum, in1, in2, cin);
and(x, in1, in2);
and(y, in1, cin);
and(z, in2, cin);
or(cout, x, y, z);

endmodule"
41.23,195.95,0.1,33.0,1,"//Design a 4-bit adder.
//There are two 4 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The adder should utilize the inputs (in1 and in2) and the cin bit to determine the output sum and cout.
//Please finish the module.

module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);

	wire c1, c2, c3;

	full_adder FA1(sum[0], c1, in1[0], in2[0], cin);
	full_adder FA2(sum[1], c2, in1[1], in2[1], c1);
	full_adder FA3(sum[2], c3, in1[2], in2[2], c2);
	full_adder FA4(sum[3], cout, in1[3], in2[3], c3);

endmodule

module full_adder(output sum, output cout, input in1, in2, cin);

	wire x, y, z;

	xor(sum, in1, in2, cin);
	and(x, in1, in2);
	and(y, in1, cin);
	and(z, in2, cin);
	or(cout, x, y, z);

endmodule"
41.23,195.95,0.1,34.0,1,"//Design a 4-bit adder.
//There are two 4 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The adder should utilize the inputs (in1 and in2) and the cin bit to determine the output sum and cout.
//Please finish the module.

module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);

wire c1, c2, c3;

full_adder FA1(sum[0], c1, in1[0], in2[0], cin);
full_adder FA2(sum[1], c2, in1[1], in2[1], c1);
full_adder FA3(sum[2], c3, in1[2], in2[2], c2);
full_adder FA4(sum[3], cout, in1[3], in2[3], c3);

endmodule

module full_adder(output sum, output cout, input in1, in2, cin);

wire x, y, z;

xor(sum, in1, in2, cin);
and(x, in1, in2);
and(y, in1, cin);
and(z, in2, cin);
or(cout, x, y, z);

endmodule"
N/A,N/A,-0.1,35.0,1,"//Design a 4-bit adder.
//There are two 4 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The adder should utilize the inputs (in1 and in2) and the cin bit to determine the output sum and cout.
//Please finish the module.

module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);

	wire [3:0] sum;
	wire cout;
	wire [3:0] in1;
	wire [3:0] in2;
	wire cin;

	assign sum = in1 + in2 + cin;
	assign cout = (in1[3] & in2[3] & cin) | (in1[3] & cin) | (in2[3] & cin) | (cin & in1[3] & in2[3]);

endmodule"
41.23,196.03,0.09959173258484291,36.0,1,"//Design a 4-bit adder.
//There are two 4 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The adder should utilize the inputs (in1 and in2) and the cin bit to determine the output sum and cout.
//Please finish the module.

module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);

wire [4:0] carry;

fa_adder fa_adder_0(sum[0], carry[0], in1[0], in2[0], cin);
fa_adder fa_adder_1(sum[1], carry[1], in1[1], in2[1], carry[0]);
fa_adder fa_adder_2(sum[2], carry[2], in1[2], in2[2], carry[1]);
fa_adder fa_adder_3(sum[3], cout, in1[3], in2[3], carry[2]);

endmodule

module fa_adder(output sum, carry, input a, b, cin);

wire c1, c2, c3;

xor(sum, a, b, cin);
and(c1, a, b);
and(c2, b, cin);
and(c3, a, cin);
or(carry, c1, c2, c3);

endmodule"
41.23,195.95,0.1,37.0,1,"//Design a 4-bit adder.
//There are two 4 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The adder should utilize the inputs (in1 and in2) and the cin bit to determine the output sum and cout.
//Please finish the module.

module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);

wire c1, c2, c3;

full_adder FA1(sum[0], c1, in1[0], in2[0], cin);
full_adder FA2(sum[1], c2, in1[1], in2[1], c1);
full_adder FA3(sum[2], c3, in1[2], in2[2], c2);
full_adder FA4(sum[3], cout, in1[3], in2[3], c3);

endmodule

module full_adder(output sum, output cout, input in1, in2, cin);

wire x, y, z;

xor(sum, in1, in2, cin);
and(x, in1, in2);
and(y, in1, cin);
and(z, in2, cin);
or(cout, x, y, z);

endmodule"
41.23,196.03,0.09959173258484291,38.0,1,"//Design a 4-bit adder.
//There are two 4 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The adder should utilize the inputs (in1 and in2) and the cin bit to determine the output sum and cout.
//Please finish the module.

module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);

wire c1,c2,c3;

full_adder FA1(sum[0],c1,in1[0],in2[0],cin);
full_adder FA2(sum[1],c2,in1[1],in2[1],c1);
full_adder FA3(sum[2],c3,in1[2],in2[2],c2);
full_adder FA4(sum[3],cout,in1[3],in2[3],c3);

endmodule

module full_adder(output sum,carry,input a,b,cin);

wire x,y,z;

xor(sum,a,b,cin);
and(x,a,b);
and(y,b,cin);
and(z,a,cin);
or(carry,x,y,z);

endmodule"
41.23,195.95,0.1,39.0,1,"//Design a 4-bit adder.
//There are two 4 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The adder should utilize the inputs (in1 and in2) and the cin bit to determine the output sum and cout.
//Please finish the module.

module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);
wire c1, c2, c3;

full_adder FA1(sum[0], c1, in1[0], in2[0], cin);
full_adder FA2(sum[1], c2, in1[1], in2[1], c1);
full_adder FA3(sum[2], c3, in1[2], in2[2], c2);
full_adder FA4(sum[3], cout, in1[3], in2[3], c3);

endmodule

module full_adder(output sum, output cout, input in1, in2, cin);
wire x, y, z;

xor(sum, in1, in2, cin);
and(x, in1, in2);
and(y, in1, cin);
and(z, in2, cin);
or(cout, x, y, z);

endmodule"
N/A,N/A,-0.1,40.0,1,"//Design a 4-bit adder.
//There are two 4 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The adder should utilize the inputs (in1 and in2) and the cin bit to determine the output sum and cout.
//Please finish the module.

module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);

wire [3:0] sum;
wire cout;

wire [3:0] in1;
wire [3:0] in2;
wire cin;

assign sum = in1 + in2 + cin;
assign cout = (in1[3] == in2[3] && (in1[3] == cin))? 1'b1 : 1'b0;

endmodule"
38.304,198.83,0.15731317238597722,41.0,1,"//Design a 4-bit adder.
//There are two 4 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The adder should utilize the inputs (in1 and in2) and the cin bit to determine the output sum and cout.
//Please finish the module.

module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);

assign {cout, sum} = in1 + in2 + cin;

endmodule"
N/A,N/A,-0.1,42.0,1,"//Design a 4-bit adder.
//There are two 4 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The adder should utilize the inputs (in1 and in2) and the cin bit to determine the output sum and cout.
//Please finish the module.

module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);

wire c1, c2;

full_adder FA1(sum[0], c1, in1[0], in2[0], cin);
full_adder FA2(sum[1], c2, in1[1], in2[1], c1);
full_adder FA3(sum[2], cout, in1[2], in2[2], c2);

endmodule

module full_adder(output sum, output cout, input in1, in2, cin);

wire x, y, z;

xor(sum, in1, in2, cin);
and(x, in1, in2);
and(y, in1, cin);
and(z, in2, cin);
or(cout, x, y, z);

endmodule"
N/A,N/A,-0.1,43.0,1,"//Design a 4-bit adder.
//There are two 4 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The adder should utilize the inputs (in1 and in2) and the cin bit to determine the output sum and cout.
//Please finish the module.

module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);

  wire [3:0] sum;
  wire cout;
  wire [3:0] in1;
  wire [3:0] in2;
  wire cin;

  assign sum = in1 + in2 + cin;
  assign cout = (in1[3] & in2[3] & cin) | (in1[3] & cin) | (in2[3] & cin) | (cin & in1[3] & in2[3]);

endmodule"
41.23,196.03,0.09959173258484291,44.0,1,"//Design a 4-bit adder.
//There are two 4 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The adder should utilize the inputs (in1 and in2) and the cin bit to determine the output sum and cout.
//Please finish the module.

module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);

wire [3:0] carry;

fa_adder fa_adder_0(sum[0], carry[0], in1[0], in2[0], cin);
fa_adder fa_adder_1(sum[1], carry[1], in1[1], in2[1], carry[0]);
fa_adder fa_adder_2(sum[2], carry[2], in1[2], in2[2], carry[1]);
fa_adder fa_adder_3(sum[3], cout, in1[3], in2[3], carry[2]);

endmodule

module fa_adder(output sum, carry, input a, b, cin);

wire c1, c2, c3;

xor(sum, a, b, cin);
and(c1, a, b);
and(c2, b, cin);
and(c3, a, cin);
or(carry, c1, c2, c3);

endmodule"
38.304,198.83,0.15731317238597722,45.0,1,"//Design a 4-bit adder.
//There are two 4 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The adder should utilize the inputs (in1 and in2) and the cin bit to determine the output sum and cout.
//Please finish the module.

module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);

assign {cout, sum} = in1 + in2 + cin;

endmodule"
41.23,195.95,0.1,46.0,1,"//Design a 4-bit adder.
//There are two 4 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The adder should utilize the inputs (in1 and in2) and the cin bit to determine the output sum and cout.
//Please finish the module.

module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);

wire c1, c2, c3;

full_adder FA1(sum[0], c1, in1[0], in2[0], cin);
full_adder FA2(sum[1], c2, in1[1], in2[1], c1);
full_adder FA3(sum[2], c3, in1[2], in2[2], c2);
full_adder FA4(sum[3], cout, in1[3], in2[3], c3);

endmodule

module full_adder(output sum, output cout, input in1, in2, cin);

wire x, y, z;

xor(sum, in1, in2, cin);
and(x, in1, in2);
and(y, in1, cin);
and(z, in2, cin);
or(cout, x, y, z);

endmodule"
N/A,N/A,-0.1,47.0,1,"//Design a 4-bit adder.
//There are two 4 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The adder should utilize the inputs (in1 and in2) and the cin bit to determine the output sum and cout.
//Please finish the module.

module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);
    wire [3:0] sum;
    wire cout;
    wire [3:0] in1;
    wire [3:0] in2;
    wire cin;
    
    assign sum = in1 + in2 + cin;
    assign cout = (in1[3] & in2[3] & cin) | (in1[3] & cin) | (in2[3] & cin) | (cin & in1[3] & in2[3]);

endmodule"
N/A,N/A,-0.1,48.0,1,"//Design a 4-bit adder.
//There are two 4 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The adder should utilize the inputs (in1 and in2) and the cin bit to determine the output sum and cout.
//Please finish the module.

module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);

wire [3:0] in1_w, in2_w;
wire cin_w;

assign in1_w = in1;
assign in2_w = in2;
assign cin_w = cin;

full_adder FA0(sum[0], cin_w, in1_w[0], in2_w[0], cin_w);
full_adder FA1(sum[1], cin_w, in1_w[1], in2_w[1], cin_w);
full_adder FA2(sum[2], cin_w, in1_w[2], in2_w[2], cin_w);
full_adder FA3(sum[3], cout, in1_w[3], in2_w[3], cin_w);

endmodule

module full_adder(output sum, output cout, input in1, in2, cin);

wire x, y, z;

xor(sum, in1, in2, cin);
and(x, in1, in2);
and(y, in1, cin);
and(z, in2, cin);
or(cout, x, y, z);

endmodule"
N/A,N/A,-0.1,49.0,1,"//Design a 4-bit adder.
//There are two 4 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The adder should utilize the inputs (in1 and in2) and the cin bit to determine the output sum and cout.
//Please finish the module.

module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);   

	wire [3:0] sum;
	wire cout;
	wire [3:0] in1;
	wire [3:0] in2;
	wire cin;

	assign sum = in1 + in2 + cin;
	assign cout = (in1[3] & in2[3] & cin) | (in1[3] & cin) | (in2[3] & cin) | (cin & in1[3] & in2[3]);

endmodule"
41.23,195.95,0.1,50.0,1,"//Design a 4-bit adder.
//There are two 4 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The adder should utilize the inputs (in1 and in2) and the cin bit to determine the output sum and cout.
//Please finish the module.

module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);

	wire c1, c2, c3;

	full_adder FA1(sum[0], c1, in1[0], in2[0], cin);
	full_adder FA2(sum[1], c2, in1[1], in2[1], c1);
	full_adder FA3(sum[2], c3, in1[2], in2[2], c2);
	full_adder FA4(sum[3], cout, in1[3], in2[3], c3);

endmodule

module full_adder(output sum, output cout, input in1, in2, cin);

	wire x, y, z;

	xor(sum, in1, in2, cin);
	and(x, in1, in2);
	and(y, in1, cin);
	and(z, in2, cin);
	or(cout, x, y, z);

endmodule"
N/A,N/A,-0.1,51.0,1,"//Design a 4-bit adder.
//There are two 4 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The adder should utilize the inputs (in1 and in2) and the cin bit to determine the output sum and cout.
//Please finish the module.

module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);

	wire [3:0] sum;
	wire cout;
	wire [3:0] in1;
	wire [3:0] in2;
	wire cin;

	assign sum = in1 + in2 + cin;
	assign cout = (in1[3] & in2[3] & cin) | (in1[3] & cin) | (in2[3] & cin) | (cin & in1[3] & in2[3]);

endmodule"
41.23,195.95,0.1,52.0,1,"//Design a 4-bit adder.
//There are two 4 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The adder should utilize the inputs (in1 and in2) and the cin bit to determine the output sum and cout.
//Please finish the module.

module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);

wire c1, c2, c3;

full_adder FA1(sum[0], c1, in1[0], in2[0], cin);
full_adder FA2(sum[1], c2, in1[1], in2[1], c1);
full_adder FA3(sum[2], c3, in1[2], in2[2], c2);
full_adder FA4(sum[3], cout, in1[3], in2[3], c3);

endmodule

module full_adder(output sum, output cout, input in1, in2, cin);

wire x, y, z;

xor(sum, in1, in2, cin);
and(x, in1, in2);
and(y, in1, cin);
and(z, in2, cin);
or(cout, x, y, z);

endmodule"
38.304,198.83,0.15731317238597722,53.0,1,"//Design a 4-bit adder.
//There are two 4 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The adder should utilize the inputs (in1 and in2) and the cin bit to determine the output sum and cout.
//Please finish the module.

module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);

assign {cout, sum} = in1 + in2 + cin;

endmodule"
41.23,195.95,0.1,54.0,1,"//Design a 4-bit adder.
//There are two 4 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The adder should utilize the inputs (in1 and in2) and the cin bit to determine the output sum and cout.
//Please finish the module.

module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);

wire c1, c2, c3;

full_adder FA1(sum[0], c1, in1[0], in2[0], cin);
full_adder FA2(sum[1], c2, in1[1], in2[1], c1);
full_adder FA3(sum[2], c3, in1[2], in2[2], c2);
full_adder FA4(sum[3], cout, in1[3], in2[3], c3);

endmodule

module full_adder(output sum, output cout, input in1, in2, cin);

wire x, y, z;

xor(sum, in1, in2, cin);
and(x, in1, in2);
and(y, in1, cin);
and(z, in2, cin);
or(cout, x, y, z);

endmodule"
N/A,N/A,-0.1,55.0,1,"//Design a 4-bit adder.
//There are two 4 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The adder should utilize the inputs (in1 and in2) and the cin bit to determine the output sum and cout.
//Please finish the module.

module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);

endmodule"
41.23,195.95,0.1,56.0,1,"//Design a 4-bit adder.
//There are two 4 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The adder should utilize the inputs (in1 and in2) and the cin bit to determine the output sum and cout.
//Please finish the module.

module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);
	
	wire [3:0] c;
	
	full_adder FA1(sum[0], c[0], in1[0], in2[0], cin);
	full_adder FA2(sum[1], c[1], in1[1], in2[1], c[0]);
	full_adder FA3(sum[2], c[2], in1[2], in2[2], c[1]);
	full_adder FA4(sum[3], cout, in1[3], in2[3], c[2]);

endmodule

module full_adder(output sum, output cout, input in1, in2, cin);
	
	wire x, y, z;
	
	xor(sum, in1, in2, cin);
	and(x, in1, in2);
	and(y, in1, cin);
	and(z, in2, cin);
	or(cout, x, y, z);

endmodule"
41.23,195.95,0.1,57.0,1,"//Design a 4-bit adder.
//There are two 4 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The adder should utilize the inputs (in1 and in2) and the cin bit to determine the output sum and cout.
//Please finish the module.

module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);
wire c1, c2, c3;

full_adder FA1(sum[0], c1, in1[0], in2[0], cin);
full_adder FA2(sum[1], c2, in1[1], in2[1], c1);
full_adder FA3(sum[2], c3, in1[2], in2[2], c2);
full_adder FA4(sum[3], cout, in1[3], in2[3], c3);

endmodule

module full_adder(output sum, output cout, input in1, in2, cin);
wire x, y, z;

xor(sum, in1, in2, cin);
and(x, in1, in2);
and(y, in1, cin);
and(z, in2, cin);
or(cout, x, y, z);

endmodule"
N/A,N/A,-1,58.0,1,"//Design a 4-bit adder.
//There are two 4 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The adder should utilize the inputs (in1 and in2) and the cin bit to determine the output sum and cout.
//Please finish the module.

module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);

    wire [3:0] sum;
    wire cout;
    wire [3:0] in1;
    wire [3:0] in2;
    wire cin;

    wire [3:0] temp1;
    wire [3:0] temp2;
    wire [3:0] temp3;
    wire [3:0] temp4;
    wire [3:0] temp5;
    wire [3:0] temp6;
    wire [3:0] temp7;
    wire [3:0] temp8;
    wire [3:0] temp9;
    wire [3:0] temp10;
    wire [3:0] temp11;
    wire [3:0] temp12;
    wire [3:0] temp13;
    wire [3:0] temp14;
    wire [3:0] temp15;
    wire [3:0] temp16;
    wire [3:0] temp17;
    wire [3:0] temp18;
    wire [3:0] temp19;
    wire [3:0] temp20;
    wire [3:0] temp21;
    wire [3:0] temp22;
    wire [3:0] temp23;
    wire [3:0] temp24;
    wire [3:0] temp25;
    wire [3:0] temp26;
    wire [3:0] temp27;
    wire [3:0] temp28;
    wire [3:0] temp29;
    wire [3:0] temp30;
    wire [3:0] temp31;
    wire [3:0] temp32;
    wire [3:0] temp33;
    wire [3:0] temp34;
    wire [3:0] temp35;
    wire [3:0] temp36;
    wire [3:0] temp37;
    wire [3:0] temp38;
    wire [3:0] temp39;
    wire [3:0] temp40;
    wire [3:0] temp41;
    wire [3:0] temp42;
    wire [3:0] temp43;
    wire [3:0] temp44;
    wire [3:0] temp45;
    wire [3:0] temp46;
    wire [3:0] temp47;
    wire [3:0] temp48;
    wire [3:0] temp49;
    wire [3:0] temp50;
    wire [3:0] temp51;
    wire [3:0] temp52;
    wire [3:0] temp53;
    wire [3:0] temp54;
    wire [3:0] temp55;
    wire [3:0] temp56;
    wire [3:0] temp57;
    wire [3:0] temp58;
    wire [3:0] temp59;
    wire [3:0] temp60;
    wire [3:0] temp61;
    wire [3:0] temp62;
    wire [3:0] temp63;
    wire [3:0] temp64;
    wire [3:0] temp65;
    wire [3:0] temp66;
    wire [3:0] temp67;
    wire [3:0] temp68;
    wire [3:0] temp69;
    wire [3:0] temp70;
    wire [3:0] temp71;
    wire [3:0] temp72;
    wire [3:0] temp73;
    wire [3:0] temp74;
    wire [3:0] temp75;
    wire [3:0] temp76;
    wire [3:0] temp77;
    wire [3:0] temp78;
    wire [3:0] temp79;
    wire [3:0] temp80;
    wire [3:0] temp81;
    wire [3:0] temp82;
    wire [3:0] temp83;
    wire [3:0] temp84;
    wire [3:0] temp85;
    wire [3:0] temp86;
    wire [3:0] temp87;"
N/A,N/A,-1,59.0,1,"//Design a 4-bit adder.
//There are two 4 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The adder should utilize the inputs (in1 and in2) and the cin bit to determine the output sum and cout.
//Please finish the module.

module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);
	wire [3:0] carry;
	
	fa_adder fa_adder_0(sum[0], carry[0], in1[0], in2[0], cin);
	fa_adder fa_adder_1(sum[1], carry[1], in1[1], in2[1], carry[0]);
	fa_adder fa_adder_2(sum[2], carry[2], in1[2], in2[2], carry[1]);
	fa_adder fa_adder_3(sum[3], cout, in1[3], in2[3], carry[2]);
	
endmodule

module fa_adder(output sum, carry, input a, b, cin);
	wire [3:0] carry_temp;
	
	fa_adder fa_adder_0(sum[0], carry_temp[0], a, b, cin);
	fa_adder fa_adder_1(sum[1], carry_temp[1], carry_temp[0], a, b);
	fa_adder fa_adder_2(sum[2], carry_temp[2], carry_temp[1], carry_temp[0], a);
	fa_adder fa_adder_3(sum[3], carry, carry_temp[2], carry_temp[1], carry_temp[0]);
	
endmodule"
41.23,196.03,0.09959173258484291,60.0,1,"//Design a 4-bit adder.
//There are two 4 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The adder should utilize the inputs (in1 and in2) and the cin bit to determine the output sum and cout.
//Please finish the module.

module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);   

wire c1, c2, c3;

full_adder FA1(sum[0], c1, in1[0], in2[0], cin);
full_adder FA2(sum[1], c2, in1[1], in2[1], c1);
full_adder FA3(sum[2], c3, in1[2], in2[2], c2);
full_adder FA4(sum[3], cout, in1[3], in2[3], c3);

endmodule

module full_adder(output sum, carry, input a, b, cin);

wire x, y, z;

xor(sum, a, b, cin);
and(x, a, b);
and(y, b, cin);
and(z, a, cin);
or(carry, x, y, z);

endmodule"
N/A,N/A,-0.1,61.0,1,"//Design a 4-bit adder.
//There are two 4 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The adder should utilize the inputs (in1 and in2) and the cin bit to determine the output sum and cout.
//Please finish the module.

module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);   
    wire [3:0] sum;
    wire cout;
    wire [3:0] in1;
    wire [3:0] in2;
    wire cin;
    
    assign sum = in1 + in2 + cin;
    assign cout = (in1[3] & in2[3] & cin) | (in1[3] & cin) | (in2[3] & cin) | (cin & in1[3] & in2[3]);

endmodule"
41.23,195.95,0.1,62.0,1,"//Design a 4-bit adder.
//There are two 4 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The adder should utilize the inputs (in1 and in2) and the cin bit to determine the output sum and cout.
//Please finish the module.

module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);

wire [3:0] c;

assign c[0] = cin;

full_adder FA0(sum[0], c[1], in1[0], in2[0], c[0]);
full_adder FA1(sum[1], c[2], in1[1], in2[1], c[1]);
full_adder FA2(sum[2], c[3], in1[2], in2[2], c[2]);
full_adder FA3(sum[3], cout, in1[3], in2[3], c[3]);

endmodule

module full_adder(output sum, output cout, input in1, in2, cin);

wire x, y, z;

xor(sum, in1, in2, cin);
and(x, in1, in2);
and(y, in1, cin);
and(z, in2, cin);
or(cout, x, y, z);

endmodule"
41.23,195.95,0.1,63.0,1,"//Design a 4-bit adder.
//There are two 4 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The adder should utilize the inputs (in1 and in2) and the cin bit to determine the output sum and cout.
//Please finish the module.

module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);

wire c1;
wire c2;
wire c3;

full_adder FA1(sum[0], c1, in1[0], in2[0], cin);
full_adder FA2(sum[1], c2, in1[1], in2[1], c1);
full_adder FA3(sum[2], c3, in1[2], in2[2], c2);
full_adder FA4(sum[3], cout, in1[3], in2[3], c3);

endmodule

module full_adder(output sum, output cout, input in1, in2, cin);

wire x;
wire y;
wire z;

xor(sum, in1, in2, cin);
and(x, in1, in2);
and(y, in1, cin);
and(z, in2, cin);
or(cout, x, y, z);

endmodule"
41.23,195.95,0.1,64.0,1,"//Design a 4-bit adder.
//There are two 4 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The adder should utilize the inputs (in1 and in2) and the cin bit to determine the output sum and cout.
//Please finish the module.

module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);

wire c1, c2, c3;

full_adder FA1(sum[0], c1, in1[0], in2[0], cin);
full_adder FA2(sum[1], c2, in1[1], in2[1], c1);
full_adder FA3(sum[2], c3, in1[2], in2[2], c2);
full_adder FA4(sum[3], cout, in1[3], in2[3], c3);

endmodule

module full_adder(output sum, output cout, input in1, in2, cin);

wire x, y, z;

xor(sum, in1, in2, cin);
and(x, in1, in2);
and(y, in1, cin);
and(z, in2, cin);
or(cout, x, y, z);

endmodule"
N/A,N/A,-0.1,65.0,1,"//Design a 4-bit adder.
//There are two 4 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The adder should utilize the inputs (in1 and in2) and the cin bit to determine the output sum and cout.
//Please finish the module.

module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);

assign sum = in1 + in2 + cin;
assign cout = (in1[3] & in2[3] & cin) | (in1[3] & cin) | (in2[3] & cin) | (cin & in1[3] & in2[3]);

endmodule"
41.23,196.03,0.09959173258484291,66.0,1,"//Design a 4-bit adder.
//There are two 4 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The adder should utilize the inputs (in1 and in2) and the cin bit to determine the output sum and cout.
//Please finish the module.

module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);

wire [3:0] carry;

fa_adder fa_adder_0(sum[0], carry[0], in1[0], in2[0], cin);
fa_adder fa_adder_1(sum[1], carry[1], in1[1], in2[1], carry[0]);
fa_adder fa_adder_2(sum[2], carry[2], in1[2], in2[2], carry[1]);
fa_adder fa_adder_3(sum[3], cout, in1[3], in2[3], carry[2]);

endmodule

module fa_adder(output sum, carry, input a, b, cin);

wire c1, c2, c3;

xor(sum, a, b, cin);
and(c1, a, b);
and(c2, b, cin);
and(c3, a, cin);
or(carry, c1, c2, c3);

endmodule"
41.23,196.03,0.09959173258484291,67.0,1,"//Design a 4-bit adder.
//There are two 4 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The adder should utilize the inputs (in1 and in2) and the cin bit to determine the output sum and cout.
//Please finish the module.

module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);

wire c1,c2,c3;

full_adder FA1(sum[0],c1,in1[0],in2[0],cin);
full_adder FA2(sum[1],c2,in1[1],in2[1],c1);
full_adder FA3(sum[2],c3,in1[2],in2[2],c2);
full_adder FA4(sum[3],cout,in1[3],in2[3],c3);

endmodule

module full_adder(output sum,carry,input a,b,cin);

wire x,y,z;

xor(sum,a,b,cin);
and(x,a,b);
and(y,b,cin);
and(z,a,cin);
or(carry,x,y,z);

endmodule"
41.23,196.03,0.09959173258484291,68.0,1,"//Design a 4-bit adder.
//There are two 4 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The adder should utilize the inputs (in1 and in2) and the cin bit to determine the output sum and cout.
//Please finish the module.

module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);

wire [4:0] carry;

fa_adder fa_adder_0(sum[0], carry[0], in1[0], in2[0], cin);
fa_adder fa_adder_1(sum[1], carry[1], in1[1], in2[1], carry[0]);
fa_adder fa_adder_2(sum[2], carry[2], in1[2], in2[2], carry[1]);
fa_adder fa_adder_3(sum[3], cout, in1[3], in2[3], carry[2]);

endmodule

module fa_adder(output sum, carry, input a, b, cin);

wire c1, c2, c3;

xor(sum, a, b, cin);
and(c1, a, b);
and(c2, b, cin);
and(c3, a, cin);
or(carry, c1, c2, c3);

endmodule"
41.23,195.95,0.1,69.0,1,"//Design a 4-bit adder.
//There are two 4 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The adder should utilize the inputs (in1 and in2) and the cin bit to determine the output sum and cout.
//Please finish the module.

module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);
    wire c1, c2, c3;
    
    full_adder FA1(sum[0], c1, in1[0], in2[0], cin);
    full_adder FA2(sum[1], c2, in1[1], in2[1], c1);
    full_adder FA3(sum[2], c3, in1[2], in2[2], c2);
    full_adder FA4(sum[3], cout, in1[3], in2[3], c3);

endmodule

module full_adder(output sum, output cout, input in1, in2, cin);
    wire x, y, z;
    
    xor(sum, in1, in2, cin);
    and(x, in1, in2);
    and(y, in1, cin);
    and(z, in2, cin);
    or(cout, x, y, z);

endmodule"
N/A,N/A,-0.1,70.0,1,"//Design a 4-bit adder.
//There are two 4 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The adder should utilize the inputs (in1 and in2) and the cin bit to determine the output sum and cout.
//Please finish the module.

module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);

reg [3:0] sum;
reg cout;

always @(in1 or in2 or cin)
begin
	sum = in1 + in2 + cin;
	cout = (in1[0] & in2[0] & cin) | (in1[0] & in2[0] & ~cin) | (in1[0] & ~cin & ~in2[0]) | (~in1[0] & ~in2[0] & cin);
end

endmodule"
41.23,195.95,0.1,71.0,1,"//Design a 4-bit adder.
//There are two 4 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The adder should utilize the inputs (in1 and in2) and the cin bit to determine the output sum and cout.
//Please finish the module.

module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin); 

wire c1, c2, c3;

full_adder FA1(sum[0], c1, in1[0], in2[0], cin);
full_adder FA2(sum[1], c2, in1[1], in2[1], c1);
full_adder FA3(sum[2], c3, in1[2], in2[2], c2);
full_adder FA4(sum[3], cout, in1[3], in2[3], c3);

endmodule

module full_adder(output sum, output cout, input in1, in2, cin);

wire x, y, z;

xor(sum, in1, in2, cin);
and(x, in1, in2);
and(y, in1, cin);
and(z, in2, cin);
or(cout, x, y, z);

endmodule"
N/A,N/A,-0.1,72.0,1,"//Design a 4-bit adder.
//There are two 4 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The adder should utilize the inputs (in1 and in2) and the cin bit to determine the output sum and cout.
//Please finish the module.

module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);   

	wire [3:0] sum;
	wire cout;
	wire [3:0] in1;
	wire [3:0] in2;
	wire cin;

	assign sum = in1 + in2 + cin;
	assign cout = (in1[3] & in2[3] & cin) | (in1[3] & cin) | (in2[3] & cin) | (cin & in1[3] & in2[3]);

endmodule"
N/A,N/A,-0.1,73.0,1,"//Design a 4-bit adder.
//There are two 4 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The adder should utilize the inputs (in1 and in2) and the cin bit to determine the output sum and cout.
//Please finish the module.

module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);
wire [3:0] in1_w, in2_w;
wire cin_w;

assign in1_w = in1;
assign in2_w = in2;
assign cin_w = cin;

full_adder FA1(sum[0], in1_w[0], in2_w[0], cin_w, cout_w);
full_adder FA2(sum[1], in1_w[1], in2_w[1], cout_w, cout_w);
full_adder FA3(sum[2], in1_w[2], in2_w[2], cout_w, cout_w);
full_adder FA4(sum[3], in1_w[3], in2_w[3], cout_w, cout_w);

endmodule

module full_adder(output sum, output cout, input in1, in2, input cin);
wire w1, w2, w3;

xor(w1, in1, in2);
xor(sum, w1, cin);
and(w2, w1, cin);
and(w3, in1, in2);
or(cout, w2, w3);

endmodule"
N/A,N/A,-0.1,74.0,1,"//Design a 4-bit adder.
//There are two 4 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The adder should utilize the inputs (in1 and in2) and the cin bit to determine the output sum and cout.
//Please finish the module.

module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);
  wire [3:0] in1;
  wire [3:0] in2;
  wire cin;
  wire [3:0] sum;
  wire cout;
  
  assign in1 = in1;
  assign in2 = in2;
  assign cin = cin;
  assign sum = sum;
  assign cout = cout;
  
endmodule"
41.23,195.95,0.1,75.0,1,"//Design a 4-bit adder.
//There are two 4 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The adder should utilize the inputs (in1 and in2) and the cin bit to determine the output sum and cout.
//Please finish the module.

module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin); 

wire c1, c2, c3;

full_adder FA1(sum[0], c1, in1[0], in2[0], cin);
full_adder FA2(sum[1], c2, in1[1], in2[1], c1);
full_adder FA3(sum[2], c3, in1[2], in2[2], c2);
full_adder FA4(sum[3], cout, in1[3], in2[3], c3);

endmodule

module full_adder(output sum, output cout, input in1, in2, cin);

wire x, y, z;

xor(sum, in1, in2, cin);
and(x, in1, in2);
and(y, in1, cin);
and(z, in2, cin);
or(cout, x, y, z);

endmodule"
41.23,195.95,0.1,76.0,1,"//Design a 4-bit adder.
//There are two 4 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The adder should utilize the inputs (in1 and in2) and the cin bit to determine the output sum and cout.
//Please finish the module.

module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);

wire c1, c2, c3;

full_adder FA1(sum[0], c1, in1[0], in2[0], cin);
full_adder FA2(sum[1], c2, in1[1], in2[1], c1);
full_adder FA3(sum[2], c3, in1[2], in2[2], c2);
full_adder FA4(sum[3], cout, in1[3], in2[3], c3);

endmodule

module full_adder(output sum, output cout, input in1, in2, cin);

wire x, y, z;

xor(sum, in1, in2, cin);
and(x, in1, in2);
and(y, in1, cin);
and(z, in2, cin);
or(cout, x, y, z);

endmodule"
N/A,N/A,-0.1,77.0,1,"//Design a 4-bit adder.
//There are two 4 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The adder should utilize the inputs (in1 and in2) and the cin bit to determine the output sum and cout.
//Please finish the module.

module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);

wire [3:0] temp1;
wire [3:0] temp2;
wire [3:0] temp3;
wire [3:0] temp4;
wire [3:0] temp5;
wire [3:0] temp6;
wire [3:0] temp7;
wire [3:0] temp8;

assign temp1 = in1 ^ in2;
assign temp2 = in1 & in2;
assign temp3 = in1 | in2;
assign temp4 = in1 ^ in2;

assign temp5 = temp1 ^ temp2;
assign temp6 = temp1 & temp2;
assign temp7 = temp1 | temp2;
assign temp8 = temp1 ^ temp2;

assign sum = temp1 ^ temp3;
assign cout = temp4 ^ temp5 ^ temp6 ^ temp7;

endmodule"
N/A,N/A,-0.1,78.0,1,"//Design a 4-bit adder.
//There are two 4 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The adder should utilize the inputs (in1 and in2) and the cin bit to determine the output sum and cout.
//Please finish the module.

module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);
    wire [3:0] sum;
    wire cout;
    wire [3:0] in1;
    wire [3:0] in2;
    wire cin;
    
    assign sum = in1 + in2 + cin;
    assign cout = (in1[3] & in2[3] & cin) | (in1[3] & cin) | (in2[3] & cin) | (cin & in1[3] & in2[3]);

endmodule"
41.23,195.95,0.1,79.0,1,"//Design a 4-bit adder.
//There are two 4 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The adder should utilize the inputs (in1 and in2) and the cin bit to determine the output sum and cout.
//Please finish the module.

module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin); 

wire c1, c2, c3;

full_adder FA1(sum[0], c1, in1[0], in2[0], cin);
full_adder FA2(sum[1], c2, in1[1], in2[1], c1);
full_adder FA3(sum[2], c3, in1[2], in2[2], c2);
full_adder FA4(sum[3], cout, in1[3], in2[3], c3);

endmodule

module full_adder(output sum, output cout, input in1, in2, cin);

wire x, y, z;

xor(sum, in1, in2, cin);
and(x, in1, in2);
and(y, in1, cin);
and(z, in2, cin);
or(cout, x, y, z);

endmodule"
N/A,N/A,-0.1,80.0,1,"//Design a 4-bit adder.
//There are two 4 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The adder should utilize the inputs (in1 and in2) and the cin bit to determine the output sum and cout.
//Please finish the module.

module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin); 

	wire [3:0] sum;
	wire cout;
	wire [3:0] in1;
	wire [3:0] in2;
	wire cin;

	assign sum = in1 + in2 + cin;
	assign cout = (in1[3] & in2[3] & cin) | (in1[3] & cin) | (in2[3] & cin) | (cin & in1[3] & in2[3]);

endmodule"
N/A,N/A,-0.1,81.0,1,"//Design a 4-bit adder.
//There are two 4 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The adder should utilize the inputs (in1 and in2) and the cin bit to determine the output sum and cout.
//Please finish the module.

module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);

wire c1, c2;

full_adder FA1(sum[0], c1, in1[0], in2[0], cin);
full_adder FA2(sum[1], c2, in1[1], in2[1], c1);
full_adder FA3(sum[2], cout, in1[2], in2[2], c2);

endmodule

module full_adder(output sum, output cout, input in1, in2, cin);

wire x, y, z;

xor(sum, in1, in2, cin);
and(x, in1, in2);
and(y, in1, cin);
and(z, in2, cin);
or(cout, x, y, z);

endmodule"
41.23,196.03,0.09959173258484291,82.0,1,"//Design a 4-bit adder.
//There are two 4 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The adder should utilize the inputs (in1 and in2) and the cin bit to determine the output sum and cout.
//Please finish the module.

module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);   

wire c1, c2, c3;

full_adder FA1(sum[0], c1, in1[0], in2[0], cin);
full_adder FA2(sum[1], c2, in1[1], in2[1], c1);
full_adder FA3(sum[2], c3, in1[2], in2[2], c2);
full_adder FA4(sum[3], cout, in1[3], in2[3], c3);

endmodule

module full_adder(output sum, carry, input a, b, cin);

wire x, y, z;

xor(sum, a, b, cin);
and(x, a, b);
and(y, b, cin);
and(z, a, cin);
or(carry, x, y, z);

endmodule"
41.23,195.95,0.1,83.0,1,"//Design a 4-bit adder.
//There are two 4 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The adder should utilize the inputs (in1 and in2) and the cin bit to determine the output sum and cout.
//Please finish the module.

module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);   

wire [3:0] c;

assign c[0] = cin;

full_adder FA0(sum[0], c[1], in1[0], in2[0], c[0]);
full_adder FA1(sum[1], c[2], in1[1], in2[1], c[1]);
full_adder FA2(sum[2], c[3], in1[2], in2[2], c[2]);
full_adder FA3(sum[3], cout, in1[3], in2[3], c[3]);

endmodule

module full_adder(output sum, output cout, input in1, in2, cin);

wire x, y, z;

xor(sum, in1, in2, cin);
and(x, in1, in2);
and(y, in1, cin);
and(z, in2, cin);
or(cout, x, y, z);

endmodule"
N/A,N/A,-0.1,84.0,1,"//Design a 4-bit adder.
//There are two 4 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The adder should utilize the inputs (in1 and in2) and the cin bit to determine the output sum and cout.
//Please finish the module.

module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);   
   wire [3:0] sum;
   wire [3:0] in1;
   wire [3:0] in2;
   wire cin;
   wire cout;
   
   assign sum = in1 + in2 + cin;
   assign cout = (in1[0] & in2[0] & cin) | (in1[1] & in2[1] & cin) | (in1[2] & in2[2] & cin) | (in1[3] & in2[3] & cin);
endmodule"
N/A,N/A,-0.1,85.0,1,"//Design a 4-bit adder.
//There are two 4 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The adder should utilize the inputs (in1 and in2) and the cin bit to determine the output sum and cout.
//Please finish the module.

module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);

wire [3:0] c1, c2;

full_adder FA1(sum[0], c1[0], in1[0], in2[0], cin);
full_adder FA2(sum[1], c1[1], in1[1], in2[1], c1[0]);
full_adder FA3(sum[2], c1[2], in1[2], in2[2], c1[1]);
full_adder FA4(sum[3], c1[3], in1[3], in2[3], c1[2]);

full_adder FA5(cout, c2[0], in1[3], in2[3], c1[3]);
full_adder FA6(c2[1], cout, in1[2], in2[2], c2[0]);
full_adder FA7(c2[2], cout, in1[1], in2[1], c2[1]);
full_adder FA8(c2[3], cout, in1[0], in2[0], c2[2]);

endmodule

module full_adder(output sum, output cout, input in1, in2, cin);

wire x, y, z;

xor(sum, in1, in2, cin);
and(x, in1, in2);
and(y, in1, cin);
and(z, in2, cin);
or(cout, x, y, z);

endmodule"
41.23,195.95,0.1,86.0,1,"//Design a 4-bit adder.
//There are two 4 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The adder should utilize the inputs (in1 and in2) and the cin bit to determine the output sum and cout.
//Please finish the module.

module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);

wire c1, c2, c3;

full_adder FA1(sum[0], c1, in1[0], in2[0], cin);
full_adder FA2(sum[1], c2, in1[1], in2[1], c1);
full_adder FA3(sum[2], c3, in1[2], in2[2], c2);
full_adder FA4(sum[3], cout, in1[3], in2[3], c3);

endmodule

module full_adder(output sum, output cout, input in1, in2, cin);

wire x, y, z;

xor(sum, in1, in2, cin);
and(x, in1, in2);
and(y, in1, cin);
and(z, in2, cin);
or(cout, x, y, z);

endmodule"
41.23,196.03,0.09959173258484291,87.0,1,"//Design a 4-bit adder.
//There are two 4 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The adder should utilize the inputs (in1 and in2) and the cin bit to determine the output sum and cout.
//Please finish the module.

module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);

wire c1, c2, c3;

fa fa1(sum[0], c1, in1[0], in2[0], cin);
fa fa2(sum[1], c2, in1[1], in2[1], c1);
fa fa3(sum[2], c3, in1[2], in2[2], c2);
fa fa4(sum[3], cout, in1[3], in2[3], c3);

endmodule

module fa(output sum, output cout, input a, b, cin);

wire c1, c2, c3;

xor(sum, a, b, cin);
and(c1, a, b);
and(c2, b, cin);
and(c3, a, cin);
or(cout, c1, c2, c3);

endmodule"
41.23,195.95,0.1,88.0,1,"//Design a 4-bit adder.
//There are two 4 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The adder should utilize the inputs (in1 and in2) and the cin bit to determine the output sum and cout.
//Please finish the module.

module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);

	wire c1, c2, c3;

	full_adder FA1(sum[0], c1, in1[0], in2[0], cin);
	full_adder FA2(sum[1], c2, in1[1], in2[1], c1);
	full_adder FA3(sum[2], c3, in1[2], in2[2], c2);
	full_adder FA4(sum[3], cout, in1[3], in2[3], c3);

endmodule

module full_adder(output sum, output cout, input in1, in2, cin);

	wire x, y, z;

	xor(sum, in1, in2, cin);
	and(x, in1, in2);
	and(y, in1, cin);
	and(z, in2, cin);
	or(cout, x, y, z);

endmodule"
N/A,N/A,-0.1,89.0,1,"//Design a 4-bit adder.
//There are two 4 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The adder should utilize the inputs (in1 and in2) and the cin bit to determine the output sum and cout.
//Please finish the module.

module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);

	wire [3:0] sum;
	wire cout;
	wire [3:0] in1;
	wire [3:0] in2;
	wire cin;

	assign sum = in1 + in2 + cin;
	assign cout = (in1[3] & in2[3] & cin) | (in1[3] & cin) | (in2[3] & cin) | (cin & in1[3] & in2[3]);

endmodule"
N/A,N/A,-0.1,90.0,1,"//Design a 4-bit adder.
//There are two 4 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The adder should utilize the inputs (in1 and in2) and the cin bit to determine the output sum and cout.
//Please finish the module.

module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);

wire w1, w2, w3;

xor(w1, in1[0], in2[0]);
xor(w2, in1[1], in2[1]);
xor(w3, in1[2], in2[2]);
xor(sum[0], w1, w2);
xor(w1, in1[3], in2[3]);
xor(w2, in1[3], in2[3]);
xor(w3, in1[3], cin);
xor(cout, w1, w2, w3);

endmodule"
41.23,196.03,0.09959173258484291,91.0,1,"//Design a 4-bit adder.
//There are two 4 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The adder should utilize the inputs (in1 and in2) and the cin bit to determine the output sum and cout.
//Please finish the module.

module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);

wire c1,c2,c3;

full_adder FA1(sum[0],c1,in1[0],in2[0],cin);
full_adder FA2(sum[1],c2,in1[1],in2[1],c1);
full_adder FA3(sum[2],c3,in1[2],in2[2],c2);
full_adder FA4(sum[3],cout,in1[3],in2[3],c3);

endmodule

module full_adder(output sum,carry,input a,b,cin);

wire x,y,z;

xor(sum,a,b,cin);
and(x,a,b);
and(y,b,cin);
and(z,a,cin);
or(carry,x,y,z);

endmodule"
N/A,N/A,-1,92.0,1,"//Design a 4-bit adder.
//There are two 4 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The adder should utilize the inputs (in1 and in2) and the cin bit to determine the output sum and cout.
//Please finish the module.

module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);

wire [2:0] carry;

fa_adder fa_adder_0(sum[0], carry[0], in1[0], in2[0], cin);
fa_adder fa_adder_1(sum[1], carry[1], in1[1], in2[1], carry[0]);
fa_adder fa_adder_2(sum[2], carry[2], in1[2], in2[2], carry[1]);
fa_adder fa_adder_3(sum[3], cout, in1[3], in2[3], carry[2]);

endmodule

module fa_adder(output sum, output cout, input in1, in2, input cin);

wire [3:0] carry;

fa_adder fa_adder_0(sum, carry[0], in1, in2, cin);
fa_adder fa_adder_1(sum, cout, carry[0], in1, carry[1]);

endmodule"
N/A,N/A,-0.1,93.0,1,"//Design a 4-bit adder.
//There are two 4 bit inputs (in1 and in2) and a single carry-in input bit, cin.
//The adder should utilize the inputs (in1 and in2) and the cin bit to determine the output sum and cout.
//Please finish the module.

module adder(output [3:0] sum, output cout, input [3:0] in1, in2, input cin);


endmodule"
