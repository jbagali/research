Area,Delay,Score,Current Run,Episode,Verilog
N/A,N/A,-0.5,2.0,1,"//Please finish designing the 8 bit multiplier module (multiplier_8) below.
//There are two 8 bit inputs (A and B) and a 16 bit output (product).
//The module should utilize the inputs (A and B) to determine the output product correctly in its implementation.
module multiplier_8(output [15:0] product, input [7:0] A, B);
	wire [7:0] A_B;
	wire [7:0] AB;
	wire [7:0] AB_B;
	wire [7:0] AB_B_B;
	
	assign A_B = A & B;
	assign AB = A_B << 1;
	assign AB_B = AB << 1;
	assign AB_B_B = AB_B << 1;
	
	assign product = AB_B_B;
	
endmodule

module multiplier_16(output [31:0] product, input [15:0] A, B);
	wire [15:0] A_B;
	wire [15:0] AB;
	wire [15:0] AB_B;
	wire [15:0] AB_B_B;
	
	assign A_B = A & B;
	assign AB = A_B << 1;
	assign AB_B = AB << 1;
	assign AB_B_B = AB_B << 1;
	
	assign product = AB_B_B;
	
endmodule"
N/A,N/A,-0.5,3.0,1,"//Please finish designing the 8 bit multiplier module (multiplier_8) below.
//There are two 8 bit inputs (A and B) and a 16 bit output (product).
//The module should utilize the inputs (A and B) to determine the output product correctly in its implementation.
module multiplier_8(output [15:0] product, input [7:0] A, B);
	wire [7:0] A_B;
	wire [7:0] AB;
	wire [7:0] AB_B;
	wire [7:0] AB_B_B;
	
	assign A_B = A & B;
	assign AB = A_B << 1;
	assign AB_B = AB << 1;
	assign AB_B_B = AB_B << 1;
	
	assign product = AB_B_B;
	
endmodule

module multiplier_16(output [31:0] product, input [15:0] A, B);
	wire [15:0] A_B;
	wire [15:0] AB;
	wire [15:0] AB_B;
	wire [15:0] AB_B_B;
	
	assign A_B = A & B;
	assign AB = A_B << 1;
	assign AB_B = AB << 1;
	assign AB_B_B = AB_B << 1;
	
	assign product = AB_B_B;
	
endmodule"
