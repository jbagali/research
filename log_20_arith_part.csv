Area,Delay,Score,Current Run,Episode,Verilog
668.458000,725.21,0.0014959803009313975,2.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3);

wire [7:0] x1_w, x2_w, x3_w;

assign x1_w = x1;
assign x2_w = x2;
assign x3_w = x3;

wire [7:0] y_w;

assign y_w = x1_w * x2_w + x3_w * x2_w;

assign y = y_w;

endmodule"
668.458000,725.21,0.0014959803009313975,3.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3);

wire [7:0] x1_w, x2_w, x3_w;

assign x1_w = x1;
assign x2_w = x2;
assign x3_w = x3;

wire [7:0] y_w;

assign y_w = x1_w * x2_w + x3_w * x2_w;

assign y = y_w;

endmodule"
N/A,N/A,-1,4.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3);

	wire [7:0] x1_w, x2_w, x3_w;
	wire [7:0] y_w;

	assign x1_w = x1;
	assign x2_w = x2;
	assign x3_w = x3;

	full_adder FA1(y_w[0], x1_w[0], x2_w[0], x3_w[0], 1'b0);
	full_adder FA2(y_w[1], x1_w[1], x2_w[1], x3_w[1], y_w[0]);
	full_adder FA3(y_w[2], x1_w[2], x2_w[2], x3_w[2], y_w[1]);
	full_adder FA4(y_w[3], x1_w[3], x2_w[3], x3_w[3], y_w[2]);
	full_adder FA5(y_w[4], x1_w[4], x2_w[4], x3_w[4], y_w[3]);
	full_adder FA6(y_w[5], x1_w[5], x2_w[5], x3_w[5], y_w[4]);
	full_adder FA7(y_w[6], x1_w[6], x2_w[6], x3_w[6], y_w[5]);
	full_adder FA8(y_w[7], x1_w[7], x2_w[7], x3_w[7], y_w[6]);
	
	assign y = y_w;

endmodule

module full_adder(output sum, carry, input a, b, c_in);

	wire w1, w2, w3;

	xor(w1, a, b);
	xor(sum, w1, c_in);
	and(w2, w1, c_in);
	and(w3, a, b);
	"
N/A,N/A,-1,5.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3);
	wire [7:0] x1_w, x2_w, x3_w;
	wire [7:0] y_w;
	
	assign x1_w = x1;
	assign x2_w = x2;
	assign x3_w = x3;
	
	fulladder_8bit fa0(y_w[0], x1_w[0], x2_w[0], x3_w[0], 1'b0);
	fulladder_8bit fa1(y_w[1], x1_w[1], x2_w[1], x3_w[1], y_w[0]);
	fulladder_8bit fa2(y_w[2], x1_w[2], x2_w[2], x3_w[2], y_w[1]);
	fulladder_8bit fa3(y_w[3], x1_w[3], x2_w[3], x3_w[3], y_w[2]);
	fulladder_8bit fa4(y_w[4], x1_w[4], x2_w[4], x3_w[4], y_w[3]);
	fulladder_8bit fa5(y_w[5], x1_w[5], x2_w[5], x3_w[5], y_w[4]);
	fulladder_8bit fa6(y_w[6], x1_w[6], x2_w[6], x3_w[6], y_w[5]);
	fulladder_8bit fa7(y_w[7], x1_w[7], x2_w[7], x3_w[7], y_w[6]);
	
	assign y = y_w;
	
endmodule

module fulladder_8bit(output [7:0] sum, input [7:0] x1, x2, x3, input cin);
	wire [7:0] sum_w;
	wire c1, c2, c3;
	
	full"
N/A,N/A,-1,6.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3);//

wire [7:0] x1_w, x2_w, x3_w;

assign x1_w = x1;
assign x2_w = x2;
assign x3_w = x3;

wire [7:0] y_w;

// Create a wire for each input and output parameter.

// Create a wire for each input and output parameter.

// Create a wire for each input and output parameter.

// Create a wire for each input and output parameter.

// Create a wire for each input and output parameter.

// Create a wire for each input and output parameter.

// Create a wire for each input and output parameter.

// Create a wire for each input and output parameter.

// Create a wire for each input and output parameter.

// Create a wire for each input and output parameter.

// Create a wire for each input and output parameter.

// Create a wire for each input and output parameter.

// Create a wire for each input and output parameter.

// Create a wire for each input and output parameter.

// Create a wire for each input and output parameter.

// Create a wire for each input and output parameter.

// Create a wire for each input and output parameter.

// Create a wire for each input and output parameter.

// Create a wire for each input and output parameter.

// Create a wire for each input and output parameter.

// Create a wire for each input and output parameter.

// Create a wire for each input and output parameter.

// Create a wire for each input and output parameter.

// Create a wire for each input and output parameter.

// Create a wire for each input and output parameter.

// Create a wire for each input and output parameter.

// Create a wire for each input and output parameter.

// Create a wire for each input and output parameter.

// Create a wire for each input and output parameter.

// Create a wire for each input and output parameter.

// Create a wire for each input and output parameter.

// Create a wire for each input and output parameter.

// Create a wire for each input and output parameter.
"
668.458000,725.21,0.0014959803009313975,7.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3);

wire [7:0] x1_w, x2_w, x3_w;

assign x1_w = x1;
assign x2_w = x2;
assign x3_w = x3;

wire [7:0] y_w;

assign y_w = x1_w * x2_w + x3_w * x2_w;

assign y = y_w;

endmodule"
N/A,N/A,-1,8.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3);

// Define the input and output ports.
// Do not change the module name.
input [7:0] x1, x2, x3;

// Define the internal variables.
// Do not change the module name.
reg [7:0] y;

// Define the internal wires.
// Do not change the module name.
wire [7:0] x1_times_x2, x3_times_x2;

// Define the internal logic.
// Do not change the module name.
always @(x1 or x2 or x3)
begin
	x1_times_x2 = x1 * x2;
	x3_times_x2 = x3 * x2;
	y = x1_times_x2 + x3_times_x2;
end

endmodule

// Define the input and output ports.
// Do not change the module name.
input [7:0] x1, x2, x3;

// Define the internal variables.
// Do not change the module name.
reg [7:0] y;

// Define the internal wires.
// Do not change the module name.
wire [7:0] x1_times_x2, x3_times_x2;

// Define the internal logic.
// Do not change the module name.
always @(x1 or x2 or x3)
begin
	x1_times_x2 = x1 * x2;
	x3_times_x2 = x3 * x2;
	y = x1_times_x2 + x3_times_x2;
end

endmodule

// Define the input and output ports.
// Do not change the module name.
input [7:0] x1, x2, x3;

// Define the internal variables.
// Do not change the module name.
reg [7:0] y;

// Define the internal wires.
// Do not change the module name.
wire [7:0] x1_times_x2, x3_times_x2;

// Define the"
,,-1,9.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3); // module definition

// module body starts after module definition

// module body ends after module definition

endmodule"
N/A,N/A,-1,10.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3);
    wire [7:0] x1_w, x2_w, x3_w;
    wire [7:0] y_w;
    
    assign x1_w = x1;
    assign x2_w = x2;
    assign x3_w = x3;
    
    full_adder FA1(y_w[0], x1_w[0], x2_w[0], x3_w[0], 1'b0);
    full_adder FA2(y_w[1], x1_w[1], x2_w[1], x3_w[1], y_w[0]);
    full_adder FA3(y_w[2], x1_w[2], x2_w[2], x3_w[2], y_w[1]);
    full_adder FA4(y_w[3], x1_w[3], x2_w[3], x3_w[3], y_w[2]);
    full_adder FA5(y_w[4], x1_w[4], x2_w[4], x3_w[4], y_w[3]);
    full_adder FA6(y_w[5], x1_w[5], x2_w[5], x3_w[5], y_w[4]);
    full_adder FA7(y_w[6], x1_w[6], x2_w[6], x3_w[6], y_w[5]);
    full_adder FA8(y_w[7], x1_w[7], x2_w[7], x3_w[7], y_w[6]);
    
    assign y = y_w;
endmodule

module full_adder(output sum, carry, input a, b, c_in);
    wire c1, c2, c3;
    
    half_adder HA1(sum, c1, a, b);
    half_adder HA2(sum, c2, c1, c_in);
    half_adder HA3(carry, c"
N/A,N/A,-1,11.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3);

	wire [7:0] x1_w, x2_w, x3_w;
	wire [7:0] y_w;

	assign x1_w = x1;
	assign x2_w = x2;
	assign x3_w = x3;

	full_adder FA1(y_w[0], x1_w[0], x2_w[0], x3_w[0], 1'b0);
	full_adder FA2(y_w[1], x1_w[1], x2_w[1], x3_w[1], y_w[0]);
	full_adder FA3(y_w[2], x1_w[2], x2_w[2], x3_w[2], y_w[1]);
	full_adder FA4(y_w[3], x1_w[3], x2_w[3], x3_w[3], y_w[2]);
	full_adder FA5(y_w[4], x1_w[4], x2_w[4], x3_w[4], y_w[3]);
	full_adder FA6(y_w[5], x1_w[5], x2_w[5], x3_w[5], y_w[4]);
	full_adder FA7(y_w[6], x1_w[6], x2_w[6], x3_w[6], y_w[5]);
	full_adder FA8(y_w[7], x1_w[7], x2_w[7], x3_w[7], y_w[6]);
	
	assign y = y_w;

endmodule

module full_adder(output sum, carry, input a, b, c_in);

	wire w1, w2, w3;

	xor(w1, a, b);
	xor(sum, w1, c_in);
	and(w2, w1, c_in);
	and(w3, a, b);
	"
668.458000,725.21,0.0014959803009313975,12.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3); 

wire [7:0] x1_w, x2_w, x3_w;

assign x1_w = x1;
assign x2_w = x2;
assign x3_w = x3;

wire [7:0] y_w;

assign y_w = x1_w * x2_w + x3_w * x2_w;

assign y = y_w;

endmodule"
668.458000,725.21,0.0014959803009313975,13.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3); 

wire [7:0] x1_w, x2_w, x3_w;

assign x1_w = x1;
assign x2_w = x2;
assign x3_w = x3;

wire [7:0] y_w;

assign y_w = x1_w * x2_w + x3_w * x2_w;

assign y = y_w;

endmodule"
,,-1,14.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3);	// module definition

// module body starts after module definition

// module body ends after module definition

endmodule"
668.458000,725.21,0.0014959803009313975,15.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3); 

wire [7:0] x1_w, x2_w, x3_w;

assign x1_w = x1;
assign x2_w = x2;
assign x3_w = x3;

wire [7:0] y_w;

assign y_w = x1_w * x2_w + x3_w * x2_w;

assign y = y_w;

endmodule"
668.458000,725.21,0.0014959803009313975,16.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3);  

wire [7:0] x1_w, x2_w, x3_w;

assign x1_w = x1;
assign x2_w = x2;
assign x3_w = x3;

wire [7:0] y_w;

assign y_w = x1_w * x2_w + x3_w * x2_w;

assign y = y_w;

endmodule"
N/A,N/A,-1,17.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3);
  wire [7:0] x1_w, x2_w, x3_w;
  wire [7:0] y_w;
  
  assign x1_w = x1;
  assign x2_w = x2;
  assign x3_w = x3;
  
  full_adder FA1(y_w[0], x1_w[0], x2_w[0], x3_w[0], 1'b0);
  full_adder FA2(y_w[1], x1_w[1], x2_w[1], x3_w[1], y_w[0]);
  full_adder FA3(y_w[2], x1_w[2], x2_w[2], x3_w[2], y_w[1]);
  full_adder FA4(y_w[3], x1_w[3], x2_w[3], x3_w[3], y_w[2]);
  full_adder FA5(y_w[4], x1_w[4], x2_w[4], x3_w[4], y_w[3]);
  full_adder FA6(y_w[5], x1_w[5], x2_w[5], x3_w[5], y_w[4]);
  full_adder FA7(y_w[6], x1_w[6], x2_w[6], x3_w[6], y_w[5]);
  full_adder FA8(y_w[7], x1_w[7], x2_w[7], x3_w[7], y_w[6]);
  
  assign y = y_w;
  
endmodule

module full_adder(output sum, carry, input a, b, c_in);
  wire w1, w2, w3;
  
  xor(w1, a, b);
  xor(sum, w1, c_in);
  and(w2, w1, c_in);
  and(w3"
N/A,N/A,-1,18.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3); 

	wire [7:0] x1_w, x2_w, x3_w;
	wire [7:0] y_w;
	
	assign x1_w = x1;
	assign x2_w = x2;
	assign x3_w = x3;
	
	full_adder FA1(y_w[0], x1_w[0], x2_w[0], x3_w[0], 1'b0);
	full_adder FA2(y_w[1], x1_w[1], x2_w[1], x3_w[1], y_w[0]);
	full_adder FA3(y_w[2], x1_w[2], x2_w[2], x3_w[2], y_w[1]);
	full_adder FA4(y_w[3], x1_w[3], x2_w[3], x3_w[3], y_w[2]);
	full_adder FA5(y_w[4], x1_w[4], x2_w[4], x3_w[4], y_w[3]);
	full_adder FA6(y_w[5], x1_w[5], x2_w[5], x3_w[5], y_w[4]);
	full_adder FA7(y_w[6], x1_w[6], x2_w[6], x3_w[6], y_w[5]);
	full_adder FA8(y_w[7], x1_w[7], x2_w[7], x3_w[7], y_w[6]);
	
	assign y = y_w;

endmodule

module full_adder(output sum, carry, input a, b, c_in);
	wire w1, w2, w3;
	
	xor(w1, a, b);
	xor(sum, w1, c_in);
	and(w2, w1, c_in);
	and(w3"
668.458000,725.21,0.0014959803009313975,19.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3);  

wire [7:0] x1_w, x2_w, x3_w;

assign x1_w = x1;
assign x2_w = x2;
assign x3_w = x3;

wire [7:0] y_w;

assign y_w = x1_w * x2_w + x3_w * x2_w;

assign y = y_w;

endmodule"
,,-1,20.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3);    // module definition

// module body starts after semicolon

// module body ends after semicolon

endmodule"
,,-1,21.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3);  // module definition

// module body starts after semicolon

// module body ends after semicolon

endmodule"
668.458000,725.21,0.0014959803009313975,22.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3);   

wire [7:0] x1_w, x2_w, x3_w;

assign x1_w = x1;
assign x2_w = x2;
assign x3_w = x3;

wire [7:0] y_w;

assign y_w = x1_w * x2_w + x3_w * x2_w;

assign y = y_w;

endmodule"
N/A,N/A,-1,23.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3);		// Define the module

wire [7:0] x1_w, x2_w, x3_w;

assign x1_w = x1;
assign x2_w = x2;
assign x3_w = x3;

wire [7:0] y_w;

multiply x1_w(x1_w, x2_w, x3_w, y_w);

assign y = y_w;

endmodule
`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date:    14:46:56 03/10/2015 
// Design Name: 
// Module Name:    multiplier 
// Project Name: 
// Target Devices: 
// Tool versions: 
// Description: 
//
// Dependencies: 
//
// Revision: 
// Revision 0.01 - File Created
// Additional Comments: 
//
//////////////////////////////////////////////////////////////////////////////////
module multiplier(
	output [7:0] y,
	input [7:0] x1,
	input [7:0] x2
	);
	
	wire [7:0] x1_w, x2_w;
	
	assign x1_w = x1;
	assign x2_w = x2;
	
	wire [7:0] y_w;
	
	multiply x1_w(x1_w, x2_w, y_w);
	
	assign y = y_w;
	
endmodule
`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date:    14:46:56 03/10/2015 
// Design Name: 
// Module Name:    multiplier 
// Project Name: 
// Target Devices: 
// Tool versions: 
// Description: 
//
// Dependencies: 
//
// Revision: 
// Revision 0.01 - File Created
// Additional Comments: 
//
//////////////////////////////////////////////////////////////////////////////////
module multiplier"
N/A,N/A,-1,24.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3);//

wire [7:0] x1_w, x2_w, x3_w;

assign x1_w = x1;
assign x2_w = x2;
assign x3_w = x3;

wire [7:0] y_w;

// Create a wire for each input and output parameter.

// Create a wire for each input and output parameter.

// Create a wire for each input and output parameter.

// Create a wire for each input and output parameter.

// Create a wire for each input and output parameter.

// Create a wire for each input and output parameter.

// Create a wire for each input and output parameter.

// Create a wire for each input and output parameter.

// Create a wire for each input and output parameter.

// Create a wire for each input and output parameter.

// Create a wire for each input and output parameter.

// Create a wire for each input and output parameter.

// Create a wire for each input and output parameter.

// Create a wire for each input and output parameter.

// Create a wire for each input and output parameter.

// Create a wire for each input and output parameter.

// Create a wire for each input and output parameter.

// Create a wire for each input and output parameter.

// Create a wire for each input and output parameter.

// Create a wire for each input and output parameter.

// Create a wire for each input and output parameter.

// Create a wire for each input and output parameter.

// Create a wire for each input and output parameter.

// Create a wire for each input and output parameter.

// Create a wire for each input and output parameter.

// Create a wire for each input and output parameter.

// Create a wire for each input and output parameter.

// Create a wire for each input and output parameter.

// Create a wire for each input and output parameter.

// Create a wire for each input and output parameter.

// Create a wire for each input and output parameter.

// Create a wire for each input and output parameter.

// Create a wire for each input and output parameter.
"
668.458000,725.21,0.0014959803009313975,25.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3);   

wire [7:0] x1_w, x2_w, x3_w;

assign x1_w = x1;
assign x2_w = x2;
assign x3_w = x3;

wire [7:0] y_w;

assign y_w = x1_w * x2_w + x3_w * x2_w;

assign y = y_w;

endmodule"
,,-1,26.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3);   // module definition

// module body starts after semicolon

// module body ends after semicolon

endmodule"
668.458000,725.21,0.0014959803009313975,27.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3);

wire [7:0] x1_w, x2_w, x3_w;

assign x1_w = x1;
assign x2_w = x2;
assign x3_w = x3;

wire [7:0] y_w;

assign y_w = x1_w * x2_w + x3_w * x2_w;

assign y = y_w;

endmodule"
668.458000,725.21,0.0014959803009313975,28.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3);

wire [7:0] x1_w, x2_w, x3_w;

assign x1_w = x1;
assign x2_w = x2;
assign x3_w = x3;

wire [7:0] y_w;

assign y_w = x1_w * x2_w + x3_w * x2_w;

assign y = y_w;

endmodule"
668.458000,725.21,0.0014959803009313975,29.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3);

wire [7:0] x1_w, x2_w, x3_w;

assign x1_w = x1;
assign x2_w = x2;
assign x3_w = x3;

wire [7:0] y_w;

assign y_w = x1_w * x2_w + x3_w * x2_w;

assign y = y_w;

endmodule"
668.458000,725.21,0.0014959803009313975,30.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3);

reg [7:0] y;

always @(x1, x2, x3)
begin
	y = x1 * x2 + x3 * x2;
end

endmodule"
668.458000,725.21,0.0014959803009313975,31.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3);

wire [7:0] x1_w, x2_w, x3_w;

assign x1_w = x1;
assign x2_w = x2;
assign x3_w = x3;

wire [7:0] y_w;

assign y_w = x1_w * x2_w + x3_w * x2_w;

assign y = y_w;

endmodule"
668.458000,725.21,0.0014959803009313975,32.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3);

assign y = x1 * x2 + x3 * x2;

endmodule"
N/A,N/A,-1,33.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3);
	wire [7:0] x1_w, x2_w, x3_w;
	wire [7:0] y_w;
	
	assign x1_w = x1;
	assign x2_w = x2;
	assign x3_w = x3;
	
	fulladder_8bit fa0(y_w[0], x1_w[0], x2_w[0], x3_w[0], 1'b0);
	fulladder_8bit fa1(y_w[1], x1_w[1], x2_w[1], x3_w[1], y_w[0]);
	fulladder_8bit fa2(y_w[2], x1_w[2], x2_w[2], x3_w[2], y_w[1]);
	fulladder_8bit fa3(y_w[3], x1_w[3], x2_w[3], x3_w[3], y_w[2]);
	fulladder_8bit fa4(y_w[4], x1_w[4], x2_w[4], x3_w[4], y_w[3]);
	fulladder_8bit fa5(y_w[5], x1_w[5], x2_w[5], x3_w[5], y_w[4]);
	fulladder_8bit fa6(y_w[6], x1_w[6], x2_w[6], x3_w[6], y_w[5]);
	fulladder_8bit fa7(y_w[7], x1_w[7], x2_w[7], x3_w[7], y_w[6]);
	
	assign y = y_w;
	
endmodule

module fulladder_8bit(output [7:0] sum, input [7:0] x1, x2, x3, input cin);
	wire [7:0] sum_w;
	wire c1, c2, c3;
	
	full"
N/A,N/A,-1,34.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3);

    wire [7:0] x1_w, x2_w, x3_w;
    wire [7:0] y_w;

    assign x1_w = x1;
    assign x2_w = x2;
    assign x3_w = x3;

    wire [7:0] x1_w_mux;
    wire [7:0] x2_w_mux;
    wire [7:0] x3_w_mux;

    wire [7:0] x1_w_mux_out;
    wire [7:0] x2_w_mux_out;
    wire [7:0] x3_w_mux_out;

    wire [7:0] y_w_mux;

    wire [7:0] y_w_mux_out;

    mux_8x1 mux_x1(x1_w, x1_w_mux);
    mux_8x1 mux_x2(x2_w, x2_w_mux);
    mux_8x1 mux_x3(x3_w, x3_w_mux);

    mux_8x1 mux_y(y_w, y_w_mux);

    wire [7:0] y_w_mux_out;

    mux_8x1 mux_y_w(y_w_mux_out, y_w_mux);

    wire [7:0] y_w_mux_out_mux;

    mux_8x1 mux_y_w_mux(y_w_mux_out_mux, y_w_mux);

    wire [7:0] y_w_mux_out_mux_out;

    mux_8x1 mux_y_w_mux_out(y_w_mux_out_mux_out, y_w_mux_out_mux);

    wire [7:0] y_w_mux_out_"
668.458000,725.21,0.0014959803009313975,35.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3);

wire [7:0] x1_w, x2_w, x3_w;

assign x1_w = x1;
assign x2_w = x2;
assign x3_w = x3;

wire [7:0] y_w;

assign y_w = x1_w * x2_w + x3_w * x2_w;

assign y = y_w;

endmodule"
N/A,N/A,-1,36.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3);
wire [7:0] x1_w, x2_w, x3_w;

assign x1_w = x1;
assign x2_w = x2;
assign x3_w = x3;

wire [7:0] y_w;

// Create a wire for each input and output parameter.

// Create a wire for each input and output parameter.

// Create a wire for each input and output parameter.

// Create a wire for each input and output parameter.

// Create a wire for each input and output parameter.

// Create a wire for each input and output parameter.

// Create a wire for each input and output parameter.

// Create a wire for each input and output parameter.

// Create a wire for each input and output parameter.

// Create a wire for each input and output parameter.

// Create a wire for each input and output parameter.

// Create a wire for each input and output parameter.

// Create a wire for each input and output parameter.

// Create a wire for each input and output parameter.

// Create a wire for each input and output parameter.

// Create a wire for each input and output parameter.

// Create a wire for each input and output parameter.

// Create a wire for each input and output parameter.

// Create a wire for each input and output parameter.

// Create a wire for each input and output parameter.

// Create a wire for each input and output parameter.

// Create a wire for each input and output parameter.

// Create a wire for each input and output parameter.

// Create a wire for each input and output parameter.

// Create a wire for each input and output parameter.

// Create a wire for each input and output parameter.

// Create a wire for each input and output parameter.

// Create a wire for each input and output parameter.

// Create a wire for each input and output parameter.

// Create a wire for each input and output parameter.

// Create a wire for each input and output parameter.

// Create a wire for each input and output parameter.

// Create a wire for each input and output parameter.

//"
668.458000,725.21,0.0014959803009313975,37.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3);

wire [7:0] x1_w, x2_w, x3_w;

assign x1_w = x1;
assign x2_w = x2;
assign x3_w = x3;

wire [7:0] y_w;

assign y_w = x1_w * x2_w + x3_w * x2_w;

assign y = y_w;

endmodule"
668.458000,725.21,0.0014959803009313975,38.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3);

wire [7:0] x1_w, x2_w, x3_w;

assign x1_w = x1;
assign x2_w = x2;
assign x3_w = x3;

wire [7:0] y_w;

assign y_w = x1_w * x2_w + x3_w * x2_w;

assign y = y_w;

endmodule"
,,-1,39.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3);

endmodule"
N/A,N/A,-1,40.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3);
// Define the input and output ports.
// Do not change the module name.

// Do not change the module name.

// Do not change the module name.

// Do not change the module name.

// Do not change the module name.

// Do not change the module name.

// Do not change the module name.

// Do not change the module name.

// Do not change the module name.

// Do not change the module name.

// Do not change the module name.

// Do not change the module name.

// Do not change the module name.

// Do not change the module name.

// Do not change the module name.

// Do not change the module name.

// Do not change the module name.

// Do not change the module name.

// Do not change the module name.

// Do not change the module name.

// Do not change the module name.

// Do not change the module name.

// Do not change the module name.

// Do not change the module name.

// Do not change the module name.

// Do not change the module name.

// Do not change the module name.

// Do not change the module name.

// Do not change the module name.

// Do not change the module name.

// Do not change the module name.

// Do not change the module name.

// Do not change the module name.

// Do not change the module name.

// Do not change the module name.

// Do not change the module name.

// Do not change the module name.

// Do not change the module name.

// Do not change the module name.

// Do not change the module name.

// Do not change the module name.

// Do not change the module name.

// Do not change the module name.

// Do not change the module name.

// Do not change the module name.

// Do not change the module name.

// Do not change the module name.

// Do not change the module name.

// Do not change the module name.
"
668.458000,725.21,0.0014959803009313975,41.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3);
   wire [7:0] x1_w, x2_w, x3_w;
   wire [7:0] y_w;
   
   assign x1_w = x1;
   assign x2_w = x2;
   assign x3_w = x3;
   
   assign y_w = x1_w * x2_w + x3_w * x2_w;
   
   assign y = y_w;
   
endmodule"
N/A,N/A,-1,42.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3);
 
	wire [7:0] x1_w, x2_w, x3_w;
	
	assign x1_w = x1;
	assign x2_w = x2;
	assign x3_w = x3;
	
	wire [7:0] y_w;
	
	multiply x1_mult(x1_w, x2_w, x3_w, y_w);
	
	assign y = y_w;
	
endmodule
`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date:    16:46:00 03/10/2015 
// Design Name: 
// Module Name:    multiply 
// Project Name: 
// Target Devices: 
// Tool versions: 
// Description: 
//
// Dependencies: 
//
// Revision: 
// Revision 0.01 - File Created
// Additional Comments: 
//
//////////////////////////////////////////////////////////////////////////////////
module multiply(input [7:0] x1, x2, x3, output [7:0] y);
	
	wire [7:0] x1_w, x2_w, x3_w;
	
	assign x1_w = x1;
	assign x2_w = x2;
	assign x3_w = x3;
	
	wire [7:0] y_w;
	
	wire [7:0] x1_mult_out, x2_mult_out, x3_mult_out;
	
	multiply x1_mult(x1_w, x2_w, x3_w, x1_mult_out);
	multiply x2_mult(x1_w, x2_w, x3_w, x2_mult_out);
	multiply x3_mult(x1_w, x2_w, x3_w, x3_mult_out);
	
	assign y_w = x1_mult_out + x2_mult_"
N/A,N/A,-1,43.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3);

  wire [7:0] x1_w, x2_w, x3_w;
  wire [7:0] y_w;

  assign x1_w = x1;
  assign x2_w = x2;
  assign x3_w = x3;

  full_adder FA1(y_w[0], x1_w[0], x2_w[0], x3_w[0], 1'b0);
  full_adder FA2(y_w[1], x1_w[1], x2_w[1], x3_w[1], y_w[0]);
  full_adder FA3(y_w[2], x1_w[2], x2_w[2], x3_w[2], y_w[1]);
  full_adder FA4(y_w[3], x1_w[3], x2_w[3], x3_w[3], y_w[2]);
  full_adder FA5(y_w[4], x1_w[4], x2_w[4], x3_w[4], y_w[3]);
  full_adder FA6(y_w[5], x1_w[5], x2_w[5], x3_w[5], y_w[4]);
  full_adder FA7(y_w[6], x1_w[6], x2_w[6], x3_w[6], y_w[5]);
  full_adder FA8(y_w[7], x1_w[7], x2_w[7], x3_w[7], y_w[6]);
  assign y = y_w;

endmodule

module full_adder(output sum, carry, input a, b, c_in);

  wire w1, w2, w3;

  xor(w1, a, b);
  xor(sum, w1, c_in);
  and(w2, w1, c_in);
  and(w3, a, b);
  or("
668.458000,725.21,0.0014959803009313975,44.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3);

reg [7:0] y;

always @(x1, x2, x3)
begin
	y = x1 * x2 + x3 * x2;
end

endmodule"
N/A,N/A,-1,45.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3);

wire [7:0] y1, y2, y3;

// Create modules for each of the gates in the circuit.
// For example, in the following circuit, the gate ""A"" is created.
// The gate ""B"" is created.
// The gate ""C"" is created.
// The gate ""D"" is created.
// The gate ""E"" is created.
// The gate ""F"" is created.

// Create modules for each of the gates in the circuit.
// For example, in the following circuit, the gate ""A"" is created.
// The gate ""B"" is created.
// The gate ""C"" is created.
// The gate ""D"" is created.
// The gate ""E"" is created.
// The gate ""F"" is created.

// Create modules for each of the gates in the circuit.
// For example, in the following circuit, the gate ""A"" is created.
// The gate ""B"" is created.
// The gate ""C"" is created.
// The gate ""D"" is created.
// The gate ""E"" is created.
// The gate ""F"" is created.

// Create modules for each of the gates in the circuit.
// For example, in the following circuit, the gate ""A"" is created.
// The gate ""B"" is created.
// The gate ""C"" is created.
// The gate ""D"" is created.
// The gate ""E"" is created.
// The gate ""F"" is created.

// Create modules for each of the gates in the circuit.
// For example, in the following circuit, the gate ""A"" is created.
// The gate ""B"" is created.
// The gate ""C"" is created.
// The gate ""D"" is created.
// The gate ""E"" is created.
// The gate ""F"" is created.

// Create modules for each of the gates in the circuit.
// For example, in the following circuit, the gate ""A"" is created.
// The gate ""B"" is created.
// The gate ""C"" is created.
// The gate ""D"" is created.
// The gate ""E"" is created.
"
N/A,N/A,-1,46.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3); 
	wire [7:0] x1_w, x2_w, x3_w;
	
	assign x1_w = x1;
	assign x2_w = x2;
	assign x3_w = x3;
	
	wire [7:0] y_w;
	
	multiply x1_mult(x1_w, x2_w, x3_w, y_w);
	
	assign y = y_w;
	
endmodule
`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date:    16:46:00 03/10/2015 
// Design Name: 
// Module Name:    multiply 
// Project Name: 
// Target Devices: 
// Tool versions: 
// Description: 
//
// Dependencies: 
//
// Revision: 
// Revision 0.01 - File Created
// Additional Comments: 
//
//////////////////////////////////////////////////////////////////////////////////
module multiply(input [7:0] x1, x2, x3, output [7:0] y);
	wire [7:0] x1_w, x2_w, x3_w;
	
	assign x1_w = x1;
	assign x2_w = x2;
	assign x3_w = x3;
	
	wire [7:0] y_w;
	
	multiply_16bit x1_mult(x1_w, x2_w, x3_w, y_w);
	
	assign y = y_w;
	
endmodule
`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date:    16:46:00 03/10/2015 
// Design Name: 
// Module Name:    multiply_16bit 
// Project Name: 
// Target Devices: 
// Tool versions: 
// Description: 
//
// Dependencies: 
//
// Revision: 
//"
668.458000,725.21,0.0014959803009313975,47.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3);
   wire [7:0] x1_w, x2_w, x3_w;
   wire [7:0] y_w;
   
   assign x1_w = x1;
   assign x2_w = x2;
   assign x3_w = x3;
   
   assign y_w = x1_w * x2_w + x3_w * x2_w;
   
   assign y = y_w;
   
endmodule"
668.458000,725.21,0.0014959803009313975,48.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3);
reg [7:0] y;
always @(x1, x2, x3)
begin
	y = x1 * x2 + x3 * x2;
end
endmodule"
N/A,N/A,-1,49.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3);
   
   wire [7:0] x1_w, x2_w, x3_w;
   
   assign x1_w = x1;
   assign x2_w = x2;
   assign x3_w = x3;
   
   wire [7:0] y_w;
   
   multiply x1_w(x1_w, x2_w, x3_w, y_w);
   
   assign y = y_w;
   
endmodule

module testbench;
   
   reg [7:0] x1, x2, x3;
   wire [7:0] y;
   
   arithmetic a(y, x1, x2, x3);
   
   initial
   begin
      x1 = 8'b00001010;
      x2 = 8'b00001010;
      x3 = 8'b00001010;
      #10;
      x1 = 8'b00001010;
      x2 = 8'b00001010;
      x3 = 8'b00001011;
      #10;
      x1 = 8'b00001010;
      x2 = 8'b00001011;
      x3 = 8'b00001010;
      #10;
      x1 = 8'b00001010;
      x2 = 8'b00001011;
      x3 = 8'b00001011;
      #10;
      x1 = 8'b00001010;
      x2 = 8'b00001011;
      x3 = 8'b00001011;
      #10;
      x1 = 8'b00001010;
      x2 = 8'b00001011;
      x3 = 8'b00001011;
      #10;
      x1 = 8'b00001010;
      x2 = 8'b00001011;
      x3 = 8'b00001011;
      #10;
      x1 = 8'b00001010;
      x2 = 8'b00001011;
      "
N/A,N/A,-1,50.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3);//module definition

//define the input and output ports
input [7:0] x1, x2, x3;
output [7:0] y;

//define the internal variables
wire [7:0] x1_out, x2_out, x3_out;
wire [7:0] y_out;

//instantiate the modules
xor(x1_out, x1, x2);
xor(x2_out, x1, x3);
xor(x3_out, x2, x3);

//instantiate the modules
multiplier_8bit xor_m1(x1_out, x2_out, x3_out, y_out);

//assign the output
assign y = y_out;

endmodule

module multiplier_8bit(input [7:0] x1, x2, x3, output [7:0] y);

//define the internal variables
wire [7:0] x1_out, x2_out, x3_out;

//instantiate the modules
xor(x1_out, x1, x2);
xor(x2_out, x1, x3);
xor(x3_out, x2, x3);

//instantiate the modules
multiplier_4bit xor_m1(x1_out, x2_out, x3_out, y);

endmodule

module multiplier_4bit(input [3:0] x1, x2, x3, output [7:0] y);

//define the internal variables
wire [3:0] x1_out, x2_out, x3_out;

//instantiate the modules
xor(x1_out, x1, x2);
xor(x2_out, x1, x3);
xor(x3_out, x2, x3);

//instantiate the modules
multiplier_2bit xor_m1(x1_out, x2_out, x3_out, y);

endmodule"
N/A,N/A,-1,51.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3);
		
		wire [7:0] x1_w, x2_w, x3_w;
		
		assign x1_w = x1;
		assign x2_w = x2;
		assign x3_w = x3;
		
		wire [7:0] y_w;
		
		multiply x1_w(x1_w, x2_w, x3_w, y_w);
		
		assign y = y_w;
		
endmodule
`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date:    16:46:00 03/10/2015 
// Design Name: 
// Module Name:    multiplier 
// Project Name: 
// Target Devices: 
// Tool versions: 
// Description: 
//
// Dependencies: 
//
// Revision: 
// Revision 0.01 - File Created
// Additional Comments: 
//
//////////////////////////////////////////////////////////////////////////////////
module multiplier(
	output [7:0] y,
	input [7:0] x1, x2
);
	
	wire [7:0] x1_w, x2_w;
	
	assign x1_w = x1;
	assign x2_w = x2;
	
	wire [7:0] y_w;
	
	multiply x1_w(x1_w, x2_w, y_w);
	
	assign y = y_w;
	
endmodule
`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date:    16:46:00 03/10/2015 
// Design Name: 
// Module Name:    multiplier 
// Project Name: 
// Target Devices: 
// Tool versions: 
// Description: 
//
// Dependencies: 
//
// Revision: 
// Revision 0.01 - File Created
// Additional Comments: 
//
//////////////////////////////////////////////////////////////////////////////////
module multiplier(
"
668.458000,725.21,0.0014959803009313975,52.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3);
reg [7:0] y;
always @(x1, x2, x3)
begin
	y = x1 * x2 + x3 * x2;
end
endmodule"
668.458000,725.21,0.0014959803009313975,53.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3);

assign y = x1 * x2 + x3 * x2;

endmodule"
N/A,N/A,-1,54.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3);

// Define the input and output ports.
// Do not change the module name.
input [7:0] x1, x2, x3;

// Define the internal variables.
// Do not change the module name.
reg [7:0] y;

// Define the internal wires.
// Do not change the module name.
wire [7:0] x1_times_x2, x3_times_x2;

// Define the internal logic.
// Do not change the module name.
always @(x1 or x2 or x3)
begin
	x1_times_x2 = x1 * x2;
	x3_times_x2 = x3 * x2;
	y = x1_times_x2 + x3_times_x2;
end

endmodule

// Define the input and output ports.
// Do not change the module name.
input [7:0] x1, x2, x3;

// Define the internal variables.
// Do not change the module name.
reg [7:0] y;

// Define the internal wires.
// Do not change the module name.
wire [7:0] x1_times_x2, x3_times_x2;

// Define the internal logic.
// Do not change the module name.
always @(x1 or x2 or x3)
begin
	x1_times_x2 = x1 * x2;
	x3_times_x2 = x3 * x2;
	y = x1_times_x2 + x3_times_x2;
end

endmodule

// Define the input and output ports.
// Do not change the module name.
input [7:0] x1, x2, x3;

// Define the internal variables.
// Do not change the module name.
reg [7:0] y;

// Define the internal wires.
// Do not change the module name.
wire [7:0] x1_times_x2, x3_times_x2;

// Define the"
668.458000,725.21,0.0014959803009313975,55.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3);
reg [7:0] y;
always @(x1, x2, x3)
begin
	y = x1 * x2 + x3 * x2;
end
endmodule"
668.458000,725.21,0.0014959803009313975,56.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3);
reg [7:0] y;
always @(x1, x2, x3)
begin
	y = x1 * x2 + x3 * x2;
end
endmodule"
N/A,N/A,-1,57.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3);
	
	wire [7:0] x1_w, x2_w, x3_w;
	
	assign x1_w = x1;
	assign x2_w = x2;
	assign x3_w = x3;
	
	wire [7:0] y_w;
	
	multiply x1_w(x1_w, x2_w, x3_w, y_w);
	
	assign y = y_w;
	
endmodule
`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date:    16:46:00 03/10/2015 
// Design Name: 
// Module Name:    multiplier 
// Project Name: 
// Target Devices: 
// Tool versions: 
// Description: 
//
// Dependencies: 
//
// Revision: 
// Revision 0.01 - File Created
// Additional Comments: 
//
//////////////////////////////////////////////////////////////////////////////////
module multiplier(
	output [7:0] y,
	input [7:0] x1, x2,
	input [7:0] x3
	);
	
	wire [7:0] x1_w, x2_w, x3_w;
	
	assign x1_w = x1;
	assign x2_w = x2;
	assign x3_w = x3;
	
	wire [7:0] y_w;
	
	multiply x1_w(x1_w, x2_w, x3_w, y_w);
	
	assign y = y_w;
	
endmodule
`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date:    16:46:00 03/10/2015 
// Design Name: 
// Module Name:    multiplier 
// Project Name: 
// Target Devices: 
// Tool versions: 
// Description: 
//
// Dependencies: "
668.458000,725.21,0.0014959803009313975,58.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3);
reg [7:0] y;
always @(x1, x2, x3)
begin
	y = x1 * x2 + x3 * x2;
end
endmodule"
668.458000,725.21,0.0014959803009313975,59.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3);
reg [7:0] y;
always @(x1, x2, x3)
begin
	y = x1 * x2 + x3 * x2;
end
endmodule"
668.458000,725.21,0.0014959803009313975,60.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3);
reg [7:0] y;
always @(x1, x2, x3)
begin
	y = x1 * x2 + x3 * x2;
end
endmodule"
668.458000,725.21,0.0014959803009313975,61.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3);
reg [7:0] y;
always @(x1, x2, x3)
begin
	y = x1 * x2 + x3 * x2;
end
endmodule"
668.458000,725.21,0.0014959803009313975,62.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3);
reg [7:0] y;
always @(x1, x2, x3)
begin
	y = x1 * x2 + x3 * x2;
end
endmodule"
668.458000,725.21,0.0014959803009313975,63.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3);
reg [7:0] y;
always @(x1, x2, x3)
begin
	y = x1 * x2 + x3 * x2;
end
endmodule"
668.458000,725.21,0.0014959803009313975,64.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3);
reg [7:0] y;

always @(x1, x2, x3)
begin
	y = x1 * x2 + x3 * x2;
end

endmodule"
668.458000,725.21,0.0014959803009313975,65.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3);
reg [7:0] x1_reg;
reg [7:0] x2_reg;
reg [7:0] x3_reg;

always @(x1 or x2 or x3)
begin
	x1_reg <= x1;
	x2_reg <= x2;
	x3_reg <= x3;
end

assign y = x1_reg * x2_reg + x3_reg * x2_reg;

endmodule"
668.458000,725.21,0.0014959803009313975,66.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3);
reg [7:0] y;
always @(x1, x2, x3)
begin
	y = x1 * x2 + x3 * x2;
end
endmodule"
668.458000,725.21,0.0014959803009313975,67.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3);

reg [7:0] y;

always @(x1, x2, x3)
begin
	y = x1 * x2 + x3 * x2;
end

endmodule"
668.458000,725.21,0.0014959803009313975,68.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3);

assign y = x1 * x2 + x3 * x2;

endmodule"
668.458000,725.21,0.0014959803009313975,69.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3);

wire [7:0] x1_w, x2_w, x3_w;

assign x1_w = x1;
assign x2_w = x2;
assign x3_w = x3;

wire [7:0] y_w;

assign y_w = x1_w * x2_w + x3_w * x2_w;

assign y = y_w;

endmodule"
N/A,N/A,-1,70.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3);
    wire [7:0] x1_w, x2_w, x3_w;
    wire [7:0] y_w;
    
    assign x1_w = x1;
    assign x2_w = x2;
    assign x3_w = x3;
    
    full_adder FA1(y_w[0], x1_w[0], x2_w[0], x3_w[0], 1'b0);
    full_adder FA2(y_w[1], x1_w[1], x2_w[1], x3_w[1], y_w[0]);
    full_adder FA3(y_w[2], x1_w[2], x2_w[2], x3_w[2], y_w[1]);
    full_adder FA4(y_w[3], x1_w[3], x2_w[3], x3_w[3], y_w[2]);
    full_adder FA5(y_w[4], x1_w[4], x2_w[4], x3_w[4], y_w[3]);
    full_adder FA6(y_w[5], x1_w[5], x2_w[5], x3_w[5], y_w[4]);
    full_adder FA7(y_w[6], x1_w[6], x2_w[6], x3_w[6], y_w[5]);
    full_adder FA8(y_w[7], x1_w[7], x2_w[7], x3_w[7], y_w[6]);
    
    assign y = y_w;
endmodule

module full_adder(output sum, carry, input a, b, c_in);
    wire c1, c2, c3;
    
    half_adder HA1(sum, c1, a, b);
    half_adder HA2(sum, c2, c1, c_in);
    half_adder HA3(carry, c"
668.458000,725.21,0.0014959803009313975,71.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3);

reg [7:0] y;

always @(x1, x2, x3)
begin
	y = x1 * x2 + x3 * x2;
end

endmodule"
668.458000,725.21,0.0014959803009313975,72.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3);

wire [7:0] x1_w, x2_w, x3_w;

assign x1_w = x1;
assign x2_w = x2;
assign x3_w = x3;

wire [7:0] y_w;

assign y_w = x1_w * x2_w + x3_w * x2_w;

assign y = y_w;

endmodule"
,,-1,73.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3);

parameter [7:0] x1_0 = 8'b00000000;
parameter [7:0] x2_0 = 8'b00000000;
parameter [7:0] x3_0 = 8'b00000000;

assign y = x1_0 * x2_0 + x3_0 * x2_0;

endmodule"
N/A,N/A,-1,74.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3);

	wire [7:0] x1_w, x2_w, x3_w;
	wire [7:0] y_w;

	assign x1_w = x1;
	assign x2_w = x2;
	assign x3_w = x3;

	full_adder FA1(y_w[0], x1_w[0], x2_w[0], x3_w[0], 1'b0);
	full_adder FA2(y_w[1], x1_w[1], x2_w[1], x3_w[1], y_w[0]);
	full_adder FA3(y_w[2], x1_w[2], x2_w[2], x3_w[2], y_w[1]);
	full_adder FA4(y_w[3], x1_w[3], x2_w[3], x3_w[3], y_w[2]);
	full_adder FA5(y_w[4], x1_w[4], x2_w[4], x3_w[4], y_w[3]);
	full_adder FA6(y_w[5], x1_w[5], x2_w[5], x3_w[5], y_w[4]);
	full_adder FA7(y_w[6], x1_w[6], x2_w[6], x3_w[6], y_w[5]);
	full_adder FA8(y_w[7], x1_w[7], x2_w[7], x3_w[7], y_w[6]);
	
	assign y = y_w;

endmodule

module full_adder(output sum, carry, input a, b, c_in);

	wire w1, w2, w3;

	xor(w1, a, b);
	xor(sum, w1, c_in);
	and(w2, w1, c_in);
	and(w3, a, b);
	"
668.458000,725.21,0.0014959803009313975,75.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3);
reg [7:0] y;

always @(x1, x2, x3)
begin
	y = x1 * x2 + x3 * x2;
end

endmodule"
668.458000,725.21,0.0014959803009313975,76.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3);
reg [7:0] y;
always @(x1, x2, x3)
begin
	y = x1 * x2 + x3 * x2;
end
endmodule"
N/A,N/A,-1,77.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3);
reg [7:0] temp;
always @(x1 or x2 or x3)
begin
temp = x1 * x2 + x3 * x2;
y = temp;
end
endmodule

module testbench;
reg [7:0] x1, x2, x3;
wire [7:0] y;

arithmetic a1(y, x1, x2, x3);

initial
begin
x1 = 8'b00001010;
x2 = 8'b00001010;
x3 = 8'b00001010;
#10
x1 = 8'b00001010;
x2 = 8'b00001010;
x3 = 8'b00001011;
#10
x1 = 8'b00001010;
x2 = 8'b00001011;
x3 = 8'b00001011;
#10
x1 = 8'b00001010;
x2 = 8'b00001011;
x3 = 8'b00001010;
#10
x1 = 8'b00001010;
x2 = 8'b00001011;
x3 = 8'b00001011;
#10
x1 = 8'b00001010;
x2 = 8'b00001011;
x3 = 8'b00001011;
#10
x1 = 8'b00001010;
x2 = 8'b00001011;
x3 = 8'b00001011;
#10
x1 = 8'b00001010;
x2 = 8'b00001011;
x3 = 8'b00001011;
#10
x1 = 8'b00001010;
x2 = 8'b00001011;
x3 = 8'b00001011;
#10
x1 = 8'b00001010;
x2 = 8'b00001011;
x3 = 8'b00001011;
#10
x1 = 8'b00001010;
x2 = 8'b00001011;
x3 = 8'b00001011;
#10
"
N/A,N/A,-1,78.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3);

wire [7:0] x1_mux;
wire [7:0] x2_mux;
wire [7:0] x3_mux;

mux_8x1 mux_8x1_inst(
   .x1(x1),
   .x2(x2),
   .x3(x3),
   .sel(1'b0),
   .y(x1_mux)
);

mux_8x1 mux_8x1_inst(
   .x1(x1),
   .x2(x2),
   .x3(x3),
   .sel(1'b1),
   .y(x2_mux)
);

mux_8x1 mux_8x1_inst(
   .x1(x1_mux),
   .x2(x2_mux),
   .x3(x3_mux),
   .sel(1'b0),
   .y(x3_mux)
);

mux_8x1 mux_8x1_inst(
   .x1(x1_mux),
   .x2(x2_mux),
   .x3(x3_mux),
   .sel(1'b1),
   .y(y)
);

endmodule
`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date:    14:46:56 03/10/2015 
// Design Name: 
// Module Name:    mux_8x1 
// Project Name: 
// Target Devices: 
// Tool versions: 
// Description: 
//
// Dependencies: 
//
// Revision: 
// Revision 0.01 - File Created
// Additional Comments: 
//
//////////////////////////////////////////////////////////////////////////////////
module mux_8x1(
    input [7:0] x1,
    input [7:0] x2,
    input [7:0] x3,
    input sel,
    output"
668.458000,725.21,0.0014959803009313975,79.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3);
reg [7:0] y;

always @(x1, x2, x3)
begin
	y = x1 * x2 + x3 * x2;
end

endmodule"
N/A,N/A,-1,80.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3);
reg [8:0] y;
always @(x1, x2, x3)
begin
	y = x1 * x2 + x3 * x2;
end
endmodule

module testbench;
reg [7:0] x1, x2, x3;
wire [7:0] y;

arithmetic a1(y, x1, x2, x3);

initial
begin
	x1 = 8'b00001010;
	x2 = 8'b00001010;
	x3 = 8'b00001010;
	#10;
	x1 = 8'b00001010;
	x2 = 8'b00001010;
	x3 = 8'b00001011;
	#10;
	x1 = 8'b00001010;
	x2 = 8'b00001011;
	x3 = 8'b00001010;
	#10;
	x1 = 8'b00001010;
	x2 = 8'b00001011;
	x3 = 8'b00001011;
	#10;
	x1 = 8'b00001010;
	x2 = 8'b00001011;
	x3 = 8'b00001011;
	#10;
	x1 = 8'b00001010;
	x2 = 8'b00001011;
	x3 = 8'b00001011;
	#10;
	x1 = 8'b00001010;
	x2 = 8'b00001011;
	x3 = 8'b00001011;
	#10;
	x1 = 8'b00001010;
	x2 = 8'b00001011;
	x3 = 8'b00001011;
	#10;
	x1 = 8'b00001010;
	x2 = 8'b00001011;
	x3 = 8'b00001011;
	#10;
	x1 = 8'b00001010;
	x2 = 8'b00001011;
	x3 = 8'b"
668.458000,725.21,0.0014959803009313975,81.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3);

assign y = x1 * x2 + x3 * x2;

endmodule"
668.458000,725.21,0.0014959803009313975,82.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3);

reg [7:0] y;

always @(x1, x2, x3)
begin
	y = x1 * x2 + x3 * x2;
end

endmodule"
668.458000,725.21,0.0014959803009313975,83.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3);

reg [7:0] y;

always @(x1, x2, x3)
begin
	y = x1 * x2 + x3 * x2;
end

endmodule"
668.458000,725.21,0.0014959803009313975,84.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3);

assign y = x1 * x2 + x3 * x2;

endmodule"
668.458000,725.21,0.0014959803009313975,85.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3);

reg [7:0] y;

always @(x1, x2, x3)
begin
	y = x1 * x2 + x3 * x2;
end

endmodule"
N/A,N/A,-1,86.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3);

/*
	// The following code will implement the following circuit:
	// y = x1 * x2 + x3 * x2
	// where x1, x2, and x3 are inputs, and y is the output.
	// The implementation below uses Verilog 2001 standard.
	// Please modify the implementation for your specific Verilog version.
	// For example, the implementation below is for Verilog 2001.
	// Please modify the implementation for your specific Verilog version.
	// The implementation below is for Verilog 2005.
	// Please modify the implementation for your specific Verilog version.
	// The implementation below is for Verilog 2010.
	// Please modify the implementation for your specific Verilog version.
	// The implementation below is for Verilog 2013.
	// Please modify the implementation for your specific Verilog version.
	// The implementation below is for Verilog 2015.
	// Please modify the implementation for your specific Verilog version.
	// The implementation below is for Verilog 2018.
	// Please modify the implementation for your specific Verilog version.
	// The implementation below is for Verilog 2019.
	// Please modify the implementation for your specific Verilog version.
	// The implementation below is for Verilog 2020.
	// Please modify the implementation for your specific Verilog version.
	// The implementation below is for Verilog 2022.
	// Please modify the implementation for your specific Verilog version.
	// The implementation below is for Verilog 2023.
	// Please modify the implementation for your specific Verilog version.
	// The implementation below is for Verilog 2024.
	// Please modify the implementation for your specific Verilog version.
	// The implementation below is for Verilog 2026.
	// Please modify the implementation for your specific Verilog version.
	// The implementation below is for Verilog 2027.
	// Please modify the implementation for your specific Verilog version.
	// The implementation below is for Verilog 2028.
	// Please modify the implementation for your specific Verilog version.
	// The implementation below is for Verilog 2029.
	// Please modify"
668.458000,725.21,0.0014959803009313975,87.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3);
	// write your code below
	assign y = x1 * x2 + x3 * x2;
endmodule"
668.458000,725.21,0.0014959803009313975,88.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3);
	assign y = x1 * x2 + x3 * x2;
endmodule"
668.458000,725.21,0.0014959803009313975,89.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3);
	// write your code below
	assign y = x1 * x2 + x3 * x2;
endmodule"
N/A,N/A,-1,90.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3);
	// Declare the input and output ports.
	// Declare the wires that connect the ports to each other.
	// Declare the wires that connect the module to the outside world.
	// Declare the wires that connect the module to the other module.
	// Declare the wires that connect the other module to the outside world.
	// Declare the wires that connect the other module to the module.
	// Declare the wires that connect the module to the input ports.
	// Declare the wires that connect the input ports to the module.
	// Declare the wires that connect the module to the output ports.
	// Declare the wires that connect the output ports to the module.
	// Declare the wires that connect the module to the input ports.
	// Declare the wires that connect the input ports to the module.
	// Declare the wires that connect the module to the output ports.
	// Declare the wires that connect the output ports to the module.
	// Declare the wires that connect the module to the input ports.
	// Declare the wires that connect the input ports to the module.
	// Declare the wires that connect the module to the output ports.
	// Declare the wires that connect the output ports to the module.
	// Declare the wires that connect the module to the input ports.
	// Declare the wires that connect the input ports to the module.
	// Declare the wires that connect the module to the output ports.
	// Declare the wires that connect the output ports to the module.
	// Declare the wires that connect the module to the input ports.
	// Declare the wires that connect the input ports to the module.
	// Declare the wires that connect the module to the output ports.
	// Declare the wires that connect the output ports to the module.
	// Declare the wires that connect the module to the input ports.
	// Declare the wires that connect the input ports to the module.
	// Declare the wires that connect the module to the output ports.
	// Declare the wires that connect the output ports to the module.
	// Declare the wires that connect the module to the input ports.
	// Declare the wires that connect"
668.458000,725.21,0.0014959803009313975,91.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3);

assign y = x1 * x2 + x3 * x2;

endmodule"
668.458000,725.21,0.0014959803009313975,92.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3);

wire [8:0] sum;

assign sum = x1 * x2 + x3 * x2;

assign y = sum[7:0];

endmodule"
668.458000,725.21,0.0014959803009313975,93.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3);

reg [7:0] y;

always @(x1, x2, x3)
begin
	y = x1 * x2 + x3 * x2;
end

endmodule"
829.122000,854.46,-0.5,94.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3);

wire [7:0] a1, a2, a3;

assign a1 = x1;
assign a2 = x2;
assign a3 = x3;

wire [7:0] y1, y2, y3;

assign y1 = a1 * a2;
assign y2 = a1 * a3;
assign y3 = a2 * a3;

assign y = y1 + y2 + y3;

endmodule"
668.458000,725.21,0.0014959803009313975,95.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3);

assign y = x1 * x2 + x3 * x2;

endmodule"
N/A,N/A,-1,96.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3);

integer i;

always @(x1, x2, x3)
begin
	y = 0;
	for (i = 0; i < 8; i = i + 1)
	begin
		y = y + (x1[i] & x2[i]) * x3[i];
	end
end

endmodule
`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date:    14:46:56 03/10/2015 
// Design Name: 
// Module Name:    alu 
// Project Name: 
// Target Devices: 
// Tool versions: 
// Description: 
//
// Dependencies: 
//
// Revision: 
// Revision 0.01 - File Created
// Additional Comments: 
//
//////////////////////////////////////////////////////////////////////////////////
module alu(
    input [7:0] a,
    input [7:0] b,
    input [2:0] op,
    output reg [7:0] y
    );

always @(a, b, op)
begin
	case(op)
		3'b000: y = a + b;
		3'b001: y = a - b;
		3'b010: y = a & b;
		3'b011: y = a | b;
		3'b100: y = a ^ b;
		3'b101: y = a << b;
		3'b110: y = a >> b;
		3'b111: y = a >>> b;
	endcase
end

endmodule
`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date:    14:46:56 03/10/2015 
// Design Name: 
// Module Name:    alu 
// Project Name: 
// Target Devices: 
// Tool versions: 
// Description: 
//
// Dependencies: 
//
// Revision: 
// Revision 0.01 - File Created
// Additional Comments: 
//
//////////////////////////////////////////////////////////////////////////////////"
668.458000,725.21,0.0014959803009313975,97.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3);

reg [7:0] y;

always @(x1, x2, x3)
begin
	y = x1 * x2 + x3 * x2;
end

endmodule"
668.458000,725.21,0.0014959803009313975,98.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3);

assign y = x1 * x2 + x3 * x2;

endmodule"
668.458000,725.21,0.0014959803009313975,99.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3);

reg [7:0] y;

always @(x1, x2, x3)
begin
	y = x1 * x2 + x3 * x2;
end

endmodule"
N/A,N/A,-1,100.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3);

// Create wires to connect each input to the module.
wire [7:0] x1, x2, x3;

// Create wires to connect each output to the module.
wire [7:0] y;

// Create wires to connect each module to the next one.
wire [7:0] x1_out, x2_out, x3_out;

// Create wires to connect each module to the output wires.
wire [7:0] y_out;

// Create a module for the multiplication operation.
multiplier x1_mult(x1_out, x2_out, x3_out, y_out);

// Create a module for the addition operation.
adder x1_add(x1_out, x2_out, x3_out, y_out);

// Create a module for the output.
assign y = y_out;

endmodule

module multiplier(output [7:0] x1_out, x2_out, x3_out, output [7:0] y_out);

// Create wires to connect each input to the module.
wire [7:0] x1, x2, x3;

// Create wires to connect each output to the module.
wire [7:0] y;

// Create wires to connect each module to the next one.
wire [7:0] x1_out, x2_out, x3_out;

// Create wires to connect each module to the output wires.
wire [7:0] y_out;

// Create a module for the multiplication operation.
multiplier_8bit x1_mult(x1, x2, x3, y);

// Create a module for the addition operation.
adder x1_add(x1, x2, x3, y);

// Create a module for the output.
assign y_out = y;

endmodule

module adder(input [7:0] x1, x2, x3, output [7:0] y);

// Create wires to connect each input to the module.
wire [7:0] x1, x2, x3"
668.458000,725.21,0.0014959803009313975,101.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3);

wire[7:0] x1_w, x2_w, x3_w;

assign x1_w = x1;
assign x2_w = x2;
assign x3_w = x3;

wire[7:0] y_w;

assign y_w = x1_w * x2_w + x3_w * x2_w;

assign y = y_w;

endmodule"
668.458000,725.21,0.0014959803009313975,102.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3);

reg [7:0] y;

always @(x1, x2, x3)
begin
	y = x1 * x2 + x3 * x2;
end

endmodule"
N/A,N/A,-1,103.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3);

wire w1, w2, w3;

// Create wires for each input and output
wire [7:0] x1_w, x2_w, x3_w;

// Create wires for each input and output
wire [7:0] y_w;

// Create wires for each input and output
wire [7:0] x1_w_d, x2_w_d, x3_w_d;

// Create wires for each input and output
wire [7:0] y_w_d;

// Create wires for each input and output
wire [7:0] x1_w_dd, x2_w_dd, x3_w_dd;

// Create wires for each input and output
wire [7:0] y_w_dd;

// Create wires for each input and output
wire [7:0] x1_w_d_d, x2_w_d_d, x3_w_d_d;

// Create wires for each input and output
wire [7:0] y_w_d_d;

// Create wires for each input and output
wire [7:0] x1_w_dd_d, x2_w_dd_d, x3_w_dd_d;

// Create wires for each input and output
wire [7:0] y_w_dd_d;

// Create wires for each input and output
wire [7:0] x1_w_d_dd, x2_w_d_dd, x3_w_d_dd;

// Create wires for each input and output
wire [7:0] y_w_d_dd;

// Create wires for each input and output
wire [7:0] x1_w_dd_dd, x2_w_d_dd, x3_w_d_dd;

// Create wires for each input and output
wire [7:0] y_w_d_dd;

// Create wires for each input and output
wire [7:0] x1_w_d_dd_d, x2_w_d_dd_"
N/A,N/A,-1,104.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3);
reg [7:0] y;
reg [7:0] x1;
reg [7:0] x2;
reg [7:0] x3;

always @(x1 or x2 or x3)
begin
	y = x1 * x2 + x3 * x2;
end

endmodule
`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date:    14:46:56 03/10/2015 
// Design Name: 
// Module Name:    alu 
// Project Name: 
// Target Devices: 
// Tool versions: 
// Description: 
//
// Dependencies: 
//
// Revision: 
// Revision 0.01 - File Created
// Additional Comments: 
//
//////////////////////////////////////////////////////////////////////////////////
module alu(
    input [7:0] a,
    input [7:0] b,
    input [2:0] op,
    output reg [7:0] y
    );

always @(a or b or op)
begin
	case(op)
		3'b000: y = a + b;
		3'b001: y = a - b;
		3'b010: y = a & b;
		3'b011: y = a | b;
		3'b100: y = a ^ b;
		3'b101: y = a << b;
		3'b110: y = a >> b;
		3'b111: y = a >>> b;
	endcase
end

endmodule
`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date:    14:46:56 03/10/2015 
// Design Name: 
// Module Name:    alu 
// Project Name: 
// Target Devices: 
// Tool versions: 
// Description: 
//
// Dependencies: 
//
// Revision: 
// Revision 0.01 - File Created
// Additional Comments: 
//
//////////////////////////////////////////////////////////////////////////////////
module alu"
N/A,N/A,-1,105.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3);
	wire [7:0] x1_w, x2_w, x3_w;
	wire [7:0] y_w;
	
	assign x1_w = x1;
	assign x2_w = x2;
	assign x3_w = x3;
	
	fulladder_8bit fa0(y_w[0], x1_w[0], x2_w[0], x3_w[0], 1'b0);
	fulladder_8bit fa1(y_w[1], x1_w[1], x2_w[1], x3_w[1], y_w[0]);
	fulladder_8bit fa2(y_w[2], x1_w[2], x2_w[2], x3_w[2], y_w[1]);
	fulladder_8bit fa3(y_w[3], x1_w[3], x2_w[3], x3_w[3], y_w[2]);
	fulladder_8bit fa4(y_w[4], x1_w[4], x2_w[4], x3_w[4], y_w[3]);
	fulladder_8bit fa5(y_w[5], x1_w[5], x2_w[5], x3_w[5], y_w[4]);
	fulladder_8bit fa6(y_w[6], x1_w[6], x2_w[6], x3_w[6], y_w[5]);
	fulladder_8bit fa7(y_w[7], x1_w[7], x2_w[7], x3_w[7], y_w[6]);
	
	assign y = y_w;
	
endmodule

module fulladder_8bit(output [7:0] sum, input [7:0] x1, x2, x3, input cin);
	wire [7:0] sum_w;
	wire c1, c2, c3;
	
	full"
668.458000,725.21,0.0014959803009313975,106.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3);

   wire [7:0] x1_w, x2_w, x3_w;
   wire [7:0] y_w;

   assign x1_w = x1;
   assign x2_w = x2;
   assign x3_w = x3;

   assign y_w = x1_w * x2_w + x3_w * x2_w;

   assign y = y_w;

endmodule"
,,-1,107.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3);


endmodule"
N/A,N/A,-1,108.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3);//

	wire [7:0] x1_w, x2_w, x3_w;
	wire [7:0] y_w;

	assign x1_w = x1;
	assign x2_w = x2;
	assign x3_w = x3;

	full_adder FA1(y_w[0], x1_w[0], x2_w[0], x3_w[0], 1'b0);
	full_adder FA2(y_w[1], x1_w[1], x2_w[1], x3_w[1], y_w[0]);
	full_adder FA3(y_w[2], x1_w[2], x2_w[2], x3_w[2], y_w[1]);
	full_adder FA4(y_w[3], x1_w[3], x2_w[3], x3_w[3], y_w[2]);
	full_adder FA5(y_w[4], x1_w[4], x2_w[4], x3_w[4], y_w[3]);
	full_adder FA6(y_w[5], x1_w[5], x2_w[5], x3_w[5], y_w[4]);
	full_adder FA7(y_w[6], x1_w[6], x2_w[6], x3_w[6], y_w[5]);
	full_adder FA8(y_w[7], x1_w[7], x2_w[7], x3_w[7], y_w[6]);
	
	assign y = y_w;

endmodule

module full_adder(output sum, carry, input a, b, c_in);

	wire w1, w2, w3;

	xor(w1, a, b);
	xor(sum, w1, c_in);
	and(w2, w1, c_in);
	and(w3, a, b);
"
668.458000,725.21,0.0014959803009313975,109.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3);

assign y = (x1 * x2) + (x3 * x2);

endmodule"
668.458000,725.21,0.0014959803009313975,110.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3);

reg [7:0] x1_reg;
reg [7:0] x2_reg;
reg [7:0] x3_reg;

always @(x1 or x2 or x3)
begin
	x1_reg <= x1;
	x2_reg <= x2;
	x3_reg <= x3;
end

assign y = x1_reg * x2_reg + x3_reg * x2_reg;

endmodule"
668.458000,725.21,0.0014959803009313975,111.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3);

assign y = x1 * x2 + x3 * x2;

endmodule"
668.458000,725.21,0.0014959803009313975,112.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3);

reg [7:0] y;

always @(x1, x2, x3)
begin
	y = x1 * x2 + x3 * x2;
end

endmodule"
668.458000,725.21,0.0014959803009313975,113.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3);

assign y = x1 * x2 + x3 * x2;

endmodule"
668.458000,725.21,0.0014959803009313975,114.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3);

reg [7:0] y;

always @(x1, x2, x3)
begin
	y = x1 * x2 + x3 * x2;
end

endmodule"
668.458000,725.21,0.0014959803009313975,115.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3);

assign y = x1 * x2 + x3 * x2;

endmodule"
668.458000,725.21,0.0014959803009313975,116.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3);

reg [7:0] y;

always @(x1, x2, x3)
begin
	y = x1 * x2 + x3 * x2;
end

endmodule"
N/A,N/A,-1,117.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3);

reg [7:0] temp;

always @(x1 or x2 or x3)
begin
	temp = x1 * x2 + x3 * x2;
	y = temp;
end

endmodule
`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date:    14:46:00 03/10/2015 
// Design Name: 
// Module Name:    alu 
// Project Name: 
// Target Devices: 
// Tool versions: 
// Description: 
//
// Dependencies: 
//
// Revision: 
// Revision 0.01 - File Created
// Additional Comments: 
//
//////////////////////////////////////////////////////////////////////////////////
module alu(
    input [7:0] a,
    input [7:0] b,
    input [2:0] op,
    output reg [7:0] y
    );

always @(a or b or op)
begin
	case(op)
		3'b000: y = a + b;
		3'b001: y = a - b;
		3'b010: y = a & b;
		3'b011: y = a | b;
		3'b100: y = a ^ b;
		3'b101: y = a << b;
		3'b110: y = a >> b;
		3'b111: y = a >>> b;
	endcase
end

endmodule
`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date:    14:46:00 03/10/2015 
// Design Name: 
// Module Name:    alu 
// Project Name: 
// Target Devices: 
// Tool versions: 
// Description: 
//
// Dependencies: 
//
// Revision: 
// Revision 0.01 - File Created
// Additional Comments: 
//
//////////////////////////////////////////////////////////////////////////////////
module alu(
    input [7:0] a,
    input [7:0] b,
    "
668.458000,725.21,0.0014959803009313975,118.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3);

assign y = x1 * x2 + x3 * x2;

endmodule"
668.458000,725.21,0.0014959803009313975,119.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3);

assign y = (x1 * x2) + (x3 * x2);

endmodule"
668.458000,725.21,0.0014959803009313975,120.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3);

assign y = x1 * x2 + x3 * x2;

endmodule"
N/A,N/A,-1,121.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3);

always @(x1, x2, x3)
begin
	y = x1 * x2 + x3 * x2;
end

endmodule

module testbench;

reg [7:0] x1, x2, x3;
wire [7:0] y;

arithmetic uut(y, x1, x2, x3);

initial
begin
	x1 = 8'b00001010;
	x2 = 8'b00001010;
	x3 = 8'b00001010;
	#10;
	x1 = 8'b00001010;
	x2 = 8'b00001010;
	x3 = 8'b00001011;
	#10;
	x1 = 8'b00001010;
	x2 = 8'b00001011;
	x3 = 8'b00001010;
	#10;
	x1 = 8'b00001010;
	x2 = 8'b00001011;
	x3 = 8'b00001011;
	#10;
	x1 = 8'b00001010;
	x2 = 8'b00001011;
	x3 = 8'b00001011;
	#10;
	x1 = 8'b00001010;
	x2 = 8'b00001011;
	x3 = 8'b00001011;
	#10;
	x1 = 8'b00001010;
	x2 = 8'b00001011;
	x3 = 8'b00001011;
	#10;
	x1 = 8'b00001010;
	x2 = 8'b00001011;
	x3 = 8'b00001011;
	#10;
	x1 = 8'b00001010;
	x2 = 8'b00001011;
	x3 = 8'b00001011;
	#10;
	x1 = 8'b00001010;
	x2 = 8'b00001011;
	x3 = 8'b00001011;
	"
668.458000,725.21,0.0014959803009313975,122.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3);

assign y = x1 * x2 + x3 * x2;

endmodule"
,,0.5,123.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3);

wire y;
wire [7:0] x1, x2, x3;

assign y = x1 * x2 + x3 * x2;

endmodule"
,,0.5,124.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3);

wire y;
wire [7:0] x1, x2, x3;

assign y = x1 * x2 + x3 * x2;

endmodule"
N/A,N/A,-1,125.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3);

wire y1, y2, y3;

// Create wires for each input and output
wire [7:0] x1, x2, x3;

// Create wires for each input and output
wire [7:0] y1, y2, y3;

// Create wires for each input and output
wire [7:0] y1_, y2_, y3_;

// Create wires for each input and output
wire [7:0] y1_, y2_, y3_;

// Create wires for each input and output
wire [7:0] y1_, y2_, y3_;

// Create wires for each input and output
wire [7:0] y1_, y2_, y3_;

// Create wires for each input and output
wire [7:0] y1_, y2_, y3_;

// Create wires for each input and output
wire [7:0] y1_, y2_, y3_;

// Create wires for each input and output
wire [7:0] y1_, y2_, y3_;

// Create wires for each input and output
wire [7:0] y1_, y2_, y3_;

// Create wires for each input and output
wire [7:0] y1_, y2_, y3_;

// Create wires for each input and output
wire [7:0] y1_, y2_, y3_;

// Create wires for each input and output
wire [7:0] y1_, y2_, y3_;

// Create wires for each input and output
wire [7:0] y1_, y2_, y3_;

// Create wires for each input and output
wire [7:0] y1_, y2_, y3_;

// Create wires for each input and output
wire [7:0] y1_, y2_, y3_;

// Create wires for each input and output
wire [7:0] y1_, y2_, y3_;
"
668.458000,725.21,0.0014959803009313975,126.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3);

assign y = x1 * x2 + x3 * x2;

endmodule"
668.458000,725.21,0.0014959803009313975,127.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3);

wire [7:0] sum;
wire [7:0] x1_times_x2;
wire [7:0] x3_times_x2;

assign x1_times_x2 = x1 * x2;
assign x3_times_x2 = x3 * x2;

assign sum = x1_times_x2 + x3_times_x2;

assign y = sum;

endmodule"
N/A,N/A,-1,128.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3);

wire [7:0] out1, out2, out3;

// instantiate modules
multiplier multiplier1(out1, x1, x2);
multiplier multiplier2(out2, x1, x3);
multiplier multiplier3(out3, x3, x2);

// add the results
add adder1(y, out1, out2);
add adder2(y, out3, out1);

endmodule

module multiplier(output [7:0] out, input [7:0] x, y);

wire [7:0] out1, out2;

// instantiate modules
multiplier1 multiplier1(out1, x, y);
multiplier2 multiplier2(out2, x, y);

// add the results
add adder1(out, out1, out2);

endmodule

module add(output [7:0] out, input [7:0] x, y);

wire [7:0] out1, out2;

// instantiate modules
multiplier1 multiplier1(out1, x, y);
multiplier2 multiplier2(out2, x, y);

// add the results
add1 adder1(out, out1, out2);

endmodule"
668.458000,725.21,0.0014959803009313975,129.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3);

assign y = x1 * x2 + x3 * x2;

endmodule"
N/A,N/A,-1,130.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3);

localparam [7:0] x1_times_x2 = x1 * x2;
localparam [7:0] x1_times_x3 = x1 * x3;
localparam [7:0] x2_times_x3 = x2 * x3;

assign y = x1_times_x2 + x1_times_x3 + x2_times_x3;

endmodule

module testbench;

reg [7:0] x1, x2, x3;
wire [7:0] y;

arithmetic a1(y, x1, x2, x3);

initial
begin
	$monitor(""x1 = %b, x2 = %b, x3 = %b, y = %b"", x1, x2, x3, y);
	x1 = 8'b00000000;
	x2 = 8'b00000000;
	x3 = 8'b00000000;
	#10;
	x1 = 8'b00000001;
	x2 = 8'b00000000;
	x3 = 8'b00000000;
	#10;
	x1 = 8'b00000010;
	x2 = 8'b00000000;
	x3 = 8'b00000000;
	#10;
	x1 = 8'b00000100;
	x2 = 8'b00000000;
	x3 = 8'b00000000;
	#10;
	x1 = 8'b00001000;
	x2 = 8'b00000000;
	x3 = 8'b00000000;
	#10;
	x1 = 8'b00010000;
	x2 = 8'b00000000;
	x3 = 8'b00000000;
	#10;
	x1 = 8'b00100000;
	x2 = 8'b00000000;
	x3 = 8'b00000000;
	#10;
	x1 = 8'b01000000;
	x2 = 8'b00000000;
	x3 = 8'b00000000;
	#10;
	x1 = 8'b10000000;
	x2 = 8"
668.458000,725.21,0.0014959803009313975,131.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3);

assign y = (x1 * x2) + (x3 * x2);

endmodule"
668.458000,725.21,0.0014959803009313975,132.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3);

assign y = x1 * x2 + x3 * x2;

endmodule"
668.458000,725.21,0.0014959803009313975,133.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3);

assign y = x1 * x2 + x3 * x2;

endmodule"
668.458000,725.21,0.0014959803009313975,134.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3);

assign y = x1 * x2 + x3 * x2;

endmodule"
668.458000,725.21,0.0014959803009313975,135.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3);

assign y = x1 * x2 + x3 * x2;

endmodule"
668.458000,725.21,0.0014959803009313975,136.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3);

assign y = x1 * x2 + x3 * x2;

endmodule"
668.458000,725.21,0.0014959803009313975,137.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3);

assign y = (x1 * x2) + (x3 * x2);

endmodule"
668.458000,725.21,0.0014959803009313975,138.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3);

assign y = x1 * x2 + x3 * x2;

endmodule"
668.458000,725.21,0.0014959803009313975,139.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3);

assign y = x1 * x2 + x3 * x2;

endmodule"
668.458000,725.21,0.0014959803009313975,140.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3);

assign y = x1*x2 + x3*x2;

endmodule"
668.458000,725.21,0.0014959803009313975,141.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3);

assign y = x1 * x2 + x3 * x2;

endmodule"
668.458000,725.21,0.0014959803009313975,142.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3);

assign y = (x1 * x2) + (x3 * x2);

endmodule"
668.458000,725.21,0.0014959803009313975,143.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3);

assign y = x1 * x2 + x3 * x2;

endmodule"
N/A,N/A,-1,144.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3);

// Write your code below

wire [7:0] x1_w, x2_w, x3_w;

assign x1_w = x1;
assign x2_w = x2;
assign x3_w = x3;

wire [7:0] y_w;

// Create a 4-bit multiplier
multiplier m1(.x1(x1_w),.x2(x2_w),.y(y_w));

// Create a 8-bit adder
adder a1(.x1(x1_w),.x2(x2_w),.x3(x3_w),.y(y_w));

// Create a 8-bit output
assign y = y_w;

endmodule

module multiplier(output [7:0] y, input [7:0] x1, x2);

// Write your code below

wire [7:0] x1_w, x2_w;

assign x1_w = x1;
assign x2_w = x2;

wire [7:0] y_w;

// Create a 4-bit multiplier
multiplier_4bit m1(.x1(x1_w),.x2(x2_w),.y(y_w));

// Create a 8-bit adder
adder a1(.x1(x1_w),.x2(x2_w),.x3(8'b00000000),.y(y_w));

// Create a 8-bit output
assign y = y_w;

endmodule

module multiplier_4bit(output [7:0] y, input [7:0] x1, x2);

// Write your code below

wire [7:0] x1_w, x2_w;

assign x1_w = x1;
assign x2_w = x2;

wire [7:0] y_w;

// Create a 4-bit multiplier
multiplier_4bit_2 m1(.x1(x1"
668.458000,725.21,0.0014959803009313975,145.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3);

assign y = x1 * x2 + x3 * x2;

endmodule"
668.458000,725.21,0.0014959803009313975,146.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3);

assign y = x1 * x2 + x3 * x2;

endmodule"
229.558000,465.37,-0.5,147.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3);

wire x1_sign;
wire x2_sign;
wire x3_sign;
wire x1_zero;
wire x2_zero;
wire x3_zero;
wire x1_inf;
wire x2_inf;
wire x3_inf;
wire x1_zero_inf;
wire x2_zero_inf;
wire x3_zero_inf;
wire x1_nan;
wire x2_nan;
wire x3_nan;

assign x1_sign = x1[7];
assign x2_sign = x2[7];
assign x3_sign = x3[7];

assign x1_zero = ~|x1;
assign x2_zero = ~|x2;
assign x3_zero = ~|x3;

assign x1_inf = x1[7] & x1[6];
assign x2_inf = x2[7] & x2[6];
assign x3_inf = x3[7] & x3[6];

assign x1_zero_inf = x1_zero & x1_inf;
assign x2_zero_inf = x2_zero & x2_inf;
assign x3_zero_inf = x3_zero & x3_inf;

assign x1_nan = x1[7] & x1[6] & ~x1[5];
assign x2_nan = x2[7] & x2[6] & ~x2[5];
assign x3_nan = x3[7] & x3[6] & ~x3[5];

assign y = x1_sign? ~x1 + ~x2 + ~x3 + 1 : x1_sign? x1 + x2 + x3 : x1_sign? ~x1 + x2 + x3 + 1 : x1_sign? ~x1 + ~x2 + x3 + 1 : ~x1 + x2 + ~x3 + 1;

endmodule"
668.458000,725.21,0.0014959803009313975,148.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3);

assign y = x1 * x2 + x3 * x2;

endmodule"
38.304000,84.58,-0.5,149.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3);

assign y = (x1 & x2) | (x1 & x3) | (x2 & x3);

endmodule"
N/A,N/A,-1,150.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3);
    
    wire [7:0] x1_w, x2_w, x3_w;
    
    assign x1_w = x1;
    assign x2_w = x2;
    assign x3_w = x3;
    
    wire [7:0] y_w;
    
    multiply x1_w_mult(.x(x1_w),.y(x2_w),.out(y_w));
    add x1_w_add(.x(x1_w),.y(x3_w),.out(y_w));
    
    assign y = y_w;
    
endmodule
`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date:    16:46:00 03/10/2015 
// Design Name: 
// Module Name:    multiply 
// Project Name: 
// Target Devices: 
// Tool versions: 
// Description: 
//
// Dependencies: 
//
// Revision: 
// Revision 0.01 - File Created
// Additional Comments: 
//
//////////////////////////////////////////////////////////////////////////////////
module multiply(input [7:0] x, y, output [7:0] out);
    
    wire [7:0] x_w, y_w;
    
    assign x_w = x;
    assign y_w = y;
    
    wire [7:0] out_w;
    
    multiply_16 x_w_mult(.x(x_w),.y(y_w),.out(out_w));
    
    assign out = out_w;
    
endmodule
`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date:    16:46:00 03/10/2015 
// Design Name: 
// Module Name:    add 
// Project Name: 
// Target Devices: 
// Tool versions: 
// Description: 
//
// Dependencies"
668.458000,725.21,0.0014959803009313975,151.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3);

assign y = x1 * x2 + x3 * x2;

endmodule"
668.458000,725.21,0.0014959803009313975,152.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3);

reg [7:0] y;

always @(x1, x2, x3)
begin
	y = x1 * x2 + x3 * x2;
end

endmodule"
N/A,N/A,-1,153.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3);

wire signed [7:0] x1_s, x2_s, x3_s;
wire signed [7:0] x1_ss, x2_ss, x3_ss;
wire signed [7:0] x1_ss_s, x2_ss_s, x3_ss_s;

assign x1_s = x1;
assign x2_s = x2;
assign x3_s = x3;

assign x1_ss = x1_s;
assign x2_ss = x2_s;
assign x3_ss = x3_s;

assign x1_ss_s = x1_ss;
assign x2_ss_s = x2_ss;
assign x3_ss_s = x3_ss;

wire signed [7:0] x1_s_m, x2_s_m, x3_s_m;
wire signed [7:0] x1_s_m_ss, x2_s_m_ss, x3_s_m_ss;
wire signed [7:0] x1_s_m_ss_s, x2_s_m_ss_s, x3_s_m_ss_s;

assign x1_s_m = x1_s;
assign x2_s_m = x2_s;
assign x3_s_m = x3_s;

assign x1_s_m_ss = x1_s_m;
assign x2_s_m_ss = x2_s_m;
assign x3_s_m_ss = x3_s_m;

assign x1_s_m_ss_s = x1_s_m_ss;
assign x2_s_m_ss_s = x2_s_m_ss;
assign x3_s_m_ss_s = x3_s_m_ss;

wire signed [7:0] x1_s_m_ss_m, x2_s"
N/A,N/A,-1,154.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3);

    wire [7:0] x1_w, x2_w, x3_w;
    wire [7:0] y_w;

    assign x1_w = x1;
    assign x2_w = x2;
    assign x3_w = x3;

    wire [7:0] x1_w_mux;
    wire [7:0] x2_w_mux;
    wire [7:0] x3_w_mux;

    wire [7:0] x1_w_mux_out;
    wire [7:0] x2_w_mux_out;
    wire [7:0] x3_w_mux_out;

    wire [7:0] y_w_mux;

    wire [7:0] y_w_mux_out;

    mux_8x1 mux_x1(x1_w, x1_w_mux);
    mux_8x1 mux_x2(x2_w, x2_w_mux);
    mux_8x1 mux_x3(x3_w, x3_w_mux);

    mux_8x1 mux_y(y_w, y_w_mux);

    wire [7:0] y_w_mux_out;

    mux_8x1 mux_y_w(y_w_mux_out, y_w_mux);

    wire [7:0] y_w_mux_out_mux;

    mux_8x1 mux_y_w_mux(y_w_mux_out_mux, y_w_mux);

    wire [7:0] y_w_mux_out_mux_out;

    mux_8x1 mux_y_w_mux_out(y_w_mux_out_mux_out, y_w_mux_out_mux);

    wire [7:0] y_w_mux_out_"
668.458000,725.21,0.0014959803009313975,155.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3);
	assign y = x1 * x2 + x3 * x2;
endmodule"
668.458000,725.21,0.0014959803009313975,156.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3);
	assign y = x1 * x2 + x3 * x2;
endmodule"
668.458000,725.21,0.0014959803009313975,157.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3);
	assign y = x1 * x2 + x3 * x2;
endmodule"
668.458000,725.21,0.0014959803009313975,158.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3);
	parameter N = 8;
	
	wire [N-1:0] x1_d, x2_d, x3_d;
	wire [N-1:0] y_d;
	
	assign x1_d = x1;
	assign x2_d = x2;
	assign x3_d = x3;
	
	assign y_d = x1_d * x2_d + x3_d * x2_d;
	
	assign y = y_d[N-1:0];
	
endmodule"
668.458000,725.21,0.0014959803009313975,159.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3);
	assign y = x1 * x2 + x3 * x2;
endmodule"
668.458000,725.21,0.0014959803009313975,160.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3);
	assign y = x1 * x2 + x3 * x2;
endmodule"
668.458000,725.21,0.0014959803009313975,161.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3);
	assign y = x1 * x2 + x3 * x2;
endmodule"
N/A,N/A,-1,162.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3);
	
	wire [7:0] x1_w, x2_w, x3_w;
	
	assign x1_w = x1;
	assign x2_w = x2;
	assign x3_w = x3;
	
	wire [7:0] y_w;
	
	multiply x1_w(x1_w, x2_w, x3_w, y_w);
	
	assign y = y_w;
	
endmodule
`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date:    16:46:00 03/10/2015 
// Design Name: 
// Module Name:    multiplier 
// Project Name: 
// Target Devices: 
// Tool versions: 
// Description: 
//
// Dependencies: 
//
// Revision: 
// Revision 0.01 - File Created
// Additional Comments: 
//
//////////////////////////////////////////////////////////////////////////////////
module multiplier(
	output [7:0] y,
	input [7:0] x1, x2,
	input [7:0] x3
	);
	
	wire [7:0] x1_w, x2_w, x3_w;
	
	assign x1_w = x1;
	assign x2_w = x2;
	assign x3_w = x3;
	
	wire [7:0] y_w;
	
	multiply x1_w(x1_w, x2_w, x3_w, y_w);
	
	assign y = y_w;
	
endmodule
`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date:    16:46:00 03/10/2015 
// Design Name: 
// Module Name:    multiplier 
// Project Name: 
// Target Devices: 
// Tool versions: 
// Description: 
//
// Dependencies: "
668.458000,725.21,0.0014959803009313975,163.0,1,"module arithmetic(output [7:0] y, input [7:0] x1, x2, x3);
	assign y = x1 * x2 + x3 * x2;
endmodule"
